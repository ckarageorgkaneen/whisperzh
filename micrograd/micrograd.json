{"text": " Hello, my name is Andre and I've been training deep neural networks for a bit more than a decade and in this lecture I'd like to show you what neural network training looks like under the hood. So in particular we are going to start with a blank Jupyter notebook and by the end of this lecture we will define and train a neural net and you'll get to see everything that goes on under the hood and exactly sort of how that works on an intuitive level. Now specifically what I would like to do is I would like to take you through building of micrograd. Now micrograd is this library that I released on github about two years ago but at the time I only uploaded the source code and you'd have to go in by yourself and really figure out how it works. So in this lecture I will take you through it step by step and kind of comment on all the pieces of it. So what is micrograd and why is it interesting? Thank you. Micrograd is basically an autograd engine. Autograd is short for automatic gradient and really what it does is it implements back propagation. Now back propagation is this algorithm that you can use to create a neural network and you can use it to create a neural network and you can use it to create a neural network and you can use it to create a neural network. That allows you to efficiently evaluate the gradient of some kind of a loss function with respect to the weights of a neural network and what that allows us to do then is we can iteratively tune the weights of that neural network to minimize the loss function and therefore improve the accuracy of the network. So back propagation would be at the mathematical core of any modern deep neural network library like say PyTorch or JAX. So the functionality of micrograd is I think best illustrated by an example. So if we just scroll down here you'll see that micrograd basically allows you to build out mathematical expressions and here what we are doing is we have an expression that we're building out where you have two inputs a and b and you'll see that a and b are negative four and two but we are wrapping those values into this value object that we are going to build out as part of micrograd. So this value object will wrap the numbers themselves and then we are going to build out a mathematical expression here where a and b are the values that we are going to build out as part of micrograd. are transformed into C, D, and eventually E, F, and G. And I'm showing some of the functionality of micrograph and the operations that it supports. So you can add two value objects. You can multiply them. You can raise them to a constant power. You can offset by one, negate, squash at zero, square, divide by constant, divide by it, et cetera. And so we're building out an expression graph with these two inputs, A and B, and we're creating an output value of G. And micrograph will, in the background, build out this entire mathematical expression. So it will, for example, know that C is also a value. C was a result of an addition operation. And the child nodes of C are A and B because it will maintain pointers to A and B value objects. So we'll basically know exactly how all of this is laid out. And then not only can we do what we call the forward pass, where we actually, if we look at the value of G, of course, that's pretty straightforward, we will access that using the dot data attribute. And so the output of the forward pass, the value of G, is 24.7, it turns out. But the big deal is that we can also take this G value object and we can call dot backward. And this will basically initialize backpropagation at the node G. And what backpropagation is going to do is it's going to start at G and it's going to go backwards through that expression graph and it's going to recurve. So we're going to recursively apply the chain rule from Calculus. And what that allows us to do then is we're going to evaluate basically the derivative of G with respect to all the internal nodes like E, D, and C, but also with respect to the inputs A and B. And then we can actually query this derivative of G with respect to A, for example, that's A dot grad. In this case, it happens to be 138. And the derivative of G with respect to B, which also happens to be here, 645. And this derivative, we'll see soon, is very important information because it's telling us how A and B are affecting G through this mathematical expression. So in particular, A dot grad is 138. So if we slightly nudge A and make it slightly larger, 138 is telling us that G will grow and the slope of that growth is going to be 138. And the slope of growth of B is going to be 645. So that's going to tell us about how G will respond, if A and B get tweaked a tiny amount in a positive direction, okay? Now, you might be confused about what this expression is that we built out here. And this expression, by the way, is completely meaningless. I just made it up. I'm just flexing about the kinds of operations that are supported by micrograd. What we actually really care about are neural networks. But it turns out that neural networks are just mathematical expressions, just like this one, but actually a slightly bit less crazy even. Neural networks are just a mathematical expression, they take the input data as an input, and they take the weights of a neural network as an input, and it's a mathematical expression, and the output are your predictions of your neural net or the loss function. We'll see this in a bit. But basically, neural networks just happen to be a certain class of mathematical expressions. But backpropagation is actually significantly more general. It doesn't actually care about neural networks at all. It only cares about arbitrary mathematical expressions. And then we happen to use that machinery for training of neural networks. Now, one more. Another note I would like to make at this stage is that, as you see here, micrograd is a scalar-valued autograd engine. So it's working on the level of individual scalars, like negative four and two. And we're taking neural nets and we're breaking them down all the way to these atoms of individual scalars and all the little pluses and times, and it's just excessive. And so, obviously, you would never be doing any of this in production. It's really just done for pedagogical reasons because it allows us to not have to deal with these n-dimensional tensors that you would use in a modern deep neural network library. So this is really done so that you understand and refactor out the background application and chain rule and understanding of neural training. And then, if you actually want to train bigger networks, you have to be using these tensors, but none of the math changes. This is done purely for efficiency. We are basically taking all the scalar values, we're packaging them up into tensors, which are just arrays of these scalars. And then, because we have these large arrays, we're making operations on those large arrays that allows us to take advantage of the parallelism in a computer. And all those operations can be done in parallel, and then the whole thing runs faster. But really, none of the math changes, and they're done purely for efficiency. So I don't think that it's pedagogically useful to be dealing with tensors from scratch. And that's why I fundamentally wrote micrograd, because you can understand how things work at the fundamental level, and then you can speed it up later. Okay, so here's the fun part. My claim is that micrograd is what you need to train neural networks, and everything else is just efficiency. So you'd think that micrograd would be a very complex piece of code. And that turns out to not be the case. So if we just go to micrograd, and you'll see that there's only two files here in micrograd. This is the actual engine. It doesn't know anything about neural nets. And this is the entire neural nets library on top of micrograd. So engine and nn.py. So the actual backpropagation autograd engine that gives you the power of neural networks is literally 100 lines of code. 100 lines of code. Of, like, very simple Python, which we'll understand by the end of this lecture. And then nn.py, this neural network library built on top of the autograd engine, is like a joke. It's like, we have to define what is a neuron, and then we have to define what is a layer of neurons, and then we define what is a multilayer perceptron, which is just a sequence of layers of neurons. And so it's just a total joke. So basically, there's a lot of power that comes from only 150 lines of code. And then we have to define what is a multilayer perceptron, which is 150 lines of code. And that's all you need to understand to understand neural network training. And everything else is just efficiency. And of course, there's a lot to efficiency. But fundamentally, that's all that's happening. Okay, so now let's dive right in and implement micrograd step by step. The first thing I'd like to do is I'd like to make sure that you have a very good understanding, intuitively, of what a derivative is and exactly what information it gives you. So let's start with some basic imports that I copy-paste in every Jupyter Notebook, always. And let's define a derivative. So let's define a function, a scalar-valued function, f of x, as follows. So I just made this up randomly. I just wanted a scalar-valued function that takes a single scalar x and returns a single scalar y. And we can call this function, of course, so we can pass in, say, 3.0 and get 20 back. Now, we can also plot this function to get a sense of its shape. You can tell from the mathematical expression that this is probably a parabola. It's a quadratic. It's a scalar-value that we can feed in using, for example, a range from negative 5 to 5 in steps of 0.25. So x is just from negative 5 to 5 not including 5 in steps of 0.25. And we can actually call this function on this numpy array as well. So we get a set of y's if we call f on x. And these y's are basically also applying the function on every one of these elements independently. Let's talk about this using Mathplotlib. So plt.plot, x's and y's and we get a nice parabola. So previously here we fed in 3.0 somewhere here, and we received 20 back, which is here the y coordinate. So now I'd like to think through what is the derivative of this function at any single input point x? So what is the derivative at different points x of this function? Now if you remember back to your calculus class you've probably derived derivatives. So we take this mathematical expression for x plus 5, and you would write it out on a piece of paper and you would apply the product rule and all the other rules and derive the mathematical expression of the great derivative of the original function. And then you could plug in different x's and see what the derivative is. We're not going to actually do that because no one in neural networks actually writes out the expression for the neural net. It would be a massive expression. It would be thousands, tens of thousands of terms. No one actually derives the derivative of course. And so we're not going to take this kind of symbolic approach instead what I'd like to do is I'd like to look at the definition of derivative and just make sure that we really understand what the derivative is measuring what it's telling you about the function. And so if we just look up derivative we see that this is not a very good definition of derivative this is a definition of what it means to be differentiable but if you remember from your calculus it is the limit as h goes to 0 of f of x plus h minus f of x over h. And basically what it's saying is if you slightly bump up at some point x that you're interested in or a, and if you slightly bump up you slightly increase it by a small number h how does the function respond? With what sensitivity does it respond? What is the slope at that point? Does the function go up or does it go down? And by how much? And that's the slope of that function the slope of that response at that point. And so we can basically evaluate the derivative here numerically by taking a very small h of course the definition would ask us to take h to 0 we're just going to pick a very small h 0.001 and let's say we're interested in point 3.0 so we can look at f of x of course as 20 and now f of x plus h so if we slightly nudge x in a positive direction how is the function going to respond? And just looking at this do you expect f of x plus h to be slightly greater than 20? Or do you expect it to be slightly lower than 20? And so since 3 is here and this is 20 if we slightly go positively the function will respond positively so you'd expect this to be slightly greater than 20 and now by how much is telling you the strength of that slope the size of that slope so f of x plus h minus f of x this is how much the function responded in a positive direction and we have to normalize by the run so we have the rise over run to get the slope so this of course is just a numerical approximation of the slope because we have to make h very very small to converge to the exact amount now if I'm doing too many zeros at some point I'm going to get an incorrect answer because we're using floating point arithmetic and the representations of all these numbers in computer memory is finite and at some point we get into trouble so we can converge towards the right answer with this approach but basically at 3 the slope is 14 and you can see that by taking x squared minus 4x plus 5 and differentiating it in our head so 3x squared would be 6x minus 4 and then we plug in x equals 3 so that's 18 minus 4 is 14 so this is correct so that's at 3 now how about the slope at say negative 3 would you expect what would you expect for the slope now telling the exact value is really hard but what is the sign of that slope so at negative 3 if we slightly go in the positive direction at x the function would actually go down and so that tells you that the slope would be negative so we'll get a slight number below below 20 and so if we take the slope we expect something negative negative 22 and at some point here of course the slope would be 0 now for this specific function I looked it up previously and it's at point 2 over 3 so at roughly 2 over 3 this derivative would be 0 so basically at that precise point at that precise point if we nudge in a positive direction the function doesn't respond this stays the same almost and so that's why the slope is 0 ok now let's look at a bit more complex case so we're going to start complexifying a bit so now we have a function here with output variable b that is a function of 3 scalar inputs so a, b and c are some specific values 3 inputs into our expression graph and a single output d and so if we just print d we get 4 and now what I'd like to do is I'd like to again look at the derivatives of d with respect to a, b and c and think through again just the intuition of what this derivative is telling us so in order to evaluate this derivative we're going to get a bit hacky here we're going to again have a very small value of h and then we're going to fix the inputs at some values that we're interested in so these are the this is the point a, b, c at which we're going to be evaluating the derivative of d with respect to all a, b and c at that point so there's the inputs and now we have d1 is that expression and then we're going to for example look at the derivative of d with respect to a so we'll take a and we'll bump it by h and then we'll get d2 to be the exact same function and now we're going to print you know d1 is d1 d2 is d2 and print slope so the derivative or slope here will be of course d2 minus d1 divided by h so d2 minus d1 is how much the function increased when we bumped the specific input that we're interested in by a tiny amount and this is then normalized by h to get the slope so yeah so this so I just run this we're going to print d1 which we know is 4 now d2 will be bumped a will be bumped by h so let's just think through a little bit what d2 will be printed out here in particular d1 will be 4 will d2 be a number slightly greater than 4 or slightly lower than 4 and that's going to tell us the sign of the derivative so we're bumping a by h b is minus 3 c is 10 so you can just intuitively think through this derivative and what it's doing a will be slightly more positive and but b is a negative number so if a is slightly more positive because b is negative 3 we're actually going to be adding less to d so you'd actually expect that the value of the function will go down so let's just see this yeah and so we went from 4 to 3.996 and that tells you that the slope will be negative and then will be a negative number because we went down and then the exact number of slope will be the exact amount of slope is negative 3 and you can also convince yourself that negative 3 is the right answer mathematically and analytically because if you have a times b plus c and you are you know you have calculus then differentiating a times b plus c with respect to a gives you just b and indeed the value of b is negative 3 which is the derivative that we have so you can tell that that's correct so now if we do this with b so if we bump b by a little bit in a positive direction we'd get different slopes so what is the influence of b on the output d so if we bump b by a tiny amount in a positive direction then because a is positive we'll be adding more to d right so and now what is the sensitivity what is the slope of that addition and it might not surprise you that this should be 2 and why is it 2 because d of d by db differentiating with respect to b would be would give us a and the value of a is 2 so that's also working well and then if c gets bumped a tiny amount in h by h then of course a times b is unaffected and now c becomes slightly bit higher what does that do to the function it makes it slightly bit higher because we're simply adding c and it makes it slightly bit higher by the exact same amount that we added to c and so that tells you that the slope is 1 that will be the the rate at which d will increase as we scale c okay so we now have some intuitive sense of what this derivative is telling you about the function and we'd like to move to neural networks now as i mentioned neural networks will be pretty massive expressions mathematical expressions so we need some data structures that maintain these expressions and that's what we're going to start to build out now so we're going to build out this value object that i showed you in the readme page of micrograd so let me copy paste a skeleton of the first very simple value object so class value takes a single scalar value that it wraps and keeps track of and that's it so we can for example do value of 2.0 and then we can get we can look at its content and python will internally use the wrapper function to return this string like that so this is a value object with data equals two that we're creating here now what we'd like to do is like we'd like to be able to have not just like two values but we'd like to do a plus b right we'd like to add them so currently you would get an error because python doesn't know how to add two value objects so we have to tell it so here's addition so you have to basically use these special double underscore methods in python to define these operators for these objects so if we call the if we use this plus operator python will internally call a dot add of b that's what will happen internally and so b will be the other and self will be a and so we see that what we're going to return is a new value object and it's just it's going to be wrapping the plus of their data but remember now because data is the actual like numbered python number so this operator here is just the typical floating point plus addition now it's not an addition of value objects and we'll return a new value so now a plus b should work and it should print value of negative one because that's two plus minus three there we go okay let's now implement multiply just so we can recreate this expression here so multiply i think it won't surprise you will be fairly similar so instead of add we're going to be using mul and then here of course we want to do times and so now we can create a c value object which will be 10.0 and now we should be able to do a times b well let's just do a times b first um that's value of negative six now and by the way i skipped over this a little bit suppose that i didn't have the wrapper function here then it's just that you'll get some kind of an ugly expression so what wrapper is doing is it's providing us a way to print out like a nicer looking expression in python so we don't just have something cryptic we actually are you know it's value of negative six so this gives us a times and then this we should now be able to add c to it because we've defined and told the python how to do mul and add and so this will call this will basically be equivalent to a dot mul of b and then this new value object will be dot add of c and so let's see if that worked yep so that worked well that gave us four which is what we expect from before and i believe we can just call them manually as well there we go so yeah okay so now what we are missing is the connected tissue of this expression as i mentioned we want to keep these expression graphs so we need to know and keep pointers about what values produce what other values produce so here for example we are going to introduce a new variable which we'll call children and by default it will be an empty tuple and then we're actually going to keep a slightly different variable in the class which we'll call underscore prev which will be the set of children this is how i done i did it in the original micrograd looking at my code here i can't remember exactly the reason i believe it was efficiency but this underscore children will be a tuple for convenience but then when we actually maintain it in the class it will be just efficiency so now when we are creating a value like this with a constructor children will be empty and prev will be the empty set but when we are creating a value through addition or multiplication we're going to feed in the children of this value which in this case is self another so those are the children here so now we can do d dot prev and we'll see that the children of the we know now know are this a value of negative six and value of ten and this of course is the value resulting from a times b and the c value which is ten now the last piece of information we don't know so we know now the children of every single value but we don't know what operation created this value so we need one more element here let's call it underscore pop and by default this is the empty set for leaves and then we'll just maintain it here and now the operation will be just a simple string and in the case of addition it's plus in the case of multiplication it's times so now we not just have d dot prev we also have a d dot op and we know that d was produced by an addition of those two values and so now we have the full mathematical expression and we're building out this data structure and we know exactly how each value came to be by what expression and from what other values now because these expressions are about to get quite a bit larger we'd like a way to nicely visualize these expressions that we're building out so for that i'm going to copy paste a bunch of slightly scary code that's going to visualize this these expression graphs for us so here's the code and i'll explain it in a bit but first let me just show you what this code does basically what it does is it creates a new function draw dot that we can call on some root node and then it's going to visualize it so if we call draw dot on d which is this final value here that is a times b plus c it creates something like this so this is d and you see that this is a times b creating an interpret value plus c gives us this output node d so that's draw dot of d and i'm not going to go through this in complete detail you can take a look at graphvis and its api graphvis is an open source graph visualization software and what we're doing here is we're building out this graph in graphvis api and you can basically see that trace is this helper function that enumerates all the nodes and edges in the graph so that just builds a set of all the nodes and edges and then we iterate through all the nodes and we create special node objects for them in using dot node and then we also create edges using dot dot edge and the only thing that's like slightly tricky here is you'll notice that i basically add these fake nodes which are these operation nodes so for example this node here is just like a plus node and i create these special op nodes here and i connect them accordingly so these nodes of course are not actual nodes in the original graph they're not actually a value object the only value objects here are the things in squares those are actual value objects or representations thereof and these op nodes are just created in this draw dot routine so that it looks nice let's also add labels to these graphs just so we know what variables are where so let's create a special underscore label or let's just do label equals empty by default and save it in each node and then here we're going to do label is a label is b label is c and then let's create a special um e equals a times b and e dot label will be e it's kind of naughty and e will be e plus c and a d dot label will be b okay so nothing really changes i just added this new e function a new e variable and then here when we are printing this i'm going to print the label here so this will be a percent s bar and this will be n dot label and so now we have the label on the left here so it says a b creating e and then e plus c creates d just like we have it here and finally let's make this expression just one layer deeper so d will not be the final output node instead after d we are going to create a new value object called f we're going to start running out of variables soon f will be negative two point zero and its label will of course just be f and then l capital l will be the output of our graph and l will be d times f okay so l will be negative eight is the output uh so now we don't just draw a d we draw l okay and somehow the label of l is undefined oops the label has to be explicitly given to it there we go so l is the output so let's quickly recap what we've done so far we are able to build out mathematical expressions using only plus and times so far they are scalar valued along the way and we can do this forward pass and build out a mathematical expression so we have multiple inputs here a b c and f going into a mathematical expression that produces a single output l and this here is visualizing the forward pass so the output of the forward pass is negative eight that's the value now what we'd like to do next is we'd like to run back propagation and in back propagation we are going to start here at the end and we're going to reverse and calculate the gradient along all these intermediate values and really what we're computing for every single value here um we're going to compute the derivative of that node with respect to l so the derivative of l with respect to l is just one and then we're going to derive what is the derivative of l with respect to f with respect to d with respect to c with respect to e with respect to b and with respect to a and in a neural network setting you'd be very interested in the derivative of basically this loss function l with respect to the weights of a neural network and here of course we have just these variables a b c and f but some of these will eventually represent the weights of a neural net and so we'll need to know how those weights are impacting the loss function so we'll be interested basically in the derivative of the output with respect to some of its leaf nodes and those leaf nodes will be the weights of the neural net and the other leaf nodes of course will be the data itself but usually we will not want or use the derivative of the loss function with respect to data because the data is fixed but the weights will be iterated on using the gradient information so next we are going to create a variable inside the value class that maintains the derivative of l with respect to that value and we will call this variable grad so there is a dot data and there is a self.grad and initially it will be zero and remember that zero is basically means no effect so at initialization we are assuming that every value does not impact does not affect the output right because if the gradient is zero that means that changing this variable is not changing the loss function so by default we assume that the gradient is zero and then now that we have grad and it's zero point zero we are going to be able to visualize it here after data so here grad is point four f and this will be end of grad and now we are going to be showing both the data and the grad initialized at zero and we are just about getting ready to calculate the back propagation and of course this grad again as i mentioned is representing the derivative of the output in this case l with respect to this value so with respect to so this is the derivative of l with respect to f with respect to d and so on so let's now fill in those gradients and actually do back propagation manually so let's start filling in these gradients and start all the way at the end as i mentioned here first we are interested to fill in this gradient here so what is the derivative of l with respect to l in other words if i change l by a tiny amount h how much does l change it changes by h so it's proportional and therefore the derivative will be one we can of course measure these or estimate these numerical gradients numerically just like we've seen before so if i take this expression and i create a def lol function here and put this here now the reason i'm creating a gating function lol here is because i don't want to pollute or mess up the global scope here this is just kind of like a little staging area and as you know in python all of these will be local variables to this function so i'm not changing any of the global scope here so here l1 will be l and then copy pasting this expression we're going to add a small amount h in for example a right and this would be measuring the derivative of l with respect to a so here this will be l2 and then we want to print test derivatives so print l2 minus l1 which is how much l changed and then normalize it by h so this is the rise over run and we have to be careful because l is a valid node so we actually want its data so that these are floats dividing by h and this should print the derivative of l with respect to a because a is the one that we bumped a little bit by h so what is the derivative of l with respect to a it's six okay and obviously if we change l by h then that would be here effectively this looks really awkward but changing l by h you see the derivative here is one that's kind of like the base case of what we are doing here so basically we can come up here and we can manually set l.grad to one this is our manual backpropagation l.grad is one and let's redraw and we'll see that we filled in grad is one for l we're now going to continue the backpropagation so let's here look at the derivatives of l with respect to d and f let's do d first so what we are interested in if i create a markdown on here is we'd like to know basically we have that l is d times f and we'd like to know what is d l by d d what is that and if you know your calculus l is d times f so what is d l by d d it would be f and if you don't believe me we can also just derive it because the proof would be fairly straightforward we go to the definition of the derivative which is f of x plus h minus f of x divide h as a limit of h goes to zero of this kind of expression so when we have l is d times f then increasing d by h would give us the output of d plus h times f that's basically f of x plus h right minus d times f and then divide h and symbolically expanding out here we would have basically d times f plus h times f minus d times f divide h and then you see how the df minus df cancels so you're left with h times f divide h which is f so in the limit as h goes to zero of you know derivative definition we just get f in the case of d times f so symmetrically d l by d f will just be d so what we have is that f dot grad we see now is just the value of d which is four and we see that d dot grad is just the value of f and so the value of f is negative two so we'll set those manually let me erase this markdown node and then let's redraw what we have okay and let's just make sure that these were correct so we seem to think that d l by d d is negative two so let's double check let me erase this plus h from before and now we want the derivative with respect to f so let's just come here when i create f and let's do a plus h here and this should print a derivative of l with respect to f so we expect to see four yeah and this is four up to floating point funkiness and then d l by d d should be f which is negative two grad is negative two so if we again come here and we change d d dot data plus equals h right here so we expect so we've added a little h and then we see how l changed and we expect to print negative two there we go so we've numerically verified what we're doing here is kind of like an inline gradient check gradient check is when we are deriving this like back propagation and getting the derivative with respect to all the intermediate results and then numerical gradient is just you know estimating it using small step size now we're getting to the crux of back propagation so this will be the most important node to understand because if you understand the gradient for this node you understand all of back propagation and all training of neural nets basically so we need to derive d l by d c in other words the derivative of l with respect to c because we've computed all these other gradients already now we're coming here and we're continuing the back propagation manually so we want d l by d c and then we'll also derive d l by d e now here's the problem how do we derive d l by d c we actually know the derivative l with respect to d so we know how l is sensitive to d but how is l sensitive to c so if we wiggle c how does that impact l through d so we know d l by d c and we also here know how c impacts d and so just very intuitively if you know the impact that c is having on d and the impact that d is having on l then you should be able to somehow put that information together to figure out how c impacts l and indeed this is what we can actually do so in particular we know just concentrating on d first let's look at how what is the derivative basically of d with respect to c so in other words what is d d by d c so here we know that d is c times c plus e that's what we know and now we're interested in d d by d c if you just know your calculus again and you remember then differentiating c plus e with respect to c you know that that gives you 1.0 and we can also go back to the basics and derive this because again we can go to our f of x plus h minus f of x divide by h that's the definition of a derivative as h goes to zero and so here focusing on c and its effect on d we can basically do the f of x plus h will be c is incremented by h plus c that's the first evaluation of our function minus c plus e and then divide h and so what is this just expanding this out this will be c plus h plus e minus c minus e divide h and then you see here how c minus c cancels e minus e cancels we're left with h over h which is 1.0 and so by symmetry also d d by d e will be 1.0 as well so basically the derivative of a sum expression is very simple and this is the local derivative so i call this the local derivative because we have the final output value all the way at the end of this graph and we're now like a small node here and this is a little plus node and the little plus node doesn't know anything about the rest of the graph that it's embedded in all it knows is that it did a plus it took a c and an e added them and created d and this plus node also knows the local influence of c on d or rather the derivative of d with respect to c and it also knows the derivative of d with respect to e but that's not what we want that's just a local derivative what we actually want is dl by dc and l could l is here just one step away but in the general case this little plus node is could be embedded in like a massive graph so again we know how l impacts d and now we know how c and e impact d how do we put that information together to write dl by dc and the answer of course is the chain rule in calculus and so i pulled up chain rule here from wikipedia and i'm going to go through this very briefly so chain rule wikipedia sometimes can be very confusing and calculus can can be very confusing like this is the way i learned chain rule and it was very confusing like what is happening it's just complicated so i like this expression much better if a variable z depends on a variable y which itself depends on a variable x then z depends on x as well obviously through the intermediate variable y and in this case the chain rule is expressed as if you want dz by dx then you take the dz by dy and you multiply it by dy by dx so the chain rule fundamentally is telling you how we chain these derivatives together correctly so to differentiate through a function composition we have to apply a multiplication of those derivatives so that's really what chain rule is telling us and there's a nice little intuitive explanation here which i also think is kind of cute the chain rule states that knowing the instantaneous rate of change of z with respect to y and y relative to x allows one to calculate the instantaneous rate of change of z relative to x as a product of those two rates of change simply the product of those two so here's a good one if a car travels twice as fast as a bicycle and the bicycle is four times as fast as a walking man then the car travels two times four eight times as fast as a man and so this makes it very clear that the correct thing to do sort of is to multiply so car is twice as fast as bicycle and bicycle is four times as fast as man so the car will be eight times as fast as the man and so we can take these intermediate rates of change if you will and multiply them together and that justifies the chain rule intuitively so have a look at chain rule but here really what it means for us is there's a very simple recipe for deriving what we want which is dl by dc and what we have so far is we know want and we know what is the impact of d on l so we know dl by dd the derivative of l with respect to dd we know that that's negative two and now because of this local reasoning that we've done here we know dd by dc so how does c impact d and in particular this is a plus node so the local derivative is simply 1.0 it's very simple and so the chain rule tells us that dl by dc going through this intermediate variable will just be simply dl by dd times dd by dc that's chain rule so this is identical to what's happening here except z is rl y is rd and x is rc so we literally just have to multiply these and because these local derivatives like dd by dc are just one we basically just copy over dl by dd because this is just times one so because dl by dd is negative two what is dl by dc well it's the local gradient 1.0 times dl by dd which is negative two so literally what a plus node does you can look at it that way is it literally just routes the gradient because the plus nodes local derivatives are just one and so in the chain rule one times dl by dd is is is just dl by dd and so that derivative just gets routed to both c and to e in this case so basically we have that e.grad or let's start with c since that's the one we looked at is negative two times one negative two and in the same way by symmetry e.grad will be negative two that's the claim so we can set those we can redraw and you see how we just assigned negative two negative two so this back propagating signal which is carrying the information of like what is the derivative of l with respect to all the intermediate nodes we can imagine it almost like flowing backwards through the graph and a plus node will simply distribute the derivative to all the leaf nodes sorry to all the children nodes of it so this is the claim and now let's verify it so let me remove the plus h here from before and now instead what we want to do is we want to increment c so c.data will be incremented by h and when i run this we expect to see negative two negative two and then of course for e so e.data plus equals h and we expect to see negative two simple so those are the derivatives of these internal nodes and now we're going to recurse our way backwards again and we're again going to apply the chain rule so here we go our second application of chain rule and we will apply it all the way through the graph we just happen to only have one more node remaining we have that derivative of l so we know that the derivative of l as we have just calculated is negative two so we know that so we know the derivative of l with respect to e and now we want dL by dA right and the chain rule is telling us that that's just dL by dE negative two so that's basically dE by dA we have to look at that so I'm a little times node inside a massive graph and I only know that I did a times b and I produced an e so now what is dE by dA and dE by dB that's the only thing that I sort of know about that's my local gradient so because we have that e is a times b we're asking what is dE by dA and of course we just did that here we had a times so I'm not going to re-derive it but if you want to differentiate this with respect to a you'll just get b right the value of b which in this case is negative three point zero so basically we have that dL by dA well let me just do it right here we have that a dot grad and we are applying chain rule here is dL by dE which we see here is negative two times what is dE by dA it's the value of b which is negative three that's it and then we have b dot grad is again dL by dE which is negative two just the same way times what is dE by dB is the value of a which is 2.0 so these are our claimed derivatives let's re-draw and we see here that a dot grad turns out to be six because that is negative two times negative three and b dot grad is negative four times sorry is negative two times two which is negative four so those are our claims let's delete this and let's verify them we have a here plus equals h so the claim is that a dot grad is six let's verify six and we have b dot data plus equals h so nudging b by h and looking at what happens we claim it's negative four and indeed it's negative four plus minus again float oddness and that's it that was the manual back propagation all the way from here to all the leaf nodes and we've done it piece by piece and really all we've done is as you saw we iterated through all the nodes one by one and locally applied the chain rule we always know what is the derivative of l with respect to this little output and then we look at how this output was produced this output was produced through some operation and we have the pointers to the children nodes and so in this little operation we know what the local derivatives are and we just multiply them onto the derivative always so we just go through and recursively multiply on the local derivatives and that's what back propagation is it's just a recursive application of chain rule backwards through the computation graph let's see this power in action just very briefly what we're going to do is we're going to nudge our inputs to try to make l go up so in particular what we're doing is we're going to take that data we're going to change it and if we want l to go up that means we just have to go in the direction of the gradient so a should increase in the direction of gradient by like some small step amount this is the step size and we don't just want this for b but also for b also for c also for f those are leaf nodes which we usually have control over and if we nudge in the direction of the gradient we expect a positive influence on l so we expect l to go up positively so it should become less negative it should go up to say negative 6 or something like that it's hard to tell exactly and we have to rerun the forward pass so let me just do that here this would be the forward pass f would be unchanged this is effectively the forward pass but now if we print l.data we expect because we nudged all the values all the inputs in the direction of the gradient we expected less negative l we expect it to go up so maybe it's negative 6 or so let's see what happens ok negative 7 and this is basically one step of an optimization that we'll end up running and really this gradient just gives us some power because we know how to influence the final outcome and this will be extremely useful for training NOLETs as we'll soon see so now I would like to do one more example of manual backpropagation using a bit more complex and useful example we are going to backpropagate through a neuron so we want to eventually build out neural networks and in the simplest case these are multilayer perceptrons as they're called so this is a two layer neural net and it's got these hidden layers made up of neurons and these neurons are fully connected to each other now biologically neurons are very complicated devices but we have very simple mathematical models of them and so this is a very simple mathematical model of a neuron you have some inputs, x's and then you have these synapses that have weights on them so the w's are weights and then the synapse interacts with the input to this neuron multiplicatively so what flows to the cell body of this neuron is w times x but there's multiple inputs w times x is flowing to the cell body the cell body then has also like some bias so this is kind of like the innate sort of trigger happiness of this neuron so this bias can make it a bit more trigger happy or a bit less trigger happy regardless of the input but basically we're taking all the w times x of all the inputs adding the bias and then we take it through an activation function and this activation function is usually some kind of a squashing function like a sigmoid or 10H or something like that so as an example we're going to use the 10H in this example numpy has a np.10H so we can call it on a range and we can plot it this is the 10H function and you see that the inputs as they come in get squashed on the y coordinate here so right at 0 we're going to get exactly 0 and then as you go more positive in the input then you'll see that the activation function will only go up to 1 and then plateau out and so if you pass in very positive inputs we're going to cap it smoothly at 1 and on the negative side we're going to cap it smoothly to negative 1 so that's 10H and that's the squashing function or an activation function and what comes out of this neuron is just the activation function applied to the dot product of the weights and the inputs so let's write one out um I'm going to copy paste because I don't want to type too much but okay so here we have the inputs x1, x2 so this is a two dimensional neuron so two inputs are going to come in these are thought of as the weights of this neuron weights w1, w2 and these weights again are the synaptic strengths for each input and this is the bias of the neuron B and now what we want to do is according to this model we need to multiply x1 times w1 and x2 times w2 and then we need to add bias on top of it and it gets a little messy here but all we are trying to do is x1 w1 plus x2 w2 plus B and these are multiplied here except I'm doing it in small steps so that we actually have pointers to all these intermediate nodes so we have x1 w1 variable x2 w2 variable and I'm also labeling them so that we have the n is now the cell body raw activation without the activation function for now and this should be enough to basically plot it so draw dot of n gives us x1 times w1 x2 times w2 being added then the bias gets added on top of this and this n is this sum so we are now going to take it through an activation function And let's say we use the tanh So that we produce the output. So what we'd like to do here is we'd like to do the output and I'll call it O is N dot tanh Okay, but we haven't yet written the tanh now the reason that we need to implement another tanh function here is that tanh is a Hyperbolic function and we've only so far implemented a plus and a times and you can't make a tanh out of just pluses and times You also need exponentiation. So tanh is this kind of a formula here You can use either one of these and you see that there are exponentiation involved Which we have not implemented yet for our little value node here So we're not going to be able to produce tanh yet and we have to go back up and implement something like it now one option here is We could actually implement Exponentiation right and we could return the exp of the value instead of a tanh Of a value because if we had exp then we have everything else that we need so because we know how to add and we know how to We know how to add and we know how to multiply so we'd be able to create tanh if we knew how to exp but for the purposes of this example, I specifically wanted to Show you that we don't necessarily need to have the most atomic pieces in In this value object we can actually like create functions at arbitrary Points of abstraction they can be complicated functions But they can be also very very simple functions like a plus and it's totally up to us The only thing that matters is that we know how to differentiate through any one function So we take some inputs and we make an output The only thing that matters it can be arbitrarily complex function as long as you know How to create the local derivative if you know the local derivative of how the inputs impact the output then that's all you need So we're going to cluster up all of this expression And we're not going to break it down to its atomic pieces. We're just going to directly implement tanh. So let's do that depth tanh and then out will be a value of And we need this expression here, so Let me actually copy paste Let's grab n which is a sol.theta and then this I believe is the tanh math.exp of 2 You know n minus 1 over 2n plus 1 Maybe I can call this x Just so that it matches exactly okay, and now this will be t and Children of this node. There's just one child and I'm wrapping it in a tuple. So this is a tuple of one object just self and here the name of this operation will be 10h And we're going to return that Okay So now value should be Implementing tanh and now we can scroll all the way down here and we can actually do n dot tanh And that's going to return the tanh output of n And now we should be able to draw it out of o not of n. So let's see how that worked There we go n went through tanh to produce this output so now tanh is a sort of our little micro grad supported node here as an operation and As long as we know the derivative of tanh then we'll be able to back propagate through it now Let's see this tanh in action. Currently. It's not squashing too much because the input to it is pretty low So the bias was increased to say 8 Then we'll see that what's flowing in to the tanh now is 2 and Tanh is squashing it to 0.96 So we're already hitting the tail of this tanh and it will sort of smoothly go up to 1 and then plateau out over there Okay, so I'm going to do something slightly strange. I'm going to change this bias from 8 to this number 6.88 etc and I'm going to do this for specific reasons because we're about to start back propagation and I want to make sure that our numbers come out nice They're not like very Crazy numbers, they're nice numbers that we can sort of understand in our head. Let me also add those label O is short for output here So that's the R Okay, so 0.88 flows into tanh comes out 0.7. So so now we're going to do back propagation And we're going to fill in all the gradients so what is the derivative O with respect to all the inputs here and of course in a typical neural network setting what we really care about the most is the derivative of these neurons on the weights specifically the w2 and w1 because those are the weights that we're going to be changing part of the optimization and The other thing that we have to remember is here We have only a single neuron but in the neural net you typically have many neurons and they're connected So this is only like a one small neuron a piece of a much bigger puzzle and eventually there's a loss function That sort of measures the accuracy of the neural net and we're back propagating with respect to that accuracy and trying to increase it So let's start off back propagation Here in the end What is the derivative of O with respect to O the base case sort of we know always is that the gradient is just 1.0 so let me fill it in and then Let me split out the drawing function Here And then here cell Clear this output here, okay So now when we draw O we'll see that or that grad is 1 So now we're going to back propagate through the tanh so to back propagate through tanh We need to know the local derivative of tanh. So if we have that O is tanh of n Then what is do by dn? Now what you could do is you could come here and you could take this expression and you could do your calculus derivative taking and that would work but we can also just scroll down Wikipedia here into a section that hopefully tells us that derivative d by dx of tanh of x is Any of these I like this one 1 minus tanh square of x So this is 1 minus tanh of x squared. So basically what this is saying is that d o by dn is 1 minus tanh of n squared. And we already have 10h of n. It's just o. So it's 1 minus o squared. So o is the output here. So the output is this number. o.data is this number. And then what this is saying is that do by dn is 1 minus this squared. So 1 minus o.data squared is 0.5 conveniently. So the local derivative of this 10h operation here is 0.5. And so that would be do by dn. So we can fill in that n.grad is 0.5. We'll just fill it in. So this is exactly 0.5, 1 half. So now we're going to continue the backprop. This is 0.5. And this is a plus node. So what is backprop going to do here? And if you remember our previous example, a plus is just a distributor of gradient. So this gradient will simply flow to both of these equally. And that's because the local derivative of this operation is 1 for every one of its nodes. So 1 times 0.5 is 0.5. So therefore, we know that this node here, which we called this. It's grad. It's just 0.5. And we know that b.grad is also 0.5. So let's set those and let's draw. So those are 0.5. Continuing, we have another plus. 0.5, again, we'll just distribute. So 0.5 will flow to both of these. So we can set theirs. x2w2 as well. .grad is 0.5. And let's redraw. Pluses are my favorite operations to backpropagate through because it's very simple. So now what's flowing into these expressions is 0.5. And so really, again, keep in mind what the derivative is telling us at every point in time along here. This is saying that if we want the output of this neuron to increase, then the influence on these expressions is positive on the output. Both of them are positive. So we can put a distribution to the output. So now, backpropagating to x2 and w2 first. This is a times node. So we know that the local derivative is the other term. So if we want to calculate x2.grad, then can you think through what it's going to be? So x2.grad will be w2.data times this x2.grad. .grad. .grad. w2.grad right and w2.grad will be x2.data times x2.w2.grad right so that's the little local piece of chain rule let's set them and let's redraw so here we see that the gradient on our weight 2 is 0 because x2's data was 0 right but x2 will have the gradient 0.5 because data here was 1 and so what's interesting here right is because the input x2 was 0 then because of the way the times works of course this gradient will be 0 and think about intuitively why that is derivative always tells us the influence of this on the final output if i wiggle w2 how is the output changing it's not changing because we're multiplying by 0 so because it's not changing there is no derivative and 0 is the correct answer because we're squashing that 0 and let's do it here 0.5 should come here and flow through this times and so we'll have that x1.grad is can you think through a little bit what what this should be local derivative of times with respect to x1 is going to be w1 so w1's data times x1 w1.grad and w1.grad will be x1.data times x1 w2 w1.grad let's see what those came out to be so this is 0.5 so this would be negative 1.5 and this would be 1. and we've back propagated through this expression these are the actual final derivatives so if we want this neurons to be negative 1.5 we're going to have to do this we're going to have to do this bit of elaborating so actually we can do this by\u0430\u0446\u0438 to here so this is negative 1.5 so if we now want this neuron's output to increase we know that what's necessary is that w2 we have no gradient w2 doesn't actually matter to this neuron right now but this neuron this weight should go up so if this weight goes up then this neurones output would have gone up and proportionally because the gradient is 1. okay so doing the back propagation manually is obviously ridiculous so we are now going to put an end to this suffering and we're going to see how we can implement the back propagation's output Health classes method lambda. self attack self acquire lerud and a random entunkered router operation will be still coercion equal to 0.25\u00e9ro. can implement the backward pass a bit more automatically. We're not going to be doing all of it manually out here. It's now pretty obvious to us by example how these pluses and times are back-propagating ingredients. So let's go up to the value object and we're going to start codifying what we've seen in the examples below. So we're going to do this by storing a special self.backward and underscore backward. And this will be a function which is going to do that little piece of chain rule. At each little node that took inputs and produced output, we're going to store how we are going to chain the outputs gradient into the inputs gradients. So by default, this will be a function that doesn't do anything. And you can also see that here in the value in my example. Micrograd. So we have this backward function. By default, it doesn't do anything. This is a empty function. And that would be sort of the case, for example, for a leaf node. For a leaf node, there's nothing to do. But now when we're creating these out values, these out values are an addition of self and other. And so we'll want to set out backward to be the function that propagates the gradient. So let's define what should happen. And we're going to store it in a closure. Let's define what should happen when we call out's grad. For addition, our job is to take out's grad and propagate it into self's grad and other.grad. So basically, we want to solve self.grad to something. And we want to set out's grad to something. And we want to set out's grad to that grad to something okay and the way we saw below how chain rule works we want to take the local derivative times the sort of global derivative I should call it which is the derivative of the final output of the expression with respect to out's data with respect to out so the local derivative of self in an addition is 1.0 so it's just 1.0 times out's grad that's the chain rule and others.grad will be 1.0 times out.grad and what you basically what you're seeing here is that out's grad will simply be copied onto self's grad and others grad as we saw happens for an addition operation so we're going to later call this function to propagate the gradient having done an addition let's now do multiplication we're going to also define and we're going to set its backward to be backward and we want to chain out grad into self.grad and others.grad and this will be a little piece of chain rule for multiplication so we'll have so what should this be can you think through scale it up a little bit more I think we can test it but okay so we've got thatanche squared caught or else what should it be and this is going to be a little better what should this be it's going to be a little bit better so finally see here to the other side and this will be the off part second time creative so where the version to copy to that I was off the plane or up to the -, and then target my output time so let's go to case sickness so here's the look of a general promotions of set for entire settings we want a group this isn't going to come the other way we want to set the You can also add in a\u4f60\u5011 I think return method and even the previous employees and I'm gonna do a little bit of what we're going to say for the SQL gameplay to be just backward and here we need to back propagate we have out dot grad and we want to chain it into salt dot grad and salt dot grad will be the local derivative of this operation that we've done here which is 10h and so we saw that the local gradient is 1 minus the 10h of x squared which here is t that's the local derivative because that's t is the output of this 10h so 1 minus t squared is the local derivative and then gradient has to be multiplied because of the chain rule so out grad is chained through the local gradient into salt dot grad and that should be basically it so we're going to redefine our value node we're going to swing all the way down here and we're going to redefine our expression make sure that all the grads are zero okay but now we don't have to do this again we're just going to do this again and we're going to do this to do this manually anymore. We are going to basically be calling the dot backward in the right order. So first we want to call o's dot backward. So o was the outcome of 10h, right? So calling o's backward will be this function. This is what it will do. Now we have to be careful because there's a times out dot grad and out dot grad remember is initialized to 0. So here we see grad 0. So as a base case we need to set o's dot grad to 1.0 to initialize this with 1 and then once this is 1, we can call o dot backward and what that should do is it should propagate this grad through 10h. So the local derivative times the global derivative which is initialized at 1. So this should so I thought about redoing it but I figured I should just leave the error in here because it's pretty funny. Why is an anti-object not callable? It's because I screwed up. We're trying to save these functions. So this is correct. This here, we don't want to call the function because that returns none. These functions return none. We just want to store the function. So let me redefine the value object and then we're going to come back in, redefine the expression, draw a dot. Everything is great. o dot grad is 1, o dot grad is 1 and now this should work, of course. Okay. So o dot backward should have, this grad should now be 0.5 if we redraw and if everything went correctly, 0.5. Yay. Okay. So now we need to call ns dot grad, ns dot backward, sorry, ns backward. So that seems to have worked. So ns dot backward routed the gradient to both of these. So this is looking great. So now we could, of course, call b dot grad, b dot backward, sorry. What's going to happen? Well b doesn't have a backward. b is backward because b is a leaf node. b is backward is by initialization the empty function. So nothing would happen. But we can call it on it. But when we call this one, it's backward. M Normal entire value. Let's do this behavior here. Then we expect this 0.5 to give further routed. Right? So there we go, 0.5, 0.5. And then finally, we want to call it here on x2, w2. And on x1, w1. Let's do both of those. And there we go. ?? and one exactly as we did before but now we've done it through calling that backward sort of manually so we have one last piece to get rid of which is us calling underscore backward manually so let's think through what we are actually doing we've laid out a mathematical expression and now we're trying to go backwards through that expression so going backwards through the expression just means that we never want to call a dot backward for any node before we've done sort of everything after it so we have to do everything after it before we're ever going to call dot backward on any one node we have to get all of its full dependencies everything that it depends on has to propagate to it before we can continue back-propagation so this ordering of graphs can be achieved using something called topological sort so topological sort is basically a laying out of a graph such that all the edges go only from left to right basically. So here we have a graph it's a directed acyclic graph a DAG and this is two different topological orders of it I believe where basically you'll see that it's a laying out of the nodes such that all the edges go only one way from left to right. And implementing topological sort you can look in wikipedia and so on I'm not going to go through it in detail but basically this is what builds a topological graph. We maintain a set of visited nodes and then we are going through starting at some root node which for us is O that's where I want to start the topological sort and starting at O we go through all of its children and we need to lay them out from left to right and basically this starts at OH. Oh, if it's not visited, then it marks it as visited. And then it iterates through all of its children and calls build topological on them. And then after it's gone through all the children, it adds itself. So basically, this node that we're going to call it on, like say, oh, is only going to add itself to the topo list after all of the children have been processed. And that's how this function is guaranteeing that you're only going to be in the list once all of your children are in the list. And that's the invariant that is being maintained. So if we build topo on O and then inspect this list, we're going to see that it ordered our value objects. And the last one is the value of 0.707, which is the output. So this is O, and then this is N, and then all the other nodes get laid out before it. So that builds the topological graph. And really what we're doing now, is we're just calling dot underscore backward on all of the nodes in a topological order. So if we just reset the gradients, they're all 0, what did we do? We started by setting O.grad to be 1. That's the base case. Then we built a topological order. And then we went for node in reversed. Of topo. Now, in the reverse order, because this list goes from, you know, we need to go through it in reversed order. So starting at O, node dot backward. And this should be it. There we go. Those are the correct derivatives. Finally, we are going to hide this functionality. So I'm going to copy this. And we're going to hide this functionality. And we're going to hide it inside the value class, because we don't want to have all that code lying around. So instead of an underscore backward, we're now going to define an actual backward. So that's backward, without the underscore. And that's going to do all the stuff that we just derived. So let me just clean this up a little bit. So we're first going to build a topological graph, starting at self. So build topo of self. We'll populate the topological order into the topo list, which is a local variable. Then we set self.grads to be one. And then for each node in the reversed list, so starting at S and going to all the children, underscore backward. And that should be it. So save. Come down here. We define. Okay, all the grads are zero. And now what we can do is odot backward without the underscore. And there we go. And that's backpropagation. Place for one neuron. Now we shouldn't be too happy with ourselves, actually, because we have a bad bug. And we have not surfaced the bug because of some specific conditions that we have to think about right now. So here's the simplest case that shows the bug. Say I create a single node A, and then I create a B that is A plus A. And then I call backward. So what's going to happen is A is three, and then B is A plus A. So there's two arrows on top of each other here. Then we can see that B is, of course, the forward pass works. B is just A plus A, which is six. But the gradient here is not actually correct. That we calculated. We can calculate it automatically. And that's because, of course, just doing calculus in your head, the derivative of B with respect to A should be two. One plus one. It's not one. Intuitively, what's happening here, right? So B is the result of A plus A, and then we call backward on it. So let's go up and see what that does. B is the result of addition, so out as B. And then when we call backward, what happened is self.grad was set to one, and then other.grad was set to one. But because we're doing A plus A, self and other are actually the exact same object. So we are overriding the gradient. We are setting it to one, and then we are setting it again to one. And that's why it stays at one. So that's a good thing. There's another way to see this in a little bit more complicated expression. So here we have A and B. And then D will be the multiplication of the two, and E will be the addition of the two. And then we multiply E times D to get F. And then we call F dot backward. And these gradients, if you check, will be incorrect. So fundamentally what's happening here, again, is basically we're going to see an issue any time we use a variable more than once. Until now, in these expressions above, every variable is used exactly once. So we didn't see the issue. But here, if a variable is used more than once, what's going to happen during backward pass? We're back-propagating from F to E to D. So far, so good. But now E calls it backward, and it deposits its gradients to A and B. But then we come back to D and call backward, and it overwrites those gradients at A and B. So that's obviously a problem. And the solution here, if you look at the multivariate case of the chain rule and its generalization there, the solution there is basically that we have to accumulate these gradients. These gradients add. And so instead of setting those gradients, we can simply do plus equals. We need to accumulate those gradients. Plus equals, plus equals, plus equals. And this will be okay, remember, because we are initializing them at zero. So they start at zero, and then any contribution that flows backwards will simply add. So now if we redefine this one, because the plus equals, this now works. Because A dot grad started at zero, and we called B dot backward, we deposit one, and then we deposit one again. And then we call B dot backward. And now this is two, which is correct. And here, this will also work, and we'll get correct gradients. Because when we call E dot backward, we will deposit the gradients from this branch, and then when we get to D dot backward, it will deposit its own gradients. And then those gradients simply add on top of each other. And so we just accumulate those gradients, and that fixes the issue. Okay, now before we move on, let me actually do a bit of cleanup here and delete some of this intermediate work. So I'm not going to need any of this. Now that we've derived all of it. We are going to keep this, because I want to come back to it. Delete the 10H, delete our modigating example, delete the step, delete this, keep the code that draws, and then delete this example, and leave behind only the definition of value. And now let's come back to this non-linearity here that we implemented, the 10H. Now I told you that we could have broken down 10H into its explicit atoms in terms of other expressions if we had the exp function. So if you remember, 10H is defined like this, and we chose to develop 10H as a single function, and we can do that because we know it's derivative, and we can backpropagate through it. But we can also break down 10H into an expressiveness, a function of exp. And I would like to do that now, because I want to prove to you that you get all the same results and all the same gradients, but also because it forces us to implement a few more expressions. It forces us to do exponentiation, addition, subtraction, division, and things like that. And I think it's a good exercise to go through a few more of these. Okay, so let's scroll up to the definition of value. And here, one thing that we currently can't do is, we can do like a value of, say, 2.0. But we can't do, you know, here, for example, we want to add a constant 1. And we can't do something like this. And we can't do it because it says int object has no attribute data. That's because a plus 1 comes right here to add, and then other is the integer 1. And then here, Python is trying to access 1.data, and that's not a thing. And that's because basically, 1 is not a value object, and we only have addition for value objects. So as a matter of convenience, so that we can create expressions like this and make them make sense, we can simply do something like this. Basically, we let other alone if other is an instance of value. But if it's not an instance of value, we're going to assume that it's a number, like an integer or a float, and we're going to simply wrap it in value. And then other will just become value of other, and then other will have a data attribute, and this should work. So if I just say this, redefine value, then this should work. There we go. Okay, now let's do the exact same thing for multiply, because we can't do something like this, again, for the exact same reason. So we just have to go to mol, and if other is not a value, then let's wrap it in value. Let's redefine value, and now this works. Now, here's a kind of, unfortunately, and not obvious part, a times two works, we saw that, but two times a, is that going to work? You'd expect it to, right? But actually, it will not. And the reason it won't is because Python doesn't know, like when you do a times two, basically, so a times two, Python will go and it will basically do something like a dot mol of two. That's basically what it will call. But to it, two times a is the same as two dot mol of a. And it doesn't, two can't multiply value. And so it's really confused about that. So instead, what happens is in Python, the way this works is you are free to define something called the rmol. And rmol is kind of like a fallback. So if Python can't do two times a, it will check if by any chance, a knows how to multiply two, and that will be called into rmol. So because Python can't do two times a, it will check, is there an rmol in value? And because there is, it will now call that. And what we'll do here is we will swap the order of the operands. So basically, two times a will redirect to rmol, and rmol will basically call a times two. And that's how that will work. So redefining that with rmol, two times a becomes four. Okay, now looking at the other elements that we still need, we need to know how to exponentiate and how to divide. So let's first do the exponentiation part. We're going to introduce a single function exp here. And exp is going to mirror 10h in the sense that it's a single function that transforms a single scalar value and outputs a single scalar value. So we pop out the Python number. We use math.exp to exponentiate it, create a new value object, everything that we've seen before. The tricky part, of course, is how do you backpropagate through e to the x? And so here you can potentially pause the video and think about what should go here. Okay, so basically, we need to know what is the local derivative of e to the x. So d by dx of e to the x is famously just e to the x. And we've already just calculated e to the x, and it's inside out.data. So we can do out.data times and out.grad, that's the chain rule. So we're just chaining on to the current running grad. And this is what the expression looks like. It looks a little confusing, but this is what it is. And that's the exponentiation. So redefining, we should now be able to call a.exp. And hopefully the backward pass works as well. Okay, and the last thing we'd like to do, of course, is we'd like to be able to divide. Now, I actually will implement something slightly more powerful than division, because division is just a special case of something a bit more powerful. So in particular, just by rearranging, if we have some kind of a b equals value of 4.0 here, we'd like to basically be able to do a divide b, and we'd like this to be able to give us 0.5. Now, division actually can be reshuffled as follows. If we have a divide b, that's actually the same as a multiplying 1 over b. And that's the same as a multiplying b to the power of negative 1. And so what I'd like to do instead is I basically like to implement the operation of x to the k for some constant k. So it's an integer or a float. And we would like to be able to differentiate this. And then as a special case, negative 1 will be division. And so I'm doing that. Just because it's more general and you might as well do it that way. So basically what I'm saying is we can redefine division, which we will put here somewhere. You know, we can put it here somewhere. What I'm saying is that we can redefine division. So self divide other. This can actually be rewritten as self times other to the power of negative 1. And now, value raised to the power of negative 1, we have to now define that. So here's, so we need to implement the pow function. Where am I going to put the pow function? Maybe here somewhere. This is the skeleton for it. So this function will be called when we try to raise a value to some power and other will be that power. Now, I'd like to make sure that other is only an int or a float. Usually other is some kind of a different value object. But here other will be forced to be an int or a float. Otherwise, the math won't work. For what we're trying to achieve in this specific case. That would be a different derivative expression if we wanted other to be a value. So here we create the other value, which is just, you know, this data raised to the power of other. And other here could be, for example, negative 1. That's what we are hoping to achieve. And then this is the backward stub. And this is the fun part, which is what is the chain rule expression here for back propagating through the power function where the power is to the power of some kind of a constant. So this is the exercise and maybe pause the video here and see if you can figure it out yourself as to what we should put here. Okay, so you can actually go here and look at derivative rules as an example. And we see lots of derivative rules that you can hopefully know from calculus. In particular, what we're looking for is the power rule because that's telling us that if we're trying to take d by dx of x to the n, which is what we're doing here, then that is just n times x to the n minus 1, right? Okay, so that's telling us about the local derivative of this power operation. So all we want here basically n is now other and self.data is x. And so this now becomes other which is n times self.data, which is now another. Python int or a float. It's not a value object. We're accessing the data attribute raised to the power of other minus 1 or n minus 1. I can put brackets around this, but this doesn't matter because power takes precedence over multiply in pyhelm. So that would have been okay. And that's the local derivative only. But now we have to chain it and we chain it just simply by multiplying by a path grad that's chain rule. And this should technically work. And we're going to find out soon. But now if we do this, this should now work. And we get 0.5. So the forward pass works, but does the backward pass work? And I realized that we actually also have to know how to subtract. So right now a minus b will not work to make it work. We need one more piece of code here. And basically this is the subtraction and the way we're going to implement subtraction is we're going to implement it by addition of a negation. And then to implement negation, we're going to multiply by negative one. So just again using the stuff we've already built and just expressing it in terms of what we have and a minus b is not working. Okay, so now let's scroll again to this expression here for this neuron. And let's just compute the backward pass here. Once we've defined O and let's draw it. So here's the gradients for all these leaf nodes for this two-dimensional neuron that has a 10h that we've seen before. So now what I'd like to do is I'd like to break up. This 10h into this expression here. So let me copy paste this here and now instead of will preserve the label and we will change how we define O. So in particular we're going to implement this formula here. So we need e to the 2x minus 1 over e to the x plus 1. So e to the 2x we need to take 2 times n and we need to exponentiate it. That's e to the 2x and then because we're using it twice. Let's create an intermediate. Variable e and then define O as e plus 1 over e minus 1 over e plus 1 e minus 1 over e plus 1 and that should be it. And then we should be able to draw dot of O. So now before I run this, what do we expect to see? Number one, we're expecting to see a much longer graph here because we've broken up 10h into a bunch of other operations. But those operations are mathematically equivalent. And so what we're expecting. To see is number one, the same result here. So the forward pass works and number two because of that mathematical equivalence. We expect to see the same backward pass and the same gradients on these leaf nodes. So these gradients should be identical. So let's run this. So number one, let's verify that instead of a single 10h node. We have now X and we have plus we have times negative one. This is the division and we end up with the same forward pass. Here and then the gradients. We have to be careful because they're in slightly different order. Potentially the gradients for W2 X2 should be 0 and 0.5 W2 and X2 are 0 and 0.5 and W1 X1 are 1 and negative 1.5 1 and negative 1.5. So that means that both our forward passes and backward passes were correct because this turned out to be equivalent to 10h before. And so the reason I wanted to go through this exercise is number one. We got to practice a few more operations. And writing more backwards passes and number two. I wanted to illustrate the point that the the level at which you implement your operations is totally up to you. You can implement backward passes for tiny expressions like a single individual plus or a single times. Or you can implement them for say 10h which is a kind of a potential. You can see it as a composite operation because it's made up of all these more atomic operations. But really all of this is kind of like a fake concept. All that matters is we have some kind of inputs. And some kind of an output and this output is a function of the inputs in some way. And as long as you can do forward pass and the backward pass of that little operation. It doesn't matter what that operation is and how composite it is. If you can write the local gradients you can chain the gradient and you can continue back propagation. So the design of what those functions are is completely up to you. So now I would like to show you how you can do the exact same thing but using a modern deep neural network library. Like for example PyTorch. Which I've roughly modeled. Micrograd by. And so PyTorch is something you would use in production. And I'll show you how you can do the exact same thing but in PyTorch API. So I'm just going to copy paste it in and walk you through it a little bit. This is what it looks like. So we're going to import PyTorch. And then we need to define these value objects like we have here. Now Micrograd is a scalar valued engine. So we only have scalar values like 2.0. But in PyTorch. We only have around tensors. And like I mentioned tensors are just n dimensional arrays of scalars. So that's why things get a little bit more complicated here. I just need a scalar valued tensor. A tensor with just a single element. But by default when you work with PyTorch you would use more complicated tensors like this. So if I import PyTorch. Then I can create tensors like this. And this tensor for example. Is a 2x3 array. Of scalars in a single compact representation. So we can check its shape. We see that it's a 2x3 array and so on. So this is usually what you would work with in the actual libraries. So here I'm creating a tensor that has only a single element 2.0. And then I'm casting it to be double. Because Python is by default using double precision for its floating point numbers. So I'd like everything to be identical. By default the data type of these tensors will be float32. So it's only using a single precision float. So I'm casting it to double. So that we have float64 just like in Python. So I'm casting to double. And then we get something similar to value of 2. The next thing I have to do is because these are leaf nodes. By default PyTorch assumes that they do not require gradients. So I need to explicitly say that all of these nodes require gradients. Okay. So this is going to construct. Scalar valued one element tensors. Make sure that PyTorch knows that they require gradients. Now by default these are set to false by the way because of efficiency reasons. Because usually you would not want gradients for leaf nodes. Like the inputs to the network. And this is just trying to be efficient in the most common cases. So once we've defined all of our values in PyTorch land. We can perform arithmetic just like we can here in micrograd land. So this would just work. And then there's a torch.10h also. And when we get back as a tensor again. And we can just like in micrograd. It's got a data attribute and it's got grad attributes. So these tensor objects just like in micrograd have a dot data and a dot grad. And the only difference here is that we need to call a dot item. Because otherwise PyTorch dot item basically takes a single tensor of one element. And it just returns that element stripping out the tensor. So let me just run this. And hopefully we are going to get. This is going to print the forward pass which is 0.707. And this will be the gradients which hopefully are 0.50, negative 1.5, and 1. So if we just run this. There we go. 0.7. So the forward pass agrees. And then 0.50, negative 1.5, and 1. So PyTorch agrees with us. And just to show you here basically. Oh, here's a tensor with a single element. And it's a double. And we can call that item on it to just get the single number out. So that's what item does. And O is a tensor object like I mentioned. And it's got a backward function just like we've implemented. And then all of these also have a dot grad. So like X2 for example has a grad. And it's a tensor. And we can pop out the individual number with dot item. So basically Torch can do what we did in micrograd as a special case. When your tensors are all single element tensors. But the big deal with PyTorch is that everything is significantly more efficient. Because we are working with these tensor objects. And we can do lots of operations in parallel on all of these tensors. But otherwise what we've built very much agrees with the API of PyTorch. Okay, so now that we have some machinery to build out pretty complicated mathematical expressions. We can also start building up neural nets. And as I mentioned neural nets are just a specific class of mathematical expressions. So we're going to start building out a neural net piece by piece. And eventually we'll build out a two-layer multi-layer layer perceptron as it's called. And I'll show you exactly what that means. Let's start with a single individual neuron. We've implemented one here. But here I'm going to implement one that also subscribes to the PyTorch API. And how it designs its neural network modules. So just like we saw that we can like match the API of PyTorch on the autograd side. We're going to try to do that on the neural network modules. So here's class neuron. And just for the sake of efficiency. I'm going to copy paste some sections that are relatively straightforward. So the constructor will take number of inputs to this neuron. Which is how many inputs come to a neuron. So this one for example has three inputs. And then it's going to create a weight. That is some random number between negative one and one for every one of those inputs. And a bias that controls the overall trigger happiness of this neuron. And then we're going to implement a def underscore underscore call of self and x. Some input x. And really what we don't want to do here is w times x plus b. Where w times x here is a dot product specifically. Now if you haven't seen call. Let me just return 0.0 here for now. The way this works now is we can have an x which is say like 2.0, 3.0. Then we can initialize a neuron that is two-dimensional. Because these are two numbers. And then we can feed those two numbers into that neuron to get an output. And so when you use this notation n of x. Python will use call. So currently call just returns 0.0. Now we'd like to actually do the forward pass of this neuron instead. So we're going to do here first. Is we need to basically multiply all of the elements of w. With all of the elements of x pairwise. We need to multiply them. So the first thing we're going to do. Is we're going to zip up salta w and x. And in Python zip takes two iterators. And it creates a new iterator that iterates over the tuples of their corresponding entries. So for example, just to show you we can print this list. And still return 0.0 here. Sorry. I'm in life. So we see that these w's are paired up with the x's. W with x. And now what we want to do is. For wi xi in. We want to multiply w times wi times xi. And then we want to sum all of that together. To come up with an activation. And add also salta b on top. So that's the raw activation. And then of course we need to pass that through a null linearity. So what we're going to be returning is act dot 10h. And here's out. So now we see that we are getting some outputs. And we get a different output from a neuron each time. Because we are initializing different weights and biases. And then to be a bit more efficient here actually. Sum by the way takes a second optional parameter. Which is the start. And by default the start is 0. So these elements of this sum. Will be added on top of 0 to begin with. But actually we can just start with salta b. And then we just have an expression like this. And then the generator expression here must be parenthesized in python. There we go. Yep so now we can forward a single neuron. Next up we're going to define a layer of neurons. So here we have a schematic for a MLP. So we see that. These MLPs each layer. This is one layer. Has actually a number of neurons. And they're not connected to each other. But all of them are fully connected to the input. So what is a layer of neurons? It's just it's just a set of neurons evaluated independently. So in the interest of time. I'm going to do something fairly straightforward here. It's literally a layer is just a list of neurons. And then how many neurons do we have? We take that as an input argument here. How many neurons do you want in your layer number of outputs in this layer? And so we just initialize completely independent neurons with this given dimensionality. And we call on it. We just independently evaluate them. So now instead of a neuron we can make a layer of neurons. They are two dimensional neurons and let's have three of them. And now we see that we have three independent evaluations of three different neurons, right? Okay. And finally, let's complete this picture and define an entire multi-layer. Perceptron or MLP. And as we can see here in an MLP, these layers just feed into each other sequentially. So let's come here and I'm just going to copy the code here in interest of time. So an MLP is very similar. We're taking the number of inputs as before. But now instead of saying taking a single and out which is number of neurons in a single layer. We're going to take a list of an outs and this list defines the sizes of all the layers that we want in our MLP. So here we just put them all together and then iterate. Over consecutive pairs of these sizes and create a layer objects for them. And then in the call function, we are just calling them sequentially. So that's an MLP really. And let's actually re-implement this picture. So we want three input neurons and then two layers of four and an output unit. So we want three dimensional input. Say this is an example input. We want three inputs into two layers of four and one output. And this of course is an MLP. And there we go. That's a forward pass of an MLP. To make this a little bit nicer. You see how we have just a single element, but it's wrapped in a list because layer always returns lists. So for convenience, return outs at zero if len outs is exactly a single element. Else return fullest. And this will allow us to just get a single value out at the last layer that only has a single neuron. And finally, we should be able to draw a dot of N of X. As you might imagine, these expressions are now getting relatively involved. So this is an entire MLP that we're defining now. All the way until a single output. Okay, and so obviously you would never differentiate on pen and paper these expressions. But with micrograd, we will be able to back propagate all the way through this and back propagate into these weights of all these neurons. So let's see how that works. Okay, so let's create ourselves a very simple example data set here. So this data set has four examples. And so we have four possible inputs into the neural net. And we have four desired targets. So we'd like the neural net to assign or output 1.0 when it's fed this example. Negative one when it's fed these examples. And one when it's fed this example. So it's a very simple binary classifier neural net basically that we would like here. Now let's think what the neural net currently thinks about these four examples. We can just get their predictions. Basically, we can just call N of X for X and Xs. And then we can print. So these are the outputs of the neural net on those four examples. So the first one is 0.91, but we'd like it to be one. So we should push this one higher. This one we want to be higher. This one says 0.88, and we want this to be negative one. This is 0.88, we want it to be negative one. And this one is 0.88, we want it to be one. So how do we make the neural net? And how do we tune the weights to better predict the desired targets? And the trick used in deep learning to achieve this is to calculate a single number that somehow measures the total performance of your neural net. And we call this single number the loss. So the loss first is a single number that we're going to define that basically measures how well the neural net is performing. Right now, we have the intuitive sense that it's not performing very well because we're not very much close to this. So the loss will be high, and we'll want to minimize the loss. So in particular, in this case, what we're going to do is we're going to implement the mean squared error loss. So what this is doing is we're going to basically iterate for Y ground truth and Y output in zip of Ys and Ybred. So we're going to pair up the ground truths with the predictions and the zip iterates over tuples of them. And for each Y ground truth and Y output, we're going to subtract them and square them. So let's first see what these losses are. These are individual loss components. And so basically for each one of the four, we are taking the prediction and the ground truth. We are subtracting them and squaring them. So because this one is so close to its target, 0.91 is almost 1, subtracting them gives a very small number. So here we would get like a negative 0.1, and then squaring it just makes sure that regardless of whether we are more negative or more positive, we always get a positive number. Instead of squaring, we could also take, for example, the absolute value. We need to discard the sign. And so you see that the expression is ranged so that you only get 0 exactly when Y out is equal to Y ground truth. When those two are equal, so your prediction is exactly the target, you are going to get 0. And if your prediction is not the target, you are going to get some other number. So here, for example, we are way off. And so that's why the loss is quite high. And the more off we are, the greater the loss will be. So we don't want high loss, we want low loss. And so the final loss here will be just the sum, all of these numbers. So you see that this should be 0 roughly plus 0 roughly, but plus 7. So loss should be about 7 here. And now we want to minimize the loss. We want the loss to be low because if loss is low, then every one of the predictions is equal to its target. So the loss, the lowest it can be is 0, and the greater it is, the worse off the neural net is, and the higher the risk of shifting. So now, of course, if we do loss.backward, something magical happened when I hit enter. And the magical thing, of course, that happened is that we can look at n.layers.neuron, n.layers at, say, like the first layer, that neurons at 0, because remember that MLP has the layers, which is a list, and each layer has neurons, which is a list, and that gives us an individual neuron, and that gives us some weights. And so we can, for example, look at the weights at 0. Oops, it's not called weights, it's called w. And that's a value, but now this value also has a grad because of the backward pass. And so we see that because this gradient here on this particular weight of this particular neuron of this particular layer is negative, we see that its influence on the loss is also negative. So slightly increasing this particular weight of this neuron of this layer would make the loss go down. And we actually have this information for every single one of our neurons and all of their parameters. Actually, it's worth looking at also the draw dot of loss, by the way. So previously, we looked at the draw dot of a single neuron forward pass, and that was already a large expression. But what is this expression? We actually forwarded every one of those four examples, and then we have the loss on top of them, with the mean squared error. And so this is a really massive graph because this graph that we've built up now, oh my gosh, this graph that we've built up now, which is kind of excessive, it's excessive because it has four forward passes of a neural net for every one of the examples, and then it has the loss on top, and it ends with the value of the loss, which was 7.12. And this loss will now back propagate through all the four forward passes all the way through, just every single intermediate value of the neural net, all the way back to, of course, the parameters of the weights, which are the input. So these weight parameters here are inputs to this neural net, and these numbers here, these scalars, are inputs to the neural net. So if we went around here, we will probably find some of these examples, this 1.0, potentially maybe this 1.0, or, you know, some of the others. And you'll see that they all have gradients as well. The thing is these gradients on the input data are not that useful to us, and that's because the input data seems to be not changeable. It's a given to the problem, and so it's a fixed input. We're not going to be changing it or messing with it, even though we do have gradients for it. But some of these gradients here will be for the neural network parameters, the w's and the b's, and those we, of course, we want to change. Okay, so now we're going to want some convenience codes to gather up all of the parameters of the neural net so that we can operate on all of them simultaneously. And every one of them, we will nudge a tiny amount based on the gradient information. So let's collect the parameters of the neural net all in one array. So let's create a parameters of self that just returns self.w, which is a list, concatenated with a list of self.b. So this will just return a list. List plus list just gives you a list. So that's parameters of neuron, and I'm calling it this way because also PyTorch has parameters on every single NN module, and it does exactly what we're doing here. It just returns the parameter tensors. For us, it's the parameter scalars. Now, layer is also a module, so it will have parameters, self, and basically what we want to do here is something like this, like params is here, and then for neuron in self.neurons, we want to get neuron.parameters, and we want to params.extend. So these are the parameters of this neuron, and then we want to put them on top of params, so params.extend of piece, and then we want to return params. So this is way too much code, so actually there's a way to simplify this, which is return p for neuron in self.neurons for p in neuron.parameters. So it's a single list comprehension. In Python, you can sort of nest them like this, and you can then create the desired array. So these are identical. We can take this out. And then let's do the same here. dev.parameters self and return a parameter for layer in self.layers for p in layer.parameters. And that should be good. Now let me pop out this so we don't reinitialize our network, because we need to reinitialize our... Okay, so unfortunately, we will have to probably reinitialize the network because we just added functionality. Because this class, of course, I want to get all the end.parameters, but that's not going to work because this is the old class. Okay. So unfortunately, we do have to reinitialize the network, which will change some of the numbers. But let me do that so that we pick up the new API. We can now do end.parameters. And these are all the weights and biases inside the entire neural net. So in total, this MLP has 41 parameters. And now we'll be able to change them. If we recalculate the loss here, we see that unfortunately, we have slightly different predictions and slightly different loss. But that's okay. Okay, so we see that this neuron's gradient is slightly negative. We can also look at its data right now, which is 0.85. So this is the current value of this neuron, and this is its gradient on the loss. So what we want to do now is we want to iterate for every p in end.parameters. So for all the 41 parameters in this neural net, we actually want to change p.data slightly according to the gradient information. Okay, so dot dot dot to do here. But this will be basically a tiny update in this gradient descent scheme. And gradient descent, we are thinking of the gradient as a vector pointing in the direction of increased loss. And so in gradient descent, we are modifying p.data by a small step size in the direction of the gradient. So the step size as an example could be like a very small number, like 0.01 is the step size, times p.grad, right? But we have to think through some of the signs here. So in particular, working with this specific example here, we see that if we just left it like this, then this neuron's value would be currently increased by a tiny amount of the gradient. The gradient is negative, so this value of this neuron would go slightly down. It would become like 0.84 or something like that. But if this neuron's value goes lower, that would actually increase the loss. That's because the derivative of this neuron is negative. So increasing this makes the loss go down. So increasing it is what we want to do instead of decreasing it. So basically what we're missing here is we're actually missing a negative sign. And again, this other interpretation, and that's because we want to minimize the loss. We don't want to maximize the loss. We want to decrease it. And the other interpretation, as I mentioned, is you can think of the gradient vector, so basically just the vector of all the gradients, as pointing in the direction of increasing the loss. But then we want to decrease it. So we actually want to go in the opposite direction. And so you can convince yourself that this does the right thing here with the negative because we want to minimize the loss. So if we nudge all the parameters by a tiny amount, then we'll see that this data will have changed a little bit. So now this neuron is a tiny amount greater value. So 0.854 went to 0.857. And that's a good thing because slightly increasing this neuron data makes the loss go down according to the gradient. And so the correcting has happened sign-wise. And so now what we would expect, of course, is that because we've changed all these parameters, we expect that the loss should have gone down a bit. So we want to reevaluate the loss. Let me basically... This is just a data definition that hasn't changed. But the forward pass here, of the network, we can recalculate. And actually, let me do it outside here so that we can compare the two loss values. So here, if I recalculate the loss, we'd expect the new loss now to be slightly lower than this number. So hopefully, what we're getting now is a tiny bit lower than 4.84. 4.36. And remember, the way we've arranged this is that low loss means that our predictions are matching the targets. So our predictions now are probably slightly closer to the targets. And now all we have to do is we have to iterate this process. So again, we've done the forward pass, and this is the loss. Now we can loss that backward. Let me take these out. And we can do a step size. And now we should have a slightly lower loss. 4.36 goes to 3.9. And okay, so we've done the forward pass. Here's the backward pass. Nudge. And now the loss is 3.66. 3.47. And you get the idea. We just continue doing this. And this is gradient descent. We're just iteratively doing forward pass, backward pass, update. Forward pass, backward pass, update. And the neural net is improving its predictions. So here, if we look at ypred now, ypred, we see that this value should be getting closer to 1. So this value should be getting more positive. These should be getting more negative. And this one should be also getting more positive. So if we just iterate this a few more times, actually, we may be able to afford to go a bit faster. Let's try a slightly higher learning rate. Oops, okay, there we go. So now we're at 0.31. If you go too fast, by the way, if you try to make it too big of a step, you may actually overstep. It's overconfidence. Because again, remember, we don't actually know exactly about the loss function. The loss function has all kinds of structure. And we only know about the very local dependence of all these parameters on the loss. But if we step too far, we may step into, you know, a part of the loss that is completely different. And that can destabilize training and make your loss actually blow up even. So the loss is now 0.04. So actually, the predictions should be really quite close. Let's take a look. So you see how this is almost one, almost negative one, almost one. We can continue going. So, yep, backward, update. Oops, there we go. So we went way too fast. And we actually overstepped. So we got too eager. Where are we now? Oops. Okay. 7E-9. So this is very, very low loss. And the predictions are basically perfect. So somehow we... Basically, we were doing way too big updates and we briefly exploded, but then somehow we ended up getting into a really good spot. So usually this learning rate and the tuning of it is a subtle art. You want to set your learning rate. If it's too low, you're going to take way too long to converge. But if it's too high, the whole thing gets unstable and you might actually even explode the loss, depending on your loss function. So finding the step size to be just right, it's a pretty subtle art sometimes when you're using sort of vanilla gradient descent. But we happened to get into a good spot. We can look at n.parameters. So this is the setting of weights and biases that makes our network predict the desired targets very, very close. And basically, we've successfully trained a neural net. Okay, let's make this a tiny bit more respectable and implement an actual training loop and what that looks like. So this is the data definition that stays. This is the forward pass. So for k in range, we're going to take a bunch of steps. First, we do the forward pass. We validate the loss. Let's reinitialize the neural net from scratch. And here's the data. And we first do the forward pass. Then we do the backward pass. And then we do an update. That's gradient descent. And then we should be able to iterate this and we should be able to print the current step, the current loss. Let's just print the sort of number of the loss. And that should be it. And then the learning rate, 0.01 is a little too small. 0.1 we saw is like a little bit dangerous and too high. Let's go somewhere in between. And we'll optimize this for not 10 steps, but let's go for say 20 steps. Let me erase all of this junk. And let's run the optimization. And you see how we've actually converged slower in a more controlled manner and got to a loss that is very low. So I expect YPred to be quite good. There we go. And that's it. Okay, so this is kind of embarrassing, but we actually have a really terrible bug in here. And it's a subtle bug and it's a very common bug. And I can't believe I've done it for the 20th time in my life, especially on camera. And I could have reshot the whole thing, but I think it's pretty funny. And you get to appreciate a bit what working with neural nets maybe is like sometimes. We are guilty of a common bug. I've actually tweeted the most common neural net mistakes a long time ago now. And I'm not really going to explain any of these, but remember we are guilty of number three. You forgot to zero grad before dot backward. What is that? Basically what's happening, and it's a subtle bug and I'm not sure if you saw it, is that all of these weights here have a dot data and a dot grad. And dot grad starts at zero. And then we do backward and we fill in the gradients. And then we do an update on the data, but we don't flush the grad. It stays there. So when we do the second forward pass and we do backward again, remember that all the backward operations do a plus equals on the grad. And so these gradients just add up and they never get reset to zero. So basically we didn't zero grad. So here's how we zero grad before backward. We need to iterate over all the parameters. And we need to make sure that p dot grad is set to zero. We need to reset it to zero. Just like it is in the constructor. So remember all the way here for all these value nodes, grad is reset to zero. And then all these backward passes do a plus equals from that grad. But we need to make sure that we reset these grads to zero so that when we do backward, all of them start at zero and the actual backward pass accumulates the loss derivatives into the grads. So this is zero grad in PyTorch. And we will get a slightly different optimization. Let's reset the neural net. The data is the same. This is now, I think, correct. And we get a much more slower descent. We still end up with pretty good results. And we can continue this a bit more to get down lower and lower and lower. Yeah. So the only reason that the previous thing worked, it's extremely buggy. The only reason that worked is that this is a very, very simple problem. And it's very easy for this neural net to fit this data. And so the grads ended up accumulating and it effectively gave us a massive step size. And it made us converge extremely fast. But basically now we have to do more steps to get to very low values of loss and get YPRED to be really good. We can try to step a bit greater. Yeah. We're going to get closer and closer to one minus one and one. So working with neural nets is sometimes tricky because you may have lots of bugs in the code and your network might actually work just like ours worked. But chances are is that if we had a more complex problem then actually this bug would have made us not optimize the loss very well. And we were only able to get away with it because the problem is very simple. So let's now bring everything together and summarize what we learned. What are neural nets? Neural nets are these mathematical expressions. Fairly simple mathematical expressions in the case of multi-layer perceptron that take input as the data and they take input the weights and the parameters of the neural net. Mathematical expression for the forward pass followed by a loss function. And the loss function tries to measure the accuracy of the predictions. And usually the loss will be low when your predictions are matching your targets or where the network is basically behaving well. So we manipulate the loss function so that when the loss is low the network is doing what you want it to do on your problem. And then we backward the loss. Use back propagation to get the gradient and then we know how to tune all the parameters to decrease the loss locally. But then we have to iterate that process many times in what's called the gradient descent. So we simply follow the gradient information and that minimizes the loss and the loss is arranged so that when the loss is minimized the network is doing what you want it to do. And yeah, so we just have a blob of neural stuff and we can make it do arbitrary things. And that's what gives neural nets their power. It's, you know, this is a very tiny network with 41 parameters. But you can build significantly more complicated neural nets with billions at this point almost trillions of parameters. And it's a massive blob of neural tissue simulated neural tissue roughly speaking. And you can make it do extremely complex problems. And these neural nets then have all kinds of very fascinating emergent properties in when you try to make them do significantly hard problems. As in the case of GPT for example we have massive amounts of text from the internet and we're trying to get a neural net to predict to take like a few words and try to predict the next word in a sequence. That's the learning problem. And it turns out that when you train this on all of internet the neural net actually has like really remarkable emergent properties. But that neural net would have hundreds of billions of parameters. But it works on fundamentally the exact same principles. The neural net of course will be a bit more complex. But otherwise the evaluating the gradient is there and will be identical. And the gradient descent would be there and basically identical. But people usually use slightly different updates. This is a very simple stochastic gradient descent update. And the loss function would not be a mean squared error. They would be using something called the cross entropy loss for predicting the next token. So there's a few more details but fundamentally the neural network setup and neural network training is identical and pervasive. And now you understand intuitively how that works under the hood. In the beginning of this video I told you that by the end of it you would understand everything in MicroGrad and then we'd slowly build it up. Let me briefly prove that to you. So I'm going to step through all the code that is in MicroGrad as of today. Actually potentially some of the code will change by the time you watch this video because I intend to continue developing MicroGrad. But let's look at what we have so far at least. Init.py is empty. When you go to engine.py that has the value. Everything here you should mostly recognize. So we have the data.data.grad attributes. We have the backward function. We have the previous set of children and the operation that produced this value. We have addition, multiplication and raising to a scalar power. We have the ReLU non-linearity which is a slightly different type of non-linearity than tanh that we used in this video. Both of them are non-linearities and notably tanh is not actually present in MicroGrad as of right now but I intend to add it later. We have the backward which is identical and then all of these other operations which are built up on top of operations here. So values should be very recognizable except for the non-linearity used in this video. There's no massive difference between ReLU and tanh and sigmoid and these other non-linearities. They're all roughly equivalent and can be used in MLPs. So I use tanh because it's a bit smoother and because it's a little bit more complicated than ReLU and therefore it's stressed a little bit more the local gradients and working with those derivatives which I thought would be useful. Init.py is the neural networks library as I mentioned. So you should recognize identical implementation of neuron, layer and MLP. Notably, or not so much we have a class module here that is a parent class of all these modules. I did that because there's an nn.module class in PyTorch and so this exactly matches that API and nn.module in PyTorch has also a 0 grad which I refactored out here. So that's the end of MicroGrad really. Then there's a test which you'll see basically creates two chunks of code one in MicroGrad and one in PyTorch and we'll make sure that the forward and the backward pass agree identically. For a slightly less complicated expression and slightly more complicated expression everything agrees so we agree with PyTorch on all of these operations. And finally there's a demo.pypyymb here and it's a bit more complicated binary classification demo than the one I covered in this lecture. So we only had a tiny data set of four examples. Here we have a bit more complicated example with lots of blue points and lots of red points and we're trying to again build a binary classifier to distinguish two-dimensional points as red or blue. It's a bit more complicated MLP here with it's a bigger MLP. The loss is a bit more complicated because it supports batches so because our data set was so tiny we always did a forward pass on the entire data set of four examples. But when your data set is like a million examples what we usually do in practice is we basically pick out some random subset, we call that a batch and then we only process the batch forward, backward and update. So we don't have to forward the entire training set. So this is something that supports batching because there's a lot more examples here. We do a forward pass. The loss is slightly more different. This is a max margin loss that I implement here. The one that we used was the mean squared error loss because it's the simplest one. There's also the binary cross entropy loss. All of them can be used for binary classification and don't make too much of a difference in the simple examples that we looked at so far. There's something called L2 regularization used here. This has to do with generalization of the neural net that controls the overfitting in machine learning setting but I did not cover these concepts in this video, potentially later. And the training loop you should recognize. So forward, backward, with, zero grad and update and so on. You'll notice that in the update here the learning rate is scaled as a function of number of iterations and it shrinks. And this is something called learning rate decay. So in the beginning you have a high learning rate and as the network sort of stabilizes near the end you bring down the learning rate to get to some of the fine details in the end. And in the end we see the decision surface of the neural net and we see that it learned to separate out the red and the blue area based on the data points. So that's the slightly more complicated example in the demo.hypiYMB that you're free to go over. But yeah, as of today, that is MicroGrad. I also wanted to show you a little bit of real stuff so that you get to see how this is actually implemented in a production grade library like PyTorch. So in particular I wanted to show I wanted to find and show you the backward pass for 10h in PyTorch. So here in MicroGrad we see that the backward pass for 10h is 1 minus t squared where t is the output of the 10h of x times of that grad which is the chain rule. So we're looking for something that looks like this. Now, I went to PyTorch which has an open source GitHub codebase and I looked through a lot of its code and honestly I spent about 15 minutes and I couldn't find 10h. And that's because these libraries, unfortunately they grow in size and entropy. And if you just search for 10h you get apparently 2,800 results and 406 files. So I don't know what these files are doing, honestly. And why there are so many mentions of 10h. But unfortunately these libraries are quite complex they're meant to be used, not really inspected. Eventually I did stumble on someone who tries to change the 10h backward code for some reason and someone here pointed to the CPU kernel and the CUDA kernel for 10h backward. So basically it depends on if you're using PyTorch on a CPU device or on a GPU which these are different devices and I haven't covered this. But this is the 10h backward kernel for CPU and the reason it's so large is that number one, this is like if you're using a complex type which we haven't even talked about you're using a specific data type of bfloat16 which we haven't talked about and then if you're not then this is the kernel and deep here we see something that resembles our backward pass. So they have a times one minus b square so this b here must be the output of the 10h and this is the out.grad so here we found it deep inside PyTorch on this location for some reason inside binary ops kernel 10h is not actually binary op and then this is the GPU kernel we're not complex we're here and here we go with one line of code so we did find it but basically unfortunately these code bases are very large and micrograd is very very simple but if you actually want to use real stuff finding the code for it you'll actually find that difficult I also wanted to show you a little example here where PyTorch is showing you you can register a new type of function that you want to add to PyTorch as a lego building block so here if you want to for example add a gender polynomial 3 here's how you could do it you will register it as a class that subclass says torch.rgrad.function and then you have to tell PyTorch how to forward your new function and how to backward through it so as long as you can do the forward pass of this little function piece that you want to add and as long as you know the local derivative, the local gradients which are implemented in the backward PyTorch will be able to back propagate through your function and then you can use this as a lego block in a larger lego castle of all the different lego blocks that PyTorch already has and so that's the only thing you have to tell PyTorch and everything will just work and you can register new types of functions in this way following this example and that is everything that I wanted to cover in this lecture so I hope you enjoyed building out micrograd with me I hope you find it interesting, insightful and yeah I will post a lot of the links that are related to this video in the video description below I will also probably post a link to a discussion forum or discussion group where you can ask questions related to this video and then I can answer or someone else can answer your questions and I may also do a follow up video that answers some of the most common questions but for now that's it I hope you enjoyed it if you did then please like and subscribe so that YouTube knows to feature this video to more people and that's it for now, I'll see you later bye I know what happened there", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 4.38, "text": " Hello, my name is Andre and I've been training deep neural networks for a bit more than a decade", "tokens": [50365, 2425, 11, 452, 1315, 307, 20667, 293, 286, 600, 668, 3097, 2452, 18161, 9590, 337, 257, 857, 544, 813, 257, 10378, 50584], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 1, "seek": 0, "start": 4.38, "end": 9.120000000000001, "text": " and in this lecture I'd like to show you what neural network training looks like under the hood.", "tokens": [50584, 293, 294, 341, 7991, 286, 1116, 411, 281, 855, 291, 437, 18161, 3209, 3097, 1542, 411, 833, 264, 13376, 13, 50821], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 2, "seek": 0, "start": 9.84, "end": 14.08, "text": " So in particular we are going to start with a blank Jupyter notebook and by the end of this", "tokens": [50857, 407, 294, 1729, 321, 366, 516, 281, 722, 365, 257, 8247, 22125, 88, 391, 21060, 293, 538, 264, 917, 295, 341, 51069], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 3, "seek": 0, "start": 14.08, "end": 18.64, "text": " lecture we will define and train a neural net and you'll get to see everything that goes on", "tokens": [51069, 7991, 321, 486, 6964, 293, 3847, 257, 18161, 2533, 293, 291, 603, 483, 281, 536, 1203, 300, 1709, 322, 51297], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 4, "seek": 0, "start": 18.64, "end": 23.68, "text": " under the hood and exactly sort of how that works on an intuitive level. Now specifically what I", "tokens": [51297, 833, 264, 13376, 293, 2293, 1333, 295, 577, 300, 1985, 322, 364, 21769, 1496, 13, 823, 4682, 437, 286, 51549], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 5, "seek": 0, "start": 23.68, "end": 29.240000000000002, "text": " would like to do is I would like to take you through building of micrograd. Now micrograd", "tokens": [51549, 576, 411, 281, 360, 307, 286, 576, 411, 281, 747, 291, 807, 2390, 295, 4532, 7165, 13, 823, 4532, 7165, 51827], "temperature": 0.0, "avg_logprob": -0.06925461897209509, "compression_ratio": 1.8311688311688312, "no_speech_prob": 0.01888931915163994}, {"id": 6, "seek": 2924, "start": 29.24, "end": 34.08, "text": " is this library that I released on github about two years ago but at the time I only uploaded the", "tokens": [50365, 307, 341, 6405, 300, 286, 4736, 322, 290, 355, 836, 466, 732, 924, 2057, 457, 412, 264, 565, 286, 787, 17135, 264, 50607], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 7, "seek": 2924, "start": 34.08, "end": 39.94, "text": " source code and you'd have to go in by yourself and really figure out how it works. So in this", "tokens": [50607, 4009, 3089, 293, 291, 1116, 362, 281, 352, 294, 538, 1803, 293, 534, 2573, 484, 577, 309, 1985, 13, 407, 294, 341, 50900], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 8, "seek": 2924, "start": 39.94, "end": 43.739999999999995, "text": " lecture I will take you through it step by step and kind of comment on all the pieces of it.", "tokens": [50900, 7991, 286, 486, 747, 291, 807, 309, 1823, 538, 1823, 293, 733, 295, 2871, 322, 439, 264, 3755, 295, 309, 13, 51090], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 9, "seek": 2924, "start": 44.14, "end": 51.519999999999996, "text": " So what is micrograd and why is it interesting? Thank you. Micrograd is basically an autograd", "tokens": [51110, 407, 437, 307, 4532, 7165, 293, 983, 307, 309, 1880, 30, 1044, 291, 13, 25642, 7165, 307, 1936, 364, 1476, 664, 6206, 51479], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 10, "seek": 2924, "start": 51.519999999999996, "end": 56.58, "text": " engine. Autograd is short for automatic gradient and really what it does is it implements back", "tokens": [51479, 2848, 13, 6049, 664, 6206, 307, 2099, 337, 12509, 16235, 293, 534, 437, 309, 775, 307, 309, 704, 17988, 646, 51732], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 11, "seek": 2924, "start": 56.58, "end": 59.12, "text": " propagation. Now back propagation is this algorithm", "tokens": [51732, 38377, 13, 823, 646, 38377, 307, 341, 9284, 51859], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 12, "seek": 2924, "start": 59.12, "end": 59.22, "text": " that you can use to create a neural network and you can use it to create a neural network", "tokens": [51859, 300, 291, 393, 764, 281, 1884, 257, 18161, 3209, 293, 291, 393, 764, 309, 281, 1884, 257, 18161, 3209, 51864], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 13, "seek": 2924, "start": 59.22, "end": 59.239999999999995, "text": " and you can use it to create a neural network and you can use it to create a neural network.", "tokens": [51864, 293, 291, 393, 764, 309, 281, 1884, 257, 18161, 3209, 293, 291, 393, 764, 309, 281, 1884, 257, 18161, 3209, 13, 51865], "temperature": 0.0, "avg_logprob": -0.1666455490644588, "compression_ratio": 2.1101190476190474, "no_speech_prob": 0.00019637789227999747}, {"id": 14, "seek": 5924, "start": 59.24, "end": 65.32000000000001, "text": " That allows you to efficiently evaluate the gradient of some kind of a loss function with", "tokens": [50365, 663, 4045, 291, 281, 19621, 13059, 264, 16235, 295, 512, 733, 295, 257, 4470, 2445, 365, 50669], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 15, "seek": 5924, "start": 65.32000000000001, "end": 70.16, "text": " respect to the weights of a neural network and what that allows us to do then is we can", "tokens": [50669, 3104, 281, 264, 17443, 295, 257, 18161, 3209, 293, 437, 300, 4045, 505, 281, 360, 550, 307, 321, 393, 50911], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 16, "seek": 5924, "start": 70.16, "end": 74.1, "text": " iteratively tune the weights of that neural network to minimize the loss function and", "tokens": [50911, 17138, 19020, 10864, 264, 17443, 295, 300, 18161, 3209, 281, 17522, 264, 4470, 2445, 293, 51108], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 17, "seek": 5924, "start": 74.1, "end": 78.82000000000001, "text": " therefore improve the accuracy of the network. So back propagation would be at the mathematical", "tokens": [51108, 4412, 3470, 264, 14170, 295, 264, 3209, 13, 407, 646, 38377, 576, 312, 412, 264, 18894, 51344], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 18, "seek": 5924, "start": 78.82000000000001, "end": 84.72, "text": " core of any modern deep neural network library like say PyTorch or JAX. So the functionality", "tokens": [51344, 4965, 295, 604, 4363, 2452, 18161, 3209, 6405, 411, 584, 9953, 51, 284, 339, 420, 26401, 55, 13, 407, 264, 14980, 51639], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 19, "seek": 5924, "start": 84.72, "end": 88.78, "text": " of micrograd is I think best illustrated by an example. So if we just scroll down here", "tokens": [51639, 295, 4532, 7165, 307, 286, 519, 1151, 33875, 538, 364, 1365, 13, 407, 498, 321, 445, 11369, 760, 510, 51842], "temperature": 0.0, "avg_logprob": -0.04895469347635905, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.0001954412873601541}, {"id": 20, "seek": 8878, "start": 88.78, "end": 93.46000000000001, "text": " you'll see that micrograd basically allows you to build out mathematical expressions", "tokens": [50365, 291, 603, 536, 300, 4532, 7165, 1936, 4045, 291, 281, 1322, 484, 18894, 15277, 50599], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 21, "seek": 8878, "start": 93.46000000000001, "end": 98.58, "text": " and here what we are doing is we have an expression that we're building out where you have two", "tokens": [50599, 293, 510, 437, 321, 366, 884, 307, 321, 362, 364, 6114, 300, 321, 434, 2390, 484, 689, 291, 362, 732, 50855], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 22, "seek": 8878, "start": 98.58, "end": 105.78, "text": " inputs a and b and you'll see that a and b are negative four and two but we are wrapping those", "tokens": [50855, 15743, 257, 293, 272, 293, 291, 603, 536, 300, 257, 293, 272, 366, 3671, 1451, 293, 732, 457, 321, 366, 21993, 729, 51215], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 23, "seek": 8878, "start": 105.78, "end": 111.82, "text": " values into this value object that we are going to build out as part of micrograd. So this value", "tokens": [51215, 4190, 666, 341, 2158, 2657, 300, 321, 366, 516, 281, 1322, 484, 382, 644, 295, 4532, 7165, 13, 407, 341, 2158, 51517], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 24, "seek": 8878, "start": 111.82, "end": 117.16, "text": " object will wrap the numbers themselves and then we are going to build out a mathematical expression", "tokens": [51517, 2657, 486, 7019, 264, 3547, 2969, 293, 550, 321, 366, 516, 281, 1322, 484, 257, 18894, 6114, 51784], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 25, "seek": 8878, "start": 117.16, "end": 118.76, "text": " here where a and b are the values that we are going to build out as part of micrograd.", "tokens": [51784, 510, 689, 257, 293, 272, 366, 264, 4190, 300, 321, 366, 516, 281, 1322, 484, 382, 644, 295, 4532, 7165, 13, 51864], "temperature": 0.6000000000000001, "avg_logprob": -0.10803769725237707, "compression_ratio": 2.3004115226337447, "no_speech_prob": 0.00277893990278244}, {"id": 26, "seek": 11876, "start": 118.76, "end": 123.30000000000001, "text": " are transformed into C, D, and eventually E, F, and G.", "tokens": [50365, 366, 16894, 666, 383, 11, 413, 11, 293, 4728, 462, 11, 479, 11, 293, 460, 13, 50592], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 27, "seek": 11876, "start": 123.94, "end": 127.04, "text": " And I'm showing some of the functionality of micrograph", "tokens": [50624, 400, 286, 478, 4099, 512, 295, 264, 14980, 295, 4532, 34091, 50779], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 28, "seek": 11876, "start": 127.04, "end": 128.46, "text": " and the operations that it supports.", "tokens": [50779, 293, 264, 7705, 300, 309, 9346, 13, 50850], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 29, "seek": 11876, "start": 128.82, "end": 130.68, "text": " So you can add two value objects.", "tokens": [50868, 407, 291, 393, 909, 732, 2158, 6565, 13, 50961], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 30, "seek": 11876, "start": 130.88, "end": 131.78, "text": " You can multiply them.", "tokens": [50971, 509, 393, 12972, 552, 13, 51016], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 31, "seek": 11876, "start": 132.16, "end": 134.16, "text": " You can raise them to a constant power.", "tokens": [51035, 509, 393, 5300, 552, 281, 257, 5754, 1347, 13, 51135], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 32, "seek": 11876, "start": 134.6, "end": 137.46, "text": " You can offset by one, negate, squash at zero,", "tokens": [51157, 509, 393, 18687, 538, 472, 11, 2485, 473, 11, 30725, 412, 4018, 11, 51300], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 33, "seek": 11876, "start": 138.20000000000002, "end": 142.0, "text": " square, divide by constant, divide by it, et cetera.", "tokens": [51337, 3732, 11, 9845, 538, 5754, 11, 9845, 538, 309, 11, 1030, 11458, 13, 51527], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 34, "seek": 11876, "start": 142.82, "end": 144.68, "text": " And so we're building out an expression graph", "tokens": [51568, 400, 370, 321, 434, 2390, 484, 364, 6114, 4295, 51661], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 35, "seek": 11876, "start": 144.68, "end": 146.98000000000002, "text": " with these two inputs, A and B,", "tokens": [51661, 365, 613, 732, 15743, 11, 316, 293, 363, 11, 51776], "temperature": 0.0, "avg_logprob": -0.16143672192682984, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.055426280945539474}, {"id": 36, "seek": 14698, "start": 146.98, "end": 149.51999999999998, "text": " and we're creating an output value of G.", "tokens": [50365, 293, 321, 434, 4084, 364, 5598, 2158, 295, 460, 13, 50492], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 37, "seek": 14698, "start": 150.57999999999998, "end": 152.42, "text": " And micrograph will, in the background,", "tokens": [50545, 400, 4532, 34091, 486, 11, 294, 264, 3678, 11, 50637], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 38, "seek": 14698, "start": 152.82, "end": 154.64, "text": " build out this entire mathematical expression.", "tokens": [50657, 1322, 484, 341, 2302, 18894, 6114, 13, 50748], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 39, "seek": 14698, "start": 155.2, "end": 158.01999999999998, "text": " So it will, for example, know that C is also a value.", "tokens": [50776, 407, 309, 486, 11, 337, 1365, 11, 458, 300, 383, 307, 611, 257, 2158, 13, 50917], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 40, "seek": 14698, "start": 158.83999999999997, "end": 160.79999999999998, "text": " C was a result of an addition operation.", "tokens": [50958, 383, 390, 257, 1874, 295, 364, 4500, 6916, 13, 51056], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 41, "seek": 14698, "start": 161.5, "end": 165.85999999999999, "text": " And the child nodes of C are A and B", "tokens": [51091, 400, 264, 1440, 13891, 295, 383, 366, 316, 293, 363, 51309], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 42, "seek": 14698, "start": 165.85999999999999, "end": 169.62, "text": " because it will maintain pointers to A and B value objects.", "tokens": [51309, 570, 309, 486, 6909, 44548, 281, 316, 293, 363, 2158, 6565, 13, 51497], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 43, "seek": 14698, "start": 169.94, "end": 172.57999999999998, "text": " So we'll basically know exactly how all of this is laid out.", "tokens": [51513, 407, 321, 603, 1936, 458, 2293, 577, 439, 295, 341, 307, 9897, 484, 13, 51645], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 44, "seek": 14698, "start": 173.1, "end": 176.32, "text": " And then not only can we do what we call the forward pass,", "tokens": [51671, 400, 550, 406, 787, 393, 321, 360, 437, 321, 818, 264, 2128, 1320, 11, 51832], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 45, "seek": 14698, "start": 176.32, "end": 176.89999999999998, "text": " where we actually,", "tokens": [51832, 689, 321, 767, 11, 51861], "temperature": 0.0, "avg_logprob": -0.13318814086914063, "compression_ratio": 1.6594202898550725, "no_speech_prob": 9.848885383689776e-06}, {"id": 46, "seek": 17698, "start": 176.98, "end": 178.35999999999999, "text": " if we look at the value of G, of course,", "tokens": [50365, 498, 321, 574, 412, 264, 2158, 295, 460, 11, 295, 1164, 11, 50434], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 47, "seek": 17698, "start": 178.44, "end": 179.38, "text": " that's pretty straightforward,", "tokens": [50438, 300, 311, 1238, 15325, 11, 50485], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 48, "seek": 17698, "start": 179.95999999999998, "end": 182.67999999999998, "text": " we will access that using the dot data attribute.", "tokens": [50514, 321, 486, 2105, 300, 1228, 264, 5893, 1412, 19667, 13, 50650], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 49, "seek": 17698, "start": 182.92, "end": 185.32, "text": " And so the output of the forward pass,", "tokens": [50662, 400, 370, 264, 5598, 295, 264, 2128, 1320, 11, 50782], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 50, "seek": 17698, "start": 185.76, "end": 188.57999999999998, "text": " the value of G, is 24.7, it turns out.", "tokens": [50804, 264, 2158, 295, 460, 11, 307, 4022, 13, 22, 11, 309, 4523, 484, 13, 50945], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 51, "seek": 17698, "start": 188.85999999999999, "end": 192.62, "text": " But the big deal is that we can also take this G value object", "tokens": [50959, 583, 264, 955, 2028, 307, 300, 321, 393, 611, 747, 341, 460, 2158, 2657, 51147], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 52, "seek": 17698, "start": 192.62, "end": 194.22, "text": " and we can call dot backward.", "tokens": [51147, 293, 321, 393, 818, 5893, 23897, 13, 51227], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 53, "seek": 17698, "start": 194.76, "end": 198.6, "text": " And this will basically initialize backpropagation at the node G.", "tokens": [51254, 400, 341, 486, 1936, 5883, 1125, 646, 79, 1513, 559, 399, 412, 264, 9984, 460, 13, 51446], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 54, "seek": 17698, "start": 199.98, "end": 201.35999999999999, "text": " And what backpropagation is going to do", "tokens": [51515, 400, 437, 646, 79, 1513, 559, 399, 307, 516, 281, 360, 51584], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 55, "seek": 17698, "start": 201.35999999999999, "end": 202.57999999999998, "text": " is it's going to start at G", "tokens": [51584, 307, 309, 311, 516, 281, 722, 412, 460, 51645], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 56, "seek": 17698, "start": 202.57999999999998, "end": 206.04, "text": " and it's going to go backwards through that expression graph", "tokens": [51645, 293, 309, 311, 516, 281, 352, 12204, 807, 300, 6114, 4295, 51818], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 57, "seek": 17698, "start": 206.04, "end": 206.88, "text": " and it's going to recurve.", "tokens": [51818, 293, 309, 311, 516, 281, 18680, 303, 13, 51860], "temperature": 0.0, "avg_logprob": -0.16804555257161458, "compression_ratio": 1.858695652173913, "no_speech_prob": 0.0003332794876769185}, {"id": 58, "seek": 20698, "start": 206.98, "end": 209.64, "text": " So we're going to recursively apply the chain rule from Calculus.", "tokens": [50365, 407, 321, 434, 516, 281, 20560, 3413, 3079, 264, 5021, 4978, 490, 3511, 36002, 13, 50498], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 59, "seek": 20698, "start": 210.28, "end": 211.92, "text": " And what that allows us to do then", "tokens": [50530, 400, 437, 300, 4045, 505, 281, 360, 550, 50612], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 60, "seek": 20698, "start": 212.28, "end": 215.48, "text": " is we're going to evaluate basically the derivative of G", "tokens": [50630, 307, 321, 434, 516, 281, 13059, 1936, 264, 13760, 295, 460, 50790], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 61, "seek": 20698, "start": 215.76, "end": 219.89999999999998, "text": " with respect to all the internal nodes like E, D, and C,", "tokens": [50804, 365, 3104, 281, 439, 264, 6920, 13891, 411, 462, 11, 413, 11, 293, 383, 11, 51011], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 62, "seek": 20698, "start": 220.26, "end": 222.76, "text": " but also with respect to the inputs A and B.", "tokens": [51029, 457, 611, 365, 3104, 281, 264, 15743, 316, 293, 363, 13, 51154], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 63, "seek": 20698, "start": 223.39999999999998, "end": 226.89999999999998, "text": " And then we can actually query this derivative of G", "tokens": [51186, 400, 550, 321, 393, 767, 14581, 341, 13760, 295, 460, 51361], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 64, "seek": 20698, "start": 226.89999999999998, "end": 229.6, "text": " with respect to A, for example, that's A dot grad.", "tokens": [51361, 365, 3104, 281, 316, 11, 337, 1365, 11, 300, 311, 316, 5893, 2771, 13, 51496], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 65, "seek": 20698, "start": 229.95999999999998, "end": 231.54, "text": " In this case, it happens to be 138.", "tokens": [51514, 682, 341, 1389, 11, 309, 2314, 281, 312, 3705, 23, 13, 51593], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 66, "seek": 20698, "start": 232.04, "end": 234.04, "text": " And the derivative of G with respect to B,", "tokens": [51618, 400, 264, 13760, 295, 460, 365, 3104, 281, 363, 11, 51718], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 67, "seek": 20698, "start": 234.44, "end": 236.94, "text": " which also happens to be here, 645.", "tokens": [51738, 597, 611, 2314, 281, 312, 510, 11, 1386, 8465, 13, 51863], "temperature": 0.0, "avg_logprob": -0.3262935526230756, "compression_ratio": 1.8560311284046693, "no_speech_prob": 0.0006194062880240381}, {"id": 68, "seek": 23698, "start": 237.51999999999998, "end": 239.23999999999998, "text": " And this derivative, we'll see soon,", "tokens": [50392, 400, 341, 13760, 11, 321, 603, 536, 2321, 11, 50478], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 69, "seek": 23698, "start": 239.34, "end": 240.54, "text": " is very important information", "tokens": [50483, 307, 588, 1021, 1589, 50543], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 70, "seek": 23698, "start": 240.54, "end": 244.66, "text": " because it's telling us how A and B are affecting G", "tokens": [50543, 570, 309, 311, 3585, 505, 577, 316, 293, 363, 366, 17476, 460, 50749], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 71, "seek": 23698, "start": 244.66, "end": 246.2, "text": " through this mathematical expression.", "tokens": [50749, 807, 341, 18894, 6114, 13, 50826], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 72, "seek": 23698, "start": 246.82, "end": 249.94, "text": " So in particular, A dot grad is 138.", "tokens": [50857, 407, 294, 1729, 11, 316, 5893, 2771, 307, 3705, 23, 13, 51013], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 73, "seek": 23698, "start": 250.06, "end": 253.98, "text": " So if we slightly nudge A and make it slightly larger,", "tokens": [51019, 407, 498, 321, 4748, 297, 16032, 316, 293, 652, 309, 4748, 4833, 11, 51215], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 74, "seek": 23698, "start": 254.95999999999998, "end": 257.48, "text": " 138 is telling us that G will grow", "tokens": [51264, 3705, 23, 307, 3585, 505, 300, 460, 486, 1852, 51390], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 75, "seek": 23698, "start": 257.48, "end": 260.14, "text": " and the slope of that growth is going to be 138.", "tokens": [51390, 293, 264, 13525, 295, 300, 4599, 307, 516, 281, 312, 3705, 23, 13, 51523], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 76, "seek": 23698, "start": 260.88, "end": 263.7, "text": " And the slope of growth of B is going to be 645.", "tokens": [51560, 400, 264, 13525, 295, 4599, 295, 363, 307, 516, 281, 312, 1386, 8465, 13, 51701], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 77, "seek": 23698, "start": 264.32, "end": 266.78, "text": " So that's going to tell us about how G will respond,", "tokens": [51732, 407, 300, 311, 516, 281, 980, 505, 466, 577, 460, 486, 4196, 11, 51855], "temperature": 0.0, "avg_logprob": -0.1557352158331102, "compression_ratio": 1.7290836653386454, "no_speech_prob": 0.0003840486751869321}, {"id": 78, "seek": 26698, "start": 266.98, "end": 269.16, "text": " if A and B get tweaked a tiny amount", "tokens": [50365, 498, 316, 293, 363, 483, 6986, 7301, 257, 5870, 2372, 50474], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 79, "seek": 26698, "start": 269.16, "end": 271.40000000000003, "text": " in a positive direction, okay?", "tokens": [50474, 294, 257, 3353, 3513, 11, 1392, 30, 50586], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 80, "seek": 26698, "start": 273.3, "end": 276.22, "text": " Now, you might be confused about what this expression is", "tokens": [50681, 823, 11, 291, 1062, 312, 9019, 466, 437, 341, 6114, 307, 50827], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 81, "seek": 26698, "start": 276.22, "end": 277.06, "text": " that we built out here.", "tokens": [50827, 300, 321, 3094, 484, 510, 13, 50869], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 82, "seek": 26698, "start": 277.20000000000005, "end": 279.36, "text": " And this expression, by the way, is completely meaningless.", "tokens": [50876, 400, 341, 6114, 11, 538, 264, 636, 11, 307, 2584, 33232, 13, 50984], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 83, "seek": 26698, "start": 279.64000000000004, "end": 280.72, "text": " I just made it up.", "tokens": [50998, 286, 445, 1027, 309, 493, 13, 51052], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 84, "seek": 26698, "start": 280.82, "end": 282.76, "text": " I'm just flexing about the kinds of operations", "tokens": [51057, 286, 478, 445, 5896, 278, 466, 264, 3685, 295, 7705, 51154], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 85, "seek": 26698, "start": 282.76, "end": 284.36, "text": " that are supported by micrograd.", "tokens": [51154, 300, 366, 8104, 538, 4532, 7165, 13, 51234], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 86, "seek": 26698, "start": 284.96000000000004, "end": 287.0, "text": " What we actually really care about are neural networks.", "tokens": [51264, 708, 321, 767, 534, 1127, 466, 366, 18161, 9590, 13, 51366], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 87, "seek": 26698, "start": 287.46000000000004, "end": 288.70000000000005, "text": " But it turns out that neural networks", "tokens": [51389, 583, 309, 4523, 484, 300, 18161, 9590, 51451], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 88, "seek": 26698, "start": 288.70000000000005, "end": 291.52000000000004, "text": " are just mathematical expressions, just like this one,", "tokens": [51451, 366, 445, 18894, 15277, 11, 445, 411, 341, 472, 11, 51592], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 89, "seek": 26698, "start": 291.78000000000003, "end": 293.72, "text": " but actually a slightly bit less crazy even.", "tokens": [51605, 457, 767, 257, 4748, 857, 1570, 3219, 754, 13, 51702], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 90, "seek": 26698, "start": 294.82, "end": 296.72, "text": " Neural networks are just a mathematical expression,", "tokens": [51757, 1734, 1807, 9590, 366, 445, 257, 18894, 6114, 11, 51852], "temperature": 0.0, "avg_logprob": -0.17252510828329315, "compression_ratio": 1.8372093023255813, "no_speech_prob": 0.00011492981138871983}, {"id": 91, "seek": 29698, "start": 297.1, "end": 299.5, "text": " they take the input data as an input,", "tokens": [50371, 436, 747, 264, 4846, 1412, 382, 364, 4846, 11, 50491], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 92, "seek": 29698, "start": 299.8, "end": 301.98, "text": " and they take the weights of a neural network as an input,", "tokens": [50506, 293, 436, 747, 264, 17443, 295, 257, 18161, 3209, 382, 364, 4846, 11, 50615], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 93, "seek": 29698, "start": 302.34000000000003, "end": 303.5, "text": " and it's a mathematical expression,", "tokens": [50633, 293, 309, 311, 257, 18894, 6114, 11, 50691], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 94, "seek": 29698, "start": 303.86, "end": 306.3, "text": " and the output are your predictions of your neural net", "tokens": [50709, 293, 264, 5598, 366, 428, 21264, 295, 428, 18161, 2533, 50831], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 95, "seek": 29698, "start": 306.3, "end": 307.48, "text": " or the loss function.", "tokens": [50831, 420, 264, 4470, 2445, 13, 50890], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 96, "seek": 29698, "start": 307.62, "end": 308.40000000000003, "text": " We'll see this in a bit.", "tokens": [50897, 492, 603, 536, 341, 294, 257, 857, 13, 50936], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 97, "seek": 29698, "start": 309.0, "end": 311.26, "text": " But basically, neural networks just happen to be", "tokens": [50966, 583, 1936, 11, 18161, 9590, 445, 1051, 281, 312, 51079], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 98, "seek": 29698, "start": 311.26, "end": 313.20000000000005, "text": " a certain class of mathematical expressions.", "tokens": [51079, 257, 1629, 1508, 295, 18894, 15277, 13, 51176], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 99, "seek": 29698, "start": 313.86, "end": 316.54, "text": " But backpropagation is actually significantly more general.", "tokens": [51209, 583, 646, 79, 1513, 559, 399, 307, 767, 10591, 544, 2674, 13, 51343], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 100, "seek": 29698, "start": 316.84000000000003, "end": 319.04, "text": " It doesn't actually care about neural networks at all.", "tokens": [51358, 467, 1177, 380, 767, 1127, 466, 18161, 9590, 412, 439, 13, 51468], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 101, "seek": 29698, "start": 319.18, "end": 321.62, "text": " It only cares about arbitrary mathematical expressions.", "tokens": [51475, 467, 787, 12310, 466, 23211, 18894, 15277, 13, 51597], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 102, "seek": 29698, "start": 322.04, "end": 324.14000000000004, "text": " And then we happen to use that machinery", "tokens": [51618, 400, 550, 321, 1051, 281, 764, 300, 27302, 51723], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 103, "seek": 29698, "start": 324.14000000000004, "end": 325.98, "text": " for training of neural networks.", "tokens": [51723, 337, 3097, 295, 18161, 9590, 13, 51815], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 104, "seek": 29698, "start": 326.5, "end": 326.92, "text": " Now, one more.", "tokens": [51841, 823, 11, 472, 544, 13, 51862], "temperature": 0.0, "avg_logprob": -0.1980896385348573, "compression_ratio": 2.027586206896552, "no_speech_prob": 4.587012153933756e-05}, {"id": 105, "seek": 32698, "start": 326.98, "end": 328.48, "text": " Another note I would like to make at this stage", "tokens": [50365, 3996, 3637, 286, 576, 411, 281, 652, 412, 341, 3233, 50440], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 106, "seek": 32698, "start": 328.48, "end": 329.42, "text": " is that, as you see here,", "tokens": [50440, 307, 300, 11, 382, 291, 536, 510, 11, 50487], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 107, "seek": 32698, "start": 329.54, "end": 331.92, "text": " micrograd is a scalar-valued autograd engine.", "tokens": [50493, 4532, 7165, 307, 257, 39684, 12, 3337, 5827, 1476, 664, 6206, 2848, 13, 50612], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 108, "seek": 32698, "start": 332.34000000000003, "end": 335.22, "text": " So it's working on the level of individual scalars,", "tokens": [50633, 407, 309, 311, 1364, 322, 264, 1496, 295, 2609, 15664, 685, 11, 50777], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 109, "seek": 32698, "start": 335.3, "end": 336.44, "text": " like negative four and two.", "tokens": [50781, 411, 3671, 1451, 293, 732, 13, 50838], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 110, "seek": 32698, "start": 336.82, "end": 337.74, "text": " And we're taking neural nets", "tokens": [50857, 400, 321, 434, 1940, 18161, 36170, 50903], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 111, "seek": 32698, "start": 337.74, "end": 338.6, "text": " and we're breaking them down", "tokens": [50903, 293, 321, 434, 7697, 552, 760, 50946], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 112, "seek": 32698, "start": 338.6, "end": 341.22, "text": " all the way to these atoms of individual scalars", "tokens": [50946, 439, 264, 636, 281, 613, 16871, 295, 2609, 15664, 685, 51077], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 113, "seek": 32698, "start": 341.22, "end": 342.76, "text": " and all the little pluses and times,", "tokens": [51077, 293, 439, 264, 707, 1804, 279, 293, 1413, 11, 51154], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 114, "seek": 32698, "start": 342.92, "end": 344.20000000000005, "text": " and it's just excessive.", "tokens": [51162, 293, 309, 311, 445, 22704, 13, 51226], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 115, "seek": 32698, "start": 344.90000000000003, "end": 345.54, "text": " And so, obviously,", "tokens": [51261, 400, 370, 11, 2745, 11, 51293], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 116, "seek": 32698, "start": 345.66, "end": 347.58000000000004, "text": " you would never be doing any of this in production.", "tokens": [51299, 291, 576, 1128, 312, 884, 604, 295, 341, 294, 4265, 13, 51395], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 117, "seek": 32698, "start": 347.92, "end": 349.84000000000003, "text": " It's really just done for pedagogical reasons", "tokens": [51412, 467, 311, 534, 445, 1096, 337, 5670, 31599, 804, 4112, 51508], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 118, "seek": 32698, "start": 349.84000000000003, "end": 351.74, "text": " because it allows us to not have to deal", "tokens": [51508, 570, 309, 4045, 505, 281, 406, 362, 281, 2028, 51603], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 119, "seek": 32698, "start": 351.74, "end": 353.64000000000004, "text": " with these n-dimensional tensors", "tokens": [51603, 365, 613, 297, 12, 18759, 10688, 830, 51698], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 120, "seek": 32698, "start": 353.64000000000004, "end": 356.40000000000003, "text": " that you would use in a modern deep neural network library.", "tokens": [51698, 300, 291, 576, 764, 294, 257, 4363, 2452, 18161, 3209, 6405, 13, 51836], "temperature": 0.0, "avg_logprob": -0.15796362595751107, "compression_ratio": 1.7994186046511629, "no_speech_prob": 0.006534254644066095}, {"id": 121, "seek": 35698, "start": 356.98, "end": 359.52000000000004, "text": " So this is really done so that you understand", "tokens": [50365, 407, 341, 307, 534, 1096, 370, 300, 291, 1223, 50492], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 122, "seek": 35698, "start": 359.52000000000004, "end": 361.3, "text": " and refactor out the background application", "tokens": [50492, 293, 1895, 15104, 484, 264, 3678, 3861, 50581], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 123, "seek": 35698, "start": 361.3, "end": 364.28000000000003, "text": " and chain rule and understanding of neural training.", "tokens": [50581, 293, 5021, 4978, 293, 3701, 295, 18161, 3097, 13, 50730], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 124, "seek": 35698, "start": 364.96000000000004, "end": 367.36, "text": " And then, if you actually want to train bigger networks,", "tokens": [50764, 400, 550, 11, 498, 291, 767, 528, 281, 3847, 3801, 9590, 11, 50884], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 125, "seek": 35698, "start": 367.54, "end": 368.8, "text": " you have to be using these tensors,", "tokens": [50893, 291, 362, 281, 312, 1228, 613, 10688, 830, 11, 50956], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 126, "seek": 35698, "start": 369.08000000000004, "end": 370.24, "text": " but none of the math changes.", "tokens": [50970, 457, 6022, 295, 264, 5221, 2962, 13, 51028], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 127, "seek": 35698, "start": 370.38, "end": 371.76, "text": " This is done purely for efficiency.", "tokens": [51035, 639, 307, 1096, 17491, 337, 10493, 13, 51104], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 128, "seek": 35698, "start": 372.36, "end": 375.20000000000005, "text": " We are basically taking all the scalar values,", "tokens": [51134, 492, 366, 1936, 1940, 439, 264, 39684, 4190, 11, 51276], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 129, "seek": 35698, "start": 375.52000000000004, "end": 376.98, "text": " we're packaging them up into tensors,", "tokens": [51292, 321, 434, 16836, 552, 493, 666, 10688, 830, 11, 51365], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 130, "seek": 35698, "start": 377.26, "end": 379.02000000000004, "text": " which are just arrays of these scalars.", "tokens": [51379, 597, 366, 445, 41011, 295, 613, 15664, 685, 13, 51467], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 131, "seek": 35698, "start": 379.44, "end": 381.72, "text": " And then, because we have these large arrays,", "tokens": [51488, 400, 550, 11, 570, 321, 362, 613, 2416, 41011, 11, 51602], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 132, "seek": 35698, "start": 381.72, "end": 383.86, "text": " we're making operations on those large arrays", "tokens": [51602, 321, 434, 1455, 7705, 322, 729, 2416, 41011, 51709], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 133, "seek": 35698, "start": 383.86, "end": 386.70000000000005, "text": " that allows us to take advantage of the parallelism", "tokens": [51709, 300, 4045, 505, 281, 747, 5002, 295, 264, 8952, 1434, 51851], "temperature": 0.0, "avg_logprob": -0.1980571213302079, "compression_ratio": 1.832797427652733, "no_speech_prob": 0.0001745728077366948}, {"id": 134, "seek": 38670, "start": 386.7, "end": 387.2, "text": " in a computer.", "tokens": [50365, 294, 257, 3820, 13, 50390], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 135, "seek": 38670, "start": 387.84, "end": 390.0, "text": " And all those operations can be done in parallel,", "tokens": [50422, 400, 439, 729, 7705, 393, 312, 1096, 294, 8952, 11, 50530], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 136, "seek": 38670, "start": 390.28, "end": 391.88, "text": " and then the whole thing runs faster.", "tokens": [50544, 293, 550, 264, 1379, 551, 6676, 4663, 13, 50624], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 137, "seek": 38670, "start": 392.32, "end": 393.58, "text": " But really, none of the math changes,", "tokens": [50646, 583, 534, 11, 6022, 295, 264, 5221, 2962, 11, 50709], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 138, "seek": 38670, "start": 393.74, "end": 394.97999999999996, "text": " and they're done purely for efficiency.", "tokens": [50717, 293, 436, 434, 1096, 17491, 337, 10493, 13, 50779], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 139, "seek": 38670, "start": 395.4, "end": 397.21999999999997, "text": " So I don't think that it's pedagogically useful", "tokens": [50800, 407, 286, 500, 380, 519, 300, 309, 311, 5670, 31599, 984, 4420, 50891], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 140, "seek": 38670, "start": 397.21999999999997, "end": 399.08, "text": " to be dealing with tensors from scratch.", "tokens": [50891, 281, 312, 6260, 365, 10688, 830, 490, 8459, 13, 50984], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 141, "seek": 38670, "start": 399.68, "end": 402.03999999999996, "text": " And that's why I fundamentally wrote micrograd,", "tokens": [51014, 400, 300, 311, 983, 286, 17879, 4114, 4532, 7165, 11, 51132], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 142, "seek": 38670, "start": 402.36, "end": 403.91999999999996, "text": " because you can understand how things work", "tokens": [51148, 570, 291, 393, 1223, 577, 721, 589, 51226], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 143, "seek": 38670, "start": 403.91999999999996, "end": 405.36, "text": " at the fundamental level,", "tokens": [51226, 412, 264, 8088, 1496, 11, 51298], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 144, "seek": 38670, "start": 405.71999999999997, "end": 407.24, "text": " and then you can speed it up later.", "tokens": [51316, 293, 550, 291, 393, 3073, 309, 493, 1780, 13, 51392], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 145, "seek": 38670, "start": 408.15999999999997, "end": 409.15999999999997, "text": " Okay, so here's the fun part.", "tokens": [51438, 1033, 11, 370, 510, 311, 264, 1019, 644, 13, 51488], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 146, "seek": 38670, "start": 409.5, "end": 411.58, "text": " My claim is that micrograd is what you need", "tokens": [51505, 1222, 3932, 307, 300, 4532, 7165, 307, 437, 291, 643, 51609], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 147, "seek": 38670, "start": 411.58, "end": 412.59999999999997, "text": " to train neural networks,", "tokens": [51609, 281, 3847, 18161, 9590, 11, 51660], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 148, "seek": 38670, "start": 412.59999999999997, "end": 414.3, "text": " and everything else is just efficiency.", "tokens": [51660, 293, 1203, 1646, 307, 445, 10493, 13, 51745], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 149, "seek": 38670, "start": 414.91999999999996, "end": 416.28, "text": " So you'd think that micrograd would be", "tokens": [51776, 407, 291, 1116, 519, 300, 4532, 7165, 576, 312, 51844], "temperature": 0.0, "avg_logprob": -0.15867429826317764, "compression_ratio": 1.8048048048048049, "no_speech_prob": 0.015403524972498417}, {"id": 150, "seek": 41670, "start": 416.7, "end": 418.24, "text": " a very complex piece of code.", "tokens": [50365, 257, 588, 3997, 2522, 295, 3089, 13, 50442], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 151, "seek": 41670, "start": 418.5, "end": 420.96, "text": " And that turns out to not be the case.", "tokens": [50455, 400, 300, 4523, 484, 281, 406, 312, 264, 1389, 13, 50578], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 152, "seek": 41670, "start": 421.42, "end": 423.03999999999996, "text": " So if we just go to micrograd,", "tokens": [50601, 407, 498, 321, 445, 352, 281, 4532, 7165, 11, 50682], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 153, "seek": 41670, "start": 423.53999999999996, "end": 427.03999999999996, "text": " and you'll see that there's only two files here in micrograd.", "tokens": [50707, 293, 291, 603, 536, 300, 456, 311, 787, 732, 7098, 510, 294, 4532, 7165, 13, 50882], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 154, "seek": 41670, "start": 427.34, "end": 428.53999999999996, "text": " This is the actual engine.", "tokens": [50897, 639, 307, 264, 3539, 2848, 13, 50957], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 155, "seek": 41670, "start": 428.78, "end": 430.28, "text": " It doesn't know anything about neural nets.", "tokens": [50969, 467, 1177, 380, 458, 1340, 466, 18161, 36170, 13, 51044], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 156, "seek": 41670, "start": 430.58, "end": 432.58, "text": " And this is the entire neural nets library", "tokens": [51059, 400, 341, 307, 264, 2302, 18161, 36170, 6405, 51159], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 157, "seek": 41670, "start": 433.15999999999997, "end": 434.15999999999997, "text": " on top of micrograd.", "tokens": [51188, 322, 1192, 295, 4532, 7165, 13, 51238], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 158, "seek": 41670, "start": 434.36, "end": 437.08, "text": " So engine and nn.py.", "tokens": [51248, 407, 2848, 293, 297, 77, 13, 8200, 13, 51384], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 159, "seek": 41670, "start": 437.62, "end": 440.76, "text": " So the actual backpropagation autograd engine", "tokens": [51411, 407, 264, 3539, 646, 79, 1513, 559, 399, 1476, 664, 6206, 2848, 51568], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 160, "seek": 41670, "start": 441.65999999999997, "end": 443.32, "text": " that gives you the power of neural networks", "tokens": [51613, 300, 2709, 291, 264, 1347, 295, 18161, 9590, 51696], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 161, "seek": 41670, "start": 443.76, "end": 444.76, "text": " is literally", "tokens": [51718, 307, 3736, 51768], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 162, "seek": 41670, "start": 444.84, "end": 445.84, "text": " 100 lines of code.", "tokens": [51772, 2319, 3876, 295, 3089, 13, 51822], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 163, "seek": 41670, "start": 445.84, "end": 446.4, "text": " 100 lines of code.", "tokens": [51822, 2319, 3876, 295, 3089, 13, 51850], "temperature": 0.0, "avg_logprob": -0.4648211342947824, "compression_ratio": 1.7821011673151752, "no_speech_prob": 0.00012074856203980744}, {"id": 164, "seek": 44640, "start": 446.4, "end": 448.4, "text": " Of, like, very simple Python,", "tokens": [50365, 2720, 11, 411, 11, 588, 2199, 15329, 11, 50465], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 165, "seek": 44640, "start": 448.4, "end": 450.4, "text": " which we'll understand by the end of this lecture.", "tokens": [50465, 597, 321, 603, 1223, 538, 264, 917, 295, 341, 7991, 13, 50565], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 166, "seek": 44640, "start": 450.4, "end": 452.4, "text": " And then nn.py,", "tokens": [50565, 400, 550, 297, 77, 13, 8200, 11, 50665], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 167, "seek": 44640, "start": 452.4, "end": 454.4, "text": " this neural network library", "tokens": [50665, 341, 18161, 3209, 6405, 50765], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 168, "seek": 44640, "start": 454.4, "end": 456.4, "text": " built on top of the autograd engine,", "tokens": [50765, 3094, 322, 1192, 295, 264, 1476, 664, 6206, 2848, 11, 50865], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 169, "seek": 44640, "start": 456.4, "end": 458.4, "text": " is like a joke.", "tokens": [50865, 307, 411, 257, 7647, 13, 50965], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 170, "seek": 44640, "start": 458.4, "end": 460.4, "text": " It's like, we have to define what is a neuron,", "tokens": [50965, 467, 311, 411, 11, 321, 362, 281, 6964, 437, 307, 257, 34090, 11, 51065], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 171, "seek": 44640, "start": 460.4, "end": 462.4, "text": " and then we have to define what is a layer of neurons,", "tokens": [51065, 293, 550, 321, 362, 281, 6964, 437, 307, 257, 4583, 295, 22027, 11, 51165], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 172, "seek": 44640, "start": 462.4, "end": 464.4, "text": " and then we define what is a multilayer perceptron,", "tokens": [51165, 293, 550, 321, 6964, 437, 307, 257, 2120, 388, 11167, 43276, 2044, 11, 51265], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 173, "seek": 44640, "start": 464.4, "end": 466.4, "text": " which is just a sequence of layers of neurons.", "tokens": [51265, 597, 307, 445, 257, 8310, 295, 7914, 295, 22027, 13, 51365], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 174, "seek": 44640, "start": 466.4, "end": 468.4, "text": " And so it's just a total joke.", "tokens": [51365, 400, 370, 309, 311, 445, 257, 3217, 7647, 13, 51465], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 175, "seek": 44640, "start": 468.4, "end": 470.4, "text": " So basically,", "tokens": [51465, 407, 1936, 11, 51565], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 176, "seek": 44640, "start": 470.4, "end": 472.4, "text": " there's a lot of power", "tokens": [51565, 456, 311, 257, 688, 295, 1347, 51665], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 177, "seek": 44640, "start": 472.4, "end": 474.4, "text": " that comes from only 150 lines of code.", "tokens": [51665, 300, 1487, 490, 787, 8451, 3876, 295, 3089, 13, 51765], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 178, "seek": 44640, "start": 474.4, "end": 476.2, "text": " And then we have to define what is a multilayer perceptron,", "tokens": [51765, 400, 550, 321, 362, 281, 6964, 437, 307, 257, 2120, 388, 11167, 43276, 2044, 11, 51855], "temperature": 0.0, "avg_logprob": -0.2975435711088635, "compression_ratio": 1.9640287769784173, "no_speech_prob": 0.003399294801056385}, {"id": 179, "seek": 47620, "start": 476.2, "end": 478.2, "text": " which is 150 lines of code.", "tokens": [50365, 597, 307, 8451, 3876, 295, 3089, 13, 50465], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 180, "seek": 47620, "start": 478.2, "end": 480.2, "text": " And that's all you need to understand", "tokens": [50465, 400, 300, 311, 439, 291, 643, 281, 1223, 50565], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 181, "seek": 47620, "start": 480.2, "end": 482.2, "text": " to understand neural network training.", "tokens": [50565, 281, 1223, 18161, 3209, 3097, 13, 50665], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 182, "seek": 47620, "start": 482.2, "end": 484.2, "text": " And everything else is just efficiency.", "tokens": [50665, 400, 1203, 1646, 307, 445, 10493, 13, 50765], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 183, "seek": 47620, "start": 484.2, "end": 486.2, "text": " And of course, there's a lot to efficiency.", "tokens": [50765, 400, 295, 1164, 11, 456, 311, 257, 688, 281, 10493, 13, 50865], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 184, "seek": 47620, "start": 486.2, "end": 488.2, "text": " But fundamentally, that's all that's happening.", "tokens": [50865, 583, 17879, 11, 300, 311, 439, 300, 311, 2737, 13, 50965], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 185, "seek": 47620, "start": 488.2, "end": 490.2, "text": " Okay, so now let's dive right in", "tokens": [50965, 1033, 11, 370, 586, 718, 311, 9192, 558, 294, 51065], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 186, "seek": 47620, "start": 490.2, "end": 492.2, "text": " and implement micrograd step by step.", "tokens": [51065, 293, 4445, 4532, 7165, 1823, 538, 1823, 13, 51165], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 187, "seek": 47620, "start": 492.2, "end": 494.2, "text": " The first thing I'd like to do is I'd like to make sure", "tokens": [51165, 440, 700, 551, 286, 1116, 411, 281, 360, 307, 286, 1116, 411, 281, 652, 988, 51265], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 188, "seek": 47620, "start": 494.2, "end": 496.2, "text": " that you have a very good understanding, intuitively,", "tokens": [51265, 300, 291, 362, 257, 588, 665, 3701, 11, 46506, 11, 51365], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 189, "seek": 47620, "start": 496.2, "end": 498.2, "text": " of what a derivative is", "tokens": [51365, 295, 437, 257, 13760, 307, 51465], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 190, "seek": 47620, "start": 498.2, "end": 500.2, "text": " and exactly what information it gives you.", "tokens": [51465, 293, 2293, 437, 1589, 309, 2709, 291, 13, 51565], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 191, "seek": 47620, "start": 500.2, "end": 502.2, "text": " So let's start with some basic imports", "tokens": [51565, 407, 718, 311, 722, 365, 512, 3875, 41596, 51665], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 192, "seek": 47620, "start": 502.2, "end": 504.2, "text": " that I copy-paste in every Jupyter Notebook, always.", "tokens": [51665, 300, 286, 5055, 12, 79, 9079, 294, 633, 22125, 88, 391, 11633, 2939, 11, 1009, 13, 51765], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 193, "seek": 47620, "start": 504.2, "end": 506.2, "text": " And let's define a derivative.", "tokens": [51765, 400, 718, 311, 6964, 257, 13760, 13, 51865], "temperature": 0.0, "avg_logprob": -0.12546510581510611, "compression_ratio": 1.7594202898550724, "no_speech_prob": 0.0006084565538913012}, {"id": 194, "seek": 50620, "start": 506.2, "end": 508.2, "text": " So let's define a function,", "tokens": [50365, 407, 718, 311, 6964, 257, 2445, 11, 50465], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 195, "seek": 50620, "start": 508.2, "end": 510.2, "text": " a scalar-valued function,", "tokens": [50465, 257, 39684, 12, 3337, 5827, 2445, 11, 50565], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 196, "seek": 50620, "start": 510.2, "end": 512.2, "text": " f of x, as follows.", "tokens": [50565, 283, 295, 2031, 11, 382, 10002, 13, 50665], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 197, "seek": 50620, "start": 512.2, "end": 514.2, "text": " So I just made this up randomly.", "tokens": [50665, 407, 286, 445, 1027, 341, 493, 16979, 13, 50765], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 198, "seek": 50620, "start": 514.2, "end": 516.2, "text": " I just wanted a scalar-valued function", "tokens": [50765, 286, 445, 1415, 257, 39684, 12, 3337, 5827, 2445, 50865], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 199, "seek": 50620, "start": 516.2, "end": 518.2, "text": " that takes a single scalar x", "tokens": [50865, 300, 2516, 257, 2167, 39684, 2031, 50965], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 200, "seek": 50620, "start": 518.2, "end": 520.2, "text": " and returns a single scalar y.", "tokens": [50965, 293, 11247, 257, 2167, 39684, 288, 13, 51065], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 201, "seek": 50620, "start": 520.2, "end": 522.2, "text": " And we can call this function, of course,", "tokens": [51065, 400, 321, 393, 818, 341, 2445, 11, 295, 1164, 11, 51165], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 202, "seek": 50620, "start": 522.2, "end": 524.2, "text": " so we can pass in, say, 3.0", "tokens": [51165, 370, 321, 393, 1320, 294, 11, 584, 11, 805, 13, 15, 51265], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 203, "seek": 50620, "start": 524.2, "end": 526.2, "text": " and get 20 back.", "tokens": [51265, 293, 483, 945, 646, 13, 51365], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 204, "seek": 50620, "start": 526.2, "end": 528.2, "text": " Now, we can also plot this function", "tokens": [51365, 823, 11, 321, 393, 611, 7542, 341, 2445, 51465], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 205, "seek": 50620, "start": 528.2, "end": 530.2, "text": " to get a sense of its shape.", "tokens": [51465, 281, 483, 257, 2020, 295, 1080, 3909, 13, 51565], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 206, "seek": 50620, "start": 530.2, "end": 532.2, "text": " You can tell from the mathematical expression", "tokens": [51565, 509, 393, 980, 490, 264, 18894, 6114, 51665], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 207, "seek": 50620, "start": 532.2, "end": 534.2, "text": " that this is probably a parabola.", "tokens": [51665, 300, 341, 307, 1391, 257, 45729, 4711, 13, 51765], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 208, "seek": 50620, "start": 534.2, "end": 536.2, "text": " It's a quadratic.", "tokens": [51765, 467, 311, 257, 37262, 13, 51865], "temperature": 0.0, "avg_logprob": -0.07582418123881023, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.0013212814228609204}, {"id": 209, "seek": 53620, "start": 536.2, "end": 538.2, "text": " It's a scalar-value that we can feed in", "tokens": [50365, 467, 311, 257, 39684, 12, 29155, 300, 321, 393, 3154, 294, 50465], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 210, "seek": 53620, "start": 538.2, "end": 540.2, "text": " using, for example, a range", "tokens": [50465, 1228, 11, 337, 1365, 11, 257, 3613, 50565], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 211, "seek": 53620, "start": 540.2, "end": 542.2, "text": " from negative 5 to 5", "tokens": [50565, 490, 3671, 1025, 281, 1025, 50665], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 212, "seek": 53620, "start": 542.2, "end": 544.2, "text": " in steps of 0.25.", "tokens": [50665, 294, 4439, 295, 1958, 13, 6074, 13, 50765], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 213, "seek": 53620, "start": 544.2, "end": 546.2, "text": " So x is just", "tokens": [50765, 407, 2031, 307, 445, 50865], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 214, "seek": 53620, "start": 546.2, "end": 548.2, "text": " from negative 5 to 5", "tokens": [50865, 490, 3671, 1025, 281, 1025, 50965], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 215, "seek": 53620, "start": 548.2, "end": 550.2, "text": " not including 5", "tokens": [50965, 406, 3009, 1025, 51065], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 216, "seek": 53620, "start": 550.2, "end": 552.2, "text": " in steps of 0.25.", "tokens": [51065, 294, 4439, 295, 1958, 13, 6074, 13, 51165], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 217, "seek": 53620, "start": 552.2, "end": 554.2, "text": " And we can actually call this function", "tokens": [51165, 400, 321, 393, 767, 818, 341, 2445, 51265], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 218, "seek": 53620, "start": 554.2, "end": 556.2, "text": " on this numpy array as well.", "tokens": [51265, 322, 341, 1031, 8200, 10225, 382, 731, 13, 51365], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 219, "seek": 53620, "start": 556.2, "end": 558.2, "text": " So we get a set of y's", "tokens": [51365, 407, 321, 483, 257, 992, 295, 288, 311, 51465], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 220, "seek": 53620, "start": 558.2, "end": 560.2, "text": " if we call f on x.", "tokens": [51465, 498, 321, 818, 283, 322, 2031, 13, 51565], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 221, "seek": 53620, "start": 560.2, "end": 562.2, "text": " And these y's are basically", "tokens": [51565, 400, 613, 288, 311, 366, 1936, 51665], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 222, "seek": 53620, "start": 562.2, "end": 564.2, "text": " also applying the function", "tokens": [51665, 611, 9275, 264, 2445, 51765], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 223, "seek": 53620, "start": 564.2, "end": 566.2, "text": " on every one of these elements independently.", "tokens": [51765, 322, 633, 472, 295, 613, 4959, 21761, 13, 51865], "temperature": 0.0, "avg_logprob": -0.1048489362001419, "compression_ratio": 1.696035242290749, "no_speech_prob": 0.000860589905641973}, {"id": 224, "seek": 56620, "start": 566.2, "end": 568.2, "text": " Let's talk about this using Mathplotlib.", "tokens": [50365, 961, 311, 751, 466, 341, 1228, 15776, 564, 310, 38270, 13, 50465], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 225, "seek": 56620, "start": 568.2, "end": 570.2, "text": " So plt.plot, x's and y's", "tokens": [50465, 407, 499, 83, 13, 564, 310, 11, 2031, 311, 293, 288, 311, 50565], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 226, "seek": 56620, "start": 570.2, "end": 572.2, "text": " and we get a nice parabola.", "tokens": [50565, 293, 321, 483, 257, 1481, 45729, 4711, 13, 50665], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 227, "seek": 56620, "start": 572.2, "end": 574.2, "text": " So previously here we fed in 3.0", "tokens": [50665, 407, 8046, 510, 321, 4636, 294, 805, 13, 15, 50765], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 228, "seek": 56620, "start": 574.2, "end": 576.2, "text": " somewhere here, and we received", "tokens": [50765, 4079, 510, 11, 293, 321, 4613, 50865], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 229, "seek": 56620, "start": 576.2, "end": 578.2, "text": " 20 back, which is here", "tokens": [50865, 945, 646, 11, 597, 307, 510, 50965], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 230, "seek": 56620, "start": 578.2, "end": 580.2, "text": " the y coordinate.", "tokens": [50965, 264, 288, 15670, 13, 51065], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 231, "seek": 56620, "start": 580.2, "end": 582.2, "text": " So now I'd like to think through", "tokens": [51065, 407, 586, 286, 1116, 411, 281, 519, 807, 51165], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 232, "seek": 56620, "start": 582.2, "end": 584.2, "text": " what is the derivative of this function", "tokens": [51165, 437, 307, 264, 13760, 295, 341, 2445, 51265], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 233, "seek": 56620, "start": 584.2, "end": 586.2, "text": " at any single input point x?", "tokens": [51265, 412, 604, 2167, 4846, 935, 2031, 30, 51365], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 234, "seek": 56620, "start": 586.2, "end": 588.2, "text": " So what is the derivative at different points x", "tokens": [51365, 407, 437, 307, 264, 13760, 412, 819, 2793, 2031, 51465], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 235, "seek": 56620, "start": 588.2, "end": 590.2, "text": " of this function?", "tokens": [51465, 295, 341, 2445, 30, 51565], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 236, "seek": 56620, "start": 590.2, "end": 592.2, "text": " Now if you remember back to your calculus class", "tokens": [51565, 823, 498, 291, 1604, 646, 281, 428, 33400, 1508, 51665], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 237, "seek": 56620, "start": 592.2, "end": 594.2, "text": " you've probably derived derivatives.", "tokens": [51665, 291, 600, 1391, 18949, 33733, 13, 51765], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 238, "seek": 56620, "start": 594.2, "end": 596.2, "text": " So we take this mathematical expression", "tokens": [51765, 407, 321, 747, 341, 18894, 6114, 51865], "temperature": 0.0, "avg_logprob": -0.11930992553284119, "compression_ratio": 1.696551724137931, "no_speech_prob": 0.0005840967642143369}, {"id": 239, "seek": 59620, "start": 596.2, "end": 598.2, "text": " for x plus 5, and you would write it out", "tokens": [50365, 337, 2031, 1804, 1025, 11, 293, 291, 576, 2464, 309, 484, 50465], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 240, "seek": 59620, "start": 598.2, "end": 600.2, "text": " on a piece of paper and you would", "tokens": [50465, 322, 257, 2522, 295, 3035, 293, 291, 576, 50565], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 241, "seek": 59620, "start": 600.2, "end": 602.2, "text": " apply the product rule and all the other rules", "tokens": [50565, 3079, 264, 1674, 4978, 293, 439, 264, 661, 4474, 50665], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 242, "seek": 59620, "start": 602.2, "end": 604.2, "text": " and derive the mathematical expression", "tokens": [50665, 293, 28446, 264, 18894, 6114, 50765], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 243, "seek": 59620, "start": 604.2, "end": 606.2, "text": " of the great derivative of the original function.", "tokens": [50765, 295, 264, 869, 13760, 295, 264, 3380, 2445, 13, 50865], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 244, "seek": 59620, "start": 606.2, "end": 608.2, "text": " And then you could plug in different x's", "tokens": [50865, 400, 550, 291, 727, 5452, 294, 819, 2031, 311, 50965], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 245, "seek": 59620, "start": 608.2, "end": 610.2, "text": " and see what the derivative is.", "tokens": [50965, 293, 536, 437, 264, 13760, 307, 13, 51065], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 246, "seek": 59620, "start": 610.2, "end": 612.2, "text": " We're not going to actually do that", "tokens": [51065, 492, 434, 406, 516, 281, 767, 360, 300, 51165], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 247, "seek": 59620, "start": 612.2, "end": 614.2, "text": " because no one in neural networks", "tokens": [51165, 570, 572, 472, 294, 18161, 9590, 51265], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 248, "seek": 59620, "start": 614.2, "end": 616.2, "text": " actually writes out the expression for the neural net.", "tokens": [51265, 767, 13657, 484, 264, 6114, 337, 264, 18161, 2533, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 249, "seek": 59620, "start": 616.2, "end": 618.2, "text": " It would be a massive expression.", "tokens": [51365, 467, 576, 312, 257, 5994, 6114, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 250, "seek": 59620, "start": 618.2, "end": 620.2, "text": " It would be thousands, tens of thousands of terms.", "tokens": [51465, 467, 576, 312, 5383, 11, 10688, 295, 5383, 295, 2115, 13, 51565], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 251, "seek": 59620, "start": 620.2, "end": 622.2, "text": " No one actually derives the derivative", "tokens": [51565, 883, 472, 767, 1163, 1539, 264, 13760, 51665], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 252, "seek": 59620, "start": 622.2, "end": 624.2, "text": " of course.", "tokens": [51665, 295, 1164, 13, 51765], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 253, "seek": 59620, "start": 624.2, "end": 626.2, "text": " And so we're not going to take this kind of symbolic approach", "tokens": [51765, 400, 370, 321, 434, 406, 516, 281, 747, 341, 733, 295, 25755, 3109, 51865], "temperature": 0.0, "avg_logprob": -0.08659580156400606, "compression_ratio": 1.9453376205787782, "no_speech_prob": 0.000328317895764485}, {"id": 254, "seek": 62620, "start": 626.2, "end": 628.2, "text": " instead what I'd like to do is I'd like to look at the", "tokens": [50365, 2602, 437, 286, 1116, 411, 281, 360, 307, 286, 1116, 411, 281, 574, 412, 264, 50465], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 255, "seek": 62620, "start": 628.2, "end": 630.2, "text": " definition of derivative and just make sure", "tokens": [50465, 7123, 295, 13760, 293, 445, 652, 988, 50565], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 256, "seek": 62620, "start": 630.2, "end": 632.2, "text": " that we really understand what the derivative is measuring", "tokens": [50565, 300, 321, 534, 1223, 437, 264, 13760, 307, 13389, 50665], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 257, "seek": 62620, "start": 632.2, "end": 634.2, "text": " what it's telling you about the function.", "tokens": [50665, 437, 309, 311, 3585, 291, 466, 264, 2445, 13, 50765], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 258, "seek": 62620, "start": 634.2, "end": 636.2, "text": " And so if we just look up", "tokens": [50765, 400, 370, 498, 321, 445, 574, 493, 50865], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 259, "seek": 62620, "start": 636.2, "end": 638.2, "text": " derivative", "tokens": [50865, 13760, 50965], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 260, "seek": 62620, "start": 642.2, "end": 644.2, "text": " we see that", "tokens": [51165, 321, 536, 300, 51265], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 261, "seek": 62620, "start": 644.2, "end": 646.2, "text": " this is not a very good definition of derivative", "tokens": [51265, 341, 307, 406, 257, 588, 665, 7123, 295, 13760, 51365], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 262, "seek": 62620, "start": 646.2, "end": 648.2, "text": " this is a definition of what it means to be differentiable", "tokens": [51365, 341, 307, 257, 7123, 295, 437, 309, 1355, 281, 312, 819, 9364, 51465], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 263, "seek": 62620, "start": 648.2, "end": 650.2, "text": " but if you remember from your calculus", "tokens": [51465, 457, 498, 291, 1604, 490, 428, 33400, 51565], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 264, "seek": 62620, "start": 650.2, "end": 652.2, "text": " it is the limit as h goes to 0", "tokens": [51565, 309, 307, 264, 4948, 382, 276, 1709, 281, 1958, 51665], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 265, "seek": 62620, "start": 652.2, "end": 654.2, "text": " of f of x plus h minus f of x", "tokens": [51665, 295, 283, 295, 2031, 1804, 276, 3175, 283, 295, 2031, 51765], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 266, "seek": 62620, "start": 654.2, "end": 656.2, "text": " over h.", "tokens": [51765, 670, 276, 13, 51865], "temperature": 0.0, "avg_logprob": -0.08798573166131973, "compression_ratio": 1.856, "no_speech_prob": 7.973774336278439e-05}, {"id": 267, "seek": 65620, "start": 656.2, "end": 658.2, "text": " And basically what it's saying is", "tokens": [50365, 400, 1936, 437, 309, 311, 1566, 307, 50465], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 268, "seek": 65620, "start": 658.2, "end": 660.2, "text": " if you slightly bump up", "tokens": [50465, 498, 291, 4748, 9961, 493, 50565], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 269, "seek": 65620, "start": 660.2, "end": 662.2, "text": " at some point x that you're interested in", "tokens": [50565, 412, 512, 935, 2031, 300, 291, 434, 3102, 294, 50665], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 270, "seek": 65620, "start": 662.2, "end": 664.2, "text": " or a, and if you slightly bump up", "tokens": [50665, 420, 257, 11, 293, 498, 291, 4748, 9961, 493, 50765], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 271, "seek": 65620, "start": 664.2, "end": 666.2, "text": " you slightly increase it by", "tokens": [50765, 291, 4748, 3488, 309, 538, 50865], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 272, "seek": 65620, "start": 666.2, "end": 668.2, "text": " a small number h", "tokens": [50865, 257, 1359, 1230, 276, 50965], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 273, "seek": 65620, "start": 668.2, "end": 670.2, "text": " how does the function respond?", "tokens": [50965, 577, 775, 264, 2445, 4196, 30, 51065], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 274, "seek": 65620, "start": 670.2, "end": 672.2, "text": " With what sensitivity does it respond?", "tokens": [51065, 2022, 437, 19392, 775, 309, 4196, 30, 51165], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 275, "seek": 65620, "start": 672.2, "end": 674.2, "text": " What is the slope at that point?", "tokens": [51165, 708, 307, 264, 13525, 412, 300, 935, 30, 51265], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 276, "seek": 65620, "start": 674.2, "end": 676.2, "text": " Does the function go up or does it go down?", "tokens": [51265, 4402, 264, 2445, 352, 493, 420, 775, 309, 352, 760, 30, 51365], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 277, "seek": 65620, "start": 676.2, "end": 678.2, "text": " And by how much?", "tokens": [51365, 400, 538, 577, 709, 30, 51465], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 278, "seek": 65620, "start": 678.2, "end": 680.2, "text": " And that's the slope of that function", "tokens": [51465, 400, 300, 311, 264, 13525, 295, 300, 2445, 51565], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 279, "seek": 65620, "start": 680.2, "end": 682.2, "text": " the slope of that response at that point.", "tokens": [51565, 264, 13525, 295, 300, 4134, 412, 300, 935, 13, 51665], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 280, "seek": 65620, "start": 682.2, "end": 684.2, "text": " And so we can basically evaluate", "tokens": [51665, 400, 370, 321, 393, 1936, 13059, 51765], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 281, "seek": 65620, "start": 684.2, "end": 686.2, "text": " the derivative here numerically", "tokens": [51765, 264, 13760, 510, 7866, 984, 51865], "temperature": 0.0, "avg_logprob": -0.08011916125262225, "compression_ratio": 1.9637096774193548, "no_speech_prob": 0.0010289755882695317}, {"id": 282, "seek": 68620, "start": 686.2, "end": 688.2, "text": " by taking a very small h", "tokens": [50365, 538, 1940, 257, 588, 1359, 276, 50465], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 283, "seek": 68620, "start": 688.2, "end": 690.2, "text": " of course the definition would ask us to take h to 0", "tokens": [50465, 295, 1164, 264, 7123, 576, 1029, 505, 281, 747, 276, 281, 1958, 50565], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 284, "seek": 68620, "start": 690.2, "end": 692.2, "text": " we're just going to pick a very small h", "tokens": [50565, 321, 434, 445, 516, 281, 1888, 257, 588, 1359, 276, 50665], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 285, "seek": 68620, "start": 692.2, "end": 694.2, "text": " 0.001", "tokens": [50665, 1958, 13, 628, 16, 50765], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 286, "seek": 68620, "start": 694.2, "end": 696.2, "text": " and let's say we're interested in point 3.0", "tokens": [50765, 293, 718, 311, 584, 321, 434, 3102, 294, 935, 805, 13, 15, 50865], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 287, "seek": 68620, "start": 696.2, "end": 698.2, "text": " so we can look at f of x of course as 20", "tokens": [50865, 370, 321, 393, 574, 412, 283, 295, 2031, 295, 1164, 382, 945, 50965], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 288, "seek": 68620, "start": 698.2, "end": 700.2, "text": " and now f of x plus h", "tokens": [50965, 293, 586, 283, 295, 2031, 1804, 276, 51065], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 289, "seek": 68620, "start": 700.2, "end": 702.2, "text": " so if we slightly nudge", "tokens": [51065, 370, 498, 321, 4748, 297, 16032, 51165], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 290, "seek": 68620, "start": 702.2, "end": 704.2, "text": " x in a positive direction", "tokens": [51165, 2031, 294, 257, 3353, 3513, 51265], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 291, "seek": 68620, "start": 704.2, "end": 706.2, "text": " how is the function going to respond?", "tokens": [51265, 577, 307, 264, 2445, 516, 281, 4196, 30, 51365], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 292, "seek": 68620, "start": 706.2, "end": 708.2, "text": " And just looking at this", "tokens": [51365, 400, 445, 1237, 412, 341, 51465], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 293, "seek": 68620, "start": 708.2, "end": 710.2, "text": " do you expect f of x plus h to be slightly greater", "tokens": [51465, 360, 291, 2066, 283, 295, 2031, 1804, 276, 281, 312, 4748, 5044, 51565], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 294, "seek": 68620, "start": 710.2, "end": 712.2, "text": " than 20?", "tokens": [51565, 813, 945, 30, 51665], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 295, "seek": 68620, "start": 712.2, "end": 714.2, "text": " Or do you expect it to be slightly lower than 20?", "tokens": [51665, 1610, 360, 291, 2066, 309, 281, 312, 4748, 3126, 813, 945, 30, 51765], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 296, "seek": 68620, "start": 714.2, "end": 716.2, "text": " And so since 3 is here", "tokens": [51765, 400, 370, 1670, 805, 307, 510, 51865], "temperature": 0.0, "avg_logprob": -0.061761363452633486, "compression_ratio": 1.8307692307692307, "no_speech_prob": 8.104309381451458e-05}, {"id": 297, "seek": 71620, "start": 716.2, "end": 718.2, "text": " and this is 20", "tokens": [50365, 293, 341, 307, 945, 50465], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 298, "seek": 71620, "start": 718.2, "end": 720.2, "text": " if we slightly go positively", "tokens": [50465, 498, 321, 4748, 352, 25795, 50565], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 299, "seek": 71620, "start": 720.2, "end": 722.2, "text": " the function will respond positively", "tokens": [50565, 264, 2445, 486, 4196, 25795, 50665], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 300, "seek": 71620, "start": 722.2, "end": 724.2, "text": " so you'd expect this to be slightly greater than 20", "tokens": [50665, 370, 291, 1116, 2066, 341, 281, 312, 4748, 5044, 813, 945, 50765], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 301, "seek": 71620, "start": 724.2, "end": 726.2, "text": " and now by how much", "tokens": [50765, 293, 586, 538, 577, 709, 50865], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 302, "seek": 71620, "start": 726.2, "end": 728.2, "text": " is telling you the", "tokens": [50865, 307, 3585, 291, 264, 50965], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 303, "seek": 71620, "start": 728.2, "end": 730.2, "text": " strength of that slope", "tokens": [50965, 3800, 295, 300, 13525, 51065], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 304, "seek": 71620, "start": 730.2, "end": 732.2, "text": " the size of that slope", "tokens": [51065, 264, 2744, 295, 300, 13525, 51165], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 305, "seek": 71620, "start": 732.2, "end": 734.2, "text": " so f of x plus h minus f of x", "tokens": [51165, 370, 283, 295, 2031, 1804, 276, 3175, 283, 295, 2031, 51265], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 306, "seek": 71620, "start": 734.2, "end": 736.2, "text": " this is how much the function responded", "tokens": [51265, 341, 307, 577, 709, 264, 2445, 15806, 51365], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 307, "seek": 71620, "start": 736.2, "end": 738.2, "text": " in a positive direction", "tokens": [51365, 294, 257, 3353, 3513, 51465], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 308, "seek": 71620, "start": 738.2, "end": 740.2, "text": " and we have to normalize by the run", "tokens": [51465, 293, 321, 362, 281, 2710, 1125, 538, 264, 1190, 51565], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 309, "seek": 71620, "start": 740.2, "end": 742.2, "text": " so we have the rise over run", "tokens": [51565, 370, 321, 362, 264, 6272, 670, 1190, 51665], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 310, "seek": 71620, "start": 742.2, "end": 744.2, "text": " to get the slope", "tokens": [51665, 281, 483, 264, 13525, 51765], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 311, "seek": 71620, "start": 744.2, "end": 746.2, "text": " so this of course is just a numerical approximation", "tokens": [51765, 370, 341, 295, 1164, 307, 445, 257, 29054, 28023, 51865], "temperature": 0.0, "avg_logprob": -0.07386105291305049, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.0002999651769641787}, {"id": 312, "seek": 74620, "start": 746.2, "end": 748.2, "text": " of the slope", "tokens": [50365, 295, 264, 13525, 50465], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 313, "seek": 74620, "start": 748.2, "end": 750.2, "text": " because we have to make h very very small", "tokens": [50465, 570, 321, 362, 281, 652, 276, 588, 588, 1359, 50565], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 314, "seek": 74620, "start": 750.2, "end": 752.2, "text": " to converge to the exact amount", "tokens": [50565, 281, 41881, 281, 264, 1900, 2372, 50665], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 315, "seek": 74620, "start": 752.2, "end": 754.2, "text": " now if I'm doing too many zeros", "tokens": [50665, 586, 498, 286, 478, 884, 886, 867, 35193, 50765], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 316, "seek": 74620, "start": 754.2, "end": 756.2, "text": " at some point", "tokens": [50765, 412, 512, 935, 50865], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 317, "seek": 74620, "start": 756.2, "end": 758.2, "text": " I'm going to get an incorrect answer", "tokens": [50865, 286, 478, 516, 281, 483, 364, 18424, 1867, 50965], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 318, "seek": 74620, "start": 758.2, "end": 760.2, "text": " because we're using floating point arithmetic", "tokens": [50965, 570, 321, 434, 1228, 12607, 935, 42973, 51065], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 319, "seek": 74620, "start": 760.2, "end": 762.2, "text": " and the representations of all these numbers", "tokens": [51065, 293, 264, 33358, 295, 439, 613, 3547, 51165], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 320, "seek": 74620, "start": 762.2, "end": 764.2, "text": " in computer memory is finite", "tokens": [51165, 294, 3820, 4675, 307, 19362, 51265], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 321, "seek": 74620, "start": 764.2, "end": 766.2, "text": " and at some point we get into trouble", "tokens": [51265, 293, 412, 512, 935, 321, 483, 666, 5253, 51365], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 322, "seek": 74620, "start": 766.2, "end": 768.2, "text": " so we can converge towards the right answer", "tokens": [51365, 370, 321, 393, 41881, 3030, 264, 558, 1867, 51465], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 323, "seek": 74620, "start": 768.2, "end": 770.2, "text": " with this approach", "tokens": [51465, 365, 341, 3109, 51565], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 324, "seek": 74620, "start": 770.2, "end": 772.2, "text": " but basically", "tokens": [51565, 457, 1936, 51665], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 325, "seek": 74620, "start": 772.2, "end": 774.2, "text": " at 3 the slope is 14", "tokens": [51665, 412, 805, 264, 13525, 307, 3499, 51765], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 326, "seek": 74620, "start": 774.2, "end": 776.2, "text": " and you can see that by taking", "tokens": [51765, 293, 291, 393, 536, 300, 538, 1940, 51865], "temperature": 0.0, "avg_logprob": -0.06881799776692035, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.000315455166855827}, {"id": 327, "seek": 77620, "start": 776.2, "end": 778.2, "text": " x squared minus 4x plus 5", "tokens": [50365, 2031, 8889, 3175, 1017, 87, 1804, 1025, 50465], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 328, "seek": 77620, "start": 778.2, "end": 780.2, "text": " and differentiating it in our head", "tokens": [50465, 293, 27372, 990, 309, 294, 527, 1378, 50565], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 329, "seek": 77620, "start": 780.2, "end": 782.2, "text": " so 3x squared would be", "tokens": [50565, 370, 805, 87, 8889, 576, 312, 50665], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 330, "seek": 77620, "start": 782.2, "end": 784.2, "text": " 6x minus 4", "tokens": [50665, 1386, 87, 3175, 1017, 50765], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 331, "seek": 77620, "start": 784.2, "end": 786.2, "text": " and then we plug in x equals 3", "tokens": [50765, 293, 550, 321, 5452, 294, 2031, 6915, 805, 50865], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 332, "seek": 77620, "start": 786.2, "end": 788.2, "text": " so that's 18 minus 4 is 14", "tokens": [50865, 370, 300, 311, 2443, 3175, 1017, 307, 3499, 50965], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 333, "seek": 77620, "start": 788.2, "end": 790.2, "text": " so this is correct", "tokens": [50965, 370, 341, 307, 3006, 51065], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 334, "seek": 77620, "start": 790.2, "end": 792.2, "text": " so that's at 3", "tokens": [51065, 370, 300, 311, 412, 805, 51165], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 335, "seek": 77620, "start": 792.2, "end": 794.2, "text": " now how about", "tokens": [51165, 586, 577, 466, 51265], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 336, "seek": 77620, "start": 794.2, "end": 796.2, "text": " the slope at say negative 3", "tokens": [51265, 264, 13525, 412, 584, 3671, 805, 51365], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 337, "seek": 77620, "start": 796.2, "end": 798.2, "text": " would you expect", "tokens": [51365, 576, 291, 2066, 51465], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 338, "seek": 77620, "start": 798.2, "end": 800.2, "text": " what would you expect for the slope", "tokens": [51465, 437, 576, 291, 2066, 337, 264, 13525, 51565], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 339, "seek": 77620, "start": 800.2, "end": 802.2, "text": " now telling the exact value is really hard", "tokens": [51565, 586, 3585, 264, 1900, 2158, 307, 534, 1152, 51665], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 340, "seek": 77620, "start": 802.2, "end": 804.2, "text": " but what is the sign of that slope", "tokens": [51665, 457, 437, 307, 264, 1465, 295, 300, 13525, 51765], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 341, "seek": 77620, "start": 804.2, "end": 806.2, "text": " so at negative 3", "tokens": [51765, 370, 412, 3671, 805, 51865], "temperature": 0.0, "avg_logprob": -0.0753119172168379, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0011841629166156054}, {"id": 342, "seek": 80620, "start": 806.2, "end": 808.2, "text": " if we slightly go in the positive direction", "tokens": [50365, 498, 321, 4748, 352, 294, 264, 3353, 3513, 50465], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 343, "seek": 80620, "start": 808.2, "end": 810.2, "text": " at x", "tokens": [50465, 412, 2031, 50565], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 344, "seek": 80620, "start": 810.2, "end": 812.2, "text": " the function would actually go down", "tokens": [50565, 264, 2445, 576, 767, 352, 760, 50665], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 345, "seek": 80620, "start": 812.2, "end": 814.2, "text": " and so that tells you that the slope would be negative", "tokens": [50665, 293, 370, 300, 5112, 291, 300, 264, 13525, 576, 312, 3671, 50765], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 346, "seek": 80620, "start": 814.2, "end": 816.2, "text": " so we'll get a slight number below", "tokens": [50765, 370, 321, 603, 483, 257, 4036, 1230, 2507, 50865], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 347, "seek": 80620, "start": 816.2, "end": 818.2, "text": " below 20", "tokens": [50865, 2507, 945, 50965], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 348, "seek": 80620, "start": 818.2, "end": 820.2, "text": " and so if we take the slope", "tokens": [50965, 293, 370, 498, 321, 747, 264, 13525, 51065], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 349, "seek": 80620, "start": 820.2, "end": 822.2, "text": " we expect something negative", "tokens": [51065, 321, 2066, 746, 3671, 51165], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 350, "seek": 80620, "start": 822.2, "end": 824.2, "text": " negative 22", "tokens": [51165, 3671, 5853, 51265], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 351, "seek": 80620, "start": 824.2, "end": 826.2, "text": " and at some point here of course", "tokens": [51265, 293, 412, 512, 935, 510, 295, 1164, 51365], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 352, "seek": 80620, "start": 826.2, "end": 828.2, "text": " the slope would be 0", "tokens": [51365, 264, 13525, 576, 312, 1958, 51465], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 353, "seek": 80620, "start": 828.2, "end": 830.2, "text": " now for this specific function", "tokens": [51465, 586, 337, 341, 2685, 2445, 51565], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 354, "seek": 80620, "start": 830.2, "end": 832.2, "text": " I looked it up previously", "tokens": [51565, 286, 2956, 309, 493, 8046, 51665], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 355, "seek": 80620, "start": 832.2, "end": 834.2, "text": " and it's at point 2 over 3", "tokens": [51665, 293, 309, 311, 412, 935, 568, 670, 805, 51765], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 356, "seek": 80620, "start": 834.2, "end": 836.2, "text": " so at roughly 2 over 3", "tokens": [51765, 370, 412, 9810, 568, 670, 805, 51865], "temperature": 0.0, "avg_logprob": -0.05708866445427267, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0002241981273982674}, {"id": 357, "seek": 83620, "start": 836.2, "end": 838.2, "text": " this derivative would be 0", "tokens": [50365, 341, 13760, 576, 312, 1958, 50465], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 358, "seek": 83620, "start": 838.2, "end": 840.2, "text": " so basically", "tokens": [50465, 370, 1936, 50565], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 359, "seek": 83620, "start": 840.2, "end": 842.2, "text": " at that precise point", "tokens": [50565, 412, 300, 13600, 935, 50665], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 360, "seek": 83620, "start": 844.2, "end": 846.2, "text": " at that precise point", "tokens": [50765, 412, 300, 13600, 935, 50865], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 361, "seek": 83620, "start": 846.2, "end": 848.2, "text": " if we nudge in a positive direction", "tokens": [50865, 498, 321, 297, 16032, 294, 257, 3353, 3513, 50965], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 362, "seek": 83620, "start": 848.2, "end": 850.2, "text": " the function doesn't respond", "tokens": [50965, 264, 2445, 1177, 380, 4196, 51065], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 363, "seek": 83620, "start": 850.2, "end": 852.2, "text": " this stays the same almost", "tokens": [51065, 341, 10834, 264, 912, 1920, 51165], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 364, "seek": 83620, "start": 852.2, "end": 854.2, "text": " and so that's why the slope is 0", "tokens": [51165, 293, 370, 300, 311, 983, 264, 13525, 307, 1958, 51265], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 365, "seek": 83620, "start": 854.2, "end": 856.2, "text": " ok now let's look at a bit more complex case", "tokens": [51265, 3133, 586, 718, 311, 574, 412, 257, 857, 544, 3997, 1389, 51365], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 366, "seek": 83620, "start": 856.2, "end": 858.2, "text": " so we're going to start complexifying a bit", "tokens": [51365, 370, 321, 434, 516, 281, 722, 3997, 5489, 257, 857, 51465], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 367, "seek": 83620, "start": 858.2, "end": 860.2, "text": " so now we have a function", "tokens": [51465, 370, 586, 321, 362, 257, 2445, 51565], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 368, "seek": 83620, "start": 860.2, "end": 862.2, "text": " here", "tokens": [51565, 510, 51665], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 369, "seek": 83620, "start": 862.2, "end": 864.2, "text": " with output variable b", "tokens": [51665, 365, 5598, 7006, 272, 51765], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 370, "seek": 83620, "start": 864.2, "end": 866.2, "text": " that is a function of 3 scalar inputs", "tokens": [51765, 300, 307, 257, 2445, 295, 805, 39684, 15743, 51865], "temperature": 0.0, "avg_logprob": -0.0741389936155027, "compression_ratio": 1.728888888888889, "no_speech_prob": 0.00014169057249091566}, {"id": 371, "seek": 86620, "start": 866.2, "end": 868.2, "text": " so a, b and c are some specific values", "tokens": [50365, 370, 257, 11, 272, 293, 269, 366, 512, 2685, 4190, 50465], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 372, "seek": 86620, "start": 868.2, "end": 870.2, "text": " 3 inputs into our expression graph", "tokens": [50465, 805, 15743, 666, 527, 6114, 4295, 50565], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 373, "seek": 86620, "start": 870.2, "end": 872.2, "text": " and a single output d", "tokens": [50565, 293, 257, 2167, 5598, 274, 50665], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 374, "seek": 86620, "start": 872.2, "end": 874.2, "text": " and so if we just print d", "tokens": [50665, 293, 370, 498, 321, 445, 4482, 274, 50765], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 375, "seek": 86620, "start": 874.2, "end": 876.2, "text": " we get 4", "tokens": [50765, 321, 483, 1017, 50865], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 376, "seek": 86620, "start": 876.2, "end": 878.2, "text": " and now what I'd like to do is", "tokens": [50865, 293, 586, 437, 286, 1116, 411, 281, 360, 307, 50965], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 377, "seek": 86620, "start": 878.2, "end": 880.2, "text": " I'd like to again look at the derivatives of d", "tokens": [50965, 286, 1116, 411, 281, 797, 574, 412, 264, 33733, 295, 274, 51065], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 378, "seek": 86620, "start": 880.2, "end": 882.2, "text": " with respect to a, b and c", "tokens": [51065, 365, 3104, 281, 257, 11, 272, 293, 269, 51165], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 379, "seek": 86620, "start": 882.2, "end": 884.2, "text": " and think through", "tokens": [51165, 293, 519, 807, 51265], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 380, "seek": 86620, "start": 884.2, "end": 886.2, "text": " again just the intuition of what this derivative", "tokens": [51265, 797, 445, 264, 24002, 295, 437, 341, 13760, 51365], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 381, "seek": 86620, "start": 886.2, "end": 888.2, "text": " is telling us", "tokens": [51365, 307, 3585, 505, 51465], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 382, "seek": 86620, "start": 888.2, "end": 890.2, "text": " so in order to evaluate this derivative", "tokens": [51465, 370, 294, 1668, 281, 13059, 341, 13760, 51565], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 383, "seek": 86620, "start": 890.2, "end": 892.2, "text": " we're going to get a bit hacky here", "tokens": [51565, 321, 434, 516, 281, 483, 257, 857, 10339, 88, 510, 51665], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 384, "seek": 86620, "start": 892.2, "end": 894.2, "text": " we're going to again have a very small", "tokens": [51665, 321, 434, 516, 281, 797, 362, 257, 588, 1359, 51765], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 385, "seek": 86620, "start": 894.2, "end": 896.2, "text": " value of h and then we're going to", "tokens": [51765, 2158, 295, 276, 293, 550, 321, 434, 516, 281, 51865], "temperature": 0.0, "avg_logprob": -0.0687101899291114, "compression_ratio": 1.864, "no_speech_prob": 0.0002790752914734185}, {"id": 386, "seek": 89620, "start": 896.2, "end": 898.2, "text": " fix the inputs at some", "tokens": [50365, 3191, 264, 15743, 412, 512, 50465], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 387, "seek": 89620, "start": 898.2, "end": 900.2, "text": " values that we're interested in", "tokens": [50465, 4190, 300, 321, 434, 3102, 294, 50565], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 388, "seek": 89620, "start": 900.2, "end": 902.2, "text": " so these are the", "tokens": [50565, 370, 613, 366, 264, 50665], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 389, "seek": 89620, "start": 902.2, "end": 904.2, "text": " this is the point a, b, c at which we're going to be evaluating", "tokens": [50665, 341, 307, 264, 935, 257, 11, 272, 11, 269, 412, 597, 321, 434, 516, 281, 312, 27479, 50765], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 390, "seek": 89620, "start": 904.2, "end": 906.2, "text": " the derivative of d", "tokens": [50765, 264, 13760, 295, 274, 50865], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 391, "seek": 89620, "start": 906.2, "end": 908.2, "text": " with respect to all a, b and c", "tokens": [50865, 365, 3104, 281, 439, 257, 11, 272, 293, 269, 50965], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 392, "seek": 89620, "start": 908.2, "end": 910.2, "text": " at that point", "tokens": [50965, 412, 300, 935, 51065], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 393, "seek": 89620, "start": 910.2, "end": 912.2, "text": " so there's the inputs and now we have d1", "tokens": [51065, 370, 456, 311, 264, 15743, 293, 586, 321, 362, 274, 16, 51165], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 394, "seek": 89620, "start": 912.2, "end": 914.2, "text": " is that expression", "tokens": [51165, 307, 300, 6114, 51265], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 395, "seek": 89620, "start": 914.2, "end": 916.2, "text": " and then we're going to for example look at the derivative of d", "tokens": [51265, 293, 550, 321, 434, 516, 281, 337, 1365, 574, 412, 264, 13760, 295, 274, 51365], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 396, "seek": 89620, "start": 916.2, "end": 918.2, "text": " with respect to a", "tokens": [51365, 365, 3104, 281, 257, 51465], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 397, "seek": 89620, "start": 918.2, "end": 920.2, "text": " so we'll take a and we'll bump it by h", "tokens": [51465, 370, 321, 603, 747, 257, 293, 321, 603, 9961, 309, 538, 276, 51565], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 398, "seek": 89620, "start": 920.2, "end": 922.2, "text": " and then we'll get d2 to be the exact same", "tokens": [51565, 293, 550, 321, 603, 483, 274, 17, 281, 312, 264, 1900, 912, 51665], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 399, "seek": 89620, "start": 922.2, "end": 924.2, "text": " function", "tokens": [51665, 2445, 51765], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 400, "seek": 89620, "start": 924.2, "end": 926.2, "text": " and now we're going to print", "tokens": [51765, 293, 586, 321, 434, 516, 281, 4482, 51865], "temperature": 0.0, "avg_logprob": -0.06766318607997228, "compression_ratio": 2.008695652173913, "no_speech_prob": 0.0001918865309562534}, {"id": 401, "seek": 92620, "start": 926.2, "end": 928.2, "text": " you know", "tokens": [50365, 291, 458, 50465], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 402, "seek": 92620, "start": 928.2, "end": 930.2, "text": " d1 is d1", "tokens": [50465, 274, 16, 307, 274, 16, 50565], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 403, "seek": 92620, "start": 930.2, "end": 932.2, "text": " d2 is d2", "tokens": [50565, 274, 17, 307, 274, 17, 50665], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 404, "seek": 92620, "start": 932.2, "end": 934.2, "text": " and print slope", "tokens": [50665, 293, 4482, 13525, 50765], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 405, "seek": 92620, "start": 934.2, "end": 936.2, "text": " so the derivative", "tokens": [50765, 370, 264, 13760, 50865], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 406, "seek": 92620, "start": 936.2, "end": 938.2, "text": " or slope here", "tokens": [50865, 420, 13525, 510, 50965], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 407, "seek": 92620, "start": 938.2, "end": 940.2, "text": " will be of course", "tokens": [50965, 486, 312, 295, 1164, 51065], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 408, "seek": 92620, "start": 940.2, "end": 942.2, "text": " d2", "tokens": [51065, 274, 17, 51165], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 409, "seek": 92620, "start": 942.2, "end": 944.2, "text": " minus d1 divided by h", "tokens": [51165, 3175, 274, 16, 6666, 538, 276, 51265], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 410, "seek": 92620, "start": 944.2, "end": 946.2, "text": " so d2 minus d1 is how", "tokens": [51265, 370, 274, 17, 3175, 274, 16, 307, 577, 51365], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 411, "seek": 92620, "start": 946.2, "end": 948.2, "text": " much the function increased", "tokens": [51365, 709, 264, 2445, 6505, 51465], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 412, "seek": 92620, "start": 948.2, "end": 950.2, "text": " when we bumped", "tokens": [51465, 562, 321, 42696, 51565], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 413, "seek": 92620, "start": 950.2, "end": 952.2, "text": " the specific", "tokens": [51565, 264, 2685, 51665], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 414, "seek": 92620, "start": 952.2, "end": 954.2, "text": " input that we're interested in", "tokens": [51665, 4846, 300, 321, 434, 3102, 294, 51765], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 415, "seek": 92620, "start": 954.2, "end": 956.2, "text": " by a tiny amount", "tokens": [51765, 538, 257, 5870, 2372, 51865], "temperature": 0.0, "avg_logprob": -0.06697260154472602, "compression_ratio": 1.5379746835443038, "no_speech_prob": 0.00012115668505430222}, {"id": 416, "seek": 95620, "start": 956.2, "end": 958.2, "text": " and this is then normalized by", "tokens": [50365, 293, 341, 307, 550, 48704, 538, 50465], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 417, "seek": 95620, "start": 958.2, "end": 960.2, "text": " h to get the slope", "tokens": [50465, 276, 281, 483, 264, 13525, 50565], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 418, "seek": 95620, "start": 962.2, "end": 964.2, "text": " so", "tokens": [50665, 370, 50765], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 419, "seek": 95620, "start": 964.2, "end": 966.2, "text": " yeah", "tokens": [50765, 1338, 50865], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 420, "seek": 95620, "start": 966.2, "end": 968.2, "text": " so this", "tokens": [50865, 370, 341, 50965], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 421, "seek": 95620, "start": 968.2, "end": 970.2, "text": " so I just run this", "tokens": [50965, 370, 286, 445, 1190, 341, 51065], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 422, "seek": 95620, "start": 970.2, "end": 972.2, "text": " we're going to print d1", "tokens": [51065, 321, 434, 516, 281, 4482, 274, 16, 51165], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 423, "seek": 95620, "start": 972.2, "end": 974.2, "text": " which we know is", "tokens": [51165, 597, 321, 458, 307, 51265], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 424, "seek": 95620, "start": 974.2, "end": 976.2, "text": " 4", "tokens": [51265, 1017, 51365], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 425, "seek": 95620, "start": 976.2, "end": 978.2, "text": " now d2 will be bumped", "tokens": [51365, 586, 274, 17, 486, 312, 42696, 51465], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 426, "seek": 95620, "start": 978.2, "end": 980.2, "text": " a will be bumped by h", "tokens": [51465, 257, 486, 312, 42696, 538, 276, 51565], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 427, "seek": 95620, "start": 980.2, "end": 982.2, "text": " so let's just think through", "tokens": [51565, 370, 718, 311, 445, 519, 807, 51665], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 428, "seek": 95620, "start": 982.2, "end": 984.2, "text": " a little bit", "tokens": [51665, 257, 707, 857, 51765], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 429, "seek": 95620, "start": 984.2, "end": 986.2, "text": " what d2 will be", "tokens": [51765, 437, 274, 17, 486, 312, 51865], "temperature": 0.0, "avg_logprob": -0.08892877074493759, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.00032227812334895134}, {"id": 430, "seek": 98620, "start": 986.2, "end": 988.2, "text": " printed out here in particular", "tokens": [50365, 13567, 484, 510, 294, 1729, 50465], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 431, "seek": 98620, "start": 988.2, "end": 990.2, "text": " d1 will be 4", "tokens": [50465, 274, 16, 486, 312, 1017, 50565], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 432, "seek": 98620, "start": 990.2, "end": 992.2, "text": " will d2 be", "tokens": [50565, 486, 274, 17, 312, 50665], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 433, "seek": 98620, "start": 992.2, "end": 994.2, "text": " a number slightly greater than 4", "tokens": [50665, 257, 1230, 4748, 5044, 813, 1017, 50765], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 434, "seek": 98620, "start": 994.2, "end": 996.2, "text": " or slightly lower than 4", "tokens": [50765, 420, 4748, 3126, 813, 1017, 50865], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 435, "seek": 98620, "start": 996.2, "end": 998.2, "text": " and that's going to tell us the", "tokens": [50865, 293, 300, 311, 516, 281, 980, 505, 264, 50965], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 436, "seek": 98620, "start": 998.2, "end": 1000.2, "text": " sign of the derivative", "tokens": [50965, 1465, 295, 264, 13760, 51065], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 437, "seek": 98620, "start": 1000.2, "end": 1002.2, "text": " so", "tokens": [51065, 370, 51165], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 438, "seek": 98620, "start": 1002.2, "end": 1004.2, "text": " we're bumping a by h", "tokens": [51165, 321, 434, 9961, 278, 257, 538, 276, 51265], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 439, "seek": 98620, "start": 1004.2, "end": 1006.2, "text": " b is minus 3", "tokens": [51265, 272, 307, 3175, 805, 51365], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 440, "seek": 98620, "start": 1006.2, "end": 1008.2, "text": " c is 10", "tokens": [51365, 269, 307, 1266, 51465], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 441, "seek": 98620, "start": 1008.2, "end": 1010.2, "text": " so you can just intuitively think through", "tokens": [51465, 370, 291, 393, 445, 46506, 519, 807, 51565], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 442, "seek": 98620, "start": 1010.2, "end": 1012.2, "text": " this derivative and what it's doing", "tokens": [51565, 341, 13760, 293, 437, 309, 311, 884, 51665], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 443, "seek": 98620, "start": 1012.2, "end": 1014.2, "text": " a will be slightly more positive", "tokens": [51665, 257, 486, 312, 4748, 544, 3353, 51765], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 444, "seek": 98620, "start": 1014.2, "end": 1016.2, "text": " and but b is a negative", "tokens": [51765, 293, 457, 272, 307, 257, 3671, 51865], "temperature": 0.0, "avg_logprob": -0.08264042040623656, "compression_ratio": 1.7009803921568627, "no_speech_prob": 0.00010432092676637694}, {"id": 445, "seek": 101620, "start": 1016.2, "end": 1018.2, "text": " number so if a is", "tokens": [50365, 1230, 370, 498, 257, 307, 50465], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 446, "seek": 101620, "start": 1018.2, "end": 1020.2, "text": " slightly more positive", "tokens": [50465, 4748, 544, 3353, 50565], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 447, "seek": 101620, "start": 1020.2, "end": 1022.2, "text": " because b is negative 3", "tokens": [50565, 570, 272, 307, 3671, 805, 50665], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 448, "seek": 101620, "start": 1022.2, "end": 1024.2, "text": " we're actually going to be", "tokens": [50665, 321, 434, 767, 516, 281, 312, 50765], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 449, "seek": 101620, "start": 1024.2, "end": 1026.2, "text": " adding less to", "tokens": [50765, 5127, 1570, 281, 50865], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 450, "seek": 101620, "start": 1026.2, "end": 1028.2, "text": " d", "tokens": [50865, 274, 50965], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 451, "seek": 101620, "start": 1028.2, "end": 1030.2, "text": " so you'd actually expect that", "tokens": [50965, 370, 291, 1116, 767, 2066, 300, 51065], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 452, "seek": 101620, "start": 1030.2, "end": 1032.2, "text": " the value of the function will go", "tokens": [51065, 264, 2158, 295, 264, 2445, 486, 352, 51165], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 453, "seek": 101620, "start": 1032.2, "end": 1034.2, "text": " down so let's", "tokens": [51165, 760, 370, 718, 311, 51265], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 454, "seek": 101620, "start": 1034.2, "end": 1036.2, "text": " just see this", "tokens": [51265, 445, 536, 341, 51365], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 455, "seek": 101620, "start": 1036.2, "end": 1038.2, "text": " yeah and so we went from 4", "tokens": [51365, 1338, 293, 370, 321, 1437, 490, 1017, 51465], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 456, "seek": 101620, "start": 1038.2, "end": 1040.2, "text": " to 3.996", "tokens": [51465, 281, 805, 13, 8494, 21, 51565], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 457, "seek": 101620, "start": 1040.2, "end": 1042.2, "text": " and that tells you that the slope will", "tokens": [51565, 293, 300, 5112, 291, 300, 264, 13525, 486, 51665], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 458, "seek": 101620, "start": 1042.2, "end": 1044.2, "text": " be negative and then", "tokens": [51665, 312, 3671, 293, 550, 51765], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 459, "seek": 101620, "start": 1044.2, "end": 1046.2, "text": " will be a negative number", "tokens": [51765, 486, 312, 257, 3671, 1230, 51865], "temperature": 0.0, "avg_logprob": -0.05582842780548392, "compression_ratio": 1.6683937823834196, "no_speech_prob": 0.00048736471217125654}, {"id": 460, "seek": 104620, "start": 1046.2, "end": 1048.2, "text": " because we went down and", "tokens": [50365, 570, 321, 1437, 760, 293, 50465], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 461, "seek": 104620, "start": 1048.2, "end": 1050.2, "text": " then the exact number of slope", "tokens": [50465, 550, 264, 1900, 1230, 295, 13525, 50565], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 462, "seek": 104620, "start": 1050.2, "end": 1052.2, "text": " will be the exact amount of slope", "tokens": [50565, 486, 312, 264, 1900, 2372, 295, 13525, 50665], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 463, "seek": 104620, "start": 1052.2, "end": 1054.2, "text": " is negative 3 and you can", "tokens": [50665, 307, 3671, 805, 293, 291, 393, 50765], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 464, "seek": 104620, "start": 1054.2, "end": 1056.2, "text": " also convince yourself that negative 3 is the right", "tokens": [50765, 611, 13447, 1803, 300, 3671, 805, 307, 264, 558, 50865], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 465, "seek": 104620, "start": 1056.2, "end": 1058.2, "text": " answer mathematically and analytically", "tokens": [50865, 1867, 44003, 293, 10783, 984, 50965], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 466, "seek": 104620, "start": 1058.2, "end": 1060.2, "text": " because if you have a times b plus", "tokens": [50965, 570, 498, 291, 362, 257, 1413, 272, 1804, 51065], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 467, "seek": 104620, "start": 1060.2, "end": 1062.2, "text": " c and you are you know you have", "tokens": [51065, 269, 293, 291, 366, 291, 458, 291, 362, 51165], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 468, "seek": 104620, "start": 1062.2, "end": 1064.2, "text": " calculus then", "tokens": [51165, 33400, 550, 51265], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 469, "seek": 104620, "start": 1064.2, "end": 1066.2, "text": " differentiating a times b plus c with", "tokens": [51265, 27372, 990, 257, 1413, 272, 1804, 269, 365, 51365], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 470, "seek": 104620, "start": 1066.2, "end": 1068.2, "text": " respect to a gives you just b", "tokens": [51365, 3104, 281, 257, 2709, 291, 445, 272, 51465], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 471, "seek": 104620, "start": 1068.2, "end": 1070.2, "text": " and indeed the value of b", "tokens": [51465, 293, 6451, 264, 2158, 295, 272, 51565], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 472, "seek": 104620, "start": 1070.2, "end": 1072.2, "text": " is negative 3 which is the derivative that we have", "tokens": [51565, 307, 3671, 805, 597, 307, 264, 13760, 300, 321, 362, 51665], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 473, "seek": 104620, "start": 1072.2, "end": 1074.2, "text": " so you can tell that that's correct", "tokens": [51665, 370, 291, 393, 980, 300, 300, 311, 3006, 51765], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 474, "seek": 104620, "start": 1074.2, "end": 1076.2, "text": " so now if we do this", "tokens": [51765, 370, 586, 498, 321, 360, 341, 51865], "temperature": 0.0, "avg_logprob": -0.06972670555114746, "compression_ratio": 1.9027237354085602, "no_speech_prob": 0.0003835473908111453}, {"id": 475, "seek": 107620, "start": 1076.2, "end": 1078.2, "text": " with b so if we", "tokens": [50365, 365, 272, 370, 498, 321, 50465], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 476, "seek": 107620, "start": 1078.2, "end": 1080.2, "text": " bump b by a little bit in a positive", "tokens": [50465, 9961, 272, 538, 257, 707, 857, 294, 257, 3353, 50565], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 477, "seek": 107620, "start": 1080.2, "end": 1082.2, "text": " direction we'd get different", "tokens": [50565, 3513, 321, 1116, 483, 819, 50665], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 478, "seek": 107620, "start": 1082.2, "end": 1084.2, "text": " slopes so what is the influence of b", "tokens": [50665, 37725, 370, 437, 307, 264, 6503, 295, 272, 50765], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 479, "seek": 107620, "start": 1084.2, "end": 1086.2, "text": " on the output d", "tokens": [50765, 322, 264, 5598, 274, 50865], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 480, "seek": 107620, "start": 1086.2, "end": 1088.2, "text": " so if we bump b by a tiny amount", "tokens": [50865, 370, 498, 321, 9961, 272, 538, 257, 5870, 2372, 50965], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 481, "seek": 107620, "start": 1088.2, "end": 1090.2, "text": " in a positive direction then because a", "tokens": [50965, 294, 257, 3353, 3513, 550, 570, 257, 51065], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 482, "seek": 107620, "start": 1090.2, "end": 1092.2, "text": " is positive we'll be", "tokens": [51065, 307, 3353, 321, 603, 312, 51165], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 483, "seek": 107620, "start": 1092.2, "end": 1094.2, "text": " adding more to d right", "tokens": [51165, 5127, 544, 281, 274, 558, 51265], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 484, "seek": 107620, "start": 1094.2, "end": 1096.2, "text": " so and now", "tokens": [51265, 370, 293, 586, 51365], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 485, "seek": 107620, "start": 1096.2, "end": 1098.2, "text": " what is the sensitivity what is the", "tokens": [51365, 437, 307, 264, 19392, 437, 307, 264, 51465], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 486, "seek": 107620, "start": 1098.2, "end": 1100.2, "text": " slope of that addition and", "tokens": [51465, 13525, 295, 300, 4500, 293, 51565], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 487, "seek": 107620, "start": 1100.2, "end": 1102.2, "text": " it might not surprise you that this should be", "tokens": [51565, 309, 1062, 406, 6365, 291, 300, 341, 820, 312, 51665], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 488, "seek": 107620, "start": 1102.2, "end": 1104.2, "text": " 2", "tokens": [51665, 568, 51765], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 489, "seek": 107620, "start": 1104.2, "end": 1106.2, "text": " and why is it 2 because", "tokens": [51765, 293, 983, 307, 309, 568, 570, 51865], "temperature": 0.0, "avg_logprob": -0.05361294546047179, "compression_ratio": 1.9038461538461537, "no_speech_prob": 0.0002553313970565796}, {"id": 490, "seek": 110620, "start": 1106.2, "end": 1108.2, "text": " d of d by db", "tokens": [50365, 274, 295, 274, 538, 274, 65, 50465], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 491, "seek": 110620, "start": 1108.2, "end": 1110.2, "text": " differentiating with respect to b", "tokens": [50465, 27372, 990, 365, 3104, 281, 272, 50565], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 492, "seek": 110620, "start": 1110.2, "end": 1112.2, "text": " would be would give us a and", "tokens": [50565, 576, 312, 576, 976, 505, 257, 293, 50665], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 493, "seek": 110620, "start": 1112.2, "end": 1114.2, "text": " the value of a is 2 so that's also", "tokens": [50665, 264, 2158, 295, 257, 307, 568, 370, 300, 311, 611, 50765], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 494, "seek": 110620, "start": 1114.2, "end": 1116.2, "text": " working well and then if c", "tokens": [50765, 1364, 731, 293, 550, 498, 269, 50865], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 495, "seek": 110620, "start": 1116.2, "end": 1118.2, "text": " gets bumped a tiny amount in h", "tokens": [50865, 2170, 42696, 257, 5870, 2372, 294, 276, 50965], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 496, "seek": 110620, "start": 1118.2, "end": 1120.2, "text": " by h then", "tokens": [50965, 538, 276, 550, 51065], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 497, "seek": 110620, "start": 1120.2, "end": 1122.2, "text": " of course a times b is unaffected and", "tokens": [51065, 295, 1164, 257, 1413, 272, 307, 2002, 11259, 292, 293, 51165], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 498, "seek": 110620, "start": 1122.2, "end": 1124.2, "text": " now c becomes slightly bit higher", "tokens": [51165, 586, 269, 3643, 4748, 857, 2946, 51265], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 499, "seek": 110620, "start": 1124.2, "end": 1126.2, "text": " what does that do to the function it", "tokens": [51265, 437, 775, 300, 360, 281, 264, 2445, 309, 51365], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 500, "seek": 110620, "start": 1126.2, "end": 1128.2, "text": " makes it slightly bit higher because we're simply adding", "tokens": [51365, 1669, 309, 4748, 857, 2946, 570, 321, 434, 2935, 5127, 51465], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 501, "seek": 110620, "start": 1128.2, "end": 1130.2, "text": " c and it makes it slightly bit", "tokens": [51465, 269, 293, 309, 1669, 309, 4748, 857, 51565], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 502, "seek": 110620, "start": 1130.2, "end": 1132.2, "text": " higher by the exact same amount that we", "tokens": [51565, 2946, 538, 264, 1900, 912, 2372, 300, 321, 51665], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 503, "seek": 110620, "start": 1132.2, "end": 1134.2, "text": " added to c and so that tells you", "tokens": [51665, 3869, 281, 269, 293, 370, 300, 5112, 291, 51765], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 504, "seek": 110620, "start": 1134.2, "end": 1136.2, "text": " that the slope is 1", "tokens": [51765, 300, 264, 13525, 307, 502, 51865], "temperature": 0.0, "avg_logprob": -0.058952379917752915, "compression_ratio": 1.872, "no_speech_prob": 9.176139428745955e-05}, {"id": 505, "seek": 113620, "start": 1136.2, "end": 1138.2, "text": " that will be the", "tokens": [50365, 300, 486, 312, 264, 50465], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 506, "seek": 113620, "start": 1138.2, "end": 1140.2, "text": " the rate at which", "tokens": [50465, 264, 3314, 412, 597, 50565], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 507, "seek": 113620, "start": 1140.2, "end": 1142.2, "text": " d will increase", "tokens": [50565, 274, 486, 3488, 50665], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 508, "seek": 113620, "start": 1142.2, "end": 1144.2, "text": " as we scale", "tokens": [50665, 382, 321, 4373, 50765], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 509, "seek": 113620, "start": 1144.2, "end": 1146.2, "text": " c okay so we now have some", "tokens": [50765, 269, 1392, 370, 321, 586, 362, 512, 50865], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 510, "seek": 113620, "start": 1146.2, "end": 1148.2, "text": " intuitive sense of what this derivative is telling you", "tokens": [50865, 21769, 2020, 295, 437, 341, 13760, 307, 3585, 291, 50965], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 511, "seek": 113620, "start": 1148.2, "end": 1150.2, "text": " about the function and we'd like to move to", "tokens": [50965, 466, 264, 2445, 293, 321, 1116, 411, 281, 1286, 281, 51065], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 512, "seek": 113620, "start": 1150.2, "end": 1152.2, "text": " neural networks now as i mentioned neural networks", "tokens": [51065, 18161, 9590, 586, 382, 741, 2835, 18161, 9590, 51165], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 513, "seek": 113620, "start": 1152.2, "end": 1154.2, "text": " will be pretty massive expressions mathematical", "tokens": [51165, 486, 312, 1238, 5994, 15277, 18894, 51265], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 514, "seek": 113620, "start": 1154.2, "end": 1156.2, "text": " expressions so we need some data structures", "tokens": [51265, 15277, 370, 321, 643, 512, 1412, 9227, 51365], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 515, "seek": 113620, "start": 1156.2, "end": 1158.2, "text": " that maintain these expressions and that's what", "tokens": [51365, 300, 6909, 613, 15277, 293, 300, 311, 437, 51465], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 516, "seek": 113620, "start": 1158.2, "end": 1160.2, "text": " we're going to start to build out now", "tokens": [51465, 321, 434, 516, 281, 722, 281, 1322, 484, 586, 51565], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 517, "seek": 113620, "start": 1160.2, "end": 1162.2, "text": " so we're going to", "tokens": [51565, 370, 321, 434, 516, 281, 51665], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 518, "seek": 113620, "start": 1162.2, "end": 1164.2, "text": " build out this value object that i", "tokens": [51665, 1322, 484, 341, 2158, 2657, 300, 741, 51765], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 519, "seek": 113620, "start": 1164.2, "end": 1166.2, "text": " showed you in the readme page", "tokens": [51765, 4712, 291, 294, 264, 1401, 1398, 3028, 51865], "temperature": 0.0, "avg_logprob": -0.05073904991149902, "compression_ratio": 1.9011406844106464, "no_speech_prob": 0.0001661321584833786}, {"id": 520, "seek": 116620, "start": 1166.2, "end": 1168.2, "text": " of micrograd so let me", "tokens": [50365, 295, 4532, 7165, 370, 718, 385, 50465], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 521, "seek": 116620, "start": 1168.2, "end": 1170.2, "text": " copy paste a skeleton", "tokens": [50465, 5055, 9163, 257, 25204, 50565], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 522, "seek": 116620, "start": 1170.2, "end": 1172.2, "text": " of the first very simple value", "tokens": [50565, 295, 264, 700, 588, 2199, 2158, 50665], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 523, "seek": 116620, "start": 1172.2, "end": 1174.2, "text": " object so class", "tokens": [50665, 2657, 370, 1508, 50765], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 524, "seek": 116620, "start": 1174.2, "end": 1176.2, "text": " value takes a single", "tokens": [50765, 2158, 2516, 257, 2167, 50865], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 525, "seek": 116620, "start": 1176.2, "end": 1178.2, "text": " scalar value that it wraps and", "tokens": [50865, 39684, 2158, 300, 309, 25831, 293, 50965], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 526, "seek": 116620, "start": 1178.2, "end": 1180.2, "text": " keeps track of and that's", "tokens": [50965, 5965, 2837, 295, 293, 300, 311, 51065], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 527, "seek": 116620, "start": 1180.2, "end": 1182.2, "text": " it so we can for example", "tokens": [51065, 309, 370, 321, 393, 337, 1365, 51165], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 528, "seek": 116620, "start": 1182.2, "end": 1184.2, "text": " do value of 2.0 and then we can", "tokens": [51165, 360, 2158, 295, 568, 13, 15, 293, 550, 321, 393, 51265], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 529, "seek": 116620, "start": 1184.2, "end": 1186.2, "text": " get", "tokens": [51265, 483, 51365], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 530, "seek": 116620, "start": 1186.2, "end": 1188.2, "text": " we can look at its content and", "tokens": [51365, 321, 393, 574, 412, 1080, 2701, 293, 51465], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 531, "seek": 116620, "start": 1188.2, "end": 1190.2, "text": " python will internally", "tokens": [51465, 38797, 486, 19501, 51565], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 532, "seek": 116620, "start": 1190.2, "end": 1192.2, "text": " use the wrapper function", "tokens": [51565, 764, 264, 46906, 2445, 51665], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 533, "seek": 116620, "start": 1192.2, "end": 1194.2, "text": " to return", "tokens": [51665, 281, 2736, 51765], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 534, "seek": 116620, "start": 1194.2, "end": 1196.2, "text": " this string", "tokens": [51765, 341, 6798, 51865], "temperature": 0.0, "avg_logprob": -0.03310352504843533, "compression_ratio": 1.655, "no_speech_prob": 0.0006633232114836574}, {"id": 535, "seek": 119620, "start": 1196.2, "end": 1198.2, "text": " like that", "tokens": [50365, 411, 300, 50465], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 536, "seek": 119620, "start": 1198.2, "end": 1200.2, "text": " so this is a value object with", "tokens": [50465, 370, 341, 307, 257, 2158, 2657, 365, 50565], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 537, "seek": 119620, "start": 1200.2, "end": 1202.2, "text": " data equals two that we're creating", "tokens": [50565, 1412, 6915, 732, 300, 321, 434, 4084, 50665], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 538, "seek": 119620, "start": 1202.2, "end": 1204.2, "text": " here now what we'd like to do is", "tokens": [50665, 510, 586, 437, 321, 1116, 411, 281, 360, 307, 50765], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 539, "seek": 119620, "start": 1204.2, "end": 1206.2, "text": " like we'd like to be able to", "tokens": [50765, 411, 321, 1116, 411, 281, 312, 1075, 281, 50865], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 540, "seek": 119620, "start": 1206.2, "end": 1208.2, "text": " have not just like", "tokens": [50865, 362, 406, 445, 411, 50965], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 541, "seek": 119620, "start": 1208.2, "end": 1210.2, "text": " two values but", "tokens": [50965, 732, 4190, 457, 51065], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 542, "seek": 119620, "start": 1210.2, "end": 1212.2, "text": " we'd like to do a plus b right we'd like", "tokens": [51065, 321, 1116, 411, 281, 360, 257, 1804, 272, 558, 321, 1116, 411, 51165], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 543, "seek": 119620, "start": 1212.2, "end": 1214.2, "text": " to add them so currently", "tokens": [51165, 281, 909, 552, 370, 4362, 51265], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 544, "seek": 119620, "start": 1214.2, "end": 1216.2, "text": " you would get an error because python", "tokens": [51265, 291, 576, 483, 364, 6713, 570, 38797, 51365], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 545, "seek": 119620, "start": 1216.2, "end": 1218.2, "text": " doesn't know how to add two value", "tokens": [51365, 1177, 380, 458, 577, 281, 909, 732, 2158, 51465], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 546, "seek": 119620, "start": 1218.2, "end": 1220.2, "text": " objects so we have to tell it", "tokens": [51465, 6565, 370, 321, 362, 281, 980, 309, 51565], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 547, "seek": 119620, "start": 1220.2, "end": 1222.2, "text": " so here's", "tokens": [51565, 370, 510, 311, 51665], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 548, "seek": 119620, "start": 1222.2, "end": 1224.2, "text": " addition", "tokens": [51665, 4500, 51765], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 549, "seek": 119620, "start": 1224.2, "end": 1226.2, "text": " so", "tokens": [51765, 370, 51865], "temperature": 0.0, "avg_logprob": -0.07486892368482506, "compression_ratio": 1.8282828282828283, "no_speech_prob": 0.0016335801919922233}, {"id": 550, "seek": 122620, "start": 1226.2, "end": 1228.2, "text": " you have to basically use these special", "tokens": [50365, 291, 362, 281, 1936, 764, 613, 2121, 50465], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 551, "seek": 122620, "start": 1228.2, "end": 1230.2, "text": " double underscore methods in python to", "tokens": [50465, 3834, 37556, 7150, 294, 38797, 281, 50565], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 552, "seek": 122620, "start": 1230.2, "end": 1232.2, "text": " define these operators for these", "tokens": [50565, 6964, 613, 19077, 337, 613, 50665], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 553, "seek": 122620, "start": 1232.2, "end": 1234.2, "text": " objects so if we call", "tokens": [50665, 6565, 370, 498, 321, 818, 50765], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 554, "seek": 122620, "start": 1234.2, "end": 1236.2, "text": " the", "tokens": [50765, 264, 50865], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 555, "seek": 122620, "start": 1236.2, "end": 1238.2, "text": " if we use this plus", "tokens": [50865, 498, 321, 764, 341, 1804, 50965], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 556, "seek": 122620, "start": 1238.2, "end": 1240.2, "text": " operator python will internally", "tokens": [50965, 12973, 38797, 486, 19501, 51065], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 557, "seek": 122620, "start": 1240.2, "end": 1242.2, "text": " call a dot", "tokens": [51065, 818, 257, 5893, 51165], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 558, "seek": 122620, "start": 1242.2, "end": 1244.2, "text": " add of b that's", "tokens": [51165, 909, 295, 272, 300, 311, 51265], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 559, "seek": 122620, "start": 1244.2, "end": 1246.2, "text": " what will happen internally and so", "tokens": [51265, 437, 486, 1051, 19501, 293, 370, 51365], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 560, "seek": 122620, "start": 1246.2, "end": 1248.2, "text": " b will be the other", "tokens": [51365, 272, 486, 312, 264, 661, 51465], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 561, "seek": 122620, "start": 1248.2, "end": 1250.2, "text": " and self will be", "tokens": [51465, 293, 2698, 486, 312, 51565], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 562, "seek": 122620, "start": 1250.2, "end": 1252.2, "text": " a and so we see that what we're going", "tokens": [51565, 257, 293, 370, 321, 536, 300, 437, 321, 434, 516, 51665], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 563, "seek": 122620, "start": 1252.2, "end": 1254.2, "text": " to return is a new value object and", "tokens": [51665, 281, 2736, 307, 257, 777, 2158, 2657, 293, 51765], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 564, "seek": 122620, "start": 1254.2, "end": 1256.2, "text": " it's just it's going to be wrapping", "tokens": [51765, 309, 311, 445, 309, 311, 516, 281, 312, 21993, 51865], "temperature": 0.0, "avg_logprob": -0.04373352569446229, "compression_ratio": 1.9134615384615385, "no_speech_prob": 0.00041226917528547347}, {"id": 565, "seek": 125620, "start": 1256.2, "end": 1258.2, "text": " the plus of", "tokens": [50365, 264, 1804, 295, 50465], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 566, "seek": 125620, "start": 1258.2, "end": 1260.2, "text": " their data but remember", "tokens": [50465, 641, 1412, 457, 1604, 50565], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 567, "seek": 125620, "start": 1260.2, "end": 1262.2, "text": " now because data is the actual", "tokens": [50565, 586, 570, 1412, 307, 264, 3539, 50665], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 568, "seek": 125620, "start": 1262.2, "end": 1264.2, "text": " like numbered python number so", "tokens": [50665, 411, 40936, 38797, 1230, 370, 50765], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 569, "seek": 125620, "start": 1264.2, "end": 1266.2, "text": " this operator here is just the", "tokens": [50765, 341, 12973, 510, 307, 445, 264, 50865], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 570, "seek": 125620, "start": 1266.2, "end": 1268.2, "text": " typical floating point plus", "tokens": [50865, 7476, 12607, 935, 1804, 50965], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 571, "seek": 125620, "start": 1268.2, "end": 1270.2, "text": " addition now it's not an addition of value", "tokens": [50965, 4500, 586, 309, 311, 406, 364, 4500, 295, 2158, 51065], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 572, "seek": 125620, "start": 1270.2, "end": 1272.2, "text": " objects and we'll return", "tokens": [51065, 6565, 293, 321, 603, 2736, 51165], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 573, "seek": 125620, "start": 1272.2, "end": 1274.2, "text": " a new value so now a", "tokens": [51165, 257, 777, 2158, 370, 586, 257, 51265], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 574, "seek": 125620, "start": 1274.2, "end": 1276.2, "text": " plus b should work and it should print value", "tokens": [51265, 1804, 272, 820, 589, 293, 309, 820, 4482, 2158, 51365], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 575, "seek": 125620, "start": 1276.2, "end": 1278.2, "text": " of negative one", "tokens": [51365, 295, 3671, 472, 51465], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 576, "seek": 125620, "start": 1278.2, "end": 1280.2, "text": " because that's two plus minus three", "tokens": [51465, 570, 300, 311, 732, 1804, 3175, 1045, 51565], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 577, "seek": 125620, "start": 1280.2, "end": 1282.2, "text": " there we go okay let's", "tokens": [51565, 456, 321, 352, 1392, 718, 311, 51665], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 578, "seek": 125620, "start": 1282.2, "end": 1284.2, "text": " now implement multiply", "tokens": [51665, 586, 4445, 12972, 51765], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 579, "seek": 125620, "start": 1284.2, "end": 1286.2, "text": " just so we can recreate this expression here", "tokens": [51765, 445, 370, 321, 393, 25833, 341, 6114, 510, 51865], "temperature": 0.0, "avg_logprob": -0.05341143400772758, "compression_ratio": 1.7745901639344261, "no_speech_prob": 0.0003573082503862679}, {"id": 580, "seek": 128620, "start": 1286.2, "end": 1288.2, "text": " so multiply i think it won't", "tokens": [50365, 370, 12972, 741, 519, 309, 1582, 380, 50465], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 581, "seek": 128620, "start": 1288.2, "end": 1290.2, "text": " surprise you will be fairly similar", "tokens": [50465, 6365, 291, 486, 312, 6457, 2531, 50565], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 582, "seek": 128620, "start": 1290.2, "end": 1292.2, "text": " so instead", "tokens": [50565, 370, 2602, 50665], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 583, "seek": 128620, "start": 1292.2, "end": 1294.2, "text": " of add we're going to be using mul", "tokens": [50665, 295, 909, 321, 434, 516, 281, 312, 1228, 14077, 50765], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 584, "seek": 128620, "start": 1294.2, "end": 1296.2, "text": " and then here of course we want to do times", "tokens": [50765, 293, 550, 510, 295, 1164, 321, 528, 281, 360, 1413, 50865], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 585, "seek": 128620, "start": 1296.2, "end": 1298.2, "text": " and so now we can create a", "tokens": [50865, 293, 370, 586, 321, 393, 1884, 257, 50965], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 586, "seek": 128620, "start": 1298.2, "end": 1300.2, "text": " c value object which will be 10.0", "tokens": [50965, 269, 2158, 2657, 597, 486, 312, 1266, 13, 15, 51065], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 587, "seek": 128620, "start": 1300.2, "end": 1302.2, "text": " and now we should be able to do", "tokens": [51065, 293, 586, 321, 820, 312, 1075, 281, 360, 51165], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 588, "seek": 128620, "start": 1302.2, "end": 1304.2, "text": " a times b", "tokens": [51165, 257, 1413, 272, 51265], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 589, "seek": 128620, "start": 1304.2, "end": 1306.2, "text": " well let's just do a times b first", "tokens": [51265, 731, 718, 311, 445, 360, 257, 1413, 272, 700, 51365], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 590, "seek": 128620, "start": 1306.2, "end": 1308.2, "text": " um", "tokens": [51365, 1105, 51465], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 591, "seek": 128620, "start": 1308.2, "end": 1310.2, "text": " that's value of negative six now", "tokens": [51465, 300, 311, 2158, 295, 3671, 2309, 586, 51565], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 592, "seek": 128620, "start": 1310.2, "end": 1312.2, "text": " and by the way i skipped over this a little", "tokens": [51565, 293, 538, 264, 636, 741, 30193, 670, 341, 257, 707, 51665], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 593, "seek": 128620, "start": 1312.2, "end": 1314.2, "text": " bit suppose that i didn't have the wrapper", "tokens": [51665, 857, 7297, 300, 741, 994, 380, 362, 264, 46906, 51765], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 594, "seek": 128620, "start": 1314.2, "end": 1316.2, "text": " function here then", "tokens": [51765, 2445, 510, 550, 51865], "temperature": 0.0, "avg_logprob": -0.058534148995202914, "compression_ratio": 1.715415019762846, "no_speech_prob": 0.0002385652915108949}, {"id": 595, "seek": 131620, "start": 1316.2, "end": 1318.2, "text": " it's just that you'll get some kind of an ugly expression", "tokens": [50365, 309, 311, 445, 300, 291, 603, 483, 512, 733, 295, 364, 12246, 6114, 50465], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 596, "seek": 131620, "start": 1318.2, "end": 1320.2, "text": " so what wrapper is doing", "tokens": [50465, 370, 437, 46906, 307, 884, 50565], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 597, "seek": 131620, "start": 1320.2, "end": 1322.2, "text": " is it's providing us a way to", "tokens": [50565, 307, 309, 311, 6530, 505, 257, 636, 281, 50665], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 598, "seek": 131620, "start": 1322.2, "end": 1324.2, "text": " print out like a nicer looking expression in", "tokens": [50665, 4482, 484, 411, 257, 22842, 1237, 6114, 294, 50765], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 599, "seek": 131620, "start": 1324.2, "end": 1326.2, "text": " python so we", "tokens": [50765, 38797, 370, 321, 50865], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 600, "seek": 131620, "start": 1326.2, "end": 1328.2, "text": " don't just have something cryptic we", "tokens": [50865, 500, 380, 445, 362, 746, 9844, 299, 321, 50965], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 601, "seek": 131620, "start": 1328.2, "end": 1330.2, "text": " actually are you know it's value of", "tokens": [50965, 767, 366, 291, 458, 309, 311, 2158, 295, 51065], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 602, "seek": 131620, "start": 1330.2, "end": 1332.2, "text": " negative six", "tokens": [51065, 3671, 2309, 51165], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 603, "seek": 131620, "start": 1332.2, "end": 1334.2, "text": " so this gives us a times", "tokens": [51165, 370, 341, 2709, 505, 257, 1413, 51265], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 604, "seek": 131620, "start": 1334.2, "end": 1336.2, "text": " and then this we should now be able", "tokens": [51265, 293, 550, 341, 321, 820, 586, 312, 1075, 51365], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 605, "seek": 131620, "start": 1336.2, "end": 1338.2, "text": " to add c to it because we've defined and", "tokens": [51365, 281, 909, 269, 281, 309, 570, 321, 600, 7642, 293, 51465], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 606, "seek": 131620, "start": 1338.2, "end": 1340.2, "text": " told the python how to do mul and add", "tokens": [51465, 1907, 264, 38797, 577, 281, 360, 14077, 293, 909, 51565], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 607, "seek": 131620, "start": 1340.2, "end": 1342.2, "text": " and so this will call", "tokens": [51565, 293, 370, 341, 486, 818, 51665], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 608, "seek": 131620, "start": 1342.2, "end": 1344.2, "text": " this will basically be equivalent to a dot", "tokens": [51665, 341, 486, 1936, 312, 10344, 281, 257, 5893, 51765], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 609, "seek": 131620, "start": 1344.2, "end": 1346.2, "text": " mul", "tokens": [51765, 14077, 51865], "temperature": 0.0, "avg_logprob": -0.06508323124476842, "compression_ratio": 1.7884615384615385, "no_speech_prob": 0.00026014409377239645}, {"id": 610, "seek": 134620, "start": 1346.2, "end": 1348.2, "text": " of b and then", "tokens": [50365, 295, 272, 293, 550, 50465], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 611, "seek": 134620, "start": 1348.2, "end": 1350.2, "text": " this new value object will be dot", "tokens": [50465, 341, 777, 2158, 2657, 486, 312, 5893, 50565], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 612, "seek": 134620, "start": 1350.2, "end": 1352.2, "text": " add of c", "tokens": [50565, 909, 295, 269, 50665], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 613, "seek": 134620, "start": 1352.2, "end": 1354.2, "text": " and so let's see if that worked", "tokens": [50665, 293, 370, 718, 311, 536, 498, 300, 2732, 50765], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 614, "seek": 134620, "start": 1354.2, "end": 1356.2, "text": " yep so that worked well that gave", "tokens": [50765, 18633, 370, 300, 2732, 731, 300, 2729, 50865], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 615, "seek": 134620, "start": 1356.2, "end": 1358.2, "text": " us four which is what we expect from before", "tokens": [50865, 505, 1451, 597, 307, 437, 321, 2066, 490, 949, 50965], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 616, "seek": 134620, "start": 1358.2, "end": 1360.2, "text": " and i", "tokens": [50965, 293, 741, 51065], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 617, "seek": 134620, "start": 1360.2, "end": 1362.2, "text": " believe we can just call them manually as well", "tokens": [51065, 1697, 321, 393, 445, 818, 552, 16945, 382, 731, 51165], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 618, "seek": 134620, "start": 1362.2, "end": 1364.2, "text": " there we go so", "tokens": [51165, 456, 321, 352, 370, 51265], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 619, "seek": 134620, "start": 1364.2, "end": 1366.2, "text": " yeah okay so now what we are", "tokens": [51265, 1338, 1392, 370, 586, 437, 321, 366, 51365], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 620, "seek": 134620, "start": 1366.2, "end": 1368.2, "text": " missing is the connected tissue of this", "tokens": [51365, 5361, 307, 264, 4582, 12404, 295, 341, 51465], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 621, "seek": 134620, "start": 1368.2, "end": 1370.2, "text": " expression as i mentioned we want to keep", "tokens": [51465, 6114, 382, 741, 2835, 321, 528, 281, 1066, 51565], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 622, "seek": 134620, "start": 1370.2, "end": 1372.2, "text": " these expression graphs so we need to", "tokens": [51565, 613, 6114, 24877, 370, 321, 643, 281, 51665], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 623, "seek": 134620, "start": 1372.2, "end": 1374.2, "text": " know and keep pointers about", "tokens": [51665, 458, 293, 1066, 44548, 466, 51765], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 624, "seek": 134620, "start": 1374.2, "end": 1376.2, "text": " what values produce what other values", "tokens": [51765, 437, 4190, 5258, 437, 661, 4190, 51865], "temperature": 0.0, "avg_logprob": -0.048212459564208984, "compression_ratio": 1.814516129032258, "no_speech_prob": 0.0014393124729394913}, {"id": 625, "seek": 137620, "start": 1376.2, "end": 1378.2, "text": " produce so here for example we are", "tokens": [50365, 5258, 370, 510, 337, 1365, 321, 366, 50465], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 626, "seek": 137620, "start": 1378.2, "end": 1380.2, "text": " going to introduce a new variable which", "tokens": [50465, 516, 281, 5366, 257, 777, 7006, 597, 50565], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 627, "seek": 137620, "start": 1380.2, "end": 1382.2, "text": " we'll call children and by default it", "tokens": [50565, 321, 603, 818, 2227, 293, 538, 7576, 309, 50665], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 628, "seek": 137620, "start": 1382.2, "end": 1384.2, "text": " will be an empty tuple and then we're", "tokens": [50665, 486, 312, 364, 6707, 2604, 781, 293, 550, 321, 434, 50765], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 629, "seek": 137620, "start": 1384.2, "end": 1386.2, "text": " actually going to keep a slightly", "tokens": [50765, 767, 516, 281, 1066, 257, 4748, 50865], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 630, "seek": 137620, "start": 1386.2, "end": 1388.2, "text": " different variable in the class which", "tokens": [50865, 819, 7006, 294, 264, 1508, 597, 50965], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 631, "seek": 137620, "start": 1388.2, "end": 1390.2, "text": " we'll call underscore prev which will be", "tokens": [50965, 321, 603, 818, 37556, 12642, 597, 486, 312, 51065], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 632, "seek": 137620, "start": 1390.2, "end": 1392.2, "text": " the set of children", "tokens": [51065, 264, 992, 295, 2227, 51165], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 633, "seek": 137620, "start": 1392.2, "end": 1394.2, "text": " this is how i done i did it in the", "tokens": [51165, 341, 307, 577, 741, 1096, 741, 630, 309, 294, 264, 51265], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 634, "seek": 137620, "start": 1394.2, "end": 1396.2, "text": " original micrograd looking at my code", "tokens": [51265, 3380, 4532, 7165, 1237, 412, 452, 3089, 51365], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 635, "seek": 137620, "start": 1396.2, "end": 1398.2, "text": " here i can't remember exactly the reason", "tokens": [51365, 510, 741, 393, 380, 1604, 2293, 264, 1778, 51465], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 636, "seek": 137620, "start": 1398.2, "end": 1400.2, "text": " i believe it was efficiency but this", "tokens": [51465, 741, 1697, 309, 390, 10493, 457, 341, 51565], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 637, "seek": 137620, "start": 1400.2, "end": 1402.2, "text": " underscore children will be a tuple for", "tokens": [51565, 37556, 2227, 486, 312, 257, 2604, 781, 337, 51665], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 638, "seek": 137620, "start": 1402.2, "end": 1404.2, "text": " convenience but then when we actually", "tokens": [51665, 19283, 457, 550, 562, 321, 767, 51765], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 639, "seek": 137620, "start": 1404.2, "end": 1406.2, "text": " maintain it in the class it will be just", "tokens": [51765, 6909, 309, 294, 264, 1508, 309, 486, 312, 445, 51865], "temperature": 0.0, "avg_logprob": -0.06760904672262552, "compression_ratio": 1.9471830985915493, "no_speech_prob": 0.0005836452473886311}, {"id": 640, "seek": 140620, "start": 1406.2, "end": 1408.2, "text": " efficiency", "tokens": [50365, 10493, 50465], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 641, "seek": 140620, "start": 1408.2, "end": 1410.2, "text": " so now when", "tokens": [50465, 370, 586, 562, 50565], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 642, "seek": 140620, "start": 1410.2, "end": 1412.2, "text": " we are creating a value like this with a", "tokens": [50565, 321, 366, 4084, 257, 2158, 411, 341, 365, 257, 50665], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 643, "seek": 140620, "start": 1412.2, "end": 1414.2, "text": " constructor children will be empty and", "tokens": [50665, 47479, 2227, 486, 312, 6707, 293, 50765], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 644, "seek": 140620, "start": 1414.2, "end": 1416.2, "text": " prev will be the empty set but when we", "tokens": [50765, 12642, 486, 312, 264, 6707, 992, 457, 562, 321, 50865], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 645, "seek": 140620, "start": 1416.2, "end": 1418.2, "text": " are creating a value through addition or", "tokens": [50865, 366, 4084, 257, 2158, 807, 4500, 420, 50965], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 646, "seek": 140620, "start": 1418.2, "end": 1420.2, "text": " multiplication we're going to feed in", "tokens": [50965, 27290, 321, 434, 516, 281, 3154, 294, 51065], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 647, "seek": 140620, "start": 1420.2, "end": 1422.2, "text": " the children of this", "tokens": [51065, 264, 2227, 295, 341, 51165], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 648, "seek": 140620, "start": 1422.2, "end": 1424.2, "text": " value which in this case is self", "tokens": [51165, 2158, 597, 294, 341, 1389, 307, 2698, 51265], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 649, "seek": 140620, "start": 1424.2, "end": 1426.2, "text": " another", "tokens": [51265, 1071, 51365], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 650, "seek": 140620, "start": 1426.2, "end": 1428.2, "text": " so those are the children", "tokens": [51365, 370, 729, 366, 264, 2227, 51465], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 651, "seek": 140620, "start": 1428.2, "end": 1430.2, "text": " here", "tokens": [51465, 510, 51565], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 652, "seek": 140620, "start": 1430.2, "end": 1432.2, "text": " so now we can do d dot", "tokens": [51565, 370, 586, 321, 393, 360, 274, 5893, 51665], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 653, "seek": 140620, "start": 1432.2, "end": 1434.2, "text": " prev and we'll see that", "tokens": [51665, 12642, 293, 321, 603, 536, 300, 51765], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 654, "seek": 140620, "start": 1434.2, "end": 1436.2, "text": " the children of the we know", "tokens": [51765, 264, 2227, 295, 264, 321, 458, 51865], "temperature": 0.0, "avg_logprob": -0.08797422755848278, "compression_ratio": 1.9303482587064678, "no_speech_prob": 0.0001455993187846616}, {"id": 655, "seek": 143620, "start": 1436.2, "end": 1438.2, "text": " now know are this a value of", "tokens": [50365, 586, 458, 366, 341, 257, 2158, 295, 50465], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 656, "seek": 143620, "start": 1438.2, "end": 1440.2, "text": " negative six and value of ten", "tokens": [50465, 3671, 2309, 293, 2158, 295, 2064, 50565], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 657, "seek": 143620, "start": 1440.2, "end": 1442.2, "text": " and this of course is the value resulting", "tokens": [50565, 293, 341, 295, 1164, 307, 264, 2158, 16505, 50665], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 658, "seek": 143620, "start": 1442.2, "end": 1444.2, "text": " from a times b and the", "tokens": [50665, 490, 257, 1413, 272, 293, 264, 50765], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 659, "seek": 143620, "start": 1444.2, "end": 1446.2, "text": " c value which is ten", "tokens": [50765, 269, 2158, 597, 307, 2064, 50865], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 660, "seek": 143620, "start": 1446.2, "end": 1448.2, "text": " now the last piece of information", "tokens": [50865, 586, 264, 1036, 2522, 295, 1589, 50965], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 661, "seek": 143620, "start": 1448.2, "end": 1450.2, "text": " we don't know so we know now the", "tokens": [50965, 321, 500, 380, 458, 370, 321, 458, 586, 264, 51065], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 662, "seek": 143620, "start": 1450.2, "end": 1452.2, "text": " children of every single value but we don't know", "tokens": [51065, 2227, 295, 633, 2167, 2158, 457, 321, 500, 380, 458, 51165], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 663, "seek": 143620, "start": 1452.2, "end": 1454.2, "text": " what operation created this value", "tokens": [51165, 437, 6916, 2942, 341, 2158, 51265], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 664, "seek": 143620, "start": 1454.2, "end": 1456.2, "text": " so we need one more element", "tokens": [51265, 370, 321, 643, 472, 544, 4478, 51365], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 665, "seek": 143620, "start": 1456.2, "end": 1458.2, "text": " here let's call it underscore pop", "tokens": [51365, 510, 718, 311, 818, 309, 37556, 1665, 51465], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 666, "seek": 143620, "start": 1458.2, "end": 1460.2, "text": " and by default this", "tokens": [51465, 293, 538, 7576, 341, 51565], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 667, "seek": 143620, "start": 1460.2, "end": 1462.2, "text": " is the empty set for leaves", "tokens": [51565, 307, 264, 6707, 992, 337, 5510, 51665], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 668, "seek": 143620, "start": 1462.2, "end": 1464.2, "text": " and then we'll just maintain it here", "tokens": [51665, 293, 550, 321, 603, 445, 6909, 309, 510, 51765], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 669, "seek": 143620, "start": 1464.2, "end": 1466.2, "text": " and now the", "tokens": [51765, 293, 586, 264, 51865], "temperature": 0.0, "avg_logprob": -0.050676405899168, "compression_ratio": 1.871900826446281, "no_speech_prob": 0.0009975980501621962}, {"id": 670, "seek": 146620, "start": 1466.2, "end": 1468.2, "text": " operation will be just a simple string", "tokens": [50365, 6916, 486, 312, 445, 257, 2199, 6798, 50465], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 671, "seek": 146620, "start": 1468.2, "end": 1470.2, "text": " and in the case of addition it's", "tokens": [50465, 293, 294, 264, 1389, 295, 4500, 309, 311, 50565], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 672, "seek": 146620, "start": 1470.2, "end": 1472.2, "text": " plus in the case of multiplication", "tokens": [50565, 1804, 294, 264, 1389, 295, 27290, 50665], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 673, "seek": 146620, "start": 1472.2, "end": 1474.2, "text": " it's times so", "tokens": [50665, 309, 311, 1413, 370, 50765], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 674, "seek": 146620, "start": 1474.2, "end": 1476.2, "text": " now we not just have d dot", "tokens": [50765, 586, 321, 406, 445, 362, 274, 5893, 50865], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 675, "seek": 146620, "start": 1476.2, "end": 1478.2, "text": " prev we also have a d dot op", "tokens": [50865, 12642, 321, 611, 362, 257, 274, 5893, 999, 50965], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 676, "seek": 146620, "start": 1478.2, "end": 1480.2, "text": " and we know that d was produced by", "tokens": [50965, 293, 321, 458, 300, 274, 390, 7126, 538, 51065], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 677, "seek": 146620, "start": 1480.2, "end": 1482.2, "text": " an addition of those two values", "tokens": [51065, 364, 4500, 295, 729, 732, 4190, 51165], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 678, "seek": 146620, "start": 1482.2, "end": 1484.2, "text": " and so now we have the full", "tokens": [51165, 293, 370, 586, 321, 362, 264, 1577, 51265], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 679, "seek": 146620, "start": 1484.2, "end": 1486.2, "text": " mathematical expression and we're", "tokens": [51265, 18894, 6114, 293, 321, 434, 51365], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 680, "seek": 146620, "start": 1486.2, "end": 1488.2, "text": " building out this data structure and we know exactly", "tokens": [51365, 2390, 484, 341, 1412, 3877, 293, 321, 458, 2293, 51465], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 681, "seek": 146620, "start": 1488.2, "end": 1490.2, "text": " how each value came to be", "tokens": [51465, 577, 1184, 2158, 1361, 281, 312, 51565], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 682, "seek": 146620, "start": 1490.2, "end": 1492.2, "text": " by what expression and from what other values", "tokens": [51565, 538, 437, 6114, 293, 490, 437, 661, 4190, 51665], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 683, "seek": 146620, "start": 1494.2, "end": 1496.2, "text": " now because these expressions are about", "tokens": [51765, 586, 570, 613, 15277, 366, 466, 51865], "temperature": 0.0, "avg_logprob": -0.046091260448578864, "compression_ratio": 1.910569105691057, "no_speech_prob": 0.0007718548877164721}, {"id": 684, "seek": 149620, "start": 1496.2, "end": 1498.2, "text": " to get quite a bit larger we'd like a", "tokens": [50365, 281, 483, 1596, 257, 857, 4833, 321, 1116, 411, 257, 50465], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 685, "seek": 149620, "start": 1498.2, "end": 1500.2, "text": " way to nicely visualize", "tokens": [50465, 636, 281, 9594, 23273, 50565], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 686, "seek": 149620, "start": 1500.2, "end": 1502.2, "text": " these expressions that we're building out", "tokens": [50565, 613, 15277, 300, 321, 434, 2390, 484, 50665], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 687, "seek": 149620, "start": 1502.2, "end": 1504.2, "text": " so for that i'm going to copy paste a bunch of", "tokens": [50665, 370, 337, 300, 741, 478, 516, 281, 5055, 9163, 257, 3840, 295, 50765], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 688, "seek": 149620, "start": 1504.2, "end": 1506.2, "text": " slightly scary code that's", "tokens": [50765, 4748, 6958, 3089, 300, 311, 50865], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 689, "seek": 149620, "start": 1506.2, "end": 1508.2, "text": " going to visualize this these", "tokens": [50865, 516, 281, 23273, 341, 613, 50965], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 690, "seek": 149620, "start": 1508.2, "end": 1510.2, "text": " expression graphs for us so here's the", "tokens": [50965, 6114, 24877, 337, 505, 370, 510, 311, 264, 51065], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 691, "seek": 149620, "start": 1510.2, "end": 1512.2, "text": " code and i'll explain it in a bit", "tokens": [51065, 3089, 293, 741, 603, 2903, 309, 294, 257, 857, 51165], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 692, "seek": 149620, "start": 1512.2, "end": 1514.2, "text": " but first let me just show you what this code does", "tokens": [51165, 457, 700, 718, 385, 445, 855, 291, 437, 341, 3089, 775, 51265], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 693, "seek": 149620, "start": 1514.2, "end": 1516.2, "text": " basically what it does is it creates", "tokens": [51265, 1936, 437, 309, 775, 307, 309, 7829, 51365], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 694, "seek": 149620, "start": 1516.2, "end": 1518.2, "text": " a new function draw dot", "tokens": [51365, 257, 777, 2445, 2642, 5893, 51465], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 695, "seek": 149620, "start": 1518.2, "end": 1520.2, "text": " that we can call on some root node", "tokens": [51465, 300, 321, 393, 818, 322, 512, 5593, 9984, 51565], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 696, "seek": 149620, "start": 1520.2, "end": 1522.2, "text": " and then it's going to visualize it", "tokens": [51565, 293, 550, 309, 311, 516, 281, 23273, 309, 51665], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 697, "seek": 149620, "start": 1522.2, "end": 1524.2, "text": " so if we call draw dot on d", "tokens": [51665, 370, 498, 321, 818, 2642, 5893, 322, 274, 51765], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 698, "seek": 149620, "start": 1524.2, "end": 1526.2, "text": " which is this final value here", "tokens": [51765, 597, 307, 341, 2572, 2158, 510, 51865], "temperature": 0.0, "avg_logprob": -0.03103429741329617, "compression_ratio": 1.905109489051095, "no_speech_prob": 0.0005151591030880809}, {"id": 699, "seek": 152620, "start": 1526.2, "end": 1528.2, "text": " that is a times b plus c", "tokens": [50365, 300, 307, 257, 1413, 272, 1804, 269, 50465], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 700, "seek": 152620, "start": 1528.2, "end": 1530.2, "text": " it creates", "tokens": [50465, 309, 7829, 50565], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 701, "seek": 152620, "start": 1530.2, "end": 1532.2, "text": " something like this so this is d", "tokens": [50565, 746, 411, 341, 370, 341, 307, 274, 50665], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 702, "seek": 152620, "start": 1532.2, "end": 1534.2, "text": " and you see that this is a times b", "tokens": [50665, 293, 291, 536, 300, 341, 307, 257, 1413, 272, 50765], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 703, "seek": 152620, "start": 1534.2, "end": 1536.2, "text": " creating an interpret value", "tokens": [50765, 4084, 364, 7302, 2158, 50865], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 704, "seek": 152620, "start": 1536.2, "end": 1538.2, "text": " plus c gives us this output", "tokens": [50865, 1804, 269, 2709, 505, 341, 5598, 50965], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 705, "seek": 152620, "start": 1538.2, "end": 1540.2, "text": " node d", "tokens": [50965, 9984, 274, 51065], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 706, "seek": 152620, "start": 1540.2, "end": 1542.2, "text": " so that's draw dot of d", "tokens": [51065, 370, 300, 311, 2642, 5893, 295, 274, 51165], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 707, "seek": 152620, "start": 1542.2, "end": 1544.2, "text": " and i'm not going to go through this", "tokens": [51165, 293, 741, 478, 406, 516, 281, 352, 807, 341, 51265], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 708, "seek": 152620, "start": 1544.2, "end": 1546.2, "text": " in complete detail you can take a look at", "tokens": [51265, 294, 3566, 2607, 291, 393, 747, 257, 574, 412, 51365], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 709, "seek": 152620, "start": 1546.2, "end": 1548.2, "text": " graphvis and its api", "tokens": [51365, 4295, 4938, 293, 1080, 1882, 72, 51465], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 710, "seek": 152620, "start": 1548.2, "end": 1550.2, "text": " graphvis is an open source graph visualization", "tokens": [51465, 4295, 4938, 307, 364, 1269, 4009, 4295, 25801, 51565], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 711, "seek": 152620, "start": 1550.2, "end": 1552.2, "text": " software and what we're doing here", "tokens": [51565, 4722, 293, 437, 321, 434, 884, 510, 51665], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 712, "seek": 152620, "start": 1552.2, "end": 1554.2, "text": " is we're building out this graph in graphvis", "tokens": [51665, 307, 321, 434, 2390, 484, 341, 4295, 294, 4295, 4938, 51765], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 713, "seek": 152620, "start": 1554.2, "end": 1556.2, "text": " api and", "tokens": [51765, 1882, 72, 293, 51865], "temperature": 0.0, "avg_logprob": -0.05991010966263418, "compression_ratio": 1.8558951965065502, "no_speech_prob": 0.0003240126825403422}, {"id": 714, "seek": 155620, "start": 1556.2, "end": 1558.2, "text": " you can basically see that", "tokens": [50365, 291, 393, 1936, 536, 300, 50465], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 715, "seek": 155620, "start": 1558.2, "end": 1560.2, "text": " trace is this helper function that", "tokens": [50465, 13508, 307, 341, 36133, 2445, 300, 50565], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 716, "seek": 155620, "start": 1560.2, "end": 1562.2, "text": " enumerates all the nodes and edges in the graph", "tokens": [50565, 465, 15583, 1024, 439, 264, 13891, 293, 8819, 294, 264, 4295, 50665], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 717, "seek": 155620, "start": 1562.2, "end": 1564.2, "text": " so that just builds a set of all", "tokens": [50665, 370, 300, 445, 15182, 257, 992, 295, 439, 50765], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 718, "seek": 155620, "start": 1564.2, "end": 1566.2, "text": " the nodes and edges and then we iterate through", "tokens": [50765, 264, 13891, 293, 8819, 293, 550, 321, 44497, 807, 50865], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 719, "seek": 155620, "start": 1566.2, "end": 1568.2, "text": " all the nodes and we create special node", "tokens": [50865, 439, 264, 13891, 293, 321, 1884, 2121, 9984, 50965], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 720, "seek": 155620, "start": 1568.2, "end": 1570.2, "text": " objects for them in", "tokens": [50965, 6565, 337, 552, 294, 51065], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 721, "seek": 155620, "start": 1570.2, "end": 1572.2, "text": " using dot", "tokens": [51065, 1228, 5893, 51165], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 722, "seek": 155620, "start": 1572.2, "end": 1574.2, "text": " node and then we also", "tokens": [51165, 9984, 293, 550, 321, 611, 51265], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 723, "seek": 155620, "start": 1574.2, "end": 1576.2, "text": " create edges using dot dot edge", "tokens": [51265, 1884, 8819, 1228, 5893, 5893, 4691, 51365], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 724, "seek": 155620, "start": 1576.2, "end": 1578.2, "text": " and the only thing that's like slightly", "tokens": [51365, 293, 264, 787, 551, 300, 311, 411, 4748, 51465], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 725, "seek": 155620, "start": 1578.2, "end": 1580.2, "text": " tricky here is you'll notice that i", "tokens": [51465, 12414, 510, 307, 291, 603, 3449, 300, 741, 51565], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 726, "seek": 155620, "start": 1580.2, "end": 1582.2, "text": " basically add these fake nodes", "tokens": [51565, 1936, 909, 613, 7592, 13891, 51665], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 727, "seek": 155620, "start": 1582.2, "end": 1584.2, "text": " which are these operation nodes", "tokens": [51665, 597, 366, 613, 6916, 13891, 51765], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 728, "seek": 155620, "start": 1584.2, "end": 1586.2, "text": " so for example this node here is just", "tokens": [51765, 370, 337, 1365, 341, 9984, 510, 307, 445, 51865], "temperature": 0.0, "avg_logprob": -0.04948926156805467, "compression_ratio": 1.991902834008097, "no_speech_prob": 0.0003807404136750847}, {"id": 729, "seek": 158620, "start": 1586.2, "end": 1588.2, "text": " like a plus node and", "tokens": [50365, 411, 257, 1804, 9984, 293, 50465], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 730, "seek": 158620, "start": 1588.2, "end": 1590.2, "text": " i create these", "tokens": [50465, 741, 1884, 613, 50565], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 731, "seek": 158620, "start": 1590.2, "end": 1592.2, "text": " special", "tokens": [50565, 2121, 50665], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 732, "seek": 158620, "start": 1592.2, "end": 1594.2, "text": " op nodes here", "tokens": [50665, 999, 13891, 510, 50765], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 733, "seek": 158620, "start": 1594.2, "end": 1596.2, "text": " and i connect them accordingly", "tokens": [50765, 293, 741, 1745, 552, 19717, 50865], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 734, "seek": 158620, "start": 1596.2, "end": 1598.2, "text": " so these nodes of course", "tokens": [50865, 370, 613, 13891, 295, 1164, 50965], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 735, "seek": 158620, "start": 1598.2, "end": 1600.2, "text": " are not actual nodes", "tokens": [50965, 366, 406, 3539, 13891, 51065], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 736, "seek": 158620, "start": 1600.2, "end": 1602.2, "text": " in the original graph they're not", "tokens": [51065, 294, 264, 3380, 4295, 436, 434, 406, 51165], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 737, "seek": 158620, "start": 1602.2, "end": 1604.2, "text": " actually a value object the only", "tokens": [51165, 767, 257, 2158, 2657, 264, 787, 51265], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 738, "seek": 158620, "start": 1604.2, "end": 1606.2, "text": " value objects here are the things", "tokens": [51265, 2158, 6565, 510, 366, 264, 721, 51365], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 739, "seek": 158620, "start": 1606.2, "end": 1608.2, "text": " in squares those are actual value", "tokens": [51365, 294, 19368, 729, 366, 3539, 2158, 51465], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 740, "seek": 158620, "start": 1608.2, "end": 1610.2, "text": " objects or representations thereof", "tokens": [51465, 6565, 420, 33358, 456, 2670, 51565], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 741, "seek": 158620, "start": 1610.2, "end": 1612.2, "text": " and these op nodes are just created in", "tokens": [51565, 293, 613, 999, 13891, 366, 445, 2942, 294, 51665], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 742, "seek": 158620, "start": 1612.2, "end": 1614.2, "text": " this draw dot routine so that", "tokens": [51665, 341, 2642, 5893, 9927, 370, 300, 51765], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 743, "seek": 158620, "start": 1614.2, "end": 1616.2, "text": " it looks nice let's also", "tokens": [51765, 309, 1542, 1481, 718, 311, 611, 51865], "temperature": 0.0, "avg_logprob": -0.04714304487281871, "compression_ratio": 1.9043062200956937, "no_speech_prob": 0.00041272747330367565}, {"id": 744, "seek": 161620, "start": 1616.2, "end": 1618.2, "text": " add labels to these graphs just so we", "tokens": [50365, 909, 16949, 281, 613, 24877, 445, 370, 321, 50465], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 745, "seek": 161620, "start": 1618.2, "end": 1620.2, "text": " know what variables are where", "tokens": [50465, 458, 437, 9102, 366, 689, 50565], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 746, "seek": 161620, "start": 1620.2, "end": 1622.2, "text": " so let's create a special underscore", "tokens": [50565, 370, 718, 311, 1884, 257, 2121, 37556, 50665], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 747, "seek": 161620, "start": 1622.2, "end": 1624.2, "text": " label", "tokens": [50665, 7645, 50765], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 748, "seek": 161620, "start": 1624.2, "end": 1626.2, "text": " or let's just do label equals", "tokens": [50765, 420, 718, 311, 445, 360, 7645, 6915, 50865], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 749, "seek": 161620, "start": 1626.2, "end": 1628.2, "text": " empty by default and save it", "tokens": [50865, 6707, 538, 7576, 293, 3155, 309, 50965], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 750, "seek": 161620, "start": 1628.2, "end": 1630.2, "text": " in each node", "tokens": [50965, 294, 1184, 9984, 51065], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 751, "seek": 161620, "start": 1630.2, "end": 1632.2, "text": " and then here", "tokens": [51065, 293, 550, 510, 51165], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 752, "seek": 161620, "start": 1632.2, "end": 1634.2, "text": " we're going to do label is a", "tokens": [51165, 321, 434, 516, 281, 360, 7645, 307, 257, 51265], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 753, "seek": 161620, "start": 1634.2, "end": 1636.2, "text": " label is b", "tokens": [51265, 7645, 307, 272, 51365], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 754, "seek": 161620, "start": 1636.2, "end": 1638.2, "text": " label is c", "tokens": [51365, 7645, 307, 269, 51465], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 755, "seek": 161620, "start": 1642.2, "end": 1644.2, "text": " and then", "tokens": [51665, 293, 550, 51765], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 756, "seek": 161620, "start": 1644.2, "end": 1646.2, "text": " let's create a special", "tokens": [51765, 718, 311, 1884, 257, 2121, 51865], "temperature": 0.0, "avg_logprob": -0.08356462283567949, "compression_ratio": 1.7770700636942676, "no_speech_prob": 0.0005485434667207301}, {"id": 757, "seek": 164620, "start": 1646.2, "end": 1648.2, "text": " um e equals", "tokens": [50365, 1105, 308, 6915, 50465], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 758, "seek": 164620, "start": 1648.2, "end": 1650.2, "text": " a times b", "tokens": [50465, 257, 1413, 272, 50565], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 759, "seek": 164620, "start": 1650.2, "end": 1652.2, "text": " and e dot label will", "tokens": [50565, 293, 308, 5893, 7645, 486, 50665], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 760, "seek": 164620, "start": 1652.2, "end": 1654.2, "text": " be e", "tokens": [50665, 312, 308, 50765], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 761, "seek": 164620, "start": 1654.2, "end": 1656.2, "text": " it's kind of naughty and e", "tokens": [50765, 309, 311, 733, 295, 32154, 293, 308, 50865], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 762, "seek": 164620, "start": 1656.2, "end": 1658.2, "text": " will be e plus c", "tokens": [50865, 486, 312, 308, 1804, 269, 50965], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 763, "seek": 164620, "start": 1658.2, "end": 1660.2, "text": " and a d dot label will be", "tokens": [50965, 293, 257, 274, 5893, 7645, 486, 312, 51065], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 764, "seek": 164620, "start": 1660.2, "end": 1662.2, "text": " b", "tokens": [51065, 272, 51165], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 765, "seek": 164620, "start": 1662.2, "end": 1664.2, "text": " okay so nothing really changes i just", "tokens": [51165, 1392, 370, 1825, 534, 2962, 741, 445, 51265], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 766, "seek": 164620, "start": 1664.2, "end": 1666.2, "text": " added this new e function", "tokens": [51265, 3869, 341, 777, 308, 2445, 51365], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 767, "seek": 164620, "start": 1666.2, "end": 1668.2, "text": " a new e variable", "tokens": [51365, 257, 777, 308, 7006, 51465], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 768, "seek": 164620, "start": 1668.2, "end": 1670.2, "text": " and then here when we are", "tokens": [51465, 293, 550, 510, 562, 321, 366, 51565], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 769, "seek": 164620, "start": 1670.2, "end": 1672.2, "text": " printing this i'm going", "tokens": [51565, 14699, 341, 741, 478, 516, 51665], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 770, "seek": 164620, "start": 1672.2, "end": 1674.2, "text": " to print the label here", "tokens": [51665, 281, 4482, 264, 7645, 510, 51765], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 771, "seek": 164620, "start": 1674.2, "end": 1676.2, "text": " so this will be a percent s", "tokens": [51765, 370, 341, 486, 312, 257, 3043, 262, 51865], "temperature": 0.0, "avg_logprob": -0.07900328775054043, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.0004046400135848671}, {"id": 772, "seek": 167620, "start": 1676.2, "end": 1678.2, "text": " bar and this will be n dot", "tokens": [50365, 2159, 293, 341, 486, 312, 297, 5893, 50465], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 773, "seek": 167620, "start": 1678.2, "end": 1680.2, "text": " label", "tokens": [50465, 7645, 50565], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 774, "seek": 167620, "start": 1680.2, "end": 1682.2, "text": " and so now", "tokens": [50565, 293, 370, 586, 50665], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 775, "seek": 167620, "start": 1682.2, "end": 1684.2, "text": " we have the label", "tokens": [50665, 321, 362, 264, 7645, 50765], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 776, "seek": 167620, "start": 1684.2, "end": 1686.2, "text": " on the left here so it says a b", "tokens": [50765, 322, 264, 1411, 510, 370, 309, 1619, 257, 272, 50865], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 777, "seek": 167620, "start": 1686.2, "end": 1688.2, "text": " creating e and then e plus c creates", "tokens": [50865, 4084, 308, 293, 550, 308, 1804, 269, 7829, 50965], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 778, "seek": 167620, "start": 1688.2, "end": 1690.2, "text": " d just like we have it", "tokens": [50965, 274, 445, 411, 321, 362, 309, 51065], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 779, "seek": 167620, "start": 1690.2, "end": 1692.2, "text": " here and finally let's make this", "tokens": [51065, 510, 293, 2721, 718, 311, 652, 341, 51165], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 780, "seek": 167620, "start": 1692.2, "end": 1694.2, "text": " expression just one layer deeper", "tokens": [51165, 6114, 445, 472, 4583, 7731, 51265], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 781, "seek": 167620, "start": 1694.2, "end": 1696.2, "text": " so d will not be the final output", "tokens": [51265, 370, 274, 486, 406, 312, 264, 2572, 5598, 51365], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 782, "seek": 167620, "start": 1696.2, "end": 1698.2, "text": " node instead", "tokens": [51365, 9984, 2602, 51465], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 783, "seek": 167620, "start": 1698.2, "end": 1700.2, "text": " after d we are going to create a", "tokens": [51465, 934, 274, 321, 366, 516, 281, 1884, 257, 51565], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 784, "seek": 167620, "start": 1700.2, "end": 1702.2, "text": " new value object called", "tokens": [51565, 777, 2158, 2657, 1219, 51665], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 785, "seek": 167620, "start": 1702.2, "end": 1704.2, "text": " f we're going to start running out of", "tokens": [51665, 283, 321, 434, 516, 281, 722, 2614, 484, 295, 51765], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 786, "seek": 167620, "start": 1704.2, "end": 1706.2, "text": " variables soon f will be negative two", "tokens": [51765, 9102, 2321, 283, 486, 312, 3671, 732, 51865], "temperature": 0.0, "avg_logprob": -0.06839264941816571, "compression_ratio": 1.78125, "no_speech_prob": 0.00011749078112188727}, {"id": 787, "seek": 170620, "start": 1706.2, "end": 1708.2, "text": " point zero and its label", "tokens": [50365, 935, 4018, 293, 1080, 7645, 50465], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 788, "seek": 170620, "start": 1708.2, "end": 1710.2, "text": " will of course just be f", "tokens": [50465, 486, 295, 1164, 445, 312, 283, 50565], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 789, "seek": 170620, "start": 1710.2, "end": 1712.2, "text": " and then l", "tokens": [50565, 293, 550, 287, 50665], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 790, "seek": 170620, "start": 1712.2, "end": 1714.2, "text": " capital l will be the output", "tokens": [50665, 4238, 287, 486, 312, 264, 5598, 50765], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 791, "seek": 170620, "start": 1714.2, "end": 1716.2, "text": " of our graph and l will be", "tokens": [50765, 295, 527, 4295, 293, 287, 486, 312, 50865], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 792, "seek": 170620, "start": 1716.2, "end": 1718.2, "text": " d times f", "tokens": [50865, 274, 1413, 283, 50965], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 793, "seek": 170620, "start": 1718.2, "end": 1720.2, "text": " okay so l will be negative eight", "tokens": [50965, 1392, 370, 287, 486, 312, 3671, 3180, 51065], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 794, "seek": 170620, "start": 1720.2, "end": 1722.2, "text": " is the output", "tokens": [51065, 307, 264, 5598, 51165], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 795, "seek": 170620, "start": 1722.2, "end": 1724.2, "text": " uh so", "tokens": [51165, 2232, 370, 51265], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 796, "seek": 170620, "start": 1724.2, "end": 1726.2, "text": " now we don't just draw a", "tokens": [51265, 586, 321, 500, 380, 445, 2642, 257, 51365], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 797, "seek": 170620, "start": 1726.2, "end": 1728.2, "text": " d we draw l", "tokens": [51365, 274, 321, 2642, 287, 51465], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 798, "seek": 170620, "start": 1730.2, "end": 1732.2, "text": " okay", "tokens": [51565, 1392, 51665], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 799, "seek": 170620, "start": 1732.2, "end": 1734.2, "text": " and somehow the label of", "tokens": [51665, 293, 6063, 264, 7645, 295, 51765], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 800, "seek": 170620, "start": 1734.2, "end": 1736.2, "text": " l is undefined oops", "tokens": [51765, 287, 307, 674, 5666, 2001, 34166, 51865], "temperature": 0.0, "avg_logprob": -0.07608189988643566, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.00030518832500092685}, {"id": 801, "seek": 173620, "start": 1736.2, "end": 1738.2, "text": " the label has to be explicitly", "tokens": [50365, 264, 7645, 575, 281, 312, 20803, 50465], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 802, "seek": 173620, "start": 1738.2, "end": 1740.2, "text": " given to it", "tokens": [50465, 2212, 281, 309, 50565], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 803, "seek": 173620, "start": 1740.2, "end": 1742.2, "text": " there we go so l is the output", "tokens": [50565, 456, 321, 352, 370, 287, 307, 264, 5598, 50665], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 804, "seek": 173620, "start": 1742.2, "end": 1744.2, "text": " so let's quickly recap what we've done so far", "tokens": [50665, 370, 718, 311, 2661, 20928, 437, 321, 600, 1096, 370, 1400, 50765], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 805, "seek": 173620, "start": 1744.2, "end": 1746.2, "text": " we are able to build out mathematical", "tokens": [50765, 321, 366, 1075, 281, 1322, 484, 18894, 50865], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 806, "seek": 173620, "start": 1746.2, "end": 1748.2, "text": " expressions using only plus and times", "tokens": [50865, 15277, 1228, 787, 1804, 293, 1413, 50965], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 807, "seek": 173620, "start": 1748.2, "end": 1750.2, "text": " so far they are scalar", "tokens": [50965, 370, 1400, 436, 366, 39684, 51065], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 808, "seek": 173620, "start": 1750.2, "end": 1752.2, "text": " valued along the way and we can", "tokens": [51065, 22608, 2051, 264, 636, 293, 321, 393, 51165], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 809, "seek": 173620, "start": 1752.2, "end": 1754.2, "text": " do this forward pass", "tokens": [51165, 360, 341, 2128, 1320, 51265], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 810, "seek": 173620, "start": 1754.2, "end": 1756.2, "text": " and build out a mathematical expression", "tokens": [51265, 293, 1322, 484, 257, 18894, 6114, 51365], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 811, "seek": 173620, "start": 1756.2, "end": 1758.2, "text": " so we have multiple inputs here", "tokens": [51365, 370, 321, 362, 3866, 15743, 510, 51465], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 812, "seek": 173620, "start": 1758.2, "end": 1760.2, "text": " a b c and f going into", "tokens": [51465, 257, 272, 269, 293, 283, 516, 666, 51565], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 813, "seek": 173620, "start": 1760.2, "end": 1762.2, "text": " a mathematical expression that produces", "tokens": [51565, 257, 18894, 6114, 300, 14725, 51665], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 814, "seek": 173620, "start": 1762.2, "end": 1764.2, "text": " a single output l", "tokens": [51665, 257, 2167, 5598, 287, 51765], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 815, "seek": 173620, "start": 1764.2, "end": 1766.2, "text": " and this here is visualizing the", "tokens": [51765, 293, 341, 510, 307, 5056, 3319, 264, 51865], "temperature": 0.0, "avg_logprob": -0.07178220516297876, "compression_ratio": 1.8884297520661157, "no_speech_prob": 0.0003257137141190469}, {"id": 816, "seek": 176620, "start": 1766.2, "end": 1768.2, "text": " forward pass so the output of the", "tokens": [50365, 2128, 1320, 370, 264, 5598, 295, 264, 50465], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 817, "seek": 176620, "start": 1768.2, "end": 1770.2, "text": " forward pass is negative eight", "tokens": [50465, 2128, 1320, 307, 3671, 3180, 50565], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 818, "seek": 176620, "start": 1770.2, "end": 1772.2, "text": " that's the value now", "tokens": [50565, 300, 311, 264, 2158, 586, 50665], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 819, "seek": 176620, "start": 1772.2, "end": 1774.2, "text": " what we'd like to do next is we'd like to run", "tokens": [50665, 437, 321, 1116, 411, 281, 360, 958, 307, 321, 1116, 411, 281, 1190, 50765], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 820, "seek": 176620, "start": 1774.2, "end": 1776.2, "text": " back propagation and in back", "tokens": [50765, 646, 38377, 293, 294, 646, 50865], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 821, "seek": 176620, "start": 1776.2, "end": 1778.2, "text": " propagation we are going to start here at the end", "tokens": [50865, 38377, 321, 366, 516, 281, 722, 510, 412, 264, 917, 50965], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 822, "seek": 176620, "start": 1778.2, "end": 1780.2, "text": " and we're going to reverse", "tokens": [50965, 293, 321, 434, 516, 281, 9943, 51065], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 823, "seek": 176620, "start": 1780.2, "end": 1782.2, "text": " and calculate the gradient", "tokens": [51065, 293, 8873, 264, 16235, 51165], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 824, "seek": 176620, "start": 1782.2, "end": 1784.2, "text": " along all these intermediate", "tokens": [51165, 2051, 439, 613, 19376, 51265], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 825, "seek": 176620, "start": 1784.2, "end": 1786.2, "text": " values and really what we're", "tokens": [51265, 4190, 293, 534, 437, 321, 434, 51365], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 826, "seek": 176620, "start": 1786.2, "end": 1788.2, "text": " computing for every single value here", "tokens": [51365, 15866, 337, 633, 2167, 2158, 510, 51465], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 827, "seek": 176620, "start": 1788.2, "end": 1790.2, "text": " um we're going to compute", "tokens": [51465, 1105, 321, 434, 516, 281, 14722, 51565], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 828, "seek": 176620, "start": 1790.2, "end": 1792.2, "text": " the derivative of that node", "tokens": [51565, 264, 13760, 295, 300, 9984, 51665], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 829, "seek": 176620, "start": 1792.2, "end": 1794.2, "text": " with respect to", "tokens": [51665, 365, 3104, 281, 51765], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 830, "seek": 176620, "start": 1794.2, "end": 1796.2, "text": " l so", "tokens": [51765, 287, 370, 51865], "temperature": 0.0, "avg_logprob": -0.04571522696543548, "compression_ratio": 1.9333333333333333, "no_speech_prob": 0.0005338992923498154}, {"id": 831, "seek": 179620, "start": 1796.2, "end": 1798.2, "text": " the derivative of l with respect to l", "tokens": [50365, 264, 13760, 295, 287, 365, 3104, 281, 287, 50465], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 832, "seek": 179620, "start": 1798.2, "end": 1800.2, "text": " is just one", "tokens": [50465, 307, 445, 472, 50565], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 833, "seek": 179620, "start": 1800.2, "end": 1802.2, "text": " and then we're going to derive what is the", "tokens": [50565, 293, 550, 321, 434, 516, 281, 28446, 437, 307, 264, 50665], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 834, "seek": 179620, "start": 1802.2, "end": 1804.2, "text": " derivative of l with respect to f with", "tokens": [50665, 13760, 295, 287, 365, 3104, 281, 283, 365, 50765], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 835, "seek": 179620, "start": 1804.2, "end": 1806.2, "text": " respect to d with respect to c", "tokens": [50765, 3104, 281, 274, 365, 3104, 281, 269, 50865], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 836, "seek": 179620, "start": 1806.2, "end": 1808.2, "text": " with respect to e with respect", "tokens": [50865, 365, 3104, 281, 308, 365, 3104, 50965], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 837, "seek": 179620, "start": 1808.2, "end": 1810.2, "text": " to b and with respect to a", "tokens": [50965, 281, 272, 293, 365, 3104, 281, 257, 51065], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 838, "seek": 179620, "start": 1810.2, "end": 1812.2, "text": " and in a neural network setting you'd", "tokens": [51065, 293, 294, 257, 18161, 3209, 3287, 291, 1116, 51165], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 839, "seek": 179620, "start": 1812.2, "end": 1814.2, "text": " be very interested in the derivative of basically", "tokens": [51165, 312, 588, 3102, 294, 264, 13760, 295, 1936, 51265], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 840, "seek": 179620, "start": 1814.2, "end": 1816.2, "text": " this loss function l", "tokens": [51265, 341, 4470, 2445, 287, 51365], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 841, "seek": 179620, "start": 1816.2, "end": 1818.2, "text": " with respect to the weights of", "tokens": [51365, 365, 3104, 281, 264, 17443, 295, 51465], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 842, "seek": 179620, "start": 1818.2, "end": 1820.2, "text": " a neural network and here of course", "tokens": [51465, 257, 18161, 3209, 293, 510, 295, 1164, 51565], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 843, "seek": 179620, "start": 1820.2, "end": 1822.2, "text": " we have just these variables a b c and f", "tokens": [51565, 321, 362, 445, 613, 9102, 257, 272, 269, 293, 283, 51665], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 844, "seek": 179620, "start": 1822.2, "end": 1824.2, "text": " but some of these will eventually represent", "tokens": [51665, 457, 512, 295, 613, 486, 4728, 2906, 51765], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 845, "seek": 179620, "start": 1824.2, "end": 1826.2, "text": " the weights of a neural net and so", "tokens": [51765, 264, 17443, 295, 257, 18161, 2533, 293, 370, 51865], "temperature": 0.0, "avg_logprob": -0.033967142519743546, "compression_ratio": 2.36697247706422, "no_speech_prob": 0.00021698404452763498}, {"id": 846, "seek": 182620, "start": 1826.2, "end": 1828.2, "text": " we'll need to know how those weights are impacting", "tokens": [50365, 321, 603, 643, 281, 458, 577, 729, 17443, 366, 29963, 50465], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 847, "seek": 182620, "start": 1828.2, "end": 1830.2, "text": " the loss function", "tokens": [50465, 264, 4470, 2445, 50565], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 848, "seek": 182620, "start": 1830.2, "end": 1832.2, "text": " so we'll be interested basically in the derivative of", "tokens": [50565, 370, 321, 603, 312, 3102, 1936, 294, 264, 13760, 295, 50665], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 849, "seek": 182620, "start": 1832.2, "end": 1834.2, "text": " the output with respect to some of its", "tokens": [50665, 264, 5598, 365, 3104, 281, 512, 295, 1080, 50765], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 850, "seek": 182620, "start": 1834.2, "end": 1836.2, "text": " leaf nodes and those leaf nodes will", "tokens": [50765, 10871, 13891, 293, 729, 10871, 13891, 486, 50865], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 851, "seek": 182620, "start": 1836.2, "end": 1838.2, "text": " be the weights of the neural net", "tokens": [50865, 312, 264, 17443, 295, 264, 18161, 2533, 50965], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 852, "seek": 182620, "start": 1838.2, "end": 1840.2, "text": " and the other leaf nodes of course will be the data", "tokens": [50965, 293, 264, 661, 10871, 13891, 295, 1164, 486, 312, 264, 1412, 51065], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 853, "seek": 182620, "start": 1840.2, "end": 1842.2, "text": " itself but usually we will not want", "tokens": [51065, 2564, 457, 2673, 321, 486, 406, 528, 51165], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 854, "seek": 182620, "start": 1842.2, "end": 1844.2, "text": " or use the derivative of the", "tokens": [51165, 420, 764, 264, 13760, 295, 264, 51265], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 855, "seek": 182620, "start": 1844.2, "end": 1846.2, "text": " loss function with respect to data because", "tokens": [51265, 4470, 2445, 365, 3104, 281, 1412, 570, 51365], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 856, "seek": 182620, "start": 1846.2, "end": 1848.2, "text": " the data is fixed but the weights", "tokens": [51365, 264, 1412, 307, 6806, 457, 264, 17443, 51465], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 857, "seek": 182620, "start": 1848.2, "end": 1850.2, "text": " will be iterated on", "tokens": [51465, 486, 312, 17138, 770, 322, 51565], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 858, "seek": 182620, "start": 1850.2, "end": 1852.2, "text": " using the gradient information", "tokens": [51565, 1228, 264, 16235, 1589, 51665], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 859, "seek": 182620, "start": 1852.2, "end": 1854.2, "text": " so next we are going to create a variable inside", "tokens": [51665, 370, 958, 321, 366, 516, 281, 1884, 257, 7006, 1854, 51765], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 860, "seek": 182620, "start": 1854.2, "end": 1856.2, "text": " the value class that maintains", "tokens": [51765, 264, 2158, 1508, 300, 33385, 51865], "temperature": 0.0, "avg_logprob": -0.026296800461368286, "compression_ratio": 2.0441176470588234, "no_speech_prob": 0.000330430397298187}, {"id": 861, "seek": 185620, "start": 1856.2, "end": 1858.2, "text": " the derivative of", "tokens": [50365, 264, 13760, 295, 50465], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 862, "seek": 185620, "start": 1858.2, "end": 1860.2, "text": " l with respect to that value", "tokens": [50465, 287, 365, 3104, 281, 300, 2158, 50565], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 863, "seek": 185620, "start": 1860.2, "end": 1862.2, "text": " and we will call this variable", "tokens": [50565, 293, 321, 486, 818, 341, 7006, 50665], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 864, "seek": 185620, "start": 1862.2, "end": 1864.2, "text": " grad so there", "tokens": [50665, 2771, 370, 456, 50765], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 865, "seek": 185620, "start": 1864.2, "end": 1866.2, "text": " is a dot data and there is a self.grad", "tokens": [50765, 307, 257, 5893, 1412, 293, 456, 307, 257, 2698, 13, 7165, 50865], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 866, "seek": 185620, "start": 1866.2, "end": 1868.2, "text": " and initially", "tokens": [50865, 293, 9105, 50965], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 867, "seek": 185620, "start": 1868.2, "end": 1870.2, "text": " it will be zero and remember that", "tokens": [50965, 309, 486, 312, 4018, 293, 1604, 300, 51065], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 868, "seek": 185620, "start": 1870.2, "end": 1872.2, "text": " zero is basically means no", "tokens": [51065, 4018, 307, 1936, 1355, 572, 51165], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 869, "seek": 185620, "start": 1872.2, "end": 1874.2, "text": " effect so at initialization", "tokens": [51165, 1802, 370, 412, 5883, 2144, 51265], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 870, "seek": 185620, "start": 1874.2, "end": 1876.2, "text": " we are assuming that every value does not", "tokens": [51265, 321, 366, 11926, 300, 633, 2158, 775, 406, 51365], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 871, "seek": 185620, "start": 1876.2, "end": 1878.2, "text": " impact does not affect the", "tokens": [51365, 2712, 775, 406, 3345, 264, 51465], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 872, "seek": 185620, "start": 1878.2, "end": 1880.2, "text": " output right because", "tokens": [51465, 5598, 558, 570, 51565], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 873, "seek": 185620, "start": 1880.2, "end": 1882.2, "text": " if the gradient is zero that means that changing", "tokens": [51565, 498, 264, 16235, 307, 4018, 300, 1355, 300, 4473, 51665], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 874, "seek": 185620, "start": 1882.2, "end": 1884.2, "text": " this variable is not changing the", "tokens": [51665, 341, 7006, 307, 406, 4473, 264, 51765], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 875, "seek": 185620, "start": 1884.2, "end": 1886.2, "text": " loss function so by", "tokens": [51765, 4470, 2445, 370, 538, 51865], "temperature": 0.0, "avg_logprob": -0.08954633746230811, "compression_ratio": 1.868421052631579, "no_speech_prob": 0.0007229122566059232}, {"id": 876, "seek": 188620, "start": 1886.2, "end": 1888.2, "text": " default we assume that the gradient is zero", "tokens": [50365, 7576, 321, 6552, 300, 264, 16235, 307, 4018, 50465], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 877, "seek": 188620, "start": 1888.2, "end": 1890.2, "text": " and then", "tokens": [50465, 293, 550, 50565], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 878, "seek": 188620, "start": 1890.2, "end": 1892.2, "text": " now that we have grad", "tokens": [50565, 586, 300, 321, 362, 2771, 50665], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 879, "seek": 188620, "start": 1892.2, "end": 1894.2, "text": " and it's zero point zero", "tokens": [50665, 293, 309, 311, 4018, 935, 4018, 50765], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 880, "seek": 188620, "start": 1896.2, "end": 1898.2, "text": " we are going to be able to visualize", "tokens": [50865, 321, 366, 516, 281, 312, 1075, 281, 23273, 50965], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 881, "seek": 188620, "start": 1898.2, "end": 1900.2, "text": " it here after data so here", "tokens": [50965, 309, 510, 934, 1412, 370, 510, 51065], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 882, "seek": 188620, "start": 1900.2, "end": 1902.2, "text": " grad is point four f", "tokens": [51065, 2771, 307, 935, 1451, 283, 51165], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 883, "seek": 188620, "start": 1902.2, "end": 1904.2, "text": " and this will be end of grad", "tokens": [51165, 293, 341, 486, 312, 917, 295, 2771, 51265], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 884, "seek": 188620, "start": 1904.2, "end": 1906.2, "text": " and now", "tokens": [51265, 293, 586, 51365], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 885, "seek": 188620, "start": 1906.2, "end": 1908.2, "text": " we are going to be showing both the data", "tokens": [51365, 321, 366, 516, 281, 312, 4099, 1293, 264, 1412, 51465], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 886, "seek": 188620, "start": 1908.2, "end": 1910.2, "text": " and the grad", "tokens": [51465, 293, 264, 2771, 51565], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 887, "seek": 188620, "start": 1910.2, "end": 1912.2, "text": " initialized at zero", "tokens": [51565, 5883, 1602, 412, 4018, 51665], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 888, "seek": 188620, "start": 1912.2, "end": 1914.2, "text": " and we are", "tokens": [51665, 293, 321, 366, 51765], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 889, "seek": 188620, "start": 1914.2, "end": 1916.2, "text": " just about getting ready to calculate the", "tokens": [51765, 445, 466, 1242, 1919, 281, 8873, 264, 51865], "temperature": 0.0, "avg_logprob": -0.07293870815863976, "compression_ratio": 1.8810810810810812, "no_speech_prob": 0.0004181678523309529}, {"id": 890, "seek": 191620, "start": 1916.2, "end": 1918.2, "text": " back propagation and of course this", "tokens": [50365, 646, 38377, 293, 295, 1164, 341, 50465], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 891, "seek": 191620, "start": 1918.2, "end": 1920.2, "text": " grad again as i mentioned is representing", "tokens": [50465, 2771, 797, 382, 741, 2835, 307, 13460, 50565], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 892, "seek": 191620, "start": 1920.2, "end": 1922.2, "text": " the derivative of the output in", "tokens": [50565, 264, 13760, 295, 264, 5598, 294, 50665], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 893, "seek": 191620, "start": 1922.2, "end": 1924.2, "text": " this case l with respect to this", "tokens": [50665, 341, 1389, 287, 365, 3104, 281, 341, 50765], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 894, "seek": 191620, "start": 1924.2, "end": 1926.2, "text": " value so with respect to", "tokens": [50765, 2158, 370, 365, 3104, 281, 50865], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 895, "seek": 191620, "start": 1926.2, "end": 1928.2, "text": " so this is the derivative of l with respect to", "tokens": [50865, 370, 341, 307, 264, 13760, 295, 287, 365, 3104, 281, 50965], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 896, "seek": 191620, "start": 1928.2, "end": 1930.2, "text": " f with respect to d and so on", "tokens": [50965, 283, 365, 3104, 281, 274, 293, 370, 322, 51065], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 897, "seek": 191620, "start": 1930.2, "end": 1932.2, "text": " so let's now fill in those gradients", "tokens": [51065, 370, 718, 311, 586, 2836, 294, 729, 2771, 2448, 51165], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 898, "seek": 191620, "start": 1932.2, "end": 1934.2, "text": " and actually do back propagation manually", "tokens": [51165, 293, 767, 360, 646, 38377, 16945, 51265], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 899, "seek": 191620, "start": 1934.2, "end": 1936.2, "text": " so let's start filling in these gradients and", "tokens": [51265, 370, 718, 311, 722, 10623, 294, 613, 2771, 2448, 293, 51365], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 900, "seek": 191620, "start": 1936.2, "end": 1938.2, "text": " start all the way at the end as i mentioned here", "tokens": [51365, 722, 439, 264, 636, 412, 264, 917, 382, 741, 2835, 510, 51465], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 901, "seek": 191620, "start": 1938.2, "end": 1940.2, "text": " first we are interested to fill in this", "tokens": [51465, 700, 321, 366, 3102, 281, 2836, 294, 341, 51565], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 902, "seek": 191620, "start": 1940.2, "end": 1942.2, "text": " gradient here so", "tokens": [51565, 16235, 510, 370, 51665], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 903, "seek": 191620, "start": 1942.2, "end": 1944.2, "text": " what is the derivative of l with respect to", "tokens": [51665, 437, 307, 264, 13760, 295, 287, 365, 3104, 281, 51765], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 904, "seek": 191620, "start": 1944.2, "end": 1946.2, "text": " l in other words if i change", "tokens": [51765, 287, 294, 661, 2283, 498, 741, 1319, 51865], "temperature": 0.0, "avg_logprob": -0.04392962022261186, "compression_ratio": 2.2644628099173554, "no_speech_prob": 0.0008669601520523429}, {"id": 905, "seek": 194620, "start": 1946.2, "end": 1948.2, "text": " l by a tiny amount h", "tokens": [50365, 287, 538, 257, 5870, 2372, 276, 50465], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 906, "seek": 194620, "start": 1948.2, "end": 1950.2, "text": " how much does", "tokens": [50465, 577, 709, 775, 50565], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 907, "seek": 194620, "start": 1950.2, "end": 1952.2, "text": " l change", "tokens": [50565, 287, 1319, 50665], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 908, "seek": 194620, "start": 1952.2, "end": 1954.2, "text": " it changes by h so", "tokens": [50665, 309, 2962, 538, 276, 370, 50765], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 909, "seek": 194620, "start": 1954.2, "end": 1956.2, "text": " it's proportional and therefore the derivative will be", "tokens": [50765, 309, 311, 24969, 293, 4412, 264, 13760, 486, 312, 50865], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 910, "seek": 194620, "start": 1956.2, "end": 1958.2, "text": " one we can of course", "tokens": [50865, 472, 321, 393, 295, 1164, 50965], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 911, "seek": 194620, "start": 1958.2, "end": 1960.2, "text": " measure these or estimate these numerical", "tokens": [50965, 3481, 613, 420, 12539, 613, 29054, 51065], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 912, "seek": 194620, "start": 1960.2, "end": 1962.2, "text": " gradients numerically just like", "tokens": [51065, 2771, 2448, 7866, 984, 445, 411, 51165], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 913, "seek": 194620, "start": 1962.2, "end": 1964.2, "text": " we've seen before so if i take this", "tokens": [51165, 321, 600, 1612, 949, 370, 498, 741, 747, 341, 51265], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 914, "seek": 194620, "start": 1964.2, "end": 1966.2, "text": " expression and i create a", "tokens": [51265, 6114, 293, 741, 1884, 257, 51365], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 915, "seek": 194620, "start": 1966.2, "end": 1968.2, "text": " def lol function here", "tokens": [51365, 1060, 10065, 2445, 510, 51465], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 916, "seek": 194620, "start": 1968.2, "end": 1970.2, "text": " and put this here", "tokens": [51465, 293, 829, 341, 510, 51565], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 917, "seek": 194620, "start": 1970.2, "end": 1972.2, "text": " now the reason i'm creating a gating function", "tokens": [51565, 586, 264, 1778, 741, 478, 4084, 257, 290, 990, 2445, 51665], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 918, "seek": 194620, "start": 1972.2, "end": 1974.2, "text": " lol here is because i don't want", "tokens": [51665, 10065, 510, 307, 570, 741, 500, 380, 528, 51765], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 919, "seek": 194620, "start": 1974.2, "end": 1976.2, "text": " to pollute or mess up the global scope", "tokens": [51765, 281, 6418, 1169, 420, 2082, 493, 264, 4338, 11923, 51865], "temperature": 0.0, "avg_logprob": -0.040725461772230805, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.0004513920284807682}, {"id": 920, "seek": 197620, "start": 1976.2, "end": 1978.2, "text": " here this is just kind of like a little staging", "tokens": [50365, 510, 341, 307, 445, 733, 295, 411, 257, 707, 41085, 50465], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 921, "seek": 197620, "start": 1978.2, "end": 1980.2, "text": " area and as you know in python all of these", "tokens": [50465, 1859, 293, 382, 291, 458, 294, 38797, 439, 295, 613, 50565], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 922, "seek": 197620, "start": 1980.2, "end": 1982.2, "text": " will be local variables to this function", "tokens": [50565, 486, 312, 2654, 9102, 281, 341, 2445, 50665], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 923, "seek": 197620, "start": 1982.2, "end": 1984.2, "text": " so i'm not changing any of the", "tokens": [50665, 370, 741, 478, 406, 4473, 604, 295, 264, 50765], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 924, "seek": 197620, "start": 1984.2, "end": 1986.2, "text": " global scope here so here", "tokens": [50765, 4338, 11923, 510, 370, 510, 50865], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 925, "seek": 197620, "start": 1986.2, "end": 1988.2, "text": " l1 will be l", "tokens": [50865, 287, 16, 486, 312, 287, 50965], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 926, "seek": 197620, "start": 1990.2, "end": 1992.2, "text": " and then copy pasting this expression", "tokens": [51065, 293, 550, 5055, 1791, 278, 341, 6114, 51165], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 927, "seek": 197620, "start": 1992.2, "end": 1994.2, "text": " we're going to add a small", "tokens": [51165, 321, 434, 516, 281, 909, 257, 1359, 51265], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 928, "seek": 197620, "start": 1994.2, "end": 1996.2, "text": " amount h", "tokens": [51265, 2372, 276, 51365], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 929, "seek": 197620, "start": 1996.2, "end": 1998.2, "text": " in", "tokens": [51365, 294, 51465], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 930, "seek": 197620, "start": 1998.2, "end": 2000.2, "text": " for example a", "tokens": [51465, 337, 1365, 257, 51565], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 931, "seek": 197620, "start": 2000.2, "end": 2002.2, "text": " right and this would be measuring", "tokens": [51565, 558, 293, 341, 576, 312, 13389, 51665], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 932, "seek": 197620, "start": 2002.2, "end": 2004.2, "text": " the derivative of l with respect", "tokens": [51665, 264, 13760, 295, 287, 365, 3104, 51765], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 933, "seek": 197620, "start": 2004.2, "end": 2006.2, "text": " to a so here", "tokens": [51765, 281, 257, 370, 510, 51865], "temperature": 0.0, "avg_logprob": -0.04108628359707919, "compression_ratio": 1.6801801801801801, "no_speech_prob": 0.00024527357891201973}, {"id": 934, "seek": 200620, "start": 2006.2, "end": 2008.2, "text": " this will be l2", "tokens": [50365, 341, 486, 312, 287, 17, 50465], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 935, "seek": 200620, "start": 2008.2, "end": 2010.2, "text": " and then we want to print test derivatives", "tokens": [50465, 293, 550, 321, 528, 281, 4482, 1500, 33733, 50565], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 936, "seek": 200620, "start": 2010.2, "end": 2012.2, "text": " so print l2 minus", "tokens": [50565, 370, 4482, 287, 17, 3175, 50665], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 937, "seek": 200620, "start": 2012.2, "end": 2014.2, "text": " l1 which is how much l", "tokens": [50665, 287, 16, 597, 307, 577, 709, 287, 50765], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 938, "seek": 200620, "start": 2014.2, "end": 2016.2, "text": " changed and then normalize it", "tokens": [50765, 3105, 293, 550, 2710, 1125, 309, 50865], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 939, "seek": 200620, "start": 2016.2, "end": 2018.2, "text": " by h so this is the rise", "tokens": [50865, 538, 276, 370, 341, 307, 264, 6272, 50965], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 940, "seek": 200620, "start": 2018.2, "end": 2020.2, "text": " over run and we have to be", "tokens": [50965, 670, 1190, 293, 321, 362, 281, 312, 51065], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 941, "seek": 200620, "start": 2020.2, "end": 2022.2, "text": " careful because l is a valid node", "tokens": [51065, 5026, 570, 287, 307, 257, 7363, 9984, 51165], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 942, "seek": 200620, "start": 2022.2, "end": 2024.2, "text": " so we actually want its data", "tokens": [51165, 370, 321, 767, 528, 1080, 1412, 51265], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 943, "seek": 200620, "start": 2026.2, "end": 2028.2, "text": " so that these are floats dividing", "tokens": [51365, 370, 300, 613, 366, 37878, 26764, 51465], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 944, "seek": 200620, "start": 2028.2, "end": 2030.2, "text": " by h and this should print", "tokens": [51465, 538, 276, 293, 341, 820, 4482, 51565], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 945, "seek": 200620, "start": 2030.2, "end": 2032.2, "text": " the derivative of l with respect to a", "tokens": [51565, 264, 13760, 295, 287, 365, 3104, 281, 257, 51665], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 946, "seek": 200620, "start": 2032.2, "end": 2034.2, "text": " because a is the one that we bumped a", "tokens": [51665, 570, 257, 307, 264, 472, 300, 321, 42696, 257, 51765], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 947, "seek": 200620, "start": 2034.2, "end": 2036.2, "text": " little bit by h so what is", "tokens": [51765, 707, 857, 538, 276, 370, 437, 307, 51865], "temperature": 0.0, "avg_logprob": -0.05158261942669628, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442016361281276}, {"id": 948, "seek": 203620, "start": 2036.2, "end": 2038.2, "text": " the derivative of l with respect", "tokens": [50365, 264, 13760, 295, 287, 365, 3104, 50465], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 949, "seek": 203620, "start": 2038.2, "end": 2040.2, "text": " to a it's six", "tokens": [50465, 281, 257, 309, 311, 2309, 50565], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 950, "seek": 203620, "start": 2040.2, "end": 2042.2, "text": " okay and obviously", "tokens": [50565, 1392, 293, 2745, 50665], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 951, "seek": 203620, "start": 2042.2, "end": 2044.2, "text": " if we change", "tokens": [50665, 498, 321, 1319, 50765], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 952, "seek": 203620, "start": 2044.2, "end": 2046.2, "text": " l by h", "tokens": [50765, 287, 538, 276, 50865], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 953, "seek": 203620, "start": 2046.2, "end": 2048.2, "text": " then that would be", "tokens": [50865, 550, 300, 576, 312, 50965], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 954, "seek": 203620, "start": 2048.2, "end": 2050.2, "text": " here", "tokens": [50965, 510, 51065], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 955, "seek": 203620, "start": 2050.2, "end": 2052.2, "text": " effectively", "tokens": [51065, 8659, 51165], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 956, "seek": 203620, "start": 2052.2, "end": 2054.2, "text": " this looks really awkward but", "tokens": [51165, 341, 1542, 534, 11411, 457, 51265], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 957, "seek": 203620, "start": 2054.2, "end": 2056.2, "text": " changing l by h", "tokens": [51265, 4473, 287, 538, 276, 51365], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 958, "seek": 203620, "start": 2056.2, "end": 2058.2, "text": " you see the derivative here is one", "tokens": [51365, 291, 536, 264, 13760, 510, 307, 472, 51465], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 959, "seek": 203620, "start": 2060.2, "end": 2062.2, "text": " that's kind of like the base case", "tokens": [51565, 300, 311, 733, 295, 411, 264, 3096, 1389, 51665], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 960, "seek": 203620, "start": 2062.2, "end": 2064.2, "text": " of what we are doing here", "tokens": [51665, 295, 437, 321, 366, 884, 510, 51765], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 961, "seek": 203620, "start": 2064.2, "end": 2066.2, "text": " so basically we can come up here", "tokens": [51765, 370, 1936, 321, 393, 808, 493, 510, 51865], "temperature": 0.0, "avg_logprob": -0.06063453529192054, "compression_ratio": 1.6480446927374302, "no_speech_prob": 0.0008323353831656277}, {"id": 962, "seek": 206620, "start": 2066.2, "end": 2068.2, "text": " and we can manually set", "tokens": [50365, 293, 321, 393, 16945, 992, 50465], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 963, "seek": 206620, "start": 2068.2, "end": 2070.2, "text": " l.grad to one this is our", "tokens": [50465, 287, 13, 7165, 281, 472, 341, 307, 527, 50565], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 964, "seek": 206620, "start": 2070.2, "end": 2072.2, "text": " manual backpropagation", "tokens": [50565, 9688, 646, 79, 1513, 559, 399, 50665], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 965, "seek": 206620, "start": 2072.2, "end": 2074.2, "text": " l.grad is one and let's redraw", "tokens": [50665, 287, 13, 7165, 307, 472, 293, 718, 311, 2182, 5131, 50765], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 966, "seek": 206620, "start": 2074.2, "end": 2076.2, "text": " and we'll see", "tokens": [50765, 293, 321, 603, 536, 50865], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 967, "seek": 206620, "start": 2076.2, "end": 2078.2, "text": " that we filled in grad is one", "tokens": [50865, 300, 321, 6412, 294, 2771, 307, 472, 50965], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 968, "seek": 206620, "start": 2078.2, "end": 2080.2, "text": " for l we're now going to continue", "tokens": [50965, 337, 287, 321, 434, 586, 516, 281, 2354, 51065], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 969, "seek": 206620, "start": 2080.2, "end": 2082.2, "text": " the backpropagation so let's here look at", "tokens": [51065, 264, 646, 79, 1513, 559, 399, 370, 718, 311, 510, 574, 412, 51165], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 970, "seek": 206620, "start": 2082.2, "end": 2084.2, "text": " the derivatives of l with respect to", "tokens": [51165, 264, 33733, 295, 287, 365, 3104, 281, 51265], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 971, "seek": 206620, "start": 2084.2, "end": 2086.2, "text": " d and f let's do", "tokens": [51265, 274, 293, 283, 718, 311, 360, 51365], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 972, "seek": 206620, "start": 2086.2, "end": 2088.2, "text": " d first so what", "tokens": [51365, 274, 700, 370, 437, 51465], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 973, "seek": 206620, "start": 2088.2, "end": 2090.2, "text": " we are interested in if i create a markdown on", "tokens": [51465, 321, 366, 3102, 294, 498, 741, 1884, 257, 1491, 5093, 322, 51565], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 974, "seek": 206620, "start": 2090.2, "end": 2092.2, "text": " here is we'd like to know", "tokens": [51565, 510, 307, 321, 1116, 411, 281, 458, 51665], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 975, "seek": 206620, "start": 2092.2, "end": 2094.2, "text": " basically we have that l is d times f", "tokens": [51665, 1936, 321, 362, 300, 287, 307, 274, 1413, 283, 51765], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 976, "seek": 206620, "start": 2094.2, "end": 2096.2, "text": " and we'd like to know what is", "tokens": [51765, 293, 321, 1116, 411, 281, 458, 437, 307, 51865], "temperature": 0.0, "avg_logprob": -0.06520393344905827, "compression_ratio": 1.8626609442060085, "no_speech_prob": 0.002100881887599826}, {"id": 977, "seek": 209620, "start": 2096.2, "end": 2098.2, "text": " d l by", "tokens": [50365, 274, 287, 538, 50465], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 978, "seek": 209620, "start": 2098.2, "end": 2100.2, "text": " d d", "tokens": [50465, 274, 274, 50565], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 979, "seek": 209620, "start": 2100.2, "end": 2102.2, "text": " what is that and if you know", "tokens": [50565, 437, 307, 300, 293, 498, 291, 458, 50665], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 980, "seek": 209620, "start": 2102.2, "end": 2104.2, "text": " your calculus l is d times f", "tokens": [50665, 428, 33400, 287, 307, 274, 1413, 283, 50765], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 981, "seek": 209620, "start": 2104.2, "end": 2106.2, "text": " so what is d l by d d", "tokens": [50765, 370, 437, 307, 274, 287, 538, 274, 274, 50865], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 982, "seek": 209620, "start": 2106.2, "end": 2108.2, "text": " it would be f", "tokens": [50865, 309, 576, 312, 283, 50965], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 983, "seek": 209620, "start": 2108.2, "end": 2110.2, "text": " and if you don't believe me we can also", "tokens": [50965, 293, 498, 291, 500, 380, 1697, 385, 321, 393, 611, 51065], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 984, "seek": 209620, "start": 2110.2, "end": 2112.2, "text": " just derive it because the proof would be", "tokens": [51065, 445, 28446, 309, 570, 264, 8177, 576, 312, 51165], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 985, "seek": 209620, "start": 2112.2, "end": 2114.2, "text": " fairly straightforward we go", "tokens": [51165, 6457, 15325, 321, 352, 51265], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 986, "seek": 209620, "start": 2114.2, "end": 2116.2, "text": " to the definition", "tokens": [51265, 281, 264, 7123, 51365], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 987, "seek": 209620, "start": 2116.2, "end": 2118.2, "text": " of the derivative which is", "tokens": [51365, 295, 264, 13760, 597, 307, 51465], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 988, "seek": 209620, "start": 2118.2, "end": 2120.2, "text": " f of x plus h minus f of x", "tokens": [51465, 283, 295, 2031, 1804, 276, 3175, 283, 295, 2031, 51565], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 989, "seek": 209620, "start": 2120.2, "end": 2122.2, "text": " divide h", "tokens": [51565, 9845, 276, 51665], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 990, "seek": 209620, "start": 2122.2, "end": 2124.2, "text": " as a limit of h goes to zero", "tokens": [51665, 382, 257, 4948, 295, 276, 1709, 281, 4018, 51765], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 991, "seek": 209620, "start": 2124.2, "end": 2126.2, "text": " of this kind of expression so", "tokens": [51765, 295, 341, 733, 295, 6114, 370, 51865], "temperature": 0.0, "avg_logprob": -0.06117015822320922, "compression_ratio": 1.7233009708737863, "no_speech_prob": 0.0002635768905747682}, {"id": 992, "seek": 212620, "start": 2126.2, "end": 2128.2, "text": " when we have l is d times f", "tokens": [50365, 562, 321, 362, 287, 307, 274, 1413, 283, 50465], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 993, "seek": 212620, "start": 2128.2, "end": 2130.2, "text": " then increasing", "tokens": [50465, 550, 5662, 50565], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 994, "seek": 212620, "start": 2130.2, "end": 2132.2, "text": " d by h would give us", "tokens": [50565, 274, 538, 276, 576, 976, 505, 50665], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 995, "seek": 212620, "start": 2132.2, "end": 2134.2, "text": " the output of d plus h times", "tokens": [50665, 264, 5598, 295, 274, 1804, 276, 1413, 50765], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 996, "seek": 212620, "start": 2134.2, "end": 2136.2, "text": " f that's", "tokens": [50765, 283, 300, 311, 50865], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 997, "seek": 212620, "start": 2136.2, "end": 2138.2, "text": " basically f of x plus h right", "tokens": [50865, 1936, 283, 295, 2031, 1804, 276, 558, 50965], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 998, "seek": 212620, "start": 2138.2, "end": 2140.2, "text": " minus d times", "tokens": [50965, 3175, 274, 1413, 51065], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 999, "seek": 212620, "start": 2140.2, "end": 2142.2, "text": " f", "tokens": [51065, 283, 51165], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1000, "seek": 212620, "start": 2142.2, "end": 2144.2, "text": " and then divide h and", "tokens": [51165, 293, 550, 9845, 276, 293, 51265], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1001, "seek": 212620, "start": 2144.2, "end": 2146.2, "text": " symbolically expanding out here we", "tokens": [51265, 5986, 984, 14702, 484, 510, 321, 51365], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1002, "seek": 212620, "start": 2146.2, "end": 2148.2, "text": " would have basically d times f", "tokens": [51365, 576, 362, 1936, 274, 1413, 283, 51465], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1003, "seek": 212620, "start": 2148.2, "end": 2150.2, "text": " plus h times f minus", "tokens": [51465, 1804, 276, 1413, 283, 3175, 51565], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1004, "seek": 212620, "start": 2150.2, "end": 2152.2, "text": " d times f divide h", "tokens": [51565, 274, 1413, 283, 9845, 276, 51665], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1005, "seek": 212620, "start": 2152.2, "end": 2154.2, "text": " and then you see how the df minus", "tokens": [51665, 293, 550, 291, 536, 577, 264, 274, 69, 3175, 51765], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1006, "seek": 212620, "start": 2154.2, "end": 2156.2, "text": " df cancels so you're left with h times", "tokens": [51765, 274, 69, 393, 66, 1625, 370, 291, 434, 1411, 365, 276, 1413, 51865], "temperature": 0.0, "avg_logprob": -0.04539315864957612, "compression_ratio": 1.9942857142857142, "no_speech_prob": 0.0017156132962554693}, {"id": 1007, "seek": 215620, "start": 2156.2, "end": 2158.2, "text": " f divide h", "tokens": [50365, 283, 9845, 276, 50465], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1008, "seek": 215620, "start": 2158.2, "end": 2160.2, "text": " which is f so", "tokens": [50465, 597, 307, 283, 370, 50565], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1009, "seek": 215620, "start": 2160.2, "end": 2162.2, "text": " in the limit as h goes to zero", "tokens": [50565, 294, 264, 4948, 382, 276, 1709, 281, 4018, 50665], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1010, "seek": 215620, "start": 2162.2, "end": 2164.2, "text": " of you know", "tokens": [50665, 295, 291, 458, 50765], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1011, "seek": 215620, "start": 2164.2, "end": 2166.2, "text": " derivative", "tokens": [50765, 13760, 50865], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1012, "seek": 215620, "start": 2166.2, "end": 2168.2, "text": " definition we just", "tokens": [50865, 7123, 321, 445, 50965], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1013, "seek": 215620, "start": 2168.2, "end": 2170.2, "text": " get f in the case of", "tokens": [50965, 483, 283, 294, 264, 1389, 295, 51065], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1014, "seek": 215620, "start": 2170.2, "end": 2172.2, "text": " d times f", "tokens": [51065, 274, 1413, 283, 51165], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1015, "seek": 215620, "start": 2172.2, "end": 2174.2, "text": " so symmetrically", "tokens": [51165, 370, 14232, 27965, 984, 51265], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1016, "seek": 215620, "start": 2174.2, "end": 2176.2, "text": " d l by d f", "tokens": [51265, 274, 287, 538, 274, 283, 51365], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1017, "seek": 215620, "start": 2176.2, "end": 2178.2, "text": " will just be d", "tokens": [51365, 486, 445, 312, 274, 51465], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1018, "seek": 215620, "start": 2178.2, "end": 2180.2, "text": " so what we have is that", "tokens": [51465, 370, 437, 321, 362, 307, 300, 51565], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1019, "seek": 215620, "start": 2180.2, "end": 2182.2, "text": " f dot grad we see now", "tokens": [51565, 283, 5893, 2771, 321, 536, 586, 51665], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1020, "seek": 215620, "start": 2182.2, "end": 2184.2, "text": " is just the value of d", "tokens": [51665, 307, 445, 264, 2158, 295, 274, 51765], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1021, "seek": 215620, "start": 2184.2, "end": 2186.2, "text": " which is four", "tokens": [51765, 597, 307, 1451, 51865], "temperature": 0.0, "avg_logprob": -0.04057773947715759, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.00023117558157537133}, {"id": 1022, "seek": 218620, "start": 2186.2, "end": 2190.2, "text": " and we see that", "tokens": [50365, 293, 321, 536, 300, 50565], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1023, "seek": 218620, "start": 2190.2, "end": 2192.2, "text": " d dot grad is just", "tokens": [50565, 274, 5893, 2771, 307, 445, 50665], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1024, "seek": 218620, "start": 2192.2, "end": 2194.2, "text": " the value of f", "tokens": [50665, 264, 2158, 295, 283, 50765], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1025, "seek": 218620, "start": 2196.2, "end": 2198.2, "text": " and so the value of f", "tokens": [50865, 293, 370, 264, 2158, 295, 283, 50965], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1026, "seek": 218620, "start": 2198.2, "end": 2200.2, "text": " is negative two", "tokens": [50965, 307, 3671, 732, 51065], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1027, "seek": 218620, "start": 2200.2, "end": 2202.2, "text": " so we'll set those", "tokens": [51065, 370, 321, 603, 992, 729, 51165], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1028, "seek": 218620, "start": 2202.2, "end": 2204.2, "text": " manually", "tokens": [51165, 16945, 51265], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1029, "seek": 218620, "start": 2204.2, "end": 2206.2, "text": " let me erase this markdown", "tokens": [51265, 718, 385, 23525, 341, 1491, 5093, 51365], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1030, "seek": 218620, "start": 2206.2, "end": 2208.2, "text": " node and then let's redraw what we", "tokens": [51365, 9984, 293, 550, 718, 311, 2182, 5131, 437, 321, 51465], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1031, "seek": 218620, "start": 2208.2, "end": 2210.2, "text": " have", "tokens": [51465, 362, 51565], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1032, "seek": 218620, "start": 2210.2, "end": 2212.2, "text": " okay and let's", "tokens": [51565, 1392, 293, 718, 311, 51665], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1033, "seek": 218620, "start": 2212.2, "end": 2214.2, "text": " just make sure that these were correct", "tokens": [51665, 445, 652, 988, 300, 613, 645, 3006, 51765], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1034, "seek": 218620, "start": 2214.2, "end": 2216.2, "text": " so we seem to think that", "tokens": [51765, 370, 321, 1643, 281, 519, 300, 51865], "temperature": 0.0, "avg_logprob": -0.08351720463145863, "compression_ratio": 1.6518987341772151, "no_speech_prob": 0.0037814208772033453}, {"id": 1035, "seek": 221620, "start": 2216.2, "end": 2218.2, "text": " d l by d d is negative two so let's", "tokens": [50365, 274, 287, 538, 274, 274, 307, 3671, 732, 370, 718, 311, 50465], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1036, "seek": 221620, "start": 2218.2, "end": 2220.2, "text": " double check", "tokens": [50465, 3834, 1520, 50565], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1037, "seek": 221620, "start": 2220.2, "end": 2222.2, "text": " let me erase this plus h from before", "tokens": [50565, 718, 385, 23525, 341, 1804, 276, 490, 949, 50665], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1038, "seek": 221620, "start": 2222.2, "end": 2224.2, "text": " and now we want the derivative with respect to f", "tokens": [50665, 293, 586, 321, 528, 264, 13760, 365, 3104, 281, 283, 50765], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1039, "seek": 221620, "start": 2224.2, "end": 2226.2, "text": " so let's just come here", "tokens": [50765, 370, 718, 311, 445, 808, 510, 50865], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1040, "seek": 221620, "start": 2226.2, "end": 2228.2, "text": " when i create f and let's do a plus h here", "tokens": [50865, 562, 741, 1884, 283, 293, 718, 311, 360, 257, 1804, 276, 510, 50965], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1041, "seek": 221620, "start": 2228.2, "end": 2230.2, "text": " and this should print a derivative of", "tokens": [50965, 293, 341, 820, 4482, 257, 13760, 295, 51065], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1042, "seek": 221620, "start": 2230.2, "end": 2232.2, "text": " l with respect to f so we expect", "tokens": [51065, 287, 365, 3104, 281, 283, 370, 321, 2066, 51165], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1043, "seek": 221620, "start": 2232.2, "end": 2234.2, "text": " to see four", "tokens": [51165, 281, 536, 1451, 51265], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1044, "seek": 221620, "start": 2234.2, "end": 2236.2, "text": " yeah and this is four up to", "tokens": [51265, 1338, 293, 341, 307, 1451, 493, 281, 51365], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1045, "seek": 221620, "start": 2236.2, "end": 2238.2, "text": " floating point funkiness", "tokens": [51365, 12607, 935, 26476, 1324, 51465], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1046, "seek": 221620, "start": 2238.2, "end": 2240.2, "text": " and then d l", "tokens": [51465, 293, 550, 274, 287, 51565], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1047, "seek": 221620, "start": 2240.2, "end": 2242.2, "text": " by d d should be", "tokens": [51565, 538, 274, 274, 820, 312, 51665], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1048, "seek": 221620, "start": 2242.2, "end": 2244.2, "text": " f which is negative two", "tokens": [51665, 283, 597, 307, 3671, 732, 51765], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1049, "seek": 221620, "start": 2244.2, "end": 2246.2, "text": " grad is negative two", "tokens": [51765, 2771, 307, 3671, 732, 51865], "temperature": 0.0, "avg_logprob": -0.07431447787547675, "compression_ratio": 1.9712918660287082, "no_speech_prob": 0.00024005585873965174}, {"id": 1050, "seek": 224620, "start": 2246.2, "end": 2248.2, "text": " so if we again", "tokens": [50365, 370, 498, 321, 797, 50465], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1051, "seek": 224620, "start": 2248.2, "end": 2250.2, "text": " come here and we change d", "tokens": [50465, 808, 510, 293, 321, 1319, 274, 50565], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1052, "seek": 224620, "start": 2250.2, "end": 2252.2, "text": " d dot", "tokens": [50565, 274, 5893, 50665], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1053, "seek": 224620, "start": 2252.2, "end": 2254.2, "text": " data plus equals h right", "tokens": [50665, 1412, 1804, 6915, 276, 558, 50765], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1054, "seek": 224620, "start": 2254.2, "end": 2256.2, "text": " here so we expect", "tokens": [50765, 510, 370, 321, 2066, 50865], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1055, "seek": 224620, "start": 2256.2, "end": 2258.2, "text": " so we've added a little h and then we see", "tokens": [50865, 370, 321, 600, 3869, 257, 707, 276, 293, 550, 321, 536, 50965], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1056, "seek": 224620, "start": 2258.2, "end": 2260.2, "text": " how l changed and we", "tokens": [50965, 577, 287, 3105, 293, 321, 51065], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1057, "seek": 224620, "start": 2260.2, "end": 2262.2, "text": " expect to print", "tokens": [51065, 2066, 281, 4482, 51165], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1058, "seek": 224620, "start": 2262.2, "end": 2264.2, "text": " negative two", "tokens": [51165, 3671, 732, 51265], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1059, "seek": 224620, "start": 2264.2, "end": 2266.2, "text": " there we go", "tokens": [51265, 456, 321, 352, 51365], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1060, "seek": 224620, "start": 2266.2, "end": 2268.2, "text": " so we've numerically", "tokens": [51365, 370, 321, 600, 7866, 984, 51465], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1061, "seek": 224620, "start": 2268.2, "end": 2270.2, "text": " verified what we're doing here is", "tokens": [51465, 31197, 437, 321, 434, 884, 510, 307, 51565], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1062, "seek": 224620, "start": 2270.2, "end": 2272.2, "text": " kind of like an inline gradient check", "tokens": [51565, 733, 295, 411, 364, 294, 1889, 16235, 1520, 51665], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1063, "seek": 224620, "start": 2272.2, "end": 2274.2, "text": " gradient check is when we", "tokens": [51665, 16235, 1520, 307, 562, 321, 51765], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1064, "seek": 224620, "start": 2274.2, "end": 2276.2, "text": " are deriving this like back propagation", "tokens": [51765, 366, 1163, 2123, 341, 411, 646, 38377, 51865], "temperature": 0.0, "avg_logprob": -0.06883875528971355, "compression_ratio": 1.7512437810945274, "no_speech_prob": 0.0008766311802901328}, {"id": 1065, "seek": 227620, "start": 2276.2, "end": 2278.2, "text": " and getting the derivative with respect to all the", "tokens": [50365, 293, 1242, 264, 13760, 365, 3104, 281, 439, 264, 50465], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1066, "seek": 227620, "start": 2278.2, "end": 2280.2, "text": " intermediate results and", "tokens": [50465, 19376, 3542, 293, 50565], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1067, "seek": 227620, "start": 2280.2, "end": 2282.2, "text": " then numerical gradient is just you know", "tokens": [50565, 550, 29054, 16235, 307, 445, 291, 458, 50665], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1068, "seek": 227620, "start": 2282.2, "end": 2284.2, "text": " estimating it using", "tokens": [50665, 8017, 990, 309, 1228, 50765], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1069, "seek": 227620, "start": 2284.2, "end": 2286.2, "text": " small step size", "tokens": [50765, 1359, 1823, 2744, 50865], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1070, "seek": 227620, "start": 2286.2, "end": 2288.2, "text": " now we're getting to the crux of", "tokens": [50865, 586, 321, 434, 1242, 281, 264, 5140, 87, 295, 50965], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1071, "seek": 227620, "start": 2288.2, "end": 2290.2, "text": " back propagation so this will be the", "tokens": [50965, 646, 38377, 370, 341, 486, 312, 264, 51065], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1072, "seek": 227620, "start": 2290.2, "end": 2292.2, "text": " most important node to understand", "tokens": [51065, 881, 1021, 9984, 281, 1223, 51165], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1073, "seek": 227620, "start": 2292.2, "end": 2294.2, "text": " because if you understand the gradient for", "tokens": [51165, 570, 498, 291, 1223, 264, 16235, 337, 51265], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1074, "seek": 227620, "start": 2294.2, "end": 2296.2, "text": " this node you understand all of back", "tokens": [51265, 341, 9984, 291, 1223, 439, 295, 646, 51365], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1075, "seek": 227620, "start": 2296.2, "end": 2298.2, "text": " propagation and all training of neural nets", "tokens": [51365, 38377, 293, 439, 3097, 295, 18161, 36170, 51465], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1076, "seek": 227620, "start": 2298.2, "end": 2300.2, "text": " basically so we need", "tokens": [51465, 1936, 370, 321, 643, 51565], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1077, "seek": 227620, "start": 2300.2, "end": 2302.2, "text": " to derive d l by", "tokens": [51565, 281, 28446, 274, 287, 538, 51665], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1078, "seek": 227620, "start": 2302.2, "end": 2304.2, "text": " d c in other words the derivative", "tokens": [51665, 274, 269, 294, 661, 2283, 264, 13760, 51765], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1079, "seek": 227620, "start": 2304.2, "end": 2306.2, "text": " of l with respect to c", "tokens": [51765, 295, 287, 365, 3104, 281, 269, 51865], "temperature": 0.0, "avg_logprob": -0.0646066468609266, "compression_ratio": 1.9076305220883534, "no_speech_prob": 0.00027122459141537547}, {"id": 1080, "seek": 230620, "start": 2306.2, "end": 2308.2, "text": " because we've computed all these other", "tokens": [50365, 570, 321, 600, 40610, 439, 613, 661, 50465], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1081, "seek": 230620, "start": 2308.2, "end": 2310.2, "text": " gradients already now we're coming", "tokens": [50465, 2771, 2448, 1217, 586, 321, 434, 1348, 50565], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1082, "seek": 230620, "start": 2310.2, "end": 2312.2, "text": " here and we're continuing the back propagation", "tokens": [50565, 510, 293, 321, 434, 9289, 264, 646, 38377, 50665], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1083, "seek": 230620, "start": 2312.2, "end": 2314.2, "text": " manually so we want", "tokens": [50665, 16945, 370, 321, 528, 50765], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1084, "seek": 230620, "start": 2314.2, "end": 2316.2, "text": " d l by d c and then we'll also", "tokens": [50765, 274, 287, 538, 274, 269, 293, 550, 321, 603, 611, 50865], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1085, "seek": 230620, "start": 2316.2, "end": 2318.2, "text": " derive d l by d e", "tokens": [50865, 28446, 274, 287, 538, 274, 308, 50965], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1086, "seek": 230620, "start": 2318.2, "end": 2320.2, "text": " now here's the problem", "tokens": [50965, 586, 510, 311, 264, 1154, 51065], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1087, "seek": 230620, "start": 2320.2, "end": 2322.2, "text": " how do we derive d l by", "tokens": [51065, 577, 360, 321, 28446, 274, 287, 538, 51165], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1088, "seek": 230620, "start": 2322.2, "end": 2324.2, "text": " d c", "tokens": [51165, 274, 269, 51265], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1089, "seek": 230620, "start": 2324.2, "end": 2326.2, "text": " we actually know the derivative l", "tokens": [51265, 321, 767, 458, 264, 13760, 287, 51365], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1090, "seek": 230620, "start": 2326.2, "end": 2328.2, "text": " with respect to d so we know how", "tokens": [51365, 365, 3104, 281, 274, 370, 321, 458, 577, 51465], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1091, "seek": 230620, "start": 2328.2, "end": 2330.2, "text": " l is sensitive to d", "tokens": [51465, 287, 307, 9477, 281, 274, 51565], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1092, "seek": 230620, "start": 2330.2, "end": 2332.2, "text": " but how is l sensitive to", "tokens": [51565, 457, 577, 307, 287, 9477, 281, 51665], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1093, "seek": 230620, "start": 2332.2, "end": 2334.2, "text": " c so if we wiggle c how does", "tokens": [51665, 269, 370, 498, 321, 33377, 269, 577, 775, 51765], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1094, "seek": 230620, "start": 2334.2, "end": 2336.2, "text": " that impact l through d", "tokens": [51765, 300, 2712, 287, 807, 274, 51865], "temperature": 0.0, "avg_logprob": -0.030762773513793945, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.0004202276177238673}, {"id": 1095, "seek": 233620, "start": 2336.2, "end": 2340.2, "text": " so we know d l by d c", "tokens": [50365, 370, 321, 458, 274, 287, 538, 274, 269, 50565], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1096, "seek": 233620, "start": 2340.2, "end": 2342.2, "text": " and we", "tokens": [50565, 293, 321, 50665], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1097, "seek": 233620, "start": 2342.2, "end": 2344.2, "text": " also here know how c impacts d", "tokens": [50665, 611, 510, 458, 577, 269, 11606, 274, 50765], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1098, "seek": 233620, "start": 2344.2, "end": 2346.2, "text": " and so just very intuitively if you", "tokens": [50765, 293, 370, 445, 588, 46506, 498, 291, 50865], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1099, "seek": 233620, "start": 2346.2, "end": 2348.2, "text": " know the impact that c is having", "tokens": [50865, 458, 264, 2712, 300, 269, 307, 1419, 50965], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1100, "seek": 233620, "start": 2348.2, "end": 2350.2, "text": " on d and the impact that d is having", "tokens": [50965, 322, 274, 293, 264, 2712, 300, 274, 307, 1419, 51065], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1101, "seek": 233620, "start": 2350.2, "end": 2352.2, "text": " on l then you should be able to", "tokens": [51065, 322, 287, 550, 291, 820, 312, 1075, 281, 51165], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1102, "seek": 233620, "start": 2352.2, "end": 2354.2, "text": " somehow put that information together to", "tokens": [51165, 6063, 829, 300, 1589, 1214, 281, 51265], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1103, "seek": 233620, "start": 2354.2, "end": 2356.2, "text": " figure out how c impacts l", "tokens": [51265, 2573, 484, 577, 269, 11606, 287, 51365], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1104, "seek": 233620, "start": 2356.2, "end": 2358.2, "text": " and indeed this is what we can actually", "tokens": [51365, 293, 6451, 341, 307, 437, 321, 393, 767, 51465], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1105, "seek": 233620, "start": 2358.2, "end": 2360.2, "text": " do so in particular we", "tokens": [51465, 360, 370, 294, 1729, 321, 51565], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1106, "seek": 233620, "start": 2360.2, "end": 2362.2, "text": " know just concentrating on d first", "tokens": [51565, 458, 445, 40571, 322, 274, 700, 51665], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1107, "seek": 233620, "start": 2362.2, "end": 2364.2, "text": " let's look at how what is the derivative", "tokens": [51665, 718, 311, 574, 412, 577, 437, 307, 264, 13760, 51765], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1108, "seek": 233620, "start": 2364.2, "end": 2366.2, "text": " basically of d with respect to c", "tokens": [51765, 1936, 295, 274, 365, 3104, 281, 269, 51865], "temperature": 0.0, "avg_logprob": -0.04969497649900375, "compression_ratio": 1.8595744680851063, "no_speech_prob": 0.0005488020833581686}, {"id": 1109, "seek": 236620, "start": 2366.2, "end": 2368.2, "text": " so in other words what is d d by d", "tokens": [50365, 370, 294, 661, 2283, 437, 307, 274, 274, 538, 274, 50465], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1110, "seek": 236620, "start": 2368.2, "end": 2370.2, "text": " c", "tokens": [50465, 269, 50565], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1111, "seek": 236620, "start": 2370.2, "end": 2372.2, "text": " so here", "tokens": [50565, 370, 510, 50665], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1112, "seek": 236620, "start": 2372.2, "end": 2374.2, "text": " we know that d is c times", "tokens": [50665, 321, 458, 300, 274, 307, 269, 1413, 50765], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1113, "seek": 236620, "start": 2374.2, "end": 2376.2, "text": " c plus e that's what we", "tokens": [50765, 269, 1804, 308, 300, 311, 437, 321, 50865], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1114, "seek": 236620, "start": 2376.2, "end": 2378.2, "text": " know and now we're interested in d d", "tokens": [50865, 458, 293, 586, 321, 434, 3102, 294, 274, 274, 50965], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1115, "seek": 236620, "start": 2378.2, "end": 2380.2, "text": " by d c if you", "tokens": [50965, 538, 274, 269, 498, 291, 51065], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1116, "seek": 236620, "start": 2380.2, "end": 2382.2, "text": " just know your calculus again and you remember", "tokens": [51065, 445, 458, 428, 33400, 797, 293, 291, 1604, 51165], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1117, "seek": 236620, "start": 2382.2, "end": 2384.2, "text": " then differentiating c plus e with", "tokens": [51165, 550, 27372, 990, 269, 1804, 308, 365, 51265], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1118, "seek": 236620, "start": 2384.2, "end": 2386.2, "text": " respect to c you know that that gives you", "tokens": [51265, 3104, 281, 269, 291, 458, 300, 300, 2709, 291, 51365], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1119, "seek": 236620, "start": 2386.2, "end": 2388.2, "text": " 1.0 and", "tokens": [51365, 502, 13, 15, 293, 51465], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1120, "seek": 236620, "start": 2388.2, "end": 2390.2, "text": " we can also go back to the basics and derive", "tokens": [51465, 321, 393, 611, 352, 646, 281, 264, 14688, 293, 28446, 51565], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1121, "seek": 236620, "start": 2390.2, "end": 2392.2, "text": " this because again we can go to our", "tokens": [51565, 341, 570, 797, 321, 393, 352, 281, 527, 51665], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1122, "seek": 236620, "start": 2392.2, "end": 2394.2, "text": " f of x plus h minus f of x", "tokens": [51665, 283, 295, 2031, 1804, 276, 3175, 283, 295, 2031, 51765], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1123, "seek": 236620, "start": 2394.2, "end": 2396.2, "text": " divide by h", "tokens": [51765, 9845, 538, 276, 51865], "temperature": 0.0, "avg_logprob": -0.06284823050865761, "compression_ratio": 1.7802690582959642, "no_speech_prob": 0.000602366984821856}, {"id": 1124, "seek": 239620, "start": 2396.2, "end": 2398.2, "text": " that's the definition of a derivative", "tokens": [50365, 300, 311, 264, 7123, 295, 257, 13760, 50465], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1125, "seek": 239620, "start": 2398.2, "end": 2400.2, "text": " as h goes to zero and", "tokens": [50465, 382, 276, 1709, 281, 4018, 293, 50565], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1126, "seek": 239620, "start": 2400.2, "end": 2402.2, "text": " so here focusing on c", "tokens": [50565, 370, 510, 8416, 322, 269, 50665], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1127, "seek": 239620, "start": 2402.2, "end": 2404.2, "text": " and its effect on d", "tokens": [50665, 293, 1080, 1802, 322, 274, 50765], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1128, "seek": 239620, "start": 2404.2, "end": 2406.2, "text": " we can basically do the f of x plus h", "tokens": [50765, 321, 393, 1936, 360, 264, 283, 295, 2031, 1804, 276, 50865], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1129, "seek": 239620, "start": 2406.2, "end": 2408.2, "text": " will be c is", "tokens": [50865, 486, 312, 269, 307, 50965], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1130, "seek": 239620, "start": 2408.2, "end": 2410.2, "text": " incremented by h plus c", "tokens": [50965, 1946, 14684, 538, 276, 1804, 269, 51065], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1131, "seek": 239620, "start": 2410.2, "end": 2412.2, "text": " that's the first evaluation of our", "tokens": [51065, 300, 311, 264, 700, 13344, 295, 527, 51165], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1132, "seek": 239620, "start": 2412.2, "end": 2414.2, "text": " function minus", "tokens": [51165, 2445, 3175, 51265], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1133, "seek": 239620, "start": 2414.2, "end": 2416.2, "text": " c plus e", "tokens": [51265, 269, 1804, 308, 51365], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1134, "seek": 239620, "start": 2416.2, "end": 2418.2, "text": " and then divide h", "tokens": [51365, 293, 550, 9845, 276, 51465], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1135, "seek": 239620, "start": 2418.2, "end": 2420.2, "text": " and so what is this", "tokens": [51465, 293, 370, 437, 307, 341, 51565], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1136, "seek": 239620, "start": 2420.2, "end": 2422.2, "text": " just expanding this out this will be c plus", "tokens": [51565, 445, 14702, 341, 484, 341, 486, 312, 269, 1804, 51665], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1137, "seek": 239620, "start": 2422.2, "end": 2424.2, "text": " h plus e minus c minus", "tokens": [51665, 276, 1804, 308, 3175, 269, 3175, 51765], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1138, "seek": 239620, "start": 2424.2, "end": 2426.2, "text": " e divide h", "tokens": [51765, 308, 9845, 276, 51865], "temperature": 0.0, "avg_logprob": -0.06648523195654946, "compression_ratio": 1.809278350515464, "no_speech_prob": 0.00038224324816837907}, {"id": 1139, "seek": 242620, "start": 2426.2, "end": 2428.2, "text": " and then you see here how c minus c", "tokens": [50365, 293, 550, 291, 536, 510, 577, 269, 3175, 269, 50465], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1140, "seek": 242620, "start": 2428.2, "end": 2430.2, "text": " cancels e minus e cancels", "tokens": [50465, 393, 66, 1625, 308, 3175, 308, 393, 66, 1625, 50565], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1141, "seek": 242620, "start": 2430.2, "end": 2432.2, "text": " we're left with h over h which is 1.0", "tokens": [50565, 321, 434, 1411, 365, 276, 670, 276, 597, 307, 502, 13, 15, 50665], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1142, "seek": 242620, "start": 2432.2, "end": 2434.2, "text": " and so", "tokens": [50665, 293, 370, 50765], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1143, "seek": 242620, "start": 2434.2, "end": 2436.2, "text": " by symmetry also", "tokens": [50765, 538, 25440, 611, 50865], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1144, "seek": 242620, "start": 2436.2, "end": 2438.2, "text": " d d by d", "tokens": [50865, 274, 274, 538, 274, 50965], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1145, "seek": 242620, "start": 2438.2, "end": 2440.2, "text": " e will be", "tokens": [50965, 308, 486, 312, 51065], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1146, "seek": 242620, "start": 2440.2, "end": 2442.2, "text": " 1.0 as well", "tokens": [51065, 502, 13, 15, 382, 731, 51165], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1147, "seek": 242620, "start": 2442.2, "end": 2444.2, "text": " so basically the derivative of", "tokens": [51165, 370, 1936, 264, 13760, 295, 51265], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1148, "seek": 242620, "start": 2444.2, "end": 2446.2, "text": " a sum expression is very simple", "tokens": [51265, 257, 2408, 6114, 307, 588, 2199, 51365], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1149, "seek": 242620, "start": 2446.2, "end": 2448.2, "text": " and this is the local derivative", "tokens": [51365, 293, 341, 307, 264, 2654, 13760, 51465], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1150, "seek": 242620, "start": 2448.2, "end": 2450.2, "text": " so i call this the local derivative because", "tokens": [51465, 370, 741, 818, 341, 264, 2654, 13760, 570, 51565], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1151, "seek": 242620, "start": 2450.2, "end": 2452.2, "text": " we have the final output value all the", "tokens": [51565, 321, 362, 264, 2572, 5598, 2158, 439, 264, 51665], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1152, "seek": 242620, "start": 2452.2, "end": 2454.2, "text": " way at the end of this graph and we're now", "tokens": [51665, 636, 412, 264, 917, 295, 341, 4295, 293, 321, 434, 586, 51765], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1153, "seek": 242620, "start": 2454.2, "end": 2456.2, "text": " like a small node here and", "tokens": [51765, 411, 257, 1359, 9984, 510, 293, 51865], "temperature": 0.0, "avg_logprob": -0.051853664219379425, "compression_ratio": 1.7675438596491229, "no_speech_prob": 0.0006280964589677751}, {"id": 1154, "seek": 245620, "start": 2456.2, "end": 2458.2, "text": " this is a little plus node and", "tokens": [50365, 341, 307, 257, 707, 1804, 9984, 293, 50465], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1155, "seek": 245620, "start": 2458.2, "end": 2460.2, "text": " the little plus node doesn't know", "tokens": [50465, 264, 707, 1804, 9984, 1177, 380, 458, 50565], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1156, "seek": 245620, "start": 2460.2, "end": 2462.2, "text": " anything about the rest of the graph", "tokens": [50565, 1340, 466, 264, 1472, 295, 264, 4295, 50665], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1157, "seek": 245620, "start": 2462.2, "end": 2464.2, "text": " that it's embedded in all it knows", "tokens": [50665, 300, 309, 311, 16741, 294, 439, 309, 3255, 50765], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1158, "seek": 245620, "start": 2464.2, "end": 2466.2, "text": " is that it did a plus it took a c", "tokens": [50765, 307, 300, 309, 630, 257, 1804, 309, 1890, 257, 269, 50865], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1159, "seek": 245620, "start": 2466.2, "end": 2468.2, "text": " and an e added them and created", "tokens": [50865, 293, 364, 308, 3869, 552, 293, 2942, 50965], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1160, "seek": 245620, "start": 2468.2, "end": 2470.2, "text": " d and this plus node", "tokens": [50965, 274, 293, 341, 1804, 9984, 51065], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1161, "seek": 245620, "start": 2470.2, "end": 2472.2, "text": " also knows the local influence of", "tokens": [51065, 611, 3255, 264, 2654, 6503, 295, 51165], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1162, "seek": 245620, "start": 2472.2, "end": 2474.2, "text": " c on d or rather", "tokens": [51165, 269, 322, 274, 420, 2831, 51265], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1163, "seek": 245620, "start": 2474.2, "end": 2476.2, "text": " the derivative of d with respect to c", "tokens": [51265, 264, 13760, 295, 274, 365, 3104, 281, 269, 51365], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1164, "seek": 245620, "start": 2476.2, "end": 2478.2, "text": " and it also knows the derivative of d", "tokens": [51365, 293, 309, 611, 3255, 264, 13760, 295, 274, 51465], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1165, "seek": 245620, "start": 2478.2, "end": 2480.2, "text": " with respect to e but", "tokens": [51465, 365, 3104, 281, 308, 457, 51565], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1166, "seek": 245620, "start": 2480.2, "end": 2482.2, "text": " that's not what we want that's just a local derivative", "tokens": [51565, 300, 311, 406, 437, 321, 528, 300, 311, 445, 257, 2654, 13760, 51665], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1167, "seek": 245620, "start": 2482.2, "end": 2484.2, "text": " what we actually want is", "tokens": [51665, 437, 321, 767, 528, 307, 51765], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1168, "seek": 245620, "start": 2484.2, "end": 2486.2, "text": " dl by dc and", "tokens": [51765, 37873, 538, 274, 66, 293, 51865], "temperature": 0.0, "avg_logprob": -0.05169784321504481, "compression_ratio": 2.048458149779736, "no_speech_prob": 0.0004201302072033286}, {"id": 1169, "seek": 248620, "start": 2486.2, "end": 2488.2, "text": " l could l is here just one", "tokens": [50365, 287, 727, 287, 307, 510, 445, 472, 50465], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1170, "seek": 248620, "start": 2488.2, "end": 2490.2, "text": " step away but in the general case", "tokens": [50465, 1823, 1314, 457, 294, 264, 2674, 1389, 50565], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1171, "seek": 248620, "start": 2490.2, "end": 2492.2, "text": " this little plus node is could be", "tokens": [50565, 341, 707, 1804, 9984, 307, 727, 312, 50665], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1172, "seek": 248620, "start": 2492.2, "end": 2494.2, "text": " embedded in like a massive graph", "tokens": [50665, 16741, 294, 411, 257, 5994, 4295, 50765], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1173, "seek": 248620, "start": 2494.2, "end": 2496.2, "text": " so again", "tokens": [50765, 370, 797, 50865], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1174, "seek": 248620, "start": 2496.2, "end": 2498.2, "text": " we know how l impacts d and", "tokens": [50865, 321, 458, 577, 287, 11606, 274, 293, 50965], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1175, "seek": 248620, "start": 2498.2, "end": 2500.2, "text": " now we know how c and e impact", "tokens": [50965, 586, 321, 458, 577, 269, 293, 308, 2712, 51065], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1176, "seek": 248620, "start": 2500.2, "end": 2502.2, "text": " d how do we put that information together", "tokens": [51065, 274, 577, 360, 321, 829, 300, 1589, 1214, 51165], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1177, "seek": 248620, "start": 2502.2, "end": 2504.2, "text": " to write dl by dc", "tokens": [51165, 281, 2464, 37873, 538, 274, 66, 51265], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1178, "seek": 248620, "start": 2504.2, "end": 2506.2, "text": " and the answer of course is the chain rule", "tokens": [51265, 293, 264, 1867, 295, 1164, 307, 264, 5021, 4978, 51365], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1179, "seek": 248620, "start": 2506.2, "end": 2508.2, "text": " in calculus and so", "tokens": [51365, 294, 33400, 293, 370, 51465], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1180, "seek": 248620, "start": 2510.2, "end": 2512.2, "text": " i pulled up chain rule here from wikipedia", "tokens": [51565, 741, 7373, 493, 5021, 4978, 510, 490, 261, 1035, 26633, 51665], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1181, "seek": 248620, "start": 2512.2, "end": 2514.2, "text": " and i'm going", "tokens": [51665, 293, 741, 478, 516, 51765], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1182, "seek": 248620, "start": 2514.2, "end": 2516.2, "text": " to go through this very briefly so chain", "tokens": [51765, 281, 352, 807, 341, 588, 10515, 370, 5021, 51865], "temperature": 0.0, "avg_logprob": -0.05792278149088875, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.0003697190259117633}, {"id": 1183, "seek": 251620, "start": 2516.2, "end": 2518.2, "text": " rule wikipedia sometimes", "tokens": [50365, 4978, 261, 1035, 26633, 2171, 50465], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1184, "seek": 251620, "start": 2518.2, "end": 2520.2, "text": " can be very confusing and calculus can", "tokens": [50465, 393, 312, 588, 13181, 293, 33400, 393, 50565], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1185, "seek": 251620, "start": 2520.2, "end": 2522.2, "text": " can be very confusing like", "tokens": [50565, 393, 312, 588, 13181, 411, 50665], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1186, "seek": 251620, "start": 2522.2, "end": 2524.2, "text": " this is the way i learned", "tokens": [50665, 341, 307, 264, 636, 741, 3264, 50765], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1187, "seek": 251620, "start": 2524.2, "end": 2526.2, "text": " chain rule and it was very", "tokens": [50765, 5021, 4978, 293, 309, 390, 588, 50865], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1188, "seek": 251620, "start": 2526.2, "end": 2528.2, "text": " confusing like what is happening", "tokens": [50865, 13181, 411, 437, 307, 2737, 50965], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1189, "seek": 251620, "start": 2528.2, "end": 2530.2, "text": " it's just complicated so i like", "tokens": [50965, 309, 311, 445, 6179, 370, 741, 411, 51065], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1190, "seek": 251620, "start": 2530.2, "end": 2532.2, "text": " this expression much better", "tokens": [51065, 341, 6114, 709, 1101, 51165], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1191, "seek": 251620, "start": 2532.2, "end": 2534.2, "text": " if a variable z depends", "tokens": [51165, 498, 257, 7006, 710, 5946, 51265], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1192, "seek": 251620, "start": 2534.2, "end": 2536.2, "text": " on a variable y which itself depends", "tokens": [51265, 322, 257, 7006, 288, 597, 2564, 5946, 51365], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1193, "seek": 251620, "start": 2536.2, "end": 2538.2, "text": " on a variable x", "tokens": [51365, 322, 257, 7006, 2031, 51465], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1194, "seek": 251620, "start": 2538.2, "end": 2540.2, "text": " then z depends on x as well obviously", "tokens": [51465, 550, 710, 5946, 322, 2031, 382, 731, 2745, 51565], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1195, "seek": 251620, "start": 2540.2, "end": 2542.2, "text": " through the intermediate variable y", "tokens": [51565, 807, 264, 19376, 7006, 288, 51665], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1196, "seek": 251620, "start": 2542.2, "end": 2544.2, "text": " and in this case the chain rule is expressed", "tokens": [51665, 293, 294, 341, 1389, 264, 5021, 4978, 307, 12675, 51765], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1197, "seek": 251620, "start": 2544.2, "end": 2546.2, "text": " as if you want", "tokens": [51765, 382, 498, 291, 528, 51865], "temperature": 0.0, "avg_logprob": -0.05114223189273123, "compression_ratio": 1.9778761061946903, "no_speech_prob": 0.00030332873575389385}, {"id": 1198, "seek": 254620, "start": 2546.2, "end": 2548.2, "text": " dz by dx", "tokens": [50365, 9758, 538, 30017, 50465], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1199, "seek": 254620, "start": 2548.2, "end": 2550.2, "text": " then you take the dz by dy", "tokens": [50465, 550, 291, 747, 264, 9758, 538, 14584, 50565], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1200, "seek": 254620, "start": 2550.2, "end": 2552.2, "text": " and you multiply it by dy", "tokens": [50565, 293, 291, 12972, 309, 538, 14584, 50665], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1201, "seek": 254620, "start": 2552.2, "end": 2554.2, "text": " by dx so the chain", "tokens": [50665, 538, 30017, 370, 264, 5021, 50765], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1202, "seek": 254620, "start": 2554.2, "end": 2556.2, "text": " rule fundamentally is telling you", "tokens": [50765, 4978, 17879, 307, 3585, 291, 50865], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1203, "seek": 254620, "start": 2556.2, "end": 2558.2, "text": " how we chain", "tokens": [50865, 577, 321, 5021, 50965], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1204, "seek": 254620, "start": 2558.2, "end": 2560.2, "text": " these derivatives", "tokens": [50965, 613, 33733, 51065], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1205, "seek": 254620, "start": 2560.2, "end": 2562.2, "text": " together correctly", "tokens": [51065, 1214, 8944, 51165], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1206, "seek": 254620, "start": 2562.2, "end": 2564.2, "text": " so to differentiate through", "tokens": [51165, 370, 281, 23203, 807, 51265], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1207, "seek": 254620, "start": 2564.2, "end": 2566.2, "text": " a function composition", "tokens": [51265, 257, 2445, 12686, 51365], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1208, "seek": 254620, "start": 2566.2, "end": 2568.2, "text": " we have to apply a multiplication", "tokens": [51365, 321, 362, 281, 3079, 257, 27290, 51465], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1209, "seek": 254620, "start": 2568.2, "end": 2570.2, "text": " of those derivatives", "tokens": [51465, 295, 729, 33733, 51565], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1210, "seek": 254620, "start": 2570.2, "end": 2572.2, "text": " so that's", "tokens": [51565, 370, 300, 311, 51665], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1211, "seek": 254620, "start": 2572.2, "end": 2574.2, "text": " really what chain rule is telling us", "tokens": [51665, 534, 437, 5021, 4978, 307, 3585, 505, 51765], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1212, "seek": 254620, "start": 2574.2, "end": 2576.2, "text": " and there's a nice little", "tokens": [51765, 293, 456, 311, 257, 1481, 707, 51865], "temperature": 0.0, "avg_logprob": -0.042818620800971985, "compression_ratio": 1.805263157894737, "no_speech_prob": 0.00044643995352089405}, {"id": 1213, "seek": 257620, "start": 2576.2, "end": 2578.2, "text": " intuitive explanation here which i also think is", "tokens": [50365, 21769, 10835, 510, 597, 741, 611, 519, 307, 50465], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1214, "seek": 257620, "start": 2578.2, "end": 2580.2, "text": " kind of cute the chain rule states that", "tokens": [50465, 733, 295, 4052, 264, 5021, 4978, 4368, 300, 50565], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1215, "seek": 257620, "start": 2580.2, "end": 2582.2, "text": " knowing the instantaneous rate of change of z with respect", "tokens": [50565, 5276, 264, 45596, 3314, 295, 1319, 295, 710, 365, 3104, 50665], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1216, "seek": 257620, "start": 2582.2, "end": 2584.2, "text": " to y and y relative to x allows", "tokens": [50665, 281, 288, 293, 288, 4972, 281, 2031, 4045, 50765], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1217, "seek": 257620, "start": 2584.2, "end": 2586.2, "text": " one to calculate the instantaneous rate of change of z", "tokens": [50765, 472, 281, 8873, 264, 45596, 3314, 295, 1319, 295, 710, 50865], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1218, "seek": 257620, "start": 2586.2, "end": 2588.2, "text": " relative to x as a", "tokens": [50865, 4972, 281, 2031, 382, 257, 50965], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1219, "seek": 257620, "start": 2588.2, "end": 2590.2, "text": " product of those two rates of change", "tokens": [50965, 1674, 295, 729, 732, 6846, 295, 1319, 51065], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1220, "seek": 257620, "start": 2590.2, "end": 2592.2, "text": " simply the product of those two", "tokens": [51065, 2935, 264, 1674, 295, 729, 732, 51165], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1221, "seek": 257620, "start": 2592.2, "end": 2594.2, "text": " so here's a good one", "tokens": [51165, 370, 510, 311, 257, 665, 472, 51265], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1222, "seek": 257620, "start": 2594.2, "end": 2596.2, "text": " if a car travels twice as fast as a bicycle", "tokens": [51265, 498, 257, 1032, 19863, 6091, 382, 2370, 382, 257, 20888, 51365], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1223, "seek": 257620, "start": 2596.2, "end": 2598.2, "text": " and the bicycle is four times as", "tokens": [51365, 293, 264, 20888, 307, 1451, 1413, 382, 51465], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1224, "seek": 257620, "start": 2598.2, "end": 2600.2, "text": " fast as a walking man", "tokens": [51465, 2370, 382, 257, 4494, 587, 51565], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1225, "seek": 257620, "start": 2600.2, "end": 2602.2, "text": " then the car travels two times four", "tokens": [51565, 550, 264, 1032, 19863, 732, 1413, 1451, 51665], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1226, "seek": 257620, "start": 2602.2, "end": 2604.2, "text": " eight times as fast as a man", "tokens": [51665, 3180, 1413, 382, 2370, 382, 257, 587, 51765], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1227, "seek": 257620, "start": 2604.2, "end": 2606.2, "text": " and so this makes it", "tokens": [51765, 293, 370, 341, 1669, 309, 51865], "temperature": 0.0, "avg_logprob": -0.06600517545427595, "compression_ratio": 2.078740157480315, "no_speech_prob": 0.0005249259993433952}, {"id": 1228, "seek": 260620, "start": 2606.2, "end": 2608.2, "text": " very clear that the correct thing to do", "tokens": [50365, 588, 1850, 300, 264, 3006, 551, 281, 360, 50465], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1229, "seek": 260620, "start": 2608.2, "end": 2610.2, "text": " sort of is to multiply", "tokens": [50465, 1333, 295, 307, 281, 12972, 50565], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1230, "seek": 260620, "start": 2610.2, "end": 2612.2, "text": " so car is", "tokens": [50565, 370, 1032, 307, 50665], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1231, "seek": 260620, "start": 2612.2, "end": 2614.2, "text": " twice as fast as bicycle and bicycle", "tokens": [50665, 6091, 382, 2370, 382, 20888, 293, 20888, 50765], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1232, "seek": 260620, "start": 2614.2, "end": 2616.2, "text": " is four times as fast as man", "tokens": [50765, 307, 1451, 1413, 382, 2370, 382, 587, 50865], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1233, "seek": 260620, "start": 2616.2, "end": 2618.2, "text": " so the car will be eight", "tokens": [50865, 370, 264, 1032, 486, 312, 3180, 50965], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1234, "seek": 260620, "start": 2618.2, "end": 2620.2, "text": " times as fast as the man", "tokens": [50965, 1413, 382, 2370, 382, 264, 587, 51065], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1235, "seek": 260620, "start": 2620.2, "end": 2622.2, "text": " and so we can take these", "tokens": [51065, 293, 370, 321, 393, 747, 613, 51165], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1236, "seek": 260620, "start": 2622.2, "end": 2624.2, "text": " intermediate rates of change if you will", "tokens": [51165, 19376, 6846, 295, 1319, 498, 291, 486, 51265], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1237, "seek": 260620, "start": 2624.2, "end": 2626.2, "text": " and multiply them together", "tokens": [51265, 293, 12972, 552, 1214, 51365], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1238, "seek": 260620, "start": 2626.2, "end": 2628.2, "text": " and that justifies the", "tokens": [51365, 293, 300, 445, 11221, 264, 51465], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1239, "seek": 260620, "start": 2628.2, "end": 2630.2, "text": " chain rule intuitively", "tokens": [51465, 5021, 4978, 46506, 51565], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1240, "seek": 260620, "start": 2630.2, "end": 2632.2, "text": " so have a look at chain rule but here", "tokens": [51565, 370, 362, 257, 574, 412, 5021, 4978, 457, 510, 51665], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1241, "seek": 260620, "start": 2632.2, "end": 2634.2, "text": " really what it means for us is", "tokens": [51665, 534, 437, 309, 1355, 337, 505, 307, 51765], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1242, "seek": 260620, "start": 2634.2, "end": 2636.2, "text": " there's a very simple recipe for deriving", "tokens": [51765, 456, 311, 257, 588, 2199, 6782, 337, 1163, 2123, 51865], "temperature": 0.0, "avg_logprob": -0.03807249301817359, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.0002419378433842212}, {"id": 1243, "seek": 263620, "start": 2636.2, "end": 2638.2, "text": " what we want", "tokens": [50365, 437, 321, 528, 50465], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1244, "seek": 263620, "start": 2638.2, "end": 2640.2, "text": " which is dl by dc", "tokens": [50465, 597, 307, 37873, 538, 274, 66, 50565], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1245, "seek": 263620, "start": 2640.2, "end": 2642.2, "text": " and what we have so far", "tokens": [50565, 293, 437, 321, 362, 370, 1400, 50665], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1246, "seek": 263620, "start": 2642.2, "end": 2644.2, "text": " is we know", "tokens": [50665, 307, 321, 458, 50765], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1247, "seek": 263620, "start": 2644.2, "end": 2646.2, "text": " want", "tokens": [50765, 528, 50865], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1248, "seek": 263620, "start": 2646.2, "end": 2648.2, "text": " and we know", "tokens": [50865, 293, 321, 458, 50965], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1249, "seek": 263620, "start": 2648.2, "end": 2650.2, "text": " what is the", "tokens": [50965, 437, 307, 264, 51065], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1250, "seek": 263620, "start": 2650.2, "end": 2652.2, "text": " impact of d on l", "tokens": [51065, 2712, 295, 274, 322, 287, 51165], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1251, "seek": 263620, "start": 2652.2, "end": 2654.2, "text": " so we know dl by dd", "tokens": [51165, 370, 321, 458, 37873, 538, 274, 67, 51265], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1252, "seek": 263620, "start": 2654.2, "end": 2656.2, "text": " the derivative of l with respect to dd", "tokens": [51265, 264, 13760, 295, 287, 365, 3104, 281, 274, 67, 51365], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1253, "seek": 263620, "start": 2656.2, "end": 2658.2, "text": " we know that that's negative two", "tokens": [51365, 321, 458, 300, 300, 311, 3671, 732, 51465], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1254, "seek": 263620, "start": 2658.2, "end": 2660.2, "text": " and now because of this local", "tokens": [51465, 293, 586, 570, 295, 341, 2654, 51565], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1255, "seek": 263620, "start": 2660.2, "end": 2662.2, "text": " reasoning that we've done here", "tokens": [51565, 21577, 300, 321, 600, 1096, 510, 51665], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1256, "seek": 263620, "start": 2662.2, "end": 2664.2, "text": " we know dd by dc", "tokens": [51665, 321, 458, 274, 67, 538, 274, 66, 51765], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1257, "seek": 263620, "start": 2664.2, "end": 2666.2, "text": " so how does c impact d", "tokens": [51765, 370, 577, 775, 269, 2712, 274, 51865], "temperature": 0.0, "avg_logprob": -0.08167662314318735, "compression_ratio": 1.7988165680473374, "no_speech_prob": 0.004074763506650925}, {"id": 1258, "seek": 266620, "start": 2666.2, "end": 2668.2, "text": " and in particular", "tokens": [50365, 293, 294, 1729, 50465], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1259, "seek": 266620, "start": 2668.2, "end": 2670.2, "text": " this is a plus node so the local derivative", "tokens": [50465, 341, 307, 257, 1804, 9984, 370, 264, 2654, 13760, 50565], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1260, "seek": 266620, "start": 2670.2, "end": 2672.2, "text": " is simply 1.0 it's very simple", "tokens": [50565, 307, 2935, 502, 13, 15, 309, 311, 588, 2199, 50665], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1261, "seek": 266620, "start": 2672.2, "end": 2674.2, "text": " and so", "tokens": [50665, 293, 370, 50765], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1262, "seek": 266620, "start": 2674.2, "end": 2676.2, "text": " the chain rule tells us that dl by dc", "tokens": [50765, 264, 5021, 4978, 5112, 505, 300, 37873, 538, 274, 66, 50865], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1263, "seek": 266620, "start": 2676.2, "end": 2678.2, "text": " going through this intermediate", "tokens": [50865, 516, 807, 341, 19376, 50965], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1264, "seek": 266620, "start": 2678.2, "end": 2680.2, "text": " variable", "tokens": [50965, 7006, 51065], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1265, "seek": 266620, "start": 2680.2, "end": 2682.2, "text": " will just be simply dl by", "tokens": [51065, 486, 445, 312, 2935, 37873, 538, 51165], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1266, "seek": 266620, "start": 2682.2, "end": 2684.2, "text": " dd", "tokens": [51165, 274, 67, 51265], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1267, "seek": 266620, "start": 2684.2, "end": 2686.2, "text": " times", "tokens": [51265, 1413, 51365], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1268, "seek": 266620, "start": 2688.2, "end": 2690.2, "text": " dd", "tokens": [51465, 274, 67, 51565], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1269, "seek": 266620, "start": 2690.2, "end": 2692.2, "text": " by dc that's chain rule", "tokens": [51565, 538, 274, 66, 300, 311, 5021, 4978, 51665], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1270, "seek": 266620, "start": 2692.2, "end": 2694.2, "text": " so this is identical", "tokens": [51665, 370, 341, 307, 14800, 51765], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1271, "seek": 266620, "start": 2694.2, "end": 2696.2, "text": " to what's happening here", "tokens": [51765, 281, 437, 311, 2737, 510, 51865], "temperature": 0.0, "avg_logprob": -0.08268432414278071, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0005747283576056361}, {"id": 1272, "seek": 269620, "start": 2696.2, "end": 2698.2, "text": " except", "tokens": [50365, 3993, 50465], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1273, "seek": 269620, "start": 2698.2, "end": 2700.2, "text": " z is rl", "tokens": [50465, 710, 307, 367, 75, 50565], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1274, "seek": 269620, "start": 2700.2, "end": 2702.2, "text": " y is rd and x is", "tokens": [50565, 288, 307, 367, 67, 293, 2031, 307, 50665], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1275, "seek": 269620, "start": 2702.2, "end": 2704.2, "text": " rc", "tokens": [50665, 367, 66, 50765], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1276, "seek": 269620, "start": 2704.2, "end": 2706.2, "text": " so we literally just have to multiply these", "tokens": [50765, 370, 321, 3736, 445, 362, 281, 12972, 613, 50865], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1277, "seek": 269620, "start": 2706.2, "end": 2708.2, "text": " and because", "tokens": [50865, 293, 570, 50965], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1278, "seek": 269620, "start": 2710.2, "end": 2712.2, "text": " these local derivatives like dd by dc", "tokens": [51065, 613, 2654, 33733, 411, 274, 67, 538, 274, 66, 51165], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1279, "seek": 269620, "start": 2712.2, "end": 2714.2, "text": " are just one", "tokens": [51165, 366, 445, 472, 51265], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1280, "seek": 269620, "start": 2714.2, "end": 2716.2, "text": " we basically just copy over", "tokens": [51265, 321, 1936, 445, 5055, 670, 51365], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1281, "seek": 269620, "start": 2716.2, "end": 2718.2, "text": " dl by dd because this is just", "tokens": [51365, 37873, 538, 274, 67, 570, 341, 307, 445, 51465], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1282, "seek": 269620, "start": 2718.2, "end": 2720.2, "text": " times one", "tokens": [51465, 1413, 472, 51565], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1283, "seek": 269620, "start": 2720.2, "end": 2722.2, "text": " so because dl by dd", "tokens": [51565, 370, 570, 37873, 538, 274, 67, 51665], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1284, "seek": 269620, "start": 2722.2, "end": 2724.2, "text": " is negative two what is dl", "tokens": [51665, 307, 3671, 732, 437, 307, 37873, 51765], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1285, "seek": 269620, "start": 2724.2, "end": 2726.2, "text": " by dc", "tokens": [51765, 538, 274, 66, 51865], "temperature": 0.0, "avg_logprob": -0.07543296813964843, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.0007462914218194783}, {"id": 1286, "seek": 272620, "start": 2726.2, "end": 2728.2, "text": " well it's the local gradient", "tokens": [50365, 731, 309, 311, 264, 2654, 16235, 50465], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1287, "seek": 272620, "start": 2728.2, "end": 2730.2, "text": " 1.0 times dl by dd", "tokens": [50465, 502, 13, 15, 1413, 37873, 538, 274, 67, 50565], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1288, "seek": 272620, "start": 2730.2, "end": 2732.2, "text": " which is negative two so literally", "tokens": [50565, 597, 307, 3671, 732, 370, 3736, 50665], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1289, "seek": 272620, "start": 2732.2, "end": 2734.2, "text": " what a plus node does you can look", "tokens": [50665, 437, 257, 1804, 9984, 775, 291, 393, 574, 50765], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1290, "seek": 272620, "start": 2734.2, "end": 2736.2, "text": " at it that way is it literally just routes", "tokens": [50765, 412, 309, 300, 636, 307, 309, 3736, 445, 18242, 50865], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1291, "seek": 272620, "start": 2736.2, "end": 2738.2, "text": " the gradient because the", "tokens": [50865, 264, 16235, 570, 264, 50965], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1292, "seek": 272620, "start": 2738.2, "end": 2740.2, "text": " plus nodes local derivatives are just", "tokens": [50965, 1804, 13891, 2654, 33733, 366, 445, 51065], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1293, "seek": 272620, "start": 2740.2, "end": 2742.2, "text": " one and so in the chain rule", "tokens": [51065, 472, 293, 370, 294, 264, 5021, 4978, 51165], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1294, "seek": 272620, "start": 2742.2, "end": 2744.2, "text": " one times dl by", "tokens": [51165, 472, 1413, 37873, 538, 51265], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1295, "seek": 272620, "start": 2744.2, "end": 2746.2, "text": " dd is", "tokens": [51265, 274, 67, 307, 51365], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1296, "seek": 272620, "start": 2746.2, "end": 2748.2, "text": " is", "tokens": [51365, 307, 51465], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1297, "seek": 272620, "start": 2748.2, "end": 2750.2, "text": " is just dl by dd", "tokens": [51465, 307, 445, 37873, 538, 274, 67, 51565], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1298, "seek": 272620, "start": 2750.2, "end": 2752.2, "text": " and so that derivative just gets routed", "tokens": [51565, 293, 370, 300, 13760, 445, 2170, 4020, 292, 51665], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1299, "seek": 272620, "start": 2752.2, "end": 2754.2, "text": " to both c and to e", "tokens": [51665, 281, 1293, 269, 293, 281, 308, 51765], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1300, "seek": 272620, "start": 2754.2, "end": 2756.2, "text": " in this case so basically", "tokens": [51765, 294, 341, 1389, 370, 1936, 51865], "temperature": 0.0, "avg_logprob": -0.06906554658534163, "compression_ratio": 1.8487804878048781, "no_speech_prob": 0.000735691690351814}, {"id": 1301, "seek": 275620, "start": 2756.2, "end": 2758.2, "text": " we have that e.grad", "tokens": [50365, 321, 362, 300, 308, 13, 7165, 50465], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1302, "seek": 275620, "start": 2758.2, "end": 2760.2, "text": " or let's start with c", "tokens": [50465, 420, 718, 311, 722, 365, 269, 50565], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1303, "seek": 275620, "start": 2760.2, "end": 2762.2, "text": " since that's the one we looked at", "tokens": [50565, 1670, 300, 311, 264, 472, 321, 2956, 412, 50665], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1304, "seek": 275620, "start": 2762.2, "end": 2764.2, "text": " is negative", "tokens": [50665, 307, 3671, 50765], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1305, "seek": 275620, "start": 2764.2, "end": 2766.2, "text": " two times one", "tokens": [50765, 732, 1413, 472, 50865], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1306, "seek": 275620, "start": 2766.2, "end": 2768.2, "text": " negative two", "tokens": [50865, 3671, 732, 50965], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1307, "seek": 275620, "start": 2768.2, "end": 2770.2, "text": " and in the same way by", "tokens": [50965, 293, 294, 264, 912, 636, 538, 51065], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1308, "seek": 275620, "start": 2770.2, "end": 2772.2, "text": " symmetry e.grad will be negative two", "tokens": [51065, 25440, 308, 13, 7165, 486, 312, 3671, 732, 51165], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1309, "seek": 275620, "start": 2772.2, "end": 2774.2, "text": " that's the claim", "tokens": [51165, 300, 311, 264, 3932, 51265], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1310, "seek": 275620, "start": 2774.2, "end": 2776.2, "text": " so we can set those", "tokens": [51265, 370, 321, 393, 992, 729, 51365], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1311, "seek": 275620, "start": 2776.2, "end": 2778.2, "text": " we can redraw", "tokens": [51365, 321, 393, 2182, 5131, 51465], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1312, "seek": 275620, "start": 2778.2, "end": 2780.2, "text": " and you see how", "tokens": [51465, 293, 291, 536, 577, 51565], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1313, "seek": 275620, "start": 2780.2, "end": 2782.2, "text": " we just assigned negative two negative two", "tokens": [51565, 321, 445, 13279, 3671, 732, 3671, 732, 51665], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1314, "seek": 275620, "start": 2782.2, "end": 2784.2, "text": " so this back propagating signal which is", "tokens": [51665, 370, 341, 646, 12425, 990, 6358, 597, 307, 51765], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1315, "seek": 275620, "start": 2784.2, "end": 2786.2, "text": " carrying the information of like what is the derivative", "tokens": [51765, 9792, 264, 1589, 295, 411, 437, 307, 264, 13760, 51865], "temperature": 0.0, "avg_logprob": -0.07448397273510958, "compression_ratio": 1.8585365853658538, "no_speech_prob": 0.00048118928680196404}, {"id": 1316, "seek": 278620, "start": 2786.2, "end": 2788.2, "text": " of l with respect to all the intermediate nodes", "tokens": [50365, 295, 287, 365, 3104, 281, 439, 264, 19376, 13891, 50465], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1317, "seek": 278620, "start": 2788.2, "end": 2790.2, "text": " we can imagine it almost like", "tokens": [50465, 321, 393, 3811, 309, 1920, 411, 50565], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1318, "seek": 278620, "start": 2790.2, "end": 2792.2, "text": " flowing backwards through the graph and a", "tokens": [50565, 13974, 12204, 807, 264, 4295, 293, 257, 50665], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1319, "seek": 278620, "start": 2792.2, "end": 2794.2, "text": " plus node will simply distribute", "tokens": [50665, 1804, 9984, 486, 2935, 20594, 50765], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1320, "seek": 278620, "start": 2794.2, "end": 2796.2, "text": " the derivative to all the leaf nodes", "tokens": [50765, 264, 13760, 281, 439, 264, 10871, 13891, 50865], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1321, "seek": 278620, "start": 2796.2, "end": 2798.2, "text": " sorry to all the children nodes of it", "tokens": [50865, 2597, 281, 439, 264, 2227, 13891, 295, 309, 50965], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1322, "seek": 278620, "start": 2798.2, "end": 2800.2, "text": " so this is the claim", "tokens": [50965, 370, 341, 307, 264, 3932, 51065], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1323, "seek": 278620, "start": 2800.2, "end": 2802.2, "text": " and now let's verify it", "tokens": [51065, 293, 586, 718, 311, 16888, 309, 51165], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1324, "seek": 278620, "start": 2802.2, "end": 2804.2, "text": " so let me remove the plus h here from before", "tokens": [51165, 370, 718, 385, 4159, 264, 1804, 276, 510, 490, 949, 51265], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1325, "seek": 278620, "start": 2804.2, "end": 2806.2, "text": " and now instead what we want to", "tokens": [51265, 293, 586, 2602, 437, 321, 528, 281, 51365], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1326, "seek": 278620, "start": 2806.2, "end": 2808.2, "text": " do is we want to increment c so", "tokens": [51365, 360, 307, 321, 528, 281, 26200, 269, 370, 51465], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1327, "seek": 278620, "start": 2808.2, "end": 2810.2, "text": " c.data will be incremented by h", "tokens": [51465, 269, 13, 67, 3274, 486, 312, 1946, 14684, 538, 276, 51565], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1328, "seek": 278620, "start": 2810.2, "end": 2812.2, "text": " and when i run this we expect", "tokens": [51565, 293, 562, 741, 1190, 341, 321, 2066, 51665], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1329, "seek": 278620, "start": 2812.2, "end": 2814.2, "text": " to see negative two", "tokens": [51665, 281, 536, 3671, 732, 51765], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1330, "seek": 278620, "start": 2814.2, "end": 2816.2, "text": " negative two", "tokens": [51765, 3671, 732, 51865], "temperature": 0.0, "avg_logprob": -0.0614649671496767, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0002938370453193784}, {"id": 1331, "seek": 281620, "start": 2816.2, "end": 2818.2, "text": " and then of course for e", "tokens": [50365, 293, 550, 295, 1164, 337, 308, 50465], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1332, "seek": 281620, "start": 2818.2, "end": 2820.2, "text": " so e.data plus equals h", "tokens": [50465, 370, 308, 13, 67, 3274, 1804, 6915, 276, 50565], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1333, "seek": 281620, "start": 2820.2, "end": 2822.2, "text": " and we expect to see negative two", "tokens": [50565, 293, 321, 2066, 281, 536, 3671, 732, 50665], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1334, "seek": 281620, "start": 2822.2, "end": 2824.2, "text": " simple", "tokens": [50665, 2199, 50765], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1335, "seek": 281620, "start": 2826.2, "end": 2828.2, "text": " so those are the derivatives", "tokens": [50865, 370, 729, 366, 264, 33733, 50965], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1336, "seek": 281620, "start": 2828.2, "end": 2830.2, "text": " of these internal nodes", "tokens": [50965, 295, 613, 6920, 13891, 51065], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1337, "seek": 281620, "start": 2830.2, "end": 2832.2, "text": " and now we're going to", "tokens": [51065, 293, 586, 321, 434, 516, 281, 51165], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1338, "seek": 281620, "start": 2832.2, "end": 2834.2, "text": " recurse our way backwards", "tokens": [51165, 18680, 405, 527, 636, 12204, 51265], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1339, "seek": 281620, "start": 2834.2, "end": 2836.2, "text": " again and we're again", "tokens": [51265, 797, 293, 321, 434, 797, 51365], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1340, "seek": 281620, "start": 2836.2, "end": 2838.2, "text": " going to apply the chain rule", "tokens": [51365, 516, 281, 3079, 264, 5021, 4978, 51465], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1341, "seek": 281620, "start": 2838.2, "end": 2840.2, "text": " so here we go our second application of chain rule", "tokens": [51465, 370, 510, 321, 352, 527, 1150, 3861, 295, 5021, 4978, 51565], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1342, "seek": 281620, "start": 2840.2, "end": 2842.2, "text": " and we will apply it all the way through the", "tokens": [51565, 293, 321, 486, 3079, 309, 439, 264, 636, 807, 264, 51665], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1343, "seek": 281620, "start": 2842.2, "end": 2844.2, "text": " graph we just happen to only have one more node", "tokens": [51665, 4295, 321, 445, 1051, 281, 787, 362, 472, 544, 9984, 51765], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1344, "seek": 281620, "start": 2844.2, "end": 2846.2, "text": " remaining we have that", "tokens": [51765, 8877, 321, 362, 300, 51865], "temperature": 0.0, "avg_logprob": -0.06698914231925175, "compression_ratio": 1.7672413793103448, "no_speech_prob": 5.59026375412941e-05}, {"id": 1345, "seek": 284620, "start": 2846.2, "end": 2848.2, "text": " derivative of l", "tokens": [50365, 13760, 295, 287, 50465], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1346, "seek": 284620, "start": 2848.2, "end": 2850.2, "text": " so we know that", "tokens": [50465, 370, 321, 458, 300, 50565], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1347, "seek": 284620, "start": 2850.2, "end": 2852.2, "text": " the derivative of l", "tokens": [50565, 264, 13760, 295, 287, 50665], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1348, "seek": 284620, "start": 2852.2, "end": 2854.2, "text": " as we have just calculated", "tokens": [50665, 382, 321, 362, 445, 15598, 50765], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1349, "seek": 284620, "start": 2854.2, "end": 2856.2, "text": " is negative two", "tokens": [50765, 307, 3671, 732, 50865], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1350, "seek": 284620, "start": 2856.2, "end": 2858.2, "text": " so we know that", "tokens": [50865, 370, 321, 458, 300, 50965], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1351, "seek": 284620, "start": 2858.2, "end": 2860.2, "text": " so we know the derivative of l", "tokens": [50965, 370, 321, 458, 264, 13760, 295, 287, 51065], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1352, "seek": 284620, "start": 2860.2, "end": 2862.2, "text": " with respect to e", "tokens": [51065, 365, 3104, 281, 308, 51165], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1353, "seek": 284620, "start": 2862.2, "end": 2864.2, "text": " and now we want", "tokens": [51165, 293, 586, 321, 528, 51265], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1354, "seek": 284620, "start": 2864.2, "end": 2866.2, "text": " dL by dA", "tokens": [51265, 274, 43, 538, 274, 32, 51365], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1355, "seek": 284620, "start": 2866.2, "end": 2868.2, "text": " right", "tokens": [51365, 558, 51465], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1356, "seek": 284620, "start": 2868.2, "end": 2870.2, "text": " and the chain rule is telling us", "tokens": [51465, 293, 264, 5021, 4978, 307, 3585, 505, 51565], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1357, "seek": 284620, "start": 2870.2, "end": 2872.2, "text": " that that's just dL by dE", "tokens": [51565, 300, 300, 311, 445, 274, 43, 538, 274, 36, 51665], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1358, "seek": 284620, "start": 2872.2, "end": 2874.2, "text": " negative two", "tokens": [51665, 3671, 732, 51765], "temperature": 0.0, "avg_logprob": -0.22177758424178415, "compression_ratio": 1.8194444444444444, "no_speech_prob": 0.0012300529051572084}, {"id": 1359, "seek": 287420, "start": 2874.2, "end": 2876.2, "text": " so that's basically", "tokens": [50365, 370, 300, 311, 1936, 50465], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1360, "seek": 287420, "start": 2876.2, "end": 2878.2, "text": " dE by dA", "tokens": [50465, 274, 36, 538, 274, 32, 50565], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1361, "seek": 287420, "start": 2878.2, "end": 2880.2, "text": " we have to look at that", "tokens": [50565, 321, 362, 281, 574, 412, 300, 50665], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1362, "seek": 287420, "start": 2880.2, "end": 2882.2, "text": " so I'm a little times node", "tokens": [50665, 370, 286, 478, 257, 707, 1413, 9984, 50765], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1363, "seek": 287420, "start": 2882.2, "end": 2884.2, "text": " inside a massive graph", "tokens": [50765, 1854, 257, 5994, 4295, 50865], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1364, "seek": 287420, "start": 2884.2, "end": 2886.2, "text": " and I only know that I did", "tokens": [50865, 293, 286, 787, 458, 300, 286, 630, 50965], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1365, "seek": 287420, "start": 2886.2, "end": 2888.2, "text": " a times b and I produced an e", "tokens": [50965, 257, 1413, 272, 293, 286, 7126, 364, 308, 51065], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1366, "seek": 287420, "start": 2888.2, "end": 2890.2, "text": " so now what is", "tokens": [51065, 370, 586, 437, 307, 51165], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1367, "seek": 287420, "start": 2890.2, "end": 2892.2, "text": " dE by dA", "tokens": [51165, 274, 36, 538, 274, 32, 51265], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1368, "seek": 287420, "start": 2892.2, "end": 2894.2, "text": " and dE by dB", "tokens": [51265, 293, 274, 36, 538, 274, 33, 51365], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1369, "seek": 287420, "start": 2894.2, "end": 2896.2, "text": " that's the only thing that I sort of know about", "tokens": [51365, 300, 311, 264, 787, 551, 300, 286, 1333, 295, 458, 466, 51465], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1370, "seek": 287420, "start": 2896.2, "end": 2898.2, "text": " that's my local gradient", "tokens": [51465, 300, 311, 452, 2654, 16235, 51565], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1371, "seek": 287420, "start": 2898.2, "end": 2900.2, "text": " so because we have that e is a times b", "tokens": [51565, 370, 570, 321, 362, 300, 308, 307, 257, 1413, 272, 51665], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1372, "seek": 287420, "start": 2900.2, "end": 2902.2, "text": " we're asking what is dE", "tokens": [51665, 321, 434, 3365, 437, 307, 274, 36, 51765], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1373, "seek": 287420, "start": 2902.2, "end": 2904.2, "text": " by dA", "tokens": [51765, 538, 274, 32, 51865], "temperature": 0.0, "avg_logprob": -0.12689476478390577, "compression_ratio": 1.7789473684210526, "no_speech_prob": 0.0005935885128565133}, {"id": 1374, "seek": 290420, "start": 2904.2, "end": 2906.2, "text": " and of course we just did that here", "tokens": [50365, 293, 295, 1164, 321, 445, 630, 300, 510, 50465], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1375, "seek": 290420, "start": 2906.2, "end": 2908.2, "text": " we had a times", "tokens": [50465, 321, 632, 257, 1413, 50565], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1376, "seek": 290420, "start": 2908.2, "end": 2910.2, "text": " so I'm not going to re-derive it", "tokens": [50565, 370, 286, 478, 406, 516, 281, 319, 12, 1068, 488, 309, 50665], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1377, "seek": 290420, "start": 2910.2, "end": 2912.2, "text": " but if you want to differentiate this", "tokens": [50665, 457, 498, 291, 528, 281, 23203, 341, 50765], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1378, "seek": 290420, "start": 2912.2, "end": 2914.2, "text": " with respect to a you'll just get b", "tokens": [50765, 365, 3104, 281, 257, 291, 603, 445, 483, 272, 50865], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1379, "seek": 290420, "start": 2914.2, "end": 2916.2, "text": " right the value of b", "tokens": [50865, 558, 264, 2158, 295, 272, 50965], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1380, "seek": 290420, "start": 2916.2, "end": 2918.2, "text": " which in this case is", "tokens": [50965, 597, 294, 341, 1389, 307, 51065], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1381, "seek": 290420, "start": 2918.2, "end": 2920.2, "text": " negative three point zero", "tokens": [51065, 3671, 1045, 935, 4018, 51165], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1382, "seek": 290420, "start": 2920.2, "end": 2922.2, "text": " so", "tokens": [51165, 370, 51265], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1383, "seek": 290420, "start": 2922.2, "end": 2924.2, "text": " basically we have that dL by dA", "tokens": [51265, 1936, 321, 362, 300, 274, 43, 538, 274, 32, 51365], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1384, "seek": 290420, "start": 2924.2, "end": 2926.2, "text": " well let me just do it", "tokens": [51365, 731, 718, 385, 445, 360, 309, 51465], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1385, "seek": 290420, "start": 2926.2, "end": 2928.2, "text": " right here we have that a dot grad", "tokens": [51465, 558, 510, 321, 362, 300, 257, 5893, 2771, 51565], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1386, "seek": 290420, "start": 2928.2, "end": 2930.2, "text": " and we are applying chain rule here", "tokens": [51565, 293, 321, 366, 9275, 5021, 4978, 510, 51665], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1387, "seek": 290420, "start": 2930.2, "end": 2932.2, "text": " is dL by dE", "tokens": [51665, 307, 274, 43, 538, 274, 36, 51765], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1388, "seek": 290420, "start": 2932.2, "end": 2934.2, "text": " which we see here is", "tokens": [51765, 597, 321, 536, 510, 307, 51865], "temperature": 0.0, "avg_logprob": -0.0683951529245528, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.000377871620003134}, {"id": 1389, "seek": 293420, "start": 2934.2, "end": 2936.2, "text": " negative two", "tokens": [50365, 3671, 732, 50465], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1390, "seek": 293420, "start": 2936.2, "end": 2938.2, "text": " times", "tokens": [50465, 1413, 50565], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1391, "seek": 293420, "start": 2938.2, "end": 2940.2, "text": " what is dE by dA", "tokens": [50565, 437, 307, 274, 36, 538, 274, 32, 50665], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1392, "seek": 293420, "start": 2940.2, "end": 2942.2, "text": " it's the value of b", "tokens": [50665, 309, 311, 264, 2158, 295, 272, 50765], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1393, "seek": 293420, "start": 2942.2, "end": 2944.2, "text": " which is negative three", "tokens": [50765, 597, 307, 3671, 1045, 50865], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1394, "seek": 293420, "start": 2944.2, "end": 2946.2, "text": " that's it", "tokens": [50865, 300, 311, 309, 50965], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1395, "seek": 293420, "start": 2948.2, "end": 2950.2, "text": " and then we have b dot grad", "tokens": [51065, 293, 550, 321, 362, 272, 5893, 2771, 51165], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1396, "seek": 293420, "start": 2950.2, "end": 2952.2, "text": " is again dL by dE", "tokens": [51165, 307, 797, 274, 43, 538, 274, 36, 51265], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1397, "seek": 293420, "start": 2952.2, "end": 2954.2, "text": " which is negative two", "tokens": [51265, 597, 307, 3671, 732, 51365], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1398, "seek": 293420, "start": 2954.2, "end": 2956.2, "text": " just the same way", "tokens": [51365, 445, 264, 912, 636, 51465], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1399, "seek": 293420, "start": 2956.2, "end": 2958.2, "text": " times", "tokens": [51465, 1413, 51565], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1400, "seek": 293420, "start": 2958.2, "end": 2960.2, "text": " what is dE by dB", "tokens": [51565, 437, 307, 274, 36, 538, 274, 33, 51665], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1401, "seek": 293420, "start": 2960.2, "end": 2962.2, "text": " is the value of a", "tokens": [51665, 307, 264, 2158, 295, 257, 51765], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1402, "seek": 293420, "start": 2962.2, "end": 2964.2, "text": " which is 2.0", "tokens": [51765, 597, 307, 568, 13, 15, 51865], "temperature": 0.0, "avg_logprob": -0.06977496976437776, "compression_ratio": 1.6838235294117647, "no_speech_prob": 0.0027449254412204027}, {"id": 1403, "seek": 296420, "start": 2964.2, "end": 2966.2, "text": " so these are", "tokens": [50365, 370, 613, 366, 50465], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1404, "seek": 296420, "start": 2966.2, "end": 2968.2, "text": " our claimed derivatives", "tokens": [50465, 527, 12941, 33733, 50565], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1405, "seek": 296420, "start": 2968.2, "end": 2970.2, "text": " let's", "tokens": [50565, 718, 311, 50665], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1406, "seek": 296420, "start": 2970.2, "end": 2972.2, "text": " re-draw", "tokens": [50665, 319, 12, 48848, 50765], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1407, "seek": 296420, "start": 2972.2, "end": 2974.2, "text": " and we see here that", "tokens": [50765, 293, 321, 536, 510, 300, 50865], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1408, "seek": 296420, "start": 2974.2, "end": 2976.2, "text": " a dot grad turns out to be six", "tokens": [50865, 257, 5893, 2771, 4523, 484, 281, 312, 2309, 50965], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1409, "seek": 296420, "start": 2976.2, "end": 2978.2, "text": " because that is negative two times negative three", "tokens": [50965, 570, 300, 307, 3671, 732, 1413, 3671, 1045, 51065], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1410, "seek": 296420, "start": 2978.2, "end": 2980.2, "text": " and b dot grad is negative four", "tokens": [51065, 293, 272, 5893, 2771, 307, 3671, 1451, 51165], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1411, "seek": 296420, "start": 2980.2, "end": 2982.2, "text": " times", "tokens": [51165, 1413, 51265], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1412, "seek": 296420, "start": 2982.2, "end": 2984.2, "text": " sorry is negative two times two", "tokens": [51265, 2597, 307, 3671, 732, 1413, 732, 51365], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1413, "seek": 296420, "start": 2984.2, "end": 2986.2, "text": " which is negative four", "tokens": [51365, 597, 307, 3671, 1451, 51465], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1414, "seek": 296420, "start": 2986.2, "end": 2988.2, "text": " so those are our claims", "tokens": [51465, 370, 729, 366, 527, 9441, 51565], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1415, "seek": 296420, "start": 2988.2, "end": 2990.2, "text": " let's delete this and let's verify them", "tokens": [51565, 718, 311, 12097, 341, 293, 718, 311, 16888, 552, 51665], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1416, "seek": 296420, "start": 2990.2, "end": 2992.2, "text": " we have", "tokens": [51665, 321, 362, 51765], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1417, "seek": 296420, "start": 2992.2, "end": 2994.2, "text": " a here", "tokens": [51765, 257, 510, 51865], "temperature": 0.0, "avg_logprob": -0.07689093098495946, "compression_ratio": 1.9518072289156627, "no_speech_prob": 0.000859535182826221}, {"id": 1418, "seek": 299420, "start": 2994.2, "end": 2996.2, "text": " plus equals h", "tokens": [50365, 1804, 6915, 276, 50465], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1419, "seek": 299420, "start": 2996.2, "end": 2998.2, "text": " so", "tokens": [50465, 370, 50565], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1420, "seek": 299420, "start": 2998.2, "end": 3000.2, "text": " the claim is that", "tokens": [50565, 264, 3932, 307, 300, 50665], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1421, "seek": 299420, "start": 3000.2, "end": 3002.2, "text": " a dot grad is six", "tokens": [50665, 257, 5893, 2771, 307, 2309, 50765], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1422, "seek": 299420, "start": 3002.2, "end": 3004.2, "text": " let's verify", "tokens": [50765, 718, 311, 16888, 50865], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1423, "seek": 299420, "start": 3004.2, "end": 3006.2, "text": " six", "tokens": [50865, 2309, 50965], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1424, "seek": 299420, "start": 3006.2, "end": 3008.2, "text": " and we have b dot data", "tokens": [50965, 293, 321, 362, 272, 5893, 1412, 51065], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1425, "seek": 299420, "start": 3008.2, "end": 3010.2, "text": " plus equals h", "tokens": [51065, 1804, 6915, 276, 51165], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1426, "seek": 299420, "start": 3010.2, "end": 3012.2, "text": " so nudging b by h", "tokens": [51165, 370, 40045, 3249, 272, 538, 276, 51265], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1427, "seek": 299420, "start": 3012.2, "end": 3014.2, "text": " and looking at what happens", "tokens": [51265, 293, 1237, 412, 437, 2314, 51365], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1428, "seek": 299420, "start": 3014.2, "end": 3016.2, "text": " we claim it's negative four", "tokens": [51365, 321, 3932, 309, 311, 3671, 1451, 51465], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1429, "seek": 299420, "start": 3016.2, "end": 3018.2, "text": " and indeed it's negative four", "tokens": [51465, 293, 6451, 309, 311, 3671, 1451, 51565], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1430, "seek": 299420, "start": 3018.2, "end": 3020.2, "text": " plus minus again float", "tokens": [51565, 1804, 3175, 797, 15706, 51665], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1431, "seek": 299420, "start": 3020.2, "end": 3022.2, "text": " oddness", "tokens": [51665, 7401, 1287, 51765], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1432, "seek": 299420, "start": 3022.2, "end": 3024.2, "text": " and that's it", "tokens": [51765, 293, 300, 311, 309, 51865], "temperature": 0.0, "avg_logprob": -0.07755188941955567, "compression_ratio": 1.6887417218543046, "no_speech_prob": 0.0007448241231031716}, {"id": 1433, "seek": 302420, "start": 3024.2, "end": 3026.2, "text": " that was the manual", "tokens": [50365, 300, 390, 264, 9688, 50465], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1434, "seek": 302420, "start": 3026.2, "end": 3028.2, "text": " back propagation", "tokens": [50465, 646, 38377, 50565], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1435, "seek": 302420, "start": 3028.2, "end": 3030.2, "text": " all the way from here", "tokens": [50565, 439, 264, 636, 490, 510, 50665], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1436, "seek": 302420, "start": 3030.2, "end": 3032.2, "text": " to all the leaf nodes", "tokens": [50665, 281, 439, 264, 10871, 13891, 50765], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1437, "seek": 302420, "start": 3032.2, "end": 3034.2, "text": " and we've done it piece by piece", "tokens": [50765, 293, 321, 600, 1096, 309, 2522, 538, 2522, 50865], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1438, "seek": 302420, "start": 3034.2, "end": 3036.2, "text": " and really all we've done is", "tokens": [50865, 293, 534, 439, 321, 600, 1096, 307, 50965], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1439, "seek": 302420, "start": 3036.2, "end": 3038.2, "text": " as you saw we iterated through all the nodes", "tokens": [50965, 382, 291, 1866, 321, 17138, 770, 807, 439, 264, 13891, 51065], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1440, "seek": 302420, "start": 3038.2, "end": 3040.2, "text": " one by one", "tokens": [51065, 472, 538, 472, 51165], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1441, "seek": 302420, "start": 3040.2, "end": 3042.2, "text": " and locally applied the chain rule", "tokens": [51165, 293, 16143, 6456, 264, 5021, 4978, 51265], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1442, "seek": 302420, "start": 3042.2, "end": 3044.2, "text": " we always know what is the derivative of l", "tokens": [51265, 321, 1009, 458, 437, 307, 264, 13760, 295, 287, 51365], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1443, "seek": 302420, "start": 3044.2, "end": 3046.2, "text": " with respect to this little output", "tokens": [51365, 365, 3104, 281, 341, 707, 5598, 51465], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1444, "seek": 302420, "start": 3046.2, "end": 3048.2, "text": " and then we look at how this output was produced", "tokens": [51465, 293, 550, 321, 574, 412, 577, 341, 5598, 390, 7126, 51565], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1445, "seek": 302420, "start": 3048.2, "end": 3050.2, "text": " this output was produced through some operation", "tokens": [51565, 341, 5598, 390, 7126, 807, 512, 6916, 51665], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1446, "seek": 302420, "start": 3050.2, "end": 3052.2, "text": " and we have the pointers to the children nodes", "tokens": [51665, 293, 321, 362, 264, 44548, 281, 264, 2227, 13891, 51765], "temperature": 0.0, "avg_logprob": -0.09190690221865315, "compression_ratio": 1.887966804979253, "no_speech_prob": 0.0008900501416064799}, {"id": 1447, "seek": 305220, "start": 3052.2, "end": 3054.2, "text": " and so in this little operation", "tokens": [50365, 293, 370, 294, 341, 707, 6916, 50465], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1448, "seek": 305220, "start": 3054.2, "end": 3056.2, "text": " we know what the local derivatives are", "tokens": [50465, 321, 458, 437, 264, 2654, 33733, 366, 50565], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1449, "seek": 305220, "start": 3056.2, "end": 3058.2, "text": " and we just multiply them onto the derivative", "tokens": [50565, 293, 321, 445, 12972, 552, 3911, 264, 13760, 50665], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1450, "seek": 305220, "start": 3058.2, "end": 3060.2, "text": " always", "tokens": [50665, 1009, 50765], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1451, "seek": 305220, "start": 3060.2, "end": 3062.2, "text": " so we just go through and recursively multiply on", "tokens": [50765, 370, 321, 445, 352, 807, 293, 20560, 3413, 12972, 322, 50865], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1452, "seek": 305220, "start": 3062.2, "end": 3064.2, "text": " the local derivatives", "tokens": [50865, 264, 2654, 33733, 50965], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1453, "seek": 305220, "start": 3064.2, "end": 3066.2, "text": " and that's what back propagation is", "tokens": [50965, 293, 300, 311, 437, 646, 38377, 307, 51065], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1454, "seek": 305220, "start": 3066.2, "end": 3068.2, "text": " it's just a recursive application of chain rule", "tokens": [51065, 309, 311, 445, 257, 20560, 488, 3861, 295, 5021, 4978, 51165], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1455, "seek": 305220, "start": 3068.2, "end": 3070.2, "text": " backwards through the computation graph", "tokens": [51165, 12204, 807, 264, 24903, 4295, 51265], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1456, "seek": 305220, "start": 3070.2, "end": 3072.2, "text": " let's see this power in action", "tokens": [51265, 718, 311, 536, 341, 1347, 294, 3069, 51365], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1457, "seek": 305220, "start": 3072.2, "end": 3074.2, "text": " just very briefly", "tokens": [51365, 445, 588, 10515, 51465], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1458, "seek": 305220, "start": 3074.2, "end": 3076.2, "text": " what we're going to do is we're going to", "tokens": [51465, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 51565], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1459, "seek": 305220, "start": 3076.2, "end": 3078.2, "text": " nudge our inputs to try to make l", "tokens": [51565, 297, 16032, 527, 15743, 281, 853, 281, 652, 287, 51665], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1460, "seek": 305220, "start": 3078.2, "end": 3080.2, "text": " go up", "tokens": [51665, 352, 493, 51765], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1461, "seek": 305220, "start": 3080.2, "end": 3082.2, "text": " so in particular what we're doing is", "tokens": [51765, 370, 294, 1729, 437, 321, 434, 884, 307, 51865], "temperature": 0.0, "avg_logprob": -0.05433569476008415, "compression_ratio": 1.9209486166007905, "no_speech_prob": 0.0009460352594032884}, {"id": 1462, "seek": 308220, "start": 3082.2, "end": 3084.2, "text": " we're going to take that data", "tokens": [50365, 321, 434, 516, 281, 747, 300, 1412, 50465], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1463, "seek": 308220, "start": 3084.2, "end": 3086.2, "text": " we're going to change it", "tokens": [50465, 321, 434, 516, 281, 1319, 309, 50565], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1464, "seek": 308220, "start": 3086.2, "end": 3088.2, "text": " and if we want l to go up", "tokens": [50565, 293, 498, 321, 528, 287, 281, 352, 493, 50665], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1465, "seek": 308220, "start": 3088.2, "end": 3090.2, "text": " that means we just have to go in the direction of the gradient", "tokens": [50665, 300, 1355, 321, 445, 362, 281, 352, 294, 264, 3513, 295, 264, 16235, 50765], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1466, "seek": 308220, "start": 3090.2, "end": 3092.2, "text": " so a should increase", "tokens": [50765, 370, 257, 820, 3488, 50865], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1467, "seek": 308220, "start": 3092.2, "end": 3094.2, "text": " in the direction of gradient", "tokens": [50865, 294, 264, 3513, 295, 16235, 50965], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1468, "seek": 308220, "start": 3094.2, "end": 3096.2, "text": " by like some small step amount", "tokens": [50965, 538, 411, 512, 1359, 1823, 2372, 51065], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1469, "seek": 308220, "start": 3096.2, "end": 3098.2, "text": " this is the step size", "tokens": [51065, 341, 307, 264, 1823, 2744, 51165], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1470, "seek": 308220, "start": 3098.2, "end": 3100.2, "text": " and we don't just want this for b", "tokens": [51165, 293, 321, 500, 380, 445, 528, 341, 337, 272, 51265], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1471, "seek": 308220, "start": 3100.2, "end": 3102.2, "text": " but also for b", "tokens": [51265, 457, 611, 337, 272, 51365], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1472, "seek": 308220, "start": 3102.2, "end": 3104.2, "text": " also for c", "tokens": [51365, 611, 337, 269, 51465], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1473, "seek": 308220, "start": 3104.2, "end": 3106.2, "text": " also for f", "tokens": [51465, 611, 337, 283, 51565], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1474, "seek": 308220, "start": 3106.2, "end": 3108.2, "text": " those are leaf nodes", "tokens": [51565, 729, 366, 10871, 13891, 51665], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1475, "seek": 308220, "start": 3108.2, "end": 3110.2, "text": " which we usually have control over", "tokens": [51665, 597, 321, 2673, 362, 1969, 670, 51765], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1476, "seek": 308220, "start": 3110.2, "end": 3112.2, "text": " and if we nudge in", "tokens": [51765, 293, 498, 321, 297, 16032, 294, 51865], "temperature": 0.0, "avg_logprob": -0.08803346157073974, "compression_ratio": 1.84037558685446, "no_speech_prob": 0.0006427654298022389}, {"id": 1477, "seek": 311220, "start": 3112.2, "end": 3114.2, "text": " the direction of the gradient", "tokens": [50365, 264, 3513, 295, 264, 16235, 50465], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1478, "seek": 311220, "start": 3114.2, "end": 3116.2, "text": " we expect a positive influence on l", "tokens": [50465, 321, 2066, 257, 3353, 6503, 322, 287, 50565], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1479, "seek": 311220, "start": 3116.2, "end": 3118.2, "text": " so we expect l to go up", "tokens": [50565, 370, 321, 2066, 287, 281, 352, 493, 50665], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1480, "seek": 311220, "start": 3118.2, "end": 3120.2, "text": " positively", "tokens": [50665, 25795, 50765], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1481, "seek": 311220, "start": 3120.2, "end": 3122.2, "text": " so it should become less negative", "tokens": [50765, 370, 309, 820, 1813, 1570, 3671, 50865], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1482, "seek": 311220, "start": 3122.2, "end": 3124.2, "text": " it should go up to say negative 6", "tokens": [50865, 309, 820, 352, 493, 281, 584, 3671, 1386, 50965], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1483, "seek": 311220, "start": 3124.2, "end": 3126.2, "text": " or something like that", "tokens": [50965, 420, 746, 411, 300, 51065], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1484, "seek": 311220, "start": 3126.2, "end": 3128.2, "text": " it's hard to tell exactly", "tokens": [51065, 309, 311, 1152, 281, 980, 2293, 51165], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1485, "seek": 311220, "start": 3128.2, "end": 3130.2, "text": " and we have to rerun the forward pass", "tokens": [51165, 293, 321, 362, 281, 43819, 409, 264, 2128, 1320, 51265], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1486, "seek": 311220, "start": 3130.2, "end": 3132.2, "text": " so let me just", "tokens": [51265, 370, 718, 385, 445, 51365], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1487, "seek": 311220, "start": 3132.2, "end": 3134.2, "text": " do that here", "tokens": [51365, 360, 300, 510, 51465], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1488, "seek": 311220, "start": 3136.2, "end": 3138.2, "text": " this would be the forward pass", "tokens": [51565, 341, 576, 312, 264, 2128, 1320, 51665], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1489, "seek": 311220, "start": 3138.2, "end": 3140.2, "text": " f would be unchanged", "tokens": [51665, 283, 576, 312, 44553, 51765], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1490, "seek": 311220, "start": 3140.2, "end": 3142.2, "text": " this is effectively the forward pass", "tokens": [51765, 341, 307, 8659, 264, 2128, 1320, 51865], "temperature": 0.0, "avg_logprob": -0.05184095473516555, "compression_ratio": 1.8507462686567164, "no_speech_prob": 0.0008001226815395057}, {"id": 1491, "seek": 314220, "start": 3142.2, "end": 3144.2, "text": " but now if we print l.data", "tokens": [50365, 457, 586, 498, 321, 4482, 287, 13, 67, 3274, 50465], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1492, "seek": 314220, "start": 3144.2, "end": 3146.2, "text": " we expect", "tokens": [50465, 321, 2066, 50565], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1493, "seek": 314220, "start": 3146.2, "end": 3148.2, "text": " because we nudged all the values", "tokens": [50565, 570, 321, 40045, 3004, 439, 264, 4190, 50665], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1494, "seek": 314220, "start": 3148.2, "end": 3150.2, "text": " all the inputs in the direction of the gradient", "tokens": [50665, 439, 264, 15743, 294, 264, 3513, 295, 264, 16235, 50765], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1495, "seek": 314220, "start": 3150.2, "end": 3152.2, "text": " we expected less negative l", "tokens": [50765, 321, 5176, 1570, 3671, 287, 50865], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1496, "seek": 314220, "start": 3152.2, "end": 3154.2, "text": " we expect it to go up", "tokens": [50865, 321, 2066, 309, 281, 352, 493, 50965], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1497, "seek": 314220, "start": 3154.2, "end": 3156.2, "text": " so maybe it's negative 6 or so", "tokens": [50965, 370, 1310, 309, 311, 3671, 1386, 420, 370, 51065], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1498, "seek": 314220, "start": 3156.2, "end": 3158.2, "text": " let's see what happens", "tokens": [51065, 718, 311, 536, 437, 2314, 51165], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1499, "seek": 314220, "start": 3158.2, "end": 3160.2, "text": " ok negative 7", "tokens": [51165, 3133, 3671, 1614, 51265], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1500, "seek": 314220, "start": 3160.2, "end": 3162.2, "text": " and this is basically one step", "tokens": [51265, 293, 341, 307, 1936, 472, 1823, 51365], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1501, "seek": 314220, "start": 3162.2, "end": 3164.2, "text": " of an optimization that we'll end up running", "tokens": [51365, 295, 364, 19618, 300, 321, 603, 917, 493, 2614, 51465], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1502, "seek": 314220, "start": 3164.2, "end": 3166.2, "text": " and really this gradient", "tokens": [51465, 293, 534, 341, 16235, 51565], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1503, "seek": 314220, "start": 3166.2, "end": 3168.2, "text": " just gives us some power", "tokens": [51565, 445, 2709, 505, 512, 1347, 51665], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1504, "seek": 314220, "start": 3168.2, "end": 3170.2, "text": " because we know how to influence the final outcome", "tokens": [51665, 570, 321, 458, 577, 281, 6503, 264, 2572, 9700, 51765], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1505, "seek": 314220, "start": 3170.2, "end": 3172.2, "text": " and this will be extremely useful for training NOLETs as we'll soon see", "tokens": [51765, 293, 341, 486, 312, 4664, 4420, 337, 3097, 426, 5046, 4850, 82, 382, 321, 603, 2321, 536, 51865], "temperature": 0.0, "avg_logprob": -0.12379675971137152, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.0005993538070470095}, {"id": 1506, "seek": 317220, "start": 3172.2, "end": 3174.2, "text": " so now I would like to do", "tokens": [50365, 370, 586, 286, 576, 411, 281, 360, 50465], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1507, "seek": 317220, "start": 3174.2, "end": 3176.2, "text": " one more example", "tokens": [50465, 472, 544, 1365, 50565], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1508, "seek": 317220, "start": 3176.2, "end": 3178.2, "text": " of manual backpropagation", "tokens": [50565, 295, 9688, 646, 79, 1513, 559, 399, 50665], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1509, "seek": 317220, "start": 3178.2, "end": 3180.2, "text": " using a bit more complex", "tokens": [50665, 1228, 257, 857, 544, 3997, 50765], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1510, "seek": 317220, "start": 3180.2, "end": 3182.2, "text": " and useful example", "tokens": [50765, 293, 4420, 1365, 50865], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1511, "seek": 317220, "start": 3182.2, "end": 3184.2, "text": " we are going to backpropagate", "tokens": [50865, 321, 366, 516, 281, 646, 79, 1513, 559, 473, 50965], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1512, "seek": 317220, "start": 3184.2, "end": 3186.2, "text": " through a neuron", "tokens": [50965, 807, 257, 34090, 51065], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1513, "seek": 317220, "start": 3186.2, "end": 3188.2, "text": " so we want to", "tokens": [51065, 370, 321, 528, 281, 51165], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1514, "seek": 317220, "start": 3188.2, "end": 3190.2, "text": " eventually build out neural networks", "tokens": [51165, 4728, 1322, 484, 18161, 9590, 51265], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1515, "seek": 317220, "start": 3190.2, "end": 3192.2, "text": " and in the simplest case these are multilayer", "tokens": [51265, 293, 294, 264, 22811, 1389, 613, 366, 2120, 388, 11167, 51365], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1516, "seek": 317220, "start": 3192.2, "end": 3194.2, "text": " perceptrons as they're called", "tokens": [51365, 43276, 13270, 382, 436, 434, 1219, 51465], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1517, "seek": 317220, "start": 3194.2, "end": 3196.2, "text": " so this is a two layer neural net", "tokens": [51465, 370, 341, 307, 257, 732, 4583, 18161, 2533, 51565], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1518, "seek": 317220, "start": 3196.2, "end": 3198.2, "text": " and it's got these hidden layers made up of neurons", "tokens": [51565, 293, 309, 311, 658, 613, 7633, 7914, 1027, 493, 295, 22027, 51665], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1519, "seek": 317220, "start": 3198.2, "end": 3200.2, "text": " and these neurons are fully connected to each other", "tokens": [51665, 293, 613, 22027, 366, 4498, 4582, 281, 1184, 661, 51765], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1520, "seek": 317220, "start": 3200.2, "end": 3202.2, "text": " now biologically neurons are very complicated", "tokens": [51765, 586, 3228, 17157, 22027, 366, 588, 6179, 51865], "temperature": 0.0, "avg_logprob": -0.07394582033157349, "compression_ratio": 1.828793774319066, "no_speech_prob": 0.002176932292059064}, {"id": 1521, "seek": 320220, "start": 3202.2, "end": 3204.2, "text": " devices but we have very simple mathematical models", "tokens": [50365, 5759, 457, 321, 362, 588, 2199, 18894, 5245, 50465], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1522, "seek": 320220, "start": 3204.2, "end": 3206.2, "text": " of them", "tokens": [50465, 295, 552, 50565], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1523, "seek": 320220, "start": 3206.2, "end": 3208.2, "text": " and so this is a very simple mathematical model", "tokens": [50565, 293, 370, 341, 307, 257, 588, 2199, 18894, 2316, 50665], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1524, "seek": 320220, "start": 3208.2, "end": 3210.2, "text": " of a neuron", "tokens": [50665, 295, 257, 34090, 50765], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1525, "seek": 320220, "start": 3210.2, "end": 3212.2, "text": " you have some inputs, x's", "tokens": [50765, 291, 362, 512, 15743, 11, 2031, 311, 50865], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1526, "seek": 320220, "start": 3212.2, "end": 3214.2, "text": " and then you have these synapses", "tokens": [50865, 293, 550, 291, 362, 613, 5451, 2382, 279, 50965], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1527, "seek": 320220, "start": 3214.2, "end": 3216.2, "text": " that have weights on them", "tokens": [50965, 300, 362, 17443, 322, 552, 51065], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1528, "seek": 320220, "start": 3216.2, "end": 3218.2, "text": " so the w's are weights", "tokens": [51065, 370, 264, 261, 311, 366, 17443, 51165], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1529, "seek": 320220, "start": 3218.2, "end": 3220.2, "text": " and then", "tokens": [51165, 293, 550, 51265], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1530, "seek": 320220, "start": 3220.2, "end": 3222.2, "text": " the synapse interacts with the input", "tokens": [51265, 264, 5451, 11145, 43582, 365, 264, 4846, 51365], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1531, "seek": 320220, "start": 3222.2, "end": 3224.2, "text": " to this neuron multiplicatively", "tokens": [51365, 281, 341, 34090, 17596, 19020, 51465], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1532, "seek": 320220, "start": 3224.2, "end": 3226.2, "text": " so what flows to the cell body", "tokens": [51465, 370, 437, 12867, 281, 264, 2815, 1772, 51565], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1533, "seek": 320220, "start": 3226.2, "end": 3228.2, "text": " of this neuron", "tokens": [51565, 295, 341, 34090, 51665], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1534, "seek": 320220, "start": 3228.2, "end": 3230.2, "text": " is w times x", "tokens": [51665, 307, 261, 1413, 2031, 51765], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1535, "seek": 320220, "start": 3230.2, "end": 3232.2, "text": " but there's multiple inputs", "tokens": [51765, 457, 456, 311, 3866, 15743, 51865], "temperature": 0.0, "avg_logprob": -0.08383922917502266, "compression_ratio": 1.9310344827586208, "no_speech_prob": 0.0011249695671722293}, {"id": 1536, "seek": 323220, "start": 3232.2, "end": 3234.2, "text": " w times x is flowing to the cell body", "tokens": [50365, 261, 1413, 2031, 307, 13974, 281, 264, 2815, 1772, 50465], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1537, "seek": 323220, "start": 3234.2, "end": 3236.2, "text": " the cell body then has", "tokens": [50465, 264, 2815, 1772, 550, 575, 50565], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1538, "seek": 323220, "start": 3236.2, "end": 3238.2, "text": " also like some bias", "tokens": [50565, 611, 411, 512, 12577, 50665], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1539, "seek": 323220, "start": 3238.2, "end": 3240.2, "text": " so this is kind of like the", "tokens": [50665, 370, 341, 307, 733, 295, 411, 264, 50765], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1540, "seek": 323220, "start": 3240.2, "end": 3242.2, "text": " innate sort of trigger happiness", "tokens": [50765, 41766, 1333, 295, 7875, 8324, 50865], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1541, "seek": 323220, "start": 3242.2, "end": 3244.2, "text": " of this neuron", "tokens": [50865, 295, 341, 34090, 50965], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1542, "seek": 323220, "start": 3244.2, "end": 3246.2, "text": " so this bias can make it a bit more trigger happy", "tokens": [50965, 370, 341, 12577, 393, 652, 309, 257, 857, 544, 7875, 2055, 51065], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1543, "seek": 323220, "start": 3246.2, "end": 3248.2, "text": " or a bit less trigger happy regardless of the input", "tokens": [51065, 420, 257, 857, 1570, 7875, 2055, 10060, 295, 264, 4846, 51165], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1544, "seek": 323220, "start": 3248.2, "end": 3250.2, "text": " but basically we're taking all the w times x", "tokens": [51165, 457, 1936, 321, 434, 1940, 439, 264, 261, 1413, 2031, 51265], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1545, "seek": 323220, "start": 3250.2, "end": 3252.2, "text": " of all the inputs", "tokens": [51265, 295, 439, 264, 15743, 51365], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1546, "seek": 323220, "start": 3252.2, "end": 3254.2, "text": " adding the bias", "tokens": [51365, 5127, 264, 12577, 51465], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1547, "seek": 323220, "start": 3254.2, "end": 3256.2, "text": " and then we take it through an activation function", "tokens": [51465, 293, 550, 321, 747, 309, 807, 364, 24433, 2445, 51565], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1548, "seek": 323220, "start": 3256.2, "end": 3258.2, "text": " and this activation function", "tokens": [51565, 293, 341, 24433, 2445, 51665], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1549, "seek": 323220, "start": 3258.2, "end": 3260.2, "text": " is usually some kind of a squashing function", "tokens": [51665, 307, 2673, 512, 733, 295, 257, 2339, 11077, 2445, 51765], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1550, "seek": 323220, "start": 3260.2, "end": 3262.2, "text": " like a sigmoid or 10H", "tokens": [51765, 411, 257, 4556, 3280, 327, 420, 1266, 39, 51865], "temperature": 0.0, "avg_logprob": -0.07862913969791296, "compression_ratio": 1.9755102040816326, "no_speech_prob": 0.0004976626369170845}, {"id": 1551, "seek": 326220, "start": 3262.2, "end": 3264.2, "text": " or something like that", "tokens": [50365, 420, 746, 411, 300, 50465], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1552, "seek": 326220, "start": 3264.2, "end": 3266.2, "text": " so as an example", "tokens": [50465, 370, 382, 364, 1365, 50565], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1553, "seek": 326220, "start": 3266.2, "end": 3268.2, "text": " we're going to use the 10H in this example", "tokens": [50565, 321, 434, 516, 281, 764, 264, 1266, 39, 294, 341, 1365, 50665], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1554, "seek": 326220, "start": 3268.2, "end": 3270.2, "text": " numpy has a", "tokens": [50665, 1031, 8200, 575, 257, 50765], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1555, "seek": 326220, "start": 3270.2, "end": 3272.2, "text": " np.10H", "tokens": [50765, 33808, 13, 3279, 39, 50865], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1556, "seek": 326220, "start": 3272.2, "end": 3274.2, "text": " so we can call it on a range", "tokens": [50865, 370, 321, 393, 818, 309, 322, 257, 3613, 50965], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1557, "seek": 326220, "start": 3274.2, "end": 3276.2, "text": " and we can plot it", "tokens": [50965, 293, 321, 393, 7542, 309, 51065], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1558, "seek": 326220, "start": 3276.2, "end": 3278.2, "text": " this is the 10H function", "tokens": [51065, 341, 307, 264, 1266, 39, 2445, 51165], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1559, "seek": 326220, "start": 3278.2, "end": 3280.2, "text": " and you see that the inputs", "tokens": [51165, 293, 291, 536, 300, 264, 15743, 51265], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1560, "seek": 326220, "start": 3280.2, "end": 3282.2, "text": " as they come in", "tokens": [51265, 382, 436, 808, 294, 51365], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1561, "seek": 326220, "start": 3282.2, "end": 3284.2, "text": " get squashed on the y coordinate here", "tokens": [51365, 483, 2339, 12219, 322, 264, 288, 15670, 510, 51465], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1562, "seek": 326220, "start": 3284.2, "end": 3286.2, "text": " so right at 0", "tokens": [51465, 370, 558, 412, 1958, 51565], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1563, "seek": 326220, "start": 3286.2, "end": 3288.2, "text": " we're going to get exactly 0", "tokens": [51565, 321, 434, 516, 281, 483, 2293, 1958, 51665], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1564, "seek": 326220, "start": 3288.2, "end": 3290.2, "text": " and then as you go more positive in the input", "tokens": [51665, 293, 550, 382, 291, 352, 544, 3353, 294, 264, 4846, 51765], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1565, "seek": 326220, "start": 3290.2, "end": 3292.2, "text": " then you'll see that", "tokens": [51765, 550, 291, 603, 536, 300, 51865], "temperature": 0.0, "avg_logprob": -0.06331882792070878, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.0004727504274342209}, {"id": 1566, "seek": 329220, "start": 3292.2, "end": 3294.2, "text": " the activation function will only go up to 1", "tokens": [50365, 264, 24433, 2445, 486, 787, 352, 493, 281, 502, 50465], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1567, "seek": 329220, "start": 3294.2, "end": 3296.2, "text": " and then plateau out", "tokens": [50465, 293, 550, 39885, 484, 50565], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1568, "seek": 329220, "start": 3296.2, "end": 3298.2, "text": " and so if you pass in very positive inputs", "tokens": [50565, 293, 370, 498, 291, 1320, 294, 588, 3353, 15743, 50665], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1569, "seek": 329220, "start": 3298.2, "end": 3300.2, "text": " we're going to cap it smoothly at 1", "tokens": [50665, 321, 434, 516, 281, 1410, 309, 19565, 412, 502, 50765], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1570, "seek": 329220, "start": 3300.2, "end": 3302.2, "text": " and on the negative side", "tokens": [50765, 293, 322, 264, 3671, 1252, 50865], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1571, "seek": 329220, "start": 3302.2, "end": 3304.2, "text": " we're going to cap it smoothly to negative 1", "tokens": [50865, 321, 434, 516, 281, 1410, 309, 19565, 281, 3671, 502, 50965], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1572, "seek": 329220, "start": 3304.2, "end": 3306.2, "text": " so that's 10H", "tokens": [50965, 370, 300, 311, 1266, 39, 51065], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1573, "seek": 329220, "start": 3306.2, "end": 3308.2, "text": " and that's the squashing function", "tokens": [51065, 293, 300, 311, 264, 2339, 11077, 2445, 51165], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1574, "seek": 329220, "start": 3308.2, "end": 3310.2, "text": " or an activation function", "tokens": [51165, 420, 364, 24433, 2445, 51265], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1575, "seek": 329220, "start": 3310.2, "end": 3312.2, "text": " and what comes out of this neuron", "tokens": [51265, 293, 437, 1487, 484, 295, 341, 34090, 51365], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1576, "seek": 329220, "start": 3312.2, "end": 3314.2, "text": " is just the activation function applied to the", "tokens": [51365, 307, 445, 264, 24433, 2445, 6456, 281, 264, 51465], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1577, "seek": 329220, "start": 3314.2, "end": 3316.2, "text": " dot product of the weights", "tokens": [51465, 5893, 1674, 295, 264, 17443, 51565], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1578, "seek": 329220, "start": 3316.2, "end": 3318.2, "text": " and the inputs", "tokens": [51565, 293, 264, 15743, 51665], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1579, "seek": 329220, "start": 3318.2, "end": 3320.2, "text": " so let's write one out", "tokens": [51665, 370, 718, 311, 2464, 472, 484, 51765], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1580, "seek": 329220, "start": 3320.2, "end": 3322.2, "text": " um", "tokens": [51765, 1105, 51865], "temperature": 0.0, "avg_logprob": -0.05497323400605985, "compression_ratio": 1.9596412556053813, "no_speech_prob": 0.00020890751329716295}, {"id": 1581, "seek": 332220, "start": 3322.2, "end": 3324.2, "text": " I'm going to copy paste", "tokens": [50365, 286, 478, 516, 281, 5055, 9163, 50465], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1582, "seek": 332220, "start": 3324.2, "end": 3326.2, "text": " because", "tokens": [50465, 570, 50565], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1583, "seek": 332220, "start": 3326.2, "end": 3328.2, "text": " I don't want to type too much", "tokens": [50565, 286, 500, 380, 528, 281, 2010, 886, 709, 50665], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1584, "seek": 332220, "start": 3328.2, "end": 3330.2, "text": " but okay so here we have the inputs", "tokens": [50665, 457, 1392, 370, 510, 321, 362, 264, 15743, 50765], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1585, "seek": 332220, "start": 3330.2, "end": 3332.2, "text": " x1, x2", "tokens": [50765, 2031, 16, 11, 2031, 17, 50865], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1586, "seek": 332220, "start": 3332.2, "end": 3334.2, "text": " so this is a two dimensional neuron", "tokens": [50865, 370, 341, 307, 257, 732, 18795, 34090, 50965], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1587, "seek": 332220, "start": 3334.2, "end": 3336.2, "text": " so two inputs are going to come in", "tokens": [50965, 370, 732, 15743, 366, 516, 281, 808, 294, 51065], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1588, "seek": 332220, "start": 3336.2, "end": 3338.2, "text": " these are thought of as the weights of this neuron", "tokens": [51065, 613, 366, 1194, 295, 382, 264, 17443, 295, 341, 34090, 51165], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1589, "seek": 332220, "start": 3338.2, "end": 3340.2, "text": " weights w1, w2", "tokens": [51165, 17443, 261, 16, 11, 261, 17, 51265], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1590, "seek": 332220, "start": 3340.2, "end": 3342.2, "text": " and these weights again are the", "tokens": [51265, 293, 613, 17443, 797, 366, 264, 51365], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1591, "seek": 332220, "start": 3342.2, "end": 3344.2, "text": " synaptic strengths for each input", "tokens": [51365, 5451, 2796, 299, 16986, 337, 1184, 4846, 51465], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1592, "seek": 332220, "start": 3344.2, "end": 3346.2, "text": " and this is the bias", "tokens": [51465, 293, 341, 307, 264, 12577, 51565], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1593, "seek": 332220, "start": 3346.2, "end": 3348.2, "text": " of the neuron B", "tokens": [51565, 295, 264, 34090, 363, 51665], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1594, "seek": 332220, "start": 3348.2, "end": 3350.2, "text": " and now what we want to do", "tokens": [51665, 293, 586, 437, 321, 528, 281, 360, 51765], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1595, "seek": 332220, "start": 3350.2, "end": 3352.2, "text": " is according to this model", "tokens": [51765, 307, 4650, 281, 341, 2316, 51865], "temperature": 0.0, "avg_logprob": -0.08468101870629095, "compression_ratio": 1.7456140350877194, "no_speech_prob": 0.0017775484593585134}, {"id": 1596, "seek": 335220, "start": 3352.2, "end": 3354.2, "text": " we need to multiply", "tokens": [50365, 321, 643, 281, 12972, 50465], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1597, "seek": 335220, "start": 3354.2, "end": 3356.2, "text": " x1 times w1", "tokens": [50465, 2031, 16, 1413, 261, 16, 50565], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1598, "seek": 335220, "start": 3356.2, "end": 3358.2, "text": " and x2 times w2", "tokens": [50565, 293, 2031, 17, 1413, 261, 17, 50665], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1599, "seek": 335220, "start": 3358.2, "end": 3360.2, "text": " and then we need to add bias", "tokens": [50665, 293, 550, 321, 643, 281, 909, 12577, 50765], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1600, "seek": 335220, "start": 3360.2, "end": 3362.2, "text": " on top of it", "tokens": [50765, 322, 1192, 295, 309, 50865], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1601, "seek": 335220, "start": 3362.2, "end": 3364.2, "text": " and it gets a little messy here", "tokens": [50865, 293, 309, 2170, 257, 707, 16191, 510, 50965], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1602, "seek": 335220, "start": 3364.2, "end": 3366.2, "text": " but all we are trying to do is", "tokens": [50965, 457, 439, 321, 366, 1382, 281, 360, 307, 51065], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1603, "seek": 335220, "start": 3366.2, "end": 3368.2, "text": " x1 w1 plus x2 w2 plus B", "tokens": [51065, 2031, 16, 261, 16, 1804, 2031, 17, 261, 17, 1804, 363, 51165], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1604, "seek": 335220, "start": 3368.2, "end": 3370.2, "text": " and these are multiplied here", "tokens": [51165, 293, 613, 366, 17207, 510, 51265], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1605, "seek": 335220, "start": 3370.2, "end": 3372.2, "text": " except I'm doing it in small steps", "tokens": [51265, 3993, 286, 478, 884, 309, 294, 1359, 4439, 51365], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1606, "seek": 335220, "start": 3372.2, "end": 3374.2, "text": " so that we actually have pointers", "tokens": [51365, 370, 300, 321, 767, 362, 44548, 51465], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1607, "seek": 335220, "start": 3374.2, "end": 3376.2, "text": " to all these intermediate nodes", "tokens": [51465, 281, 439, 613, 19376, 13891, 51565], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1608, "seek": 335220, "start": 3376.2, "end": 3378.2, "text": " so we have x1 w1 variable", "tokens": [51565, 370, 321, 362, 2031, 16, 261, 16, 7006, 51665], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1609, "seek": 335220, "start": 3378.2, "end": 3380.2, "text": " x2 w2 variable", "tokens": [51665, 2031, 17, 261, 17, 7006, 51765], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1610, "seek": 335220, "start": 3380.2, "end": 3382.2, "text": " and I'm also labeling them", "tokens": [51765, 293, 286, 478, 611, 40244, 552, 51865], "temperature": 0.0, "avg_logprob": -0.04532897661602686, "compression_ratio": 1.7605633802816902, "no_speech_prob": 0.0006181520875543356}, {"id": 1611, "seek": 338220, "start": 3382.2, "end": 3384.2, "text": " so that we have the", "tokens": [50365, 370, 300, 321, 362, 264, 50465], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1612, "seek": 338220, "start": 3384.2, "end": 3386.2, "text": " n is now the cell body", "tokens": [50465, 297, 307, 586, 264, 2815, 1772, 50565], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1613, "seek": 338220, "start": 3386.2, "end": 3388.2, "text": " raw activation", "tokens": [50565, 8936, 24433, 50665], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1614, "seek": 338220, "start": 3388.2, "end": 3390.2, "text": " without the activation function for now", "tokens": [50665, 1553, 264, 24433, 2445, 337, 586, 50765], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1615, "seek": 338220, "start": 3390.2, "end": 3392.2, "text": " and this should be enough", "tokens": [50765, 293, 341, 820, 312, 1547, 50865], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1616, "seek": 338220, "start": 3392.2, "end": 3394.2, "text": " to basically plot it", "tokens": [50865, 281, 1936, 7542, 309, 50965], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1617, "seek": 338220, "start": 3394.2, "end": 3396.2, "text": " so draw dot of n", "tokens": [50965, 370, 2642, 5893, 295, 297, 51065], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1618, "seek": 338220, "start": 3398.2, "end": 3400.2, "text": " gives us x1 times w1", "tokens": [51165, 2709, 505, 2031, 16, 1413, 261, 16, 51265], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1619, "seek": 338220, "start": 3400.2, "end": 3402.2, "text": " x2 times w2", "tokens": [51265, 2031, 17, 1413, 261, 17, 51365], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1620, "seek": 338220, "start": 3402.2, "end": 3404.2, "text": " being added", "tokens": [51365, 885, 3869, 51465], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1621, "seek": 338220, "start": 3404.2, "end": 3406.2, "text": " then the bias gets added on top of this", "tokens": [51465, 550, 264, 12577, 2170, 3869, 322, 1192, 295, 341, 51565], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1622, "seek": 338220, "start": 3406.2, "end": 3408.2, "text": " and this n is this sum", "tokens": [51565, 293, 341, 297, 307, 341, 2408, 51665], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1623, "seek": 338220, "start": 3408.2, "end": 3410.2, "text": " so we are now going to take it through", "tokens": [51665, 370, 321, 366, 586, 516, 281, 747, 309, 807, 51765], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1624, "seek": 338220, "start": 3410.2, "end": 3412.2, "text": " an activation function", "tokens": [51765, 364, 24433, 2445, 51865], "temperature": 0.6000000000000001, "avg_logprob": -0.2346815090734982, "compression_ratio": 1.7513227513227514, "no_speech_prob": 0.0003633118176367134}, {"id": 1625, "seek": 341220, "start": 3412.2, "end": 3414.2, "text": " And let's say we use the tanh", "tokens": [50365, 400, 718, 311, 584, 321, 764, 264, 7603, 71, 50465], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1626, "seek": 341220, "start": 3414.52, "end": 3420.98, "text": " So that we produce the output. So what we'd like to do here is we'd like to do the output and I'll call it O is", "tokens": [50481, 407, 300, 321, 5258, 264, 5598, 13, 407, 437, 321, 1116, 411, 281, 360, 510, 307, 321, 1116, 411, 281, 360, 264, 5598, 293, 286, 603, 818, 309, 422, 307, 50804], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1627, "seek": 341220, "start": 3422.1, "end": 3424.3399999999997, "text": " N dot tanh", "tokens": [50860, 426, 5893, 7603, 71, 50972], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1628, "seek": 341220, "start": 3425.04, "end": 3427.52, "text": " Okay, but we haven't yet written the tanh", "tokens": [51007, 1033, 11, 457, 321, 2378, 380, 1939, 3720, 264, 7603, 71, 51131], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1629, "seek": 341220, "start": 3428.02, "end": 3432.2599999999998, "text": " now the reason that we need to implement another tanh function here is that", "tokens": [51156, 586, 264, 1778, 300, 321, 643, 281, 4445, 1071, 7603, 71, 2445, 510, 307, 300, 51368], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1630, "seek": 341220, "start": 3432.8399999999997, "end": 3434.72, "text": " tanh is a", "tokens": [51397, 7603, 71, 307, 257, 51491], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1631, "seek": 341220, "start": 3434.72, "end": 3441.22, "text": " Hyperbolic function and we've only so far implemented a plus and a times and you can't make a tanh out of just pluses and times", "tokens": [51491, 29592, 65, 7940, 2445, 293, 321, 600, 787, 370, 1400, 12270, 257, 1804, 293, 257, 1413, 293, 291, 393, 380, 652, 257, 7603, 71, 484, 295, 445, 1804, 279, 293, 1413, 51816], "temperature": 0.0, "avg_logprob": -0.20203512509663898, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.04408956319093704}, {"id": 1632, "seek": 344122, "start": 3441.22, "end": 3446.2599999999998, "text": " You also need exponentiation. So tanh is this kind of a formula here", "tokens": [50365, 509, 611, 643, 37871, 6642, 13, 407, 7603, 71, 307, 341, 733, 295, 257, 8513, 510, 50617], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1633, "seek": 344122, "start": 3446.9399999999996, "end": 3450.48, "text": " You can use either one of these and you see that there are exponentiation involved", "tokens": [50651, 509, 393, 764, 2139, 472, 295, 613, 293, 291, 536, 300, 456, 366, 37871, 6642, 3288, 50828], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1634, "seek": 344122, "start": 3450.48, "end": 3454.16, "text": " Which we have not implemented yet for our little value node here", "tokens": [50828, 3013, 321, 362, 406, 12270, 1939, 337, 527, 707, 2158, 9984, 510, 51012], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1635, "seek": 344122, "start": 3454.16, "end": 3458.2599999999998, "text": " So we're not going to be able to produce tanh yet and we have to go back up and implement something like it", "tokens": [51012, 407, 321, 434, 406, 516, 281, 312, 1075, 281, 5258, 7603, 71, 1939, 293, 321, 362, 281, 352, 646, 493, 293, 4445, 746, 411, 309, 51217], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1636, "seek": 344122, "start": 3458.7799999999997, "end": 3461.2, "text": " now one option here is", "tokens": [51243, 586, 472, 3614, 510, 307, 51364], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1637, "seek": 344122, "start": 3462.54, "end": 3464.54, "text": " We could actually implement", "tokens": [51431, 492, 727, 767, 4445, 51531], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1638, "seek": 344122, "start": 3465.3599999999997, "end": 3471.2, "text": " Exponentiation right and we could return the exp of the value instead of a tanh", "tokens": [51572, 21391, 30365, 6642, 558, 293, 321, 727, 2736, 264, 1278, 295, 264, 2158, 2602, 295, 257, 7603, 71, 51864], "temperature": 0.0, "avg_logprob": -0.1588091463656039, "compression_ratio": 1.7843137254901962, "no_speech_prob": 2.5292560167144984e-05}, {"id": 1639, "seek": 347122, "start": 3471.22, "end": 3476.16, "text": " Of a value because if we had exp then we have everything else that we need so", "tokens": [50365, 2720, 257, 2158, 570, 498, 321, 632, 1278, 550, 321, 362, 1203, 1646, 300, 321, 643, 370, 50612], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1640, "seek": 347122, "start": 3476.8799999999997, "end": 3479.24, "text": " because we know how to add and we know how to", "tokens": [50648, 570, 321, 458, 577, 281, 909, 293, 321, 458, 577, 281, 50766], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1641, "seek": 347122, "start": 3481.1, "end": 3486.3599999999997, "text": " We know how to add and we know how to multiply so we'd be able to create tanh if we knew how to exp", "tokens": [50859, 492, 458, 577, 281, 909, 293, 321, 458, 577, 281, 12972, 370, 321, 1116, 312, 1075, 281, 1884, 7603, 71, 498, 321, 2586, 577, 281, 1278, 51122], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1642, "seek": 347122, "start": 3486.68, "end": 3489.22, "text": " but for the purposes of this example, I specifically wanted to", "tokens": [51138, 457, 337, 264, 9932, 295, 341, 1365, 11, 286, 4682, 1415, 281, 51265], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1643, "seek": 347122, "start": 3489.7999999999997, "end": 3494.9199999999996, "text": " Show you that we don't necessarily need to have the most atomic pieces in", "tokens": [51294, 6895, 291, 300, 321, 500, 380, 4725, 643, 281, 362, 264, 881, 22275, 3755, 294, 51550], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1644, "seek": 347122, "start": 3496.1, "end": 3501.22, "text": " In this value object we can actually like create functions at arbitrary", "tokens": [51609, 682, 341, 2158, 2657, 321, 393, 767, 411, 1884, 6828, 412, 23211, 51865], "temperature": 0.0, "avg_logprob": -0.2196423332646208, "compression_ratio": 1.8, "no_speech_prob": 0.0005899438401684165}, {"id": 1645, "seek": 350122, "start": 3501.9199999999996, "end": 3505.64, "text": " Points of abstraction they can be complicated functions", "tokens": [50400, 44763, 295, 37765, 436, 393, 312, 6179, 6828, 50586], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1646, "seek": 350122, "start": 3505.64, "end": 3509.62, "text": " But they can be also very very simple functions like a plus and it's totally up to us", "tokens": [50586, 583, 436, 393, 312, 611, 588, 588, 2199, 6828, 411, 257, 1804, 293, 309, 311, 3879, 493, 281, 505, 50785], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1647, "seek": 350122, "start": 3509.7599999999998, "end": 3513.8199999999997, "text": " The only thing that matters is that we know how to differentiate through any one function", "tokens": [50792, 440, 787, 551, 300, 7001, 307, 300, 321, 458, 577, 281, 23203, 807, 604, 472, 2445, 50995], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1648, "seek": 350122, "start": 3513.9199999999996, "end": 3516.2799999999997, "text": " So we take some inputs and we make an output", "tokens": [51000, 407, 321, 747, 512, 15743, 293, 321, 652, 364, 5598, 51118], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1649, "seek": 350122, "start": 3516.4199999999996, "end": 3520.72, "text": " The only thing that matters it can be arbitrarily complex function as long as you know", "tokens": [51125, 440, 787, 551, 300, 7001, 309, 393, 312, 19071, 3289, 3997, 2445, 382, 938, 382, 291, 458, 51340], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1650, "seek": 350122, "start": 3520.72, "end": 3526.8399999999997, "text": " How to create the local derivative if you know the local derivative of how the inputs impact the output then that's all you need", "tokens": [51340, 1012, 281, 1884, 264, 2654, 13760, 498, 291, 458, 264, 2654, 13760, 295, 577, 264, 15743, 2712, 264, 5598, 550, 300, 311, 439, 291, 643, 51646], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1651, "seek": 350122, "start": 3527.04, "end": 3529.04, "text": " So we're going to cluster up", "tokens": [51656, 407, 321, 434, 516, 281, 13630, 493, 51756], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1652, "seek": 350122, "start": 3529.2599999999998, "end": 3531.1, "text": " all of this expression", "tokens": [51767, 439, 295, 341, 6114, 51859], "temperature": 0.0, "avg_logprob": -0.15183342656781595, "compression_ratio": 1.9428571428571428, "no_speech_prob": 0.0031189145520329475}, {"id": 1653, "seek": 353110, "start": 3531.1, "end": 3536.22, "text": " And we're not going to break it down to its atomic pieces. We're just going to directly implement tanh. So let's do that", "tokens": [50365, 400, 321, 434, 406, 516, 281, 1821, 309, 760, 281, 1080, 22275, 3755, 13, 492, 434, 445, 516, 281, 3838, 4445, 7603, 71, 13, 407, 718, 311, 360, 300, 50621], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1654, "seek": 353110, "start": 3537.06, "end": 3539.06, "text": " depth tanh and", "tokens": [50663, 7161, 7603, 71, 293, 50763], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1655, "seek": 353110, "start": 3539.1, "end": 3541.1, "text": " then out will be a value of", "tokens": [50765, 550, 484, 486, 312, 257, 2158, 295, 50865], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1656, "seek": 353110, "start": 3542.6, "end": 3545.36, "text": " And we need this expression here, so", "tokens": [50940, 400, 321, 643, 341, 6114, 510, 11, 370, 51078], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1657, "seek": 353110, "start": 3548.24, "end": 3551.0, "text": " Let me actually copy paste", "tokens": [51222, 961, 385, 767, 5055, 9163, 51360], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1658, "seek": 353110, "start": 3554.0, "end": 3560.04, "text": " Let's grab n which is a sol.theta and then this I believe is the tanh", "tokens": [51510, 961, 311, 4444, 297, 597, 307, 257, 1404, 13, 392, 7664, 293, 550, 341, 286, 1697, 307, 264, 7603, 71, 51812], "temperature": 0.0, "avg_logprob": -0.25364973378735917, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0005428363801911473}, {"id": 1659, "seek": 356110, "start": 3561.1, "end": 3563.1, "text": " math.exp of", "tokens": [50365, 5221, 13, 15952, 295, 50465], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1660, "seek": 356110, "start": 3564.2799999999997, "end": 3565.6, "text": " 2", "tokens": [50524, 568, 50590], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1661, "seek": 356110, "start": 3565.6, "end": 3569.72, "text": " You know n minus 1 over 2n plus 1", "tokens": [50590, 509, 458, 297, 3175, 502, 670, 568, 77, 1804, 502, 50796], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1662, "seek": 356110, "start": 3570.4, "end": 3572.4, "text": " Maybe I can call this x", "tokens": [50830, 2704, 286, 393, 818, 341, 2031, 50930], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1663, "seek": 356110, "start": 3572.86, "end": 3574.86, "text": " Just so that it matches exactly", "tokens": [50953, 1449, 370, 300, 309, 10676, 2293, 51053], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1664, "seek": 356110, "start": 3575.48, "end": 3579.0, "text": " okay, and now this will be t and", "tokens": [51084, 1392, 11, 293, 586, 341, 486, 312, 256, 293, 51260], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1665, "seek": 356110, "start": 3581.14, "end": 3583.44, "text": " Children of this node. There's just one child and", "tokens": [51367, 13354, 295, 341, 9984, 13, 821, 311, 445, 472, 1440, 293, 51482], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1666, "seek": 356110, "start": 3584.2799999999997, "end": 3587.94, "text": " I'm wrapping it in a tuple. So this is a tuple of one object just self and", "tokens": [51524, 286, 478, 21993, 309, 294, 257, 2604, 781, 13, 407, 341, 307, 257, 2604, 781, 295, 472, 2657, 445, 2698, 293, 51707], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1667, "seek": 356110, "start": 3588.64, "end": 3590.94, "text": " here the name of this operation will be", "tokens": [51742, 510, 264, 1315, 295, 341, 6916, 486, 312, 51857], "temperature": 0.0, "avg_logprob": -0.3403970818770559, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0042747613042593}, {"id": 1668, "seek": 359110, "start": 3591.1, "end": 3592.1, "text": " 10h", "tokens": [50365, 1266, 71, 50415], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1669, "seek": 359110, "start": 3592.1, "end": 3594.1, "text": " And we're going to return that", "tokens": [50415, 400, 321, 434, 516, 281, 2736, 300, 50515], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1670, "seek": 359110, "start": 3596.16, "end": 3598.16, "text": " Okay", "tokens": [50618, 1033, 50718], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1671, "seek": 359110, "start": 3598.2599999999998, "end": 3600.2599999999998, "text": " So now value should be", "tokens": [50723, 407, 586, 2158, 820, 312, 50823], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1672, "seek": 359110, "start": 3600.7599999999998, "end": 3606.48, "text": " Implementing tanh and now we can scroll all the way down here and we can actually do n dot tanh", "tokens": [50848, 4331, 43704, 278, 7603, 71, 293, 586, 321, 393, 11369, 439, 264, 636, 760, 510, 293, 321, 393, 767, 360, 297, 5893, 7603, 71, 51134], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1673, "seek": 359110, "start": 3606.48, "end": 3610.2799999999997, "text": " And that's going to return the tanh output of n", "tokens": [51134, 400, 300, 311, 516, 281, 2736, 264, 7603, 71, 5598, 295, 297, 51324], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1674, "seek": 359110, "start": 3611.1, "end": 3615.8199999999997, "text": " And now we should be able to draw it out of o not of n. So let's see how that worked", "tokens": [51365, 400, 586, 321, 820, 312, 1075, 281, 2642, 309, 484, 295, 277, 406, 295, 297, 13, 407, 718, 311, 536, 577, 300, 2732, 51601], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1675, "seek": 359110, "start": 3618.48, "end": 3620.92, "text": " There we go n went through tanh", "tokens": [51734, 821, 321, 352, 297, 1437, 807, 7603, 71, 51856], "temperature": 0.0, "avg_logprob": -0.3098381890190972, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.0003678831271827221}, {"id": 1676, "seek": 362110, "start": 3621.5, "end": 3623.5, "text": " to produce this output", "tokens": [50385, 281, 5258, 341, 5598, 50485], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1677, "seek": 362110, "start": 3624.0, "end": 3625.9, "text": " so now tanh is a", "tokens": [50510, 370, 586, 7603, 71, 307, 257, 50605], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1678, "seek": 362110, "start": 3625.9, "end": 3627.5, "text": " sort of", "tokens": [50605, 1333, 295, 50685], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1679, "seek": 362110, "start": 3627.5, "end": 3631.38, "text": " our little micro grad supported node here as an operation and", "tokens": [50685, 527, 707, 4532, 2771, 8104, 9984, 510, 382, 364, 6916, 293, 50879], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1680, "seek": 362110, "start": 3633.08, "end": 3638.46, "text": " As long as we know the derivative of tanh then we'll be able to back propagate through it now", "tokens": [50964, 1018, 938, 382, 321, 458, 264, 13760, 295, 7603, 71, 550, 321, 603, 312, 1075, 281, 646, 48256, 807, 309, 586, 51233], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1681, "seek": 362110, "start": 3638.46, "end": 3644.1, "text": " Let's see this tanh in action. Currently. It's not squashing too much because the input to it is pretty low", "tokens": [51233, 961, 311, 536, 341, 7603, 71, 294, 3069, 13, 19964, 13, 467, 311, 406, 2339, 11077, 886, 709, 570, 264, 4846, 281, 309, 307, 1238, 2295, 51515], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1682, "seek": 362110, "start": 3644.4, "end": 3647.16, "text": " So the bias was increased to say 8", "tokens": [51530, 407, 264, 12577, 390, 6505, 281, 584, 1649, 51668], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1683, "seek": 362110, "start": 3648.86, "end": 3651.1, "text": " Then we'll see that what's flowing in", "tokens": [51753, 1396, 321, 603, 536, 300, 437, 311, 13974, 294, 51865], "temperature": 0.0, "avg_logprob": -0.23357385855454665, "compression_ratio": 1.5802469135802468, "no_speech_prob": 0.00011653221736196429}, {"id": 1684, "seek": 365110, "start": 3651.1, "end": 3654.1, "text": " to the tanh now is 2 and", "tokens": [50365, 281, 264, 7603, 71, 586, 307, 568, 293, 50515], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1685, "seek": 365110, "start": 3654.36, "end": 3656.5, "text": " Tanh is squashing it to 0.96", "tokens": [50528, 17046, 71, 307, 2339, 11077, 309, 281, 1958, 13, 22962, 50635], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1686, "seek": 365110, "start": 3656.72, "end": 3662.7999999999997, "text": " So we're already hitting the tail of this tanh and it will sort of smoothly go up to 1 and then plateau out over there", "tokens": [50646, 407, 321, 434, 1217, 8850, 264, 6838, 295, 341, 7603, 71, 293, 309, 486, 1333, 295, 19565, 352, 493, 281, 502, 293, 550, 39885, 484, 670, 456, 50950], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1687, "seek": 365110, "start": 3663.22, "end": 3669.04, "text": " Okay, so I'm going to do something slightly strange. I'm going to change this bias from 8 to this number", "tokens": [50971, 1033, 11, 370, 286, 478, 516, 281, 360, 746, 4748, 5861, 13, 286, 478, 516, 281, 1319, 341, 12577, 490, 1649, 281, 341, 1230, 51262], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1688, "seek": 365110, "start": 3670.0, "end": 3671.04, "text": " 6.88 etc", "tokens": [51310, 1386, 13, 16919, 5183, 51362], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1689, "seek": 365110, "start": 3671.04, "end": 3676.6, "text": " and I'm going to do this for specific reasons because we're about to start back propagation and", "tokens": [51362, 293, 286, 478, 516, 281, 360, 341, 337, 2685, 4112, 570, 321, 434, 466, 281, 722, 646, 38377, 293, 51640], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1690, "seek": 365110, "start": 3677.0, "end": 3679.74, "text": " I want to make sure that our numbers come out nice", "tokens": [51660, 286, 528, 281, 652, 988, 300, 527, 3547, 808, 484, 1481, 51797], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1691, "seek": 365110, "start": 3679.9, "end": 3681.0, "text": " They're not like very", "tokens": [51805, 814, 434, 406, 411, 588, 51860], "temperature": 0.4, "avg_logprob": -0.27980389670720174, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.000498813227750361}, {"id": 1692, "seek": 368100, "start": 3681.0, "end": 3686.16, "text": " Crazy numbers, they're nice numbers that we can sort of understand in our head. Let me also add those label", "tokens": [50365, 22509, 3547, 11, 436, 434, 1481, 3547, 300, 321, 393, 1333, 295, 1223, 294, 527, 1378, 13, 961, 385, 611, 909, 729, 7645, 50623], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1693, "seek": 368100, "start": 3686.16, "end": 3688.56, "text": " O is short for output here", "tokens": [50623, 422, 307, 2099, 337, 5598, 510, 50743], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1694, "seek": 368100, "start": 3689.82, "end": 3691.36, "text": " So that's the R", "tokens": [50806, 407, 300, 311, 264, 497, 50883], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1695, "seek": 368100, "start": 3691.36, "end": 3697.66, "text": " Okay, so 0.88 flows into tanh comes out 0.7. So so now we're going to do back propagation", "tokens": [50883, 1033, 11, 370, 1958, 13, 16919, 12867, 666, 7603, 71, 1487, 484, 1958, 13, 22, 13, 407, 370, 586, 321, 434, 516, 281, 360, 646, 38377, 51198], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1696, "seek": 368100, "start": 3697.66, "end": 3699.66, "text": " And we're going to fill in all the gradients", "tokens": [51198, 400, 321, 434, 516, 281, 2836, 294, 439, 264, 2771, 2448, 51298], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1697, "seek": 368100, "start": 3700.0, "end": 3704.44, "text": " so what is the derivative O with respect to all the", "tokens": [51315, 370, 437, 307, 264, 13760, 422, 365, 3104, 281, 439, 264, 51537], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1698, "seek": 368100, "start": 3704.96, "end": 3710.62, "text": " inputs here and of course in a typical neural network setting what we really care about the most is the derivative of", "tokens": [51563, 15743, 510, 293, 295, 1164, 294, 257, 7476, 18161, 3209, 3287, 437, 321, 534, 1127, 466, 264, 881, 307, 264, 13760, 295, 51846], "temperature": 0.0, "avg_logprob": -0.22250417500984768, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.00012006915494566783}, {"id": 1699, "seek": 371100, "start": 3711.0, "end": 3713.0, "text": " these neurons on the weights", "tokens": [50365, 613, 22027, 322, 264, 17443, 50465], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1700, "seek": 371100, "start": 3713.44, "end": 3719.18, "text": " specifically the w2 and w1 because those are the weights that we're going to be changing part of the optimization and", "tokens": [50487, 4682, 264, 261, 17, 293, 261, 16, 570, 729, 366, 264, 17443, 300, 321, 434, 516, 281, 312, 4473, 644, 295, 264, 19618, 293, 50774], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1701, "seek": 371100, "start": 3719.56, "end": 3721.46, "text": " The other thing that we have to remember is here", "tokens": [50793, 440, 661, 551, 300, 321, 362, 281, 1604, 307, 510, 50888], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1702, "seek": 371100, "start": 3721.46, "end": 3725.48, "text": " We have only a single neuron but in the neural net you typically have many neurons and they're connected", "tokens": [50888, 492, 362, 787, 257, 2167, 34090, 457, 294, 264, 18161, 2533, 291, 5850, 362, 867, 22027, 293, 436, 434, 4582, 51089], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1703, "seek": 371100, "start": 3726.94, "end": 3731.96, "text": " So this is only like a one small neuron a piece of a much bigger puzzle and eventually there's a loss function", "tokens": [51162, 407, 341, 307, 787, 411, 257, 472, 1359, 34090, 257, 2522, 295, 257, 709, 3801, 12805, 293, 4728, 456, 311, 257, 4470, 2445, 51413], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1704, "seek": 371100, "start": 3732.12, "end": 3737.8, "text": " That sort of measures the accuracy of the neural net and we're back propagating with respect to that accuracy and trying to increase it", "tokens": [51421, 663, 1333, 295, 8000, 264, 14170, 295, 264, 18161, 2533, 293, 321, 434, 646, 12425, 990, 365, 3104, 281, 300, 14170, 293, 1382, 281, 3488, 309, 51705], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1705, "seek": 371100, "start": 3738.96, "end": 3740.96, "text": " So let's start off back propagation", "tokens": [51763, 407, 718, 311, 722, 766, 646, 38377, 51863], "temperature": 0.0, "avg_logprob": -0.1611702405489408, "compression_ratio": 1.8745980707395498, "no_speech_prob": 0.00037423463072627783}, {"id": 1706, "seek": 374100, "start": 3741.0, "end": 3742.26, "text": " Here in the end", "tokens": [50365, 1692, 294, 264, 917, 50428], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1707, "seek": 374100, "start": 3742.26, "end": 3749.62, "text": " What is the derivative of O with respect to O the base case sort of we know always is that the gradient is just 1.0", "tokens": [50428, 708, 307, 264, 13760, 295, 422, 365, 3104, 281, 422, 264, 3096, 1389, 1333, 295, 321, 458, 1009, 307, 300, 264, 16235, 307, 445, 502, 13, 15, 50796], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1708, "seek": 374100, "start": 3750.22, "end": 3752.22, "text": " so let me fill it in and", "tokens": [50826, 370, 718, 385, 2836, 309, 294, 293, 50926], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1709, "seek": 374100, "start": 3752.38, "end": 3753.5, "text": " then", "tokens": [50934, 550, 50990], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1710, "seek": 374100, "start": 3753.5, "end": 3755.0, "text": " Let me", "tokens": [50990, 961, 385, 51065], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1711, "seek": 374100, "start": 3755.0, "end": 3756.86, "text": " split out", "tokens": [51065, 7472, 484, 51158], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1712, "seek": 374100, "start": 3756.86, "end": 3758.86, "text": " the drawing function", "tokens": [51158, 264, 6316, 2445, 51258], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1713, "seek": 374100, "start": 3759.86, "end": 3761.86, "text": " Here", "tokens": [51308, 1692, 51408], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1714, "seek": 374100, "start": 3762.42, "end": 3765.02, "text": " And then here cell", "tokens": [51436, 400, 550, 510, 2815, 51566], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1715, "seek": 374100, "start": 3767.1, "end": 3769.06, "text": " Clear this output here, okay", "tokens": [51670, 14993, 341, 5598, 510, 11, 1392, 51768], "temperature": 0.4, "avg_logprob": -0.3409756769107867, "compression_ratio": 1.4566473988439306, "no_speech_prob": 0.00040507817175239325}, {"id": 1716, "seek": 376906, "start": 3769.86, "end": 3773.2999999999997, "text": " So now when we draw O we'll see that or that grad is 1", "tokens": [50405, 407, 586, 562, 321, 2642, 422, 321, 603, 536, 300, 420, 300, 2771, 307, 502, 50577], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1717, "seek": 376906, "start": 3773.7799999999997, "end": 3778.42, "text": " So now we're going to back propagate through the tanh so to back propagate through tanh", "tokens": [50601, 407, 586, 321, 434, 516, 281, 646, 48256, 807, 264, 7603, 71, 370, 281, 646, 48256, 807, 7603, 71, 50833], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1718, "seek": 376906, "start": 3778.42, "end": 3784.24, "text": " We need to know the local derivative of tanh. So if we have that O is", "tokens": [50833, 492, 643, 281, 458, 264, 2654, 13760, 295, 7603, 71, 13, 407, 498, 321, 362, 300, 422, 307, 51124], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1719, "seek": 376906, "start": 3785.1, "end": 3787.1, "text": " tanh of n", "tokens": [51167, 7603, 71, 295, 297, 51267], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1720, "seek": 376906, "start": 3788.18, "end": 3790.96, "text": " Then what is do by dn?", "tokens": [51321, 1396, 437, 307, 360, 538, 274, 77, 30, 51460], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1721, "seek": 376906, "start": 3791.7799999999997, "end": 3798.4, "text": " Now what you could do is you could come here and you could take this expression and you could do your calculus derivative taking", "tokens": [51501, 823, 437, 291, 727, 360, 307, 291, 727, 808, 510, 293, 291, 727, 747, 341, 6114, 293, 291, 727, 360, 428, 33400, 13760, 1940, 51832], "temperature": 0.0, "avg_logprob": -0.27962320157797027, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.0004594580386765301}, {"id": 1722, "seek": 379906, "start": 3799.06, "end": 3807.6, "text": " and that would work but we can also just scroll down Wikipedia here into a section that hopefully tells us that derivative", "tokens": [50365, 293, 300, 576, 589, 457, 321, 393, 611, 445, 11369, 760, 28999, 510, 666, 257, 3541, 300, 4696, 5112, 505, 300, 13760, 50792], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1723, "seek": 379906, "start": 3809.0, "end": 3811.0, "text": " d by dx of tanh of x is", "tokens": [50862, 274, 538, 30017, 295, 7603, 71, 295, 2031, 307, 50962], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1724, "seek": 379906, "start": 3811.46, "end": 3814.46, "text": " Any of these I like this one 1 minus tanh square of x", "tokens": [50985, 2639, 295, 613, 286, 411, 341, 472, 502, 3175, 7603, 71, 3732, 295, 2031, 51135], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1725, "seek": 379906, "start": 3815.0, "end": 3823.1, "text": " So this is 1 minus tanh of x squared. So basically what this is saying is that d o by dn is", "tokens": [51162, 407, 341, 307, 502, 3175, 7603, 71, 295, 2031, 8889, 13, 407, 1936, 437, 341, 307, 1566, 307, 300, 274, 277, 538, 274, 77, 307, 51567], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1726, "seek": 379906, "start": 3824.32, "end": 3826.32, "text": " 1 minus tanh", "tokens": [51628, 502, 3175, 7603, 71, 51728], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1727, "seek": 379906, "start": 3826.86, "end": 3828.72, "text": " of n", "tokens": [51755, 295, 297, 51848], "temperature": 0.8, "avg_logprob": -0.4250178019205729, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00027560119633562863}, {"id": 1728, "seek": 382872, "start": 3828.72, "end": 3837.06, "text": " squared. And we already have 10h of n. It's just o. So it's 1 minus o squared. So o is", "tokens": [50365, 8889, 13, 400, 321, 1217, 362, 1266, 71, 295, 297, 13, 467, 311, 445, 277, 13, 407, 309, 311, 502, 3175, 277, 8889, 13, 407, 277, 307, 50782], "temperature": 0.0, "avg_logprob": -0.08715804985591344, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.2245202660560608}, {"id": 1729, "seek": 382872, "start": 3837.06, "end": 3848.56, "text": " the output here. So the output is this number. o.data is this number. And then what this", "tokens": [50782, 264, 5598, 510, 13, 407, 264, 5598, 307, 341, 1230, 13, 277, 13, 67, 3274, 307, 341, 1230, 13, 400, 550, 437, 341, 51357], "temperature": 0.0, "avg_logprob": -0.08715804985591344, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.2245202660560608}, {"id": 1730, "seek": 382872, "start": 3848.56, "end": 3857.3599999999997, "text": " is saying is that do by dn is 1 minus this squared. So 1 minus o.data squared is 0.5", "tokens": [51357, 307, 1566, 307, 300, 360, 538, 274, 77, 307, 502, 3175, 341, 8889, 13, 407, 502, 3175, 277, 13, 67, 3274, 8889, 307, 1958, 13, 20, 51797], "temperature": 0.0, "avg_logprob": -0.08715804985591344, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.2245202660560608}, {"id": 1731, "seek": 385736, "start": 3857.36, "end": 3865.6400000000003, "text": " conveniently. So the local derivative of this 10h operation here is 0.5. And so that", "tokens": [50365, 44375, 13, 407, 264, 2654, 13760, 295, 341, 1266, 71, 6916, 510, 307, 1958, 13, 20, 13, 400, 370, 300, 50779], "temperature": 0.0, "avg_logprob": -0.06149609272296612, "compression_ratio": 1.4260355029585798, "no_speech_prob": 6.6671687818598e-05}, {"id": 1732, "seek": 385736, "start": 3865.6400000000003, "end": 3883.04, "text": " would be do by dn. So we can fill in that n.grad is 0.5. We'll just fill it in. So this", "tokens": [50779, 576, 312, 360, 538, 274, 77, 13, 407, 321, 393, 2836, 294, 300, 297, 13, 7165, 307, 1958, 13, 20, 13, 492, 603, 445, 2836, 309, 294, 13, 407, 341, 51649], "temperature": 0.0, "avg_logprob": -0.06149609272296612, "compression_ratio": 1.4260355029585798, "no_speech_prob": 6.6671687818598e-05}, {"id": 1733, "seek": 385736, "start": 3883.04, "end": 3887.34, "text": " is exactly 0.5, 1 half. So now we're going to continue the backprop.", "tokens": [51649, 307, 2293, 1958, 13, 20, 11, 502, 1922, 13, 407, 586, 321, 434, 516, 281, 2354, 264, 646, 79, 1513, 13, 51864], "temperature": 0.0, "avg_logprob": -0.06149609272296612, "compression_ratio": 1.4260355029585798, "no_speech_prob": 6.6671687818598e-05}, {"id": 1734, "seek": 388736, "start": 3887.36, "end": 3897.32, "text": " This is 0.5. And this is a plus node. So what is backprop going to do here? And if you remember", "tokens": [50365, 639, 307, 1958, 13, 20, 13, 400, 341, 307, 257, 1804, 9984, 13, 407, 437, 307, 646, 79, 1513, 516, 281, 360, 510, 30, 400, 498, 291, 1604, 50863], "temperature": 0.0, "avg_logprob": -0.10758522453658077, "compression_ratio": 1.6311475409836065, "no_speech_prob": 0.001966265495866537}, {"id": 1735, "seek": 388736, "start": 3897.32, "end": 3903.1400000000003, "text": " our previous example, a plus is just a distributor of gradient. So this gradient will simply", "tokens": [50863, 527, 3894, 1365, 11, 257, 1804, 307, 445, 257, 49192, 295, 16235, 13, 407, 341, 16235, 486, 2935, 51154], "temperature": 0.0, "avg_logprob": -0.10758522453658077, "compression_ratio": 1.6311475409836065, "no_speech_prob": 0.001966265495866537}, {"id": 1736, "seek": 388736, "start": 3903.1400000000003, "end": 3907.42, "text": " flow to both of these equally. And that's because the local derivative of this operation", "tokens": [51154, 3095, 281, 1293, 295, 613, 12309, 13, 400, 300, 311, 570, 264, 2654, 13760, 295, 341, 6916, 51368], "temperature": 0.0, "avg_logprob": -0.10758522453658077, "compression_ratio": 1.6311475409836065, "no_speech_prob": 0.001966265495866537}, {"id": 1737, "seek": 388736, "start": 3907.42, "end": 3915.26, "text": " is 1 for every one of its nodes. So 1 times 0.5 is 0.5. So therefore, we know that this", "tokens": [51368, 307, 502, 337, 633, 472, 295, 1080, 13891, 13, 407, 502, 1413, 1958, 13, 20, 307, 1958, 13, 20, 13, 407, 4412, 11, 321, 458, 300, 341, 51760], "temperature": 0.0, "avg_logprob": -0.10758522453658077, "compression_ratio": 1.6311475409836065, "no_speech_prob": 0.001966265495866537}, {"id": 1738, "seek": 388736, "start": 3915.26, "end": 3917.26, "text": " node here, which we called this.", "tokens": [51760, 9984, 510, 11, 597, 321, 1219, 341, 13, 51860], "temperature": 0.0, "avg_logprob": -0.10758522453658077, "compression_ratio": 1.6311475409836065, "no_speech_prob": 0.001966265495866537}, {"id": 1739, "seek": 391736, "start": 3917.36, "end": 3926.04, "text": " It's grad. It's just 0.5. And we know that b.grad is also 0.5. So let's set those and", "tokens": [50365, 467, 311, 2771, 13, 467, 311, 445, 1958, 13, 20, 13, 400, 321, 458, 300, 272, 13, 7165, 307, 611, 1958, 13, 20, 13, 407, 718, 311, 992, 729, 293, 50799], "temperature": 0.0, "avg_logprob": -0.16431480947166982, "compression_ratio": 1.5371428571428571, "no_speech_prob": 0.0009403581498190761}, {"id": 1740, "seek": 391736, "start": 3926.04, "end": 3933.76, "text": " let's draw. So those are 0.5. Continuing, we have another plus. 0.5, again, we'll just", "tokens": [50799, 718, 311, 2642, 13, 407, 729, 366, 1958, 13, 20, 13, 47585, 11, 321, 362, 1071, 1804, 13, 1958, 13, 20, 11, 797, 11, 321, 603, 445, 51185], "temperature": 0.0, "avg_logprob": -0.16431480947166982, "compression_ratio": 1.5371428571428571, "no_speech_prob": 0.0009403581498190761}, {"id": 1741, "seek": 391736, "start": 3933.76, "end": 3946.36, "text": " distribute. So 0.5 will flow to both of these. So we can set theirs. x2w2 as well. .grad is", "tokens": [51185, 20594, 13, 407, 1958, 13, 20, 486, 3095, 281, 1293, 295, 613, 13, 407, 321, 393, 992, 22760, 13, 2031, 17, 86, 17, 382, 731, 13, 2411, 7165, 307, 51815], "temperature": 0.0, "avg_logprob": -0.16431480947166982, "compression_ratio": 1.5371428571428571, "no_speech_prob": 0.0009403581498190761}, {"id": 1742, "seek": 391736, "start": 3946.36, "end": 3946.8, "text": " 0.5.", "tokens": [51815, 1958, 13, 20, 13, 51837], "temperature": 0.0, "avg_logprob": -0.16431480947166982, "compression_ratio": 1.5371428571428571, "no_speech_prob": 0.0009403581498190761}, {"id": 1743, "seek": 394736, "start": 3947.36, "end": 3953.6, "text": " And let's redraw. Pluses are my favorite operations to backpropagate through because it's very", "tokens": [50365, 400, 718, 311, 2182, 5131, 13, 7721, 279, 366, 452, 2954, 7705, 281, 646, 79, 1513, 559, 473, 807, 570, 309, 311, 588, 50677], "temperature": 0.0, "avg_logprob": -0.10841672079903739, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00043201667722314596}, {"id": 1744, "seek": 394736, "start": 3953.6, "end": 3959.04, "text": " simple. So now what's flowing into these expressions is 0.5. And so really, again, keep in mind", "tokens": [50677, 2199, 13, 407, 586, 437, 311, 13974, 666, 613, 15277, 307, 1958, 13, 20, 13, 400, 370, 534, 11, 797, 11, 1066, 294, 1575, 50949], "temperature": 0.0, "avg_logprob": -0.10841672079903739, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00043201667722314596}, {"id": 1745, "seek": 394736, "start": 3959.04, "end": 3963.44, "text": " what the derivative is telling us at every point in time along here. This is saying that", "tokens": [50949, 437, 264, 13760, 307, 3585, 505, 412, 633, 935, 294, 565, 2051, 510, 13, 639, 307, 1566, 300, 51169], "temperature": 0.0, "avg_logprob": -0.10841672079903739, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00043201667722314596}, {"id": 1746, "seek": 394736, "start": 3963.44, "end": 3970.88, "text": " if we want the output of this neuron to increase, then the influence on these expressions is", "tokens": [51169, 498, 321, 528, 264, 5598, 295, 341, 34090, 281, 3488, 11, 550, 264, 6503, 322, 613, 15277, 307, 51541], "temperature": 0.0, "avg_logprob": -0.10841672079903739, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00043201667722314596}, {"id": 1747, "seek": 394736, "start": 3970.88, "end": 3973.88, "text": " positive on the output. Both of them are positive.", "tokens": [51541, 3353, 322, 264, 5598, 13, 6767, 295, 552, 366, 3353, 13, 51691], "temperature": 0.0, "avg_logprob": -0.10841672079903739, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.00043201667722314596}, {"id": 1748, "seek": 397736, "start": 3977.36, "end": 3984.7400000000002, "text": " So we can put a distribution to the output. So now, backpropagating to x2 and w2 first.", "tokens": [50365, 407, 321, 393, 829, 257, 7316, 281, 264, 5598, 13, 407, 586, 11, 646, 79, 1513, 559, 990, 281, 2031, 17, 293, 261, 17, 700, 13, 50734], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1749, "seek": 397736, "start": 3984.7400000000002, "end": 3990.3, "text": " This is a times node. So we know that the local derivative is the other term. So if", "tokens": [50734, 639, 307, 257, 1413, 9984, 13, 407, 321, 458, 300, 264, 2654, 13760, 307, 264, 661, 1433, 13, 407, 498, 51012], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1750, "seek": 397736, "start": 3990.3, "end": 4002.86, "text": " we want to calculate x2.grad, then can you think through what it's going to be? So x2.grad", "tokens": [51012, 321, 528, 281, 8873, 2031, 17, 13, 7165, 11, 550, 393, 291, 519, 807, 437, 309, 311, 516, 281, 312, 30, 407, 2031, 17, 13, 7165, 51640], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1751, "seek": 397736, "start": 4002.86, "end": 4005.42, "text": " will be w2.data times this x2.grad.", "tokens": [51640, 486, 312, 261, 17, 13, 67, 3274, 1413, 341, 2031, 17, 13, 7165, 13, 51768], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1752, "seek": 397736, "start": 4005.42, "end": 4006.32, "text": " .grad.", "tokens": [51768, 2411, 7165, 13, 51813], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1753, "seek": 397736, "start": 4006.32, "end": 4007.36, "text": " .grad.", "tokens": [51813, 2411, 7165, 13, 51865], "temperature": 0.6000000000000001, "avg_logprob": -0.4941923958914621, "compression_ratio": 1.5757575757575757, "no_speech_prob": 0.000893936725333333}, {"id": 1754, "seek": 400736, "start": 4007.36, "end": 4023.6, "text": " w2.grad right and w2.grad will be x2.data times x2.w2.grad right so that's the little local piece", "tokens": [50365, 261, 17, 13, 7165, 558, 293, 261, 17, 13, 7165, 486, 312, 2031, 17, 13, 67, 3274, 1413, 2031, 17, 13, 86, 17, 13, 7165, 558, 370, 300, 311, 264, 707, 2654, 2522, 51177], "temperature": 0.0, "avg_logprob": -0.13994080903100187, "compression_ratio": 1.52, "no_speech_prob": 0.14303462207317352}, {"id": 1755, "seek": 400736, "start": 4023.6, "end": 4031.6600000000003, "text": " of chain rule let's set them and let's redraw so here we see that the gradient on our weight", "tokens": [51177, 295, 5021, 4978, 718, 311, 992, 552, 293, 718, 311, 2182, 5131, 370, 510, 321, 536, 300, 264, 16235, 322, 527, 3364, 51580], "temperature": 0.0, "avg_logprob": -0.13994080903100187, "compression_ratio": 1.52, "no_speech_prob": 0.14303462207317352}, {"id": 1756, "seek": 403166, "start": 4031.66, "end": 4039.96, "text": " 2 is 0 because x2's data was 0 right but x2 will have the gradient 0.5 because data here was 1", "tokens": [50365, 568, 307, 1958, 570, 2031, 17, 311, 1412, 390, 1958, 558, 457, 2031, 17, 486, 362, 264, 16235, 1958, 13, 20, 570, 1412, 510, 390, 502, 50780], "temperature": 0.0, "avg_logprob": -0.06302927941391148, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.00011303135397611186}, {"id": 1757, "seek": 403166, "start": 4039.96, "end": 4046.7999999999997, "text": " and so what's interesting here right is because the input x2 was 0 then because of the way the", "tokens": [50780, 293, 370, 437, 311, 1880, 510, 558, 307, 570, 264, 4846, 2031, 17, 390, 1958, 550, 570, 295, 264, 636, 264, 51122], "temperature": 0.0, "avg_logprob": -0.06302927941391148, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.00011303135397611186}, {"id": 1758, "seek": 403166, "start": 4046.7999999999997, "end": 4052.12, "text": " times works of course this gradient will be 0 and think about intuitively why that is", "tokens": [51122, 1413, 1985, 295, 1164, 341, 16235, 486, 312, 1958, 293, 519, 466, 46506, 983, 300, 307, 51388], "temperature": 0.0, "avg_logprob": -0.06302927941391148, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.00011303135397611186}, {"id": 1759, "seek": 403166, "start": 4052.12, "end": 4059.44, "text": " derivative always tells us the influence of this on the final output if i wiggle w2", "tokens": [51388, 13760, 1009, 5112, 505, 264, 6503, 295, 341, 322, 264, 2572, 5598, 498, 741, 33377, 261, 17, 51754], "temperature": 0.0, "avg_logprob": -0.06302927941391148, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.00011303135397611186}, {"id": 1760, "seek": 403166, "start": 4059.44, "end": 4060.94, "text": " how is the output changing", "tokens": [51754, 577, 307, 264, 5598, 4473, 51829], "temperature": 0.0, "avg_logprob": -0.06302927941391148, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.00011303135397611186}, {"id": 1761, "seek": 406094, "start": 4060.94, "end": 4066.16, "text": " it's not changing because we're multiplying by 0 so because it's not changing there is no", "tokens": [50365, 309, 311, 406, 4473, 570, 321, 434, 30955, 538, 1958, 370, 570, 309, 311, 406, 4473, 456, 307, 572, 50626], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1762, "seek": 406094, "start": 4066.16, "end": 4073.16, "text": " derivative and 0 is the correct answer because we're squashing that 0 and let's do it here", "tokens": [50626, 13760, 293, 1958, 307, 264, 3006, 1867, 570, 321, 434, 2339, 11077, 300, 1958, 293, 718, 311, 360, 309, 510, 50976], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1763, "seek": 406094, "start": 4073.16, "end": 4080.7200000000003, "text": " 0.5 should come here and flow through this times and so we'll have that x1.grad is", "tokens": [50976, 1958, 13, 20, 820, 808, 510, 293, 3095, 807, 341, 1413, 293, 370, 321, 603, 362, 300, 2031, 16, 13, 7165, 307, 51354], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1764, "seek": 406094, "start": 4080.7200000000003, "end": 4085.04, "text": " can you think through a little bit what what this should be", "tokens": [51354, 393, 291, 519, 807, 257, 707, 857, 437, 437, 341, 820, 312, 51570], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1765, "seek": 406094, "start": 4085.56, "end": 4090.54, "text": " local derivative of times with respect to x1", "tokens": [51596, 2654, 13760, 295, 1413, 365, 3104, 281, 2031, 16, 51845], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1766, "seek": 406094, "start": 4090.54, "end": 4090.92, "text": " is", "tokens": [51845, 307, 51864], "temperature": 0.0, "avg_logprob": -0.1252378581725445, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002734812442213297}, {"id": 1767, "seek": 409092, "start": 4090.92, "end": 4105.8, "text": " going to be w1 so w1's data times x1 w1.grad and w1.grad will be x1.data times x1 w2 w1.grad", "tokens": [50365, 516, 281, 312, 261, 16, 370, 261, 16, 311, 1412, 1413, 2031, 16, 261, 16, 13, 7165, 293, 261, 16, 13, 7165, 486, 312, 2031, 16, 13, 67, 3274, 1413, 2031, 16, 261, 17, 261, 16, 13, 7165, 51109], "temperature": 0.0, "avg_logprob": -0.26248175303141275, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.00579946069046855}, {"id": 1768, "seek": 409092, "start": 4107.24, "end": 4113.4, "text": " let's see what those came out to be so this is 0.5 so this would be negative 1.5 and this would be", "tokens": [51181, 718, 311, 536, 437, 729, 1361, 484, 281, 312, 370, 341, 307, 1958, 13, 20, 370, 341, 576, 312, 3671, 502, 13, 20, 293, 341, 576, 312, 51489], "temperature": 0.0, "avg_logprob": -0.26248175303141275, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.00579946069046855}, {"id": 1769, "seek": 409092, "start": 4113.4, "end": 4119.4, "text": " 1. and we've back propagated through this expression these are the actual final derivatives so if we", "tokens": [51489, 502, 13, 293, 321, 600, 646, 12425, 770, 807, 341, 6114, 613, 366, 264, 3539, 2572, 33733, 370, 498, 321, 51789], "temperature": 0.0, "avg_logprob": -0.26248175303141275, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.00579946069046855}, {"id": 1770, "seek": 409092, "start": 4119.4, "end": 4120.52, "text": " want this neurons to be negative 1.5 we're going to have to do this we're going to have to do this", "tokens": [51789, 528, 341, 22027, 281, 312, 3671, 502, 13, 20, 321, 434, 516, 281, 362, 281, 360, 341, 321, 434, 516, 281, 362, 281, 360, 341, 51845], "temperature": 0.0, "avg_logprob": -0.26248175303141275, "compression_ratio": 1.9166666666666667, "no_speech_prob": 0.00579946069046855}, {"id": 1771, "seek": 412052, "start": 4120.52, "end": 4124.92, "text": " bit of elaborating so actually we can do this by\u0430\u0446\u0438 to here so this is negative 1.5 so if we", "tokens": [50365, 857, 295, 16298, 990, 370, 767, 321, 393, 360, 341, 538, 8392, 281, 510, 370, 341, 307, 3671, 502, 13, 20, 370, 498, 321, 50585], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1772, "seek": 412052, "start": 4124.92, "end": 4129.56, "text": " now want this neuron's output to increase we know that what's necessary is that", "tokens": [50585, 586, 528, 341, 34090, 311, 5598, 281, 3488, 321, 458, 300, 437, 311, 4818, 307, 300, 50817], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1773, "seek": 412052, "start": 4131.320000000001, "end": 4135.400000000001, "text": " w2 we have no gradient w2 doesn't actually matter to this neuron right now", "tokens": [50905, 261, 17, 321, 362, 572, 16235, 261, 17, 1177, 380, 767, 1871, 281, 341, 34090, 558, 586, 51109], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1774, "seek": 412052, "start": 4135.400000000001, "end": 4140.92, "text": " but this neuron this weight should go up so if this weight goes up then this neurones output", "tokens": [51109, 457, 341, 34090, 341, 3364, 820, 352, 493, 370, 498, 341, 3364, 1709, 493, 550, 341, 12087, 2213, 5598, 51385], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1775, "seek": 412052, "start": 4140.92, "end": 4147.4800000000005, "text": " would have gone up and proportionally because the gradient is 1. okay so doing the back propagation", "tokens": [51385, 576, 362, 2780, 493, 293, 16068, 379, 570, 264, 16235, 307, 502, 13, 1392, 370, 884, 264, 646, 38377, 51713], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1776, "seek": 412052, "start": 4147.4800000000005, "end": 4148.360000000001, "text": " manually is obviously ridiculous so we are now going to put an end to this suffering and we're going to see how we can implement the back propagation's output Health classes method lambda.", "tokens": [51713, 16945, 307, 2745, 11083, 370, 321, 366, 586, 516, 281, 829, 364, 917, 281, 341, 7755, 293, 321, 434, 516, 281, 536, 577, 321, 393, 4445, 264, 646, 38377, 311, 5598, 5912, 5359, 3170, 13607, 13, 51757], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1777, "seek": 412052, "start": 4148.360000000001, "end": 4148.9800000000005, "text": " self attack self acquire lerud and a random entunkered router operation will be still coercion equal to 0.25\u00e9ro.", "tokens": [51757, 2698, 2690, 2698, 20001, 32068, 532, 293, 257, 4974, 948, 3197, 4073, 22492, 6916, 486, 312, 920, 49741, 313, 2681, 281, 1958, 13, 6074, 26913, 13, 51788], "temperature": 1.0, "avg_logprob": -2.5982605801569507, "compression_ratio": 1.949317738791423, "no_speech_prob": 0.0010433989809826016}, {"id": 1778, "seek": 414898, "start": 4148.98, "end": 4153.0599999999995, "text": " can implement the backward pass a bit more automatically. We're not going to be doing", "tokens": [50365, 393, 4445, 264, 23897, 1320, 257, 857, 544, 6772, 13, 492, 434, 406, 516, 281, 312, 884, 50569], "temperature": 0.0, "avg_logprob": -0.06410188172992907, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.014028620906174183}, {"id": 1779, "seek": 414898, "start": 4153.0599999999995, "end": 4158.139999999999, "text": " all of it manually out here. It's now pretty obvious to us by example how these pluses and", "tokens": [50569, 439, 295, 309, 16945, 484, 510, 13, 467, 311, 586, 1238, 6322, 281, 505, 538, 1365, 577, 613, 1804, 279, 293, 50823], "temperature": 0.0, "avg_logprob": -0.06410188172992907, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.014028620906174183}, {"id": 1780, "seek": 414898, "start": 4158.139999999999, "end": 4163.54, "text": " times are back-propagating ingredients. So let's go up to the value object and we're going to start", "tokens": [50823, 1413, 366, 646, 12, 79, 1513, 559, 990, 6952, 13, 407, 718, 311, 352, 493, 281, 264, 2158, 2657, 293, 321, 434, 516, 281, 722, 51093], "temperature": 0.0, "avg_logprob": -0.06410188172992907, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.014028620906174183}, {"id": 1781, "seek": 414898, "start": 4163.54, "end": 4171.759999999999, "text": " codifying what we've seen in the examples below. So we're going to do this by storing a special", "tokens": [51093, 17656, 5489, 437, 321, 600, 1612, 294, 264, 5110, 2507, 13, 407, 321, 434, 516, 281, 360, 341, 538, 26085, 257, 2121, 51504], "temperature": 0.0, "avg_logprob": -0.06410188172992907, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.014028620906174183}, {"id": 1782, "seek": 417176, "start": 4171.76, "end": 4179.64, "text": " self.backward and underscore backward. And this will be a function which is going to do that", "tokens": [50365, 2698, 13, 3207, 1007, 293, 37556, 23897, 13, 400, 341, 486, 312, 257, 2445, 597, 307, 516, 281, 360, 300, 50759], "temperature": 0.0, "avg_logprob": -0.11502719171268423, "compression_ratio": 1.7644444444444445, "no_speech_prob": 4.533298488240689e-05}, {"id": 1783, "seek": 417176, "start": 4179.64, "end": 4184.34, "text": " little piece of chain rule. At each little node that took inputs and produced output,", "tokens": [50759, 707, 2522, 295, 5021, 4978, 13, 1711, 1184, 707, 9984, 300, 1890, 15743, 293, 7126, 5598, 11, 50994], "temperature": 0.0, "avg_logprob": -0.11502719171268423, "compression_ratio": 1.7644444444444445, "no_speech_prob": 4.533298488240689e-05}, {"id": 1784, "seek": 417176, "start": 4185.04, "end": 4191.4800000000005, "text": " we're going to store how we are going to chain the outputs gradient into the inputs gradients.", "tokens": [51029, 321, 434, 516, 281, 3531, 577, 321, 366, 516, 281, 5021, 264, 23930, 16235, 666, 264, 15743, 2771, 2448, 13, 51351], "temperature": 0.0, "avg_logprob": -0.11502719171268423, "compression_ratio": 1.7644444444444445, "no_speech_prob": 4.533298488240689e-05}, {"id": 1785, "seek": 417176, "start": 4192.34, "end": 4200.9400000000005, "text": " So by default, this will be a function that doesn't do anything. And you can also see that", "tokens": [51394, 407, 538, 7576, 11, 341, 486, 312, 257, 2445, 300, 1177, 380, 360, 1340, 13, 400, 291, 393, 611, 536, 300, 51824], "temperature": 0.0, "avg_logprob": -0.11502719171268423, "compression_ratio": 1.7644444444444445, "no_speech_prob": 4.533298488240689e-05}, {"id": 1786, "seek": 417176, "start": 4200.9400000000005, "end": 4201.74, "text": " here in the value in my example.", "tokens": [51824, 510, 294, 264, 2158, 294, 452, 1365, 13, 51864], "temperature": 0.0, "avg_logprob": -0.11502719171268423, "compression_ratio": 1.7644444444444445, "no_speech_prob": 4.533298488240689e-05}, {"id": 1787, "seek": 420176, "start": 4201.76, "end": 4208.900000000001, "text": " Micrograd. So we have this backward function. By default, it doesn't do anything. This is a", "tokens": [50365, 25642, 7165, 13, 407, 321, 362, 341, 23897, 2445, 13, 3146, 7576, 11, 309, 1177, 380, 360, 1340, 13, 639, 307, 257, 50722], "temperature": 0.0, "avg_logprob": -0.1051418872979971, "compression_ratio": 1.6793248945147679, "no_speech_prob": 8.013969636522233e-05}, {"id": 1788, "seek": 420176, "start": 4208.900000000001, "end": 4213.08, "text": " empty function. And that would be sort of the case, for example, for a leaf node. For a leaf", "tokens": [50722, 6707, 2445, 13, 400, 300, 576, 312, 1333, 295, 264, 1389, 11, 337, 1365, 11, 337, 257, 10871, 9984, 13, 1171, 257, 10871, 50931], "temperature": 0.0, "avg_logprob": -0.1051418872979971, "compression_ratio": 1.6793248945147679, "no_speech_prob": 8.013969636522233e-05}, {"id": 1789, "seek": 420176, "start": 4213.08, "end": 4220.52, "text": " node, there's nothing to do. But now when we're creating these out values, these out values are", "tokens": [50931, 9984, 11, 456, 311, 1825, 281, 360, 13, 583, 586, 562, 321, 434, 4084, 613, 484, 4190, 11, 613, 484, 4190, 366, 51303], "temperature": 0.0, "avg_logprob": -0.1051418872979971, "compression_ratio": 1.6793248945147679, "no_speech_prob": 8.013969636522233e-05}, {"id": 1790, "seek": 420176, "start": 4220.52, "end": 4230.6, "text": " an addition of self and other. And so we'll want to set out backward to be the function that", "tokens": [51303, 364, 4500, 295, 2698, 293, 661, 13, 400, 370, 321, 603, 528, 281, 992, 484, 23897, 281, 312, 264, 2445, 300, 51807], "temperature": 0.0, "avg_logprob": -0.1051418872979971, "compression_ratio": 1.6793248945147679, "no_speech_prob": 8.013969636522233e-05}, {"id": 1791, "seek": 420176, "start": 4230.6, "end": 4231.74, "text": " propagates the gradient.", "tokens": [51807, 12425, 1024, 264, 16235, 13, 51864], "temperature": 0.0, "avg_logprob": -0.1051418872979971, "compression_ratio": 1.6793248945147679, "no_speech_prob": 8.013969636522233e-05}, {"id": 1792, "seek": 423176, "start": 4231.76, "end": 4242.96, "text": " So let's define what should happen. And we're going to store it in a closure. Let's define what", "tokens": [50365, 407, 718, 311, 6964, 437, 820, 1051, 13, 400, 321, 434, 516, 281, 3531, 309, 294, 257, 24653, 13, 961, 311, 6964, 437, 50925], "temperature": 0.6000000000000001, "avg_logprob": -0.13591976755673124, "compression_ratio": 1.988950276243094, "no_speech_prob": 0.0005750638665631413}, {"id": 1793, "seek": 423176, "start": 4242.96, "end": 4253.18, "text": " should happen when we call out's grad. For addition, our job is to take out's grad and", "tokens": [50925, 820, 1051, 562, 321, 818, 484, 311, 2771, 13, 1171, 4500, 11, 527, 1691, 307, 281, 747, 484, 311, 2771, 293, 51436], "temperature": 0.6000000000000001, "avg_logprob": -0.13591976755673124, "compression_ratio": 1.988950276243094, "no_speech_prob": 0.0005750638665631413}, {"id": 1794, "seek": 423176, "start": 4253.18, "end": 4258.9400000000005, "text": " propagate it into self's grad and other.grad. So basically, we want to solve self.grad to", "tokens": [51436, 48256, 309, 666, 2698, 311, 2771, 293, 661, 13, 7165, 13, 407, 1936, 11, 321, 528, 281, 5039, 2698, 13, 7165, 281, 51724], "temperature": 0.6000000000000001, "avg_logprob": -0.13591976755673124, "compression_ratio": 1.988950276243094, "no_speech_prob": 0.0005750638665631413}, {"id": 1795, "seek": 423176, "start": 4258.9400000000005, "end": 4261.74, "text": " something. And we want to set out's grad to something. And we want to set out's grad to", "tokens": [51724, 746, 13, 400, 321, 528, 281, 992, 484, 311, 2771, 281, 746, 13, 400, 321, 528, 281, 992, 484, 311, 2771, 281, 51864], "temperature": 0.6000000000000001, "avg_logprob": -0.13591976755673124, "compression_ratio": 1.988950276243094, "no_speech_prob": 0.0005750638665631413}, {"id": 1796, "seek": 426176, "start": 4261.76, "end": 4269.24, "text": " that grad to something okay and the way we saw below how chain rule works we", "tokens": [50365, 300, 2771, 281, 746, 1392, 293, 264, 636, 321, 1866, 2507, 577, 5021, 4978, 1985, 321, 50739], "temperature": 0.0, "avg_logprob": -0.12824872513891947, "compression_ratio": 1.8128654970760234, "no_speech_prob": 0.02698078192770481}, {"id": 1797, "seek": 426176, "start": 4269.24, "end": 4274.3, "text": " want to take the local derivative times the sort of global derivative I should", "tokens": [50739, 528, 281, 747, 264, 2654, 13760, 1413, 264, 1333, 295, 4338, 13760, 286, 820, 50992], "temperature": 0.0, "avg_logprob": -0.12824872513891947, "compression_ratio": 1.8128654970760234, "no_speech_prob": 0.02698078192770481}, {"id": 1798, "seek": 426176, "start": 4274.3, "end": 4277.900000000001, "text": " call it which is the derivative of the final output of the expression with", "tokens": [50992, 818, 309, 597, 307, 264, 13760, 295, 264, 2572, 5598, 295, 264, 6114, 365, 51172], "temperature": 0.0, "avg_logprob": -0.12824872513891947, "compression_ratio": 1.8128654970760234, "no_speech_prob": 0.02698078192770481}, {"id": 1799, "seek": 426176, "start": 4277.900000000001, "end": 4287.320000000001, "text": " respect to out's data with respect to out so the local derivative of self in an", "tokens": [51172, 3104, 281, 484, 311, 1412, 365, 3104, 281, 484, 370, 264, 2654, 13760, 295, 2698, 294, 364, 51643], "temperature": 0.0, "avg_logprob": -0.12824872513891947, "compression_ratio": 1.8128654970760234, "no_speech_prob": 0.02698078192770481}, {"id": 1800, "seek": 428732, "start": 4287.32, "end": 4295.42, "text": " addition is 1.0 so it's just 1.0 times out's grad that's the chain rule and", "tokens": [50365, 4500, 307, 502, 13, 15, 370, 309, 311, 445, 502, 13, 15, 1413, 484, 311, 2771, 300, 311, 264, 5021, 4978, 293, 50770], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1801, "seek": 428732, "start": 4295.42, "end": 4300.759999999999, "text": " others.grad will be 1.0 times out.grad and what you basically what you're seeing", "tokens": [50770, 2357, 13, 7165, 486, 312, 502, 13, 15, 1413, 484, 13, 7165, 293, 437, 291, 1936, 437, 291, 434, 2577, 51037], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1802, "seek": 428732, "start": 4300.759999999999, "end": 4306.28, "text": " here is that out's grad will simply be copied onto self's grad and others grad", "tokens": [51037, 510, 307, 300, 484, 311, 2771, 486, 2935, 312, 25365, 3911, 2698, 311, 2771, 293, 2357, 2771, 51313], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1803, "seek": 428732, "start": 4306.28, "end": 4311.44, "text": " as we saw happens for an addition operation so we're going to later call", "tokens": [51313, 382, 321, 1866, 2314, 337, 364, 4500, 6916, 370, 321, 434, 516, 281, 1780, 818, 51571], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1804, "seek": 428732, "start": 4311.44, "end": 4316.42, "text": " this function to propagate the gradient having done an addition let's now do", "tokens": [51571, 341, 2445, 281, 48256, 264, 16235, 1419, 1096, 364, 4500, 718, 311, 586, 360, 51820], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1805, "seek": 428732, "start": 4316.42, "end": 4317.04, "text": " multiplication", "tokens": [51820, 27290, 51851], "temperature": 0.0, "avg_logprob": -0.15807374318440756, "compression_ratio": 1.82648401826484, "no_speech_prob": 0.00018016027752310038}, {"id": 1806, "seek": 431732, "start": 4317.32, "end": 4324.88, "text": " we're going to also define and we're going to set its backward to be", "tokens": [50365, 321, 434, 516, 281, 611, 6964, 293, 321, 434, 516, 281, 992, 1080, 23897, 281, 312, 50743], "temperature": 0.0, "avg_logprob": -0.1961324287183357, "compression_ratio": 1.6687898089171975, "no_speech_prob": 0.00013091546134091914}, {"id": 1807, "seek": 431732, "start": 4324.88, "end": 4335.5, "text": " backward and we want to chain out grad into self.grad and others.grad", "tokens": [50743, 23897, 293, 321, 528, 281, 5021, 484, 2771, 666, 2698, 13, 7165, 293, 2357, 13, 7165, 51274], "temperature": 0.0, "avg_logprob": -0.1961324287183357, "compression_ratio": 1.6687898089171975, "no_speech_prob": 0.00013091546134091914}, {"id": 1808, "seek": 431732, "start": 4335.5, "end": 4341.94, "text": " and this will be a little piece of chain rule for multiplication so we'll have so", "tokens": [51274, 293, 341, 486, 312, 257, 707, 2522, 295, 5021, 4978, 337, 27290, 370, 321, 603, 362, 370, 51596], "temperature": 0.0, "avg_logprob": -0.1961324287183357, "compression_ratio": 1.6687898089171975, "no_speech_prob": 0.00013091546134091914}, {"id": 1809, "seek": 431732, "start": 4341.94, "end": 4345.94, "text": " what should this be can you think through", "tokens": [51596, 437, 820, 341, 312, 393, 291, 519, 807, 51796], "temperature": 0.0, "avg_logprob": -0.1961324287183357, "compression_ratio": 1.6687898089171975, "no_speech_prob": 0.00013091546134091914}, {"id": 1810, "seek": 434732, "start": 4347.32, "end": 4351.34, "text": " scale it up a little bit more I think we can test it but okay so we've got", "tokens": [50365, 4373, 309, 493, 257, 707, 857, 544, 286, 519, 321, 393, 1500, 309, 457, 1392, 370, 321, 600, 658, 50566], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1811, "seek": 434732, "start": 4351.34, "end": 4353.679999999999, "text": " thatanche squared caught or else what should it be and this is going to be", "tokens": [50566, 300, 22806, 8889, 5415, 420, 1646, 437, 820, 309, 312, 293, 341, 307, 516, 281, 312, 50683], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1812, "seek": 434732, "start": 4353.679999999999, "end": 4355.9, "text": " a little better what should this be it's going to be a little bit better", "tokens": [50683, 257, 707, 1101, 437, 820, 341, 312, 309, 311, 516, 281, 312, 257, 707, 857, 1101, 50794], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1813, "seek": 434732, "start": 4355.9, "end": 4360.16, "text": " so finally see here to the other side and this will be the off part second", "tokens": [50794, 370, 2721, 536, 510, 281, 264, 661, 1252, 293, 341, 486, 312, 264, 766, 644, 1150, 51007], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1814, "seek": 434732, "start": 4360.16, "end": 4364.84, "text": " time creative so where the version to copy to that I was off the plane or up", "tokens": [51007, 565, 5880, 370, 689, 264, 3037, 281, 5055, 281, 300, 286, 390, 766, 264, 5720, 420, 493, 51241], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1815, "seek": 434732, "start": 4364.84, "end": 4368.04, "text": " to the -, and then target my output time so let's go to case sickness", "tokens": [51241, 281, 264, 42123, 293, 550, 3779, 452, 5598, 565, 370, 718, 311, 352, 281, 1389, 25611, 51401], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1816, "seek": 434732, "start": 4368.04, "end": 4371.4, "text": " so here's the look of a general promotions of set for entire settings", "tokens": [51401, 370, 510, 311, 264, 574, 295, 257, 2674, 42127, 295, 992, 337, 2302, 6257, 51569], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1817, "seek": 434732, "start": 4371.4, "end": 4375.54, "text": " we want a group this isn't going to come the other way we want to set the", "tokens": [51569, 321, 528, 257, 1594, 341, 1943, 380, 516, 281, 808, 264, 661, 636, 321, 528, 281, 992, 264, 51776], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1818, "seek": 434732, "start": 4375.54, "end": 4376.5599999999995, "text": " You can also add in a\u4f60\u5011 I think return method and even the previous employees", "tokens": [51776, 509, 393, 611, 909, 294, 257, 19891, 286, 519, 2736, 3170, 293, 754, 264, 3894, 6619, 51827], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1819, "seek": 434732, "start": 4376.5599999999995, "end": 4377.299999999999, "text": " and I'm gonna do a little bit of what we're going to say for the SQL gameplay", "tokens": [51827, 293, 286, 478, 799, 360, 257, 707, 857, 295, 437, 321, 434, 516, 281, 584, 337, 264, 19200, 11421, 51864], "temperature": 1.0, "avg_logprob": -3.7092856549202127, "compression_ratio": 1.8469135802469137, "no_speech_prob": 0.0017617596313357353}, {"id": 1820, "seek": 437732, "start": 4377.32, "end": 4385.599999999999, "text": " to be just backward and here we need to back propagate we have out dot grad and we want to", "tokens": [50365, 281, 312, 445, 23897, 293, 510, 321, 643, 281, 646, 48256, 321, 362, 484, 5893, 2771, 293, 321, 528, 281, 50779], "temperature": 0.0, "avg_logprob": -0.09345358990608378, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.05262857675552368}, {"id": 1821, "seek": 437732, "start": 4385.599999999999, "end": 4393.78, "text": " chain it into salt dot grad and salt dot grad will be the local derivative of this operation", "tokens": [50779, 5021, 309, 666, 5139, 5893, 2771, 293, 5139, 5893, 2771, 486, 312, 264, 2654, 13760, 295, 341, 6916, 51188], "temperature": 0.0, "avg_logprob": -0.09345358990608378, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.05262857675552368}, {"id": 1822, "seek": 437732, "start": 4393.78, "end": 4400.36, "text": " that we've done here which is 10h and so we saw that the local gradient is 1 minus the 10h of x", "tokens": [51188, 300, 321, 600, 1096, 510, 597, 307, 1266, 71, 293, 370, 321, 1866, 300, 264, 2654, 16235, 307, 502, 3175, 264, 1266, 71, 295, 2031, 51517], "temperature": 0.0, "avg_logprob": -0.09345358990608378, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.05262857675552368}, {"id": 1823, "seek": 437732, "start": 4400.36, "end": 4407.12, "text": " squared which here is t that's the local derivative because that's t is the output of this 10h", "tokens": [51517, 8889, 597, 510, 307, 256, 300, 311, 264, 2654, 13760, 570, 300, 311, 256, 307, 264, 5598, 295, 341, 1266, 71, 51855], "temperature": 0.0, "avg_logprob": -0.09345358990608378, "compression_ratio": 1.917948717948718, "no_speech_prob": 0.05262857675552368}, {"id": 1824, "seek": 440712, "start": 4407.12, "end": 4413.96, "text": " so 1 minus t squared is the local derivative and then gradient has to be multiplied because of the", "tokens": [50365, 370, 502, 3175, 256, 8889, 307, 264, 2654, 13760, 293, 550, 16235, 575, 281, 312, 17207, 570, 295, 264, 50707], "temperature": 0.8, "avg_logprob": -0.13558620061629859, "compression_ratio": 1.963265306122449, "no_speech_prob": 3.138168540317565e-05}, {"id": 1825, "seek": 440712, "start": 4413.96, "end": 4420.099999999999, "text": " chain rule so out grad is chained through the local gradient into salt dot grad and that should", "tokens": [50707, 5021, 4978, 370, 484, 2771, 307, 417, 3563, 807, 264, 2654, 16235, 666, 5139, 5893, 2771, 293, 300, 820, 51014], "temperature": 0.8, "avg_logprob": -0.13558620061629859, "compression_ratio": 1.963265306122449, "no_speech_prob": 3.138168540317565e-05}, {"id": 1826, "seek": 440712, "start": 4420.099999999999, "end": 4426.24, "text": " be basically it so we're going to redefine our value node we're going to swing all the way down", "tokens": [51014, 312, 1936, 309, 370, 321, 434, 516, 281, 38818, 533, 527, 2158, 9984, 321, 434, 516, 281, 11173, 439, 264, 636, 760, 51321], "temperature": 0.8, "avg_logprob": -0.13558620061629859, "compression_ratio": 1.963265306122449, "no_speech_prob": 3.138168540317565e-05}, {"id": 1827, "seek": 440712, "start": 4426.24, "end": 4436.5599999999995, "text": " here and we're going to redefine our expression make sure that all the grads are zero okay but", "tokens": [51321, 510, 293, 321, 434, 516, 281, 38818, 533, 527, 6114, 652, 988, 300, 439, 264, 2771, 82, 366, 4018, 1392, 457, 51837], "temperature": 0.8, "avg_logprob": -0.13558620061629859, "compression_ratio": 1.963265306122449, "no_speech_prob": 3.138168540317565e-05}, {"id": 1828, "seek": 440712, "start": 4436.5599999999995, "end": 4437.099999999999, "text": " now we don't have to do this again we're just going to do this again and we're going to do this", "tokens": [51837, 586, 321, 500, 380, 362, 281, 360, 341, 797, 321, 434, 445, 516, 281, 360, 341, 797, 293, 321, 434, 516, 281, 360, 341, 51864], "temperature": 0.8, "avg_logprob": -0.13558620061629859, "compression_ratio": 1.963265306122449, "no_speech_prob": 3.138168540317565e-05}, {"id": 1829, "seek": 443710, "start": 4437.1, "end": 4441.9800000000005, "text": " to do this manually anymore. We are going to basically be calling the dot backward", "tokens": [50365, 281, 360, 341, 16945, 3602, 13, 492, 366, 516, 281, 1936, 312, 5141, 264, 5893, 23897, 50609], "temperature": 0.0, "avg_logprob": -0.23937028141345007, "compression_ratio": 1.5034482758620689, "no_speech_prob": 0.02660905010998249}, {"id": 1830, "seek": 443710, "start": 4441.9800000000005, "end": 4455.08, "text": " in the right order. So first we want to call o's dot backward. So o was the", "tokens": [50609, 294, 264, 558, 1668, 13, 407, 700, 321, 528, 281, 818, 277, 311, 5893, 23897, 13, 407, 277, 390, 264, 51264], "temperature": 0.0, "avg_logprob": -0.23937028141345007, "compression_ratio": 1.5034482758620689, "no_speech_prob": 0.02660905010998249}, {"id": 1831, "seek": 443710, "start": 4455.08, "end": 4463.320000000001, "text": " outcome of 10h, right? So calling o's backward will be this", "tokens": [51264, 9700, 295, 1266, 71, 11, 558, 30, 407, 5141, 277, 311, 23897, 486, 312, 341, 51676], "temperature": 0.0, "avg_logprob": -0.23937028141345007, "compression_ratio": 1.5034482758620689, "no_speech_prob": 0.02660905010998249}, {"id": 1832, "seek": 446332, "start": 4463.32, "end": 4469.48, "text": " function. This is what it will do. Now we have to be careful because there's a", "tokens": [50365, 2445, 13, 639, 307, 437, 309, 486, 360, 13, 823, 321, 362, 281, 312, 5026, 570, 456, 311, 257, 50673], "temperature": 0.0, "avg_logprob": -0.15690086312489968, "compression_ratio": 1.5668789808917198, "no_speech_prob": 0.00025716162053868175}, {"id": 1833, "seek": 446332, "start": 4469.48, "end": 4479.7, "text": " times out dot grad and out dot grad remember is initialized to 0. So here we see", "tokens": [50673, 1413, 484, 5893, 2771, 293, 484, 5893, 2771, 1604, 307, 5883, 1602, 281, 1958, 13, 407, 510, 321, 536, 51184], "temperature": 0.0, "avg_logprob": -0.15690086312489968, "compression_ratio": 1.5668789808917198, "no_speech_prob": 0.00025716162053868175}, {"id": 1834, "seek": 446332, "start": 4479.7, "end": 4487.32, "text": " grad 0. So as a base case we need to set o's dot grad to 1.0 to initialize", "tokens": [51184, 2771, 1958, 13, 407, 382, 257, 3096, 1389, 321, 643, 281, 992, 277, 311, 5893, 2771, 281, 502, 13, 15, 281, 5883, 1125, 51565], "temperature": 0.0, "avg_logprob": -0.15690086312489968, "compression_ratio": 1.5668789808917198, "no_speech_prob": 0.00025716162053868175}, {"id": 1835, "seek": 446332, "start": 4487.32, "end": 4489.98, "text": " this with 1", "tokens": [51565, 341, 365, 502, 51698], "temperature": 0.0, "avg_logprob": -0.15690086312489968, "compression_ratio": 1.5668789808917198, "no_speech_prob": 0.00025716162053868175}, {"id": 1836, "seek": 449332, "start": 4493.32, "end": 4499.0, "text": " and then once this is 1, we can call o dot backward and what that should do is it should", "tokens": [50365, 293, 550, 1564, 341, 307, 502, 11, 321, 393, 818, 277, 5893, 23897, 293, 437, 300, 820, 360, 307, 309, 820, 50649], "temperature": 0.0, "avg_logprob": -0.1413266302525312, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0010099848732352257}, {"id": 1837, "seek": 449332, "start": 4499.0, "end": 4505.84, "text": " propagate this grad through 10h. So the local derivative times the global derivative which", "tokens": [50649, 48256, 341, 2771, 807, 1266, 71, 13, 407, 264, 2654, 13760, 1413, 264, 4338, 13760, 597, 50991], "temperature": 0.0, "avg_logprob": -0.1413266302525312, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0010099848732352257}, {"id": 1838, "seek": 449332, "start": 4505.84, "end": 4508.78, "text": " is initialized at 1. So this should", "tokens": [50991, 307, 5883, 1602, 412, 502, 13, 407, 341, 820, 51138], "temperature": 0.0, "avg_logprob": -0.1413266302525312, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0010099848732352257}, {"id": 1839, "seek": 449332, "start": 4508.78, "end": 4521.08, "text": " so I thought about redoing it but I figured I should just leave the error in here because", "tokens": [51138, 370, 286, 1194, 466, 29956, 278, 309, 457, 286, 8932, 286, 820, 445, 1856, 264, 6713, 294, 510, 570, 51753], "temperature": 0.0, "avg_logprob": -0.1413266302525312, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0010099848732352257}, {"id": 1840, "seek": 449332, "start": 4521.08, "end": 4523.2, "text": " it's pretty funny. Why is an anti-object", "tokens": [51753, 309, 311, 1238, 4074, 13, 1545, 307, 364, 6061, 12, 41070, 51859], "temperature": 0.0, "avg_logprob": -0.1413266302525312, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.0010099848732352257}, {"id": 1841, "seek": 452332, "start": 4523.32, "end": 4530.86, "text": " not callable? It's because I screwed up. We're trying to save these functions. So this is", "tokens": [50365, 406, 818, 712, 30, 467, 311, 570, 286, 20331, 493, 13, 492, 434, 1382, 281, 3155, 613, 6828, 13, 407, 341, 307, 50742], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1842, "seek": 452332, "start": 4530.86, "end": 4536.2, "text": " correct. This here, we don't want to call the function because that returns none. These", "tokens": [50742, 3006, 13, 639, 510, 11, 321, 500, 380, 528, 281, 818, 264, 2445, 570, 300, 11247, 6022, 13, 1981, 51009], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1843, "seek": 452332, "start": 4536.2, "end": 4541.0, "text": " functions return none. We just want to store the function. So let me redefine the value", "tokens": [51009, 6828, 2736, 6022, 13, 492, 445, 528, 281, 3531, 264, 2445, 13, 407, 718, 385, 38818, 533, 264, 2158, 51249], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1844, "seek": 452332, "start": 4541.0, "end": 4547.08, "text": " object and then we're going to come back in, redefine the expression, draw a dot. Everything", "tokens": [51249, 2657, 293, 550, 321, 434, 516, 281, 808, 646, 294, 11, 38818, 533, 264, 6114, 11, 2642, 257, 5893, 13, 5471, 51553], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1845, "seek": 452332, "start": 4547.08, "end": 4548.08, "text": " is great.", "tokens": [51553, 307, 869, 13, 51603], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1846, "seek": 452332, "start": 4548.08, "end": 4553.08, "text": " o dot grad is 1, o dot grad is 1 and now", "tokens": [51603, 277, 5893, 2771, 307, 502, 11, 277, 5893, 2771, 307, 502, 293, 586, 51853], "temperature": 0.0, "avg_logprob": -0.1686015086131053, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.00043945893412455916}, {"id": 1847, "seek": 455308, "start": 4553.08, "end": 4559.58, "text": " this should work, of course. Okay. So o dot backward should have, this grad should now", "tokens": [50365, 341, 820, 589, 11, 295, 1164, 13, 1033, 13, 407, 277, 5893, 23897, 820, 362, 11, 341, 2771, 820, 586, 50690], "temperature": 0.0, "avg_logprob": -0.22658516378963695, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0005245822248980403}, {"id": 1848, "seek": 455308, "start": 4559.58, "end": 4566.84, "text": " be 0.5 if we redraw and if everything went correctly, 0.5. Yay. Okay. So now we need to", "tokens": [50690, 312, 1958, 13, 20, 498, 321, 2182, 5131, 293, 498, 1203, 1437, 8944, 11, 1958, 13, 20, 13, 13268, 13, 1033, 13, 407, 586, 321, 643, 281, 51053], "temperature": 0.0, "avg_logprob": -0.22658516378963695, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0005245822248980403}, {"id": 1849, "seek": 455308, "start": 4566.84, "end": 4578.08, "text": " call ns dot grad, ns dot backward, sorry, ns backward. So that seems to have worked.", "tokens": [51053, 818, 297, 82, 5893, 2771, 11, 297, 82, 5893, 23897, 11, 2597, 11, 297, 82, 23897, 13, 407, 300, 2544, 281, 362, 2732, 13, 51615], "temperature": 0.0, "avg_logprob": -0.22658516378963695, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0005245822248980403}, {"id": 1850, "seek": 455308, "start": 4578.08, "end": 4582.92, "text": " So ns dot backward routed the gradient to both of these. So this is looking great. So", "tokens": [51615, 407, 297, 82, 5893, 23897, 4020, 292, 264, 16235, 281, 1293, 295, 613, 13, 407, 341, 307, 1237, 869, 13, 407, 51857], "temperature": 0.0, "avg_logprob": -0.22658516378963695, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0005245822248980403}, {"id": 1851, "seek": 458292, "start": 4582.92, "end": 4592.28, "text": " now we could, of course, call b dot grad, b dot backward, sorry. What's going to happen?", "tokens": [50365, 586, 321, 727, 11, 295, 1164, 11, 818, 272, 5893, 2771, 11, 272, 5893, 23897, 11, 2597, 13, 708, 311, 516, 281, 1051, 30, 50833], "temperature": 0.0, "avg_logprob": -0.21244004715320675, "compression_ratio": 1.664864864864865, "no_speech_prob": 0.00041418540058657527}, {"id": 1852, "seek": 458292, "start": 4592.28, "end": 4598.86, "text": " Well b doesn't have a backward. b is backward because b is a leaf node. b is backward is", "tokens": [50833, 1042, 272, 1177, 380, 362, 257, 23897, 13, 272, 307, 23897, 570, 272, 307, 257, 10871, 9984, 13, 272, 307, 23897, 307, 51162], "temperature": 0.0, "avg_logprob": -0.21244004715320675, "compression_ratio": 1.664864864864865, "no_speech_prob": 0.00041418540058657527}, {"id": 1853, "seek": 458292, "start": 4598.86, "end": 4606.2, "text": " by initialization the empty function. So nothing would happen. But we can call it on it. But", "tokens": [51162, 538, 5883, 2144, 264, 6707, 2445, 13, 407, 1825, 576, 1051, 13, 583, 321, 393, 818, 309, 322, 309, 13, 583, 51529], "temperature": 0.0, "avg_logprob": -0.21244004715320675, "compression_ratio": 1.664864864864865, "no_speech_prob": 0.00041418540058657527}, {"id": 1854, "seek": 458292, "start": 4606.2, "end": 4610.92, "text": " when we call this one, it's backward.", "tokens": [51529, 562, 321, 818, 341, 472, 11, 309, 311, 23897, 13, 51765], "temperature": 0.0, "avg_logprob": -0.21244004715320675, "compression_ratio": 1.664864864864865, "no_speech_prob": 0.00041418540058657527}, {"id": 1855, "seek": 461292, "start": 4612.92, "end": 4615.3, "text": " M Normal entire value.", "tokens": [50365, 376, 21277, 2302, 2158, 13, 50484], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1856, "seek": 461292, "start": 4617.3, "end": 4624.82, "text": " Let's do this behavior here. Then we expect this 0.5 to give further routed. Right? So", "tokens": [50584, 961, 311, 360, 341, 5223, 510, 13, 1396, 321, 2066, 341, 1958, 13, 20, 281, 976, 3052, 4020, 292, 13, 1779, 30, 407, 50960], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1857, "seek": 461292, "start": 4624.82, "end": 4638.14, "text": " there we go, 0.5, 0.5. And then finally, we want to call it here on x2, w2. And on", "tokens": [50960, 456, 321, 352, 11, 1958, 13, 20, 11, 1958, 13, 20, 13, 400, 550, 2721, 11, 321, 528, 281, 818, 309, 510, 322, 2031, 17, 11, 261, 17, 13, 400, 322, 51626], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1858, "seek": 461292, "start": 4638.14, "end": 4640.14, "text": " x1, w1.", "tokens": [51626, 2031, 16, 11, 261, 16, 13, 51726], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1859, "seek": 461292, "start": 4640.14, "end": 4642.08, "text": " Let's do both of those. And there we go.", "tokens": [51726, 961, 311, 360, 1293, 295, 729, 13, 400, 456, 321, 352, 13, 51823], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1860, "seek": 461292, "start": 4642.08, "end": 4642.92, "text": " ??", "tokens": [51823, 37969, 51865], "temperature": 1.0, "avg_logprob": -1.3546877012148009, "compression_ratio": 1.4523809523809523, "no_speech_prob": 0.002374950097873807}, {"id": 1861, "seek": 464292, "start": 4642.92, "end": 4649.42, "text": " and one exactly as we did before but now we've done it through calling that backward", "tokens": [50365, 293, 472, 2293, 382, 321, 630, 949, 457, 586, 321, 600, 1096, 309, 807, 5141, 300, 23897, 50690], "temperature": 0.0, "avg_logprob": -0.07885040814363503, "compression_ratio": 1.845, "no_speech_prob": 0.03522968664765358}, {"id": 1862, "seek": 464292, "start": 4649.42, "end": 4656.78, "text": " sort of manually so we have one last piece to get rid of which is us calling underscore", "tokens": [50690, 1333, 295, 16945, 370, 321, 362, 472, 1036, 2522, 281, 483, 3973, 295, 597, 307, 505, 5141, 37556, 51058], "temperature": 0.0, "avg_logprob": -0.07885040814363503, "compression_ratio": 1.845, "no_speech_prob": 0.03522968664765358}, {"id": 1863, "seek": 464292, "start": 4656.78, "end": 4662.66, "text": " backward manually so let's think through what we are actually doing we've laid out a mathematical", "tokens": [51058, 23897, 16945, 370, 718, 311, 519, 807, 437, 321, 366, 767, 884, 321, 600, 9897, 484, 257, 18894, 51352], "temperature": 0.0, "avg_logprob": -0.07885040814363503, "compression_ratio": 1.845, "no_speech_prob": 0.03522968664765358}, {"id": 1864, "seek": 464292, "start": 4662.66, "end": 4668.76, "text": " expression and now we're trying to go backwards through that expression so going backwards through", "tokens": [51352, 6114, 293, 586, 321, 434, 1382, 281, 352, 12204, 807, 300, 6114, 370, 516, 12204, 807, 51657], "temperature": 0.0, "avg_logprob": -0.07885040814363503, "compression_ratio": 1.845, "no_speech_prob": 0.03522968664765358}, {"id": 1865, "seek": 466876, "start": 4668.76, "end": 4674.52, "text": " the expression just means that we never want to call a dot backward for any node before", "tokens": [50365, 264, 6114, 445, 1355, 300, 321, 1128, 528, 281, 818, 257, 5893, 23897, 337, 604, 9984, 949, 50653], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1866, "seek": 466876, "start": 4674.52, "end": 4682.14, "text": " we've done sort of everything after it so we have to do everything after it before we're ever going", "tokens": [50653, 321, 600, 1096, 1333, 295, 1203, 934, 309, 370, 321, 362, 281, 360, 1203, 934, 309, 949, 321, 434, 1562, 516, 51034], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1867, "seek": 466876, "start": 4682.14, "end": 4686.26, "text": " to call dot backward on any one node we have to get all of its full dependencies everything that", "tokens": [51034, 281, 818, 5893, 23897, 322, 604, 472, 9984, 321, 362, 281, 483, 439, 295, 1080, 1577, 36606, 1203, 300, 51240], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1868, "seek": 466876, "start": 4686.26, "end": 4693.780000000001, "text": " it depends on has to propagate to it before we can continue back-propagation so this ordering", "tokens": [51240, 309, 5946, 322, 575, 281, 48256, 281, 309, 949, 321, 393, 2354, 646, 12, 79, 1513, 559, 399, 370, 341, 21739, 51616], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1869, "seek": 466876, "start": 4693.780000000001, "end": 4697.22, "text": " of graphs can be achieved using something called topological sort", "tokens": [51616, 295, 24877, 393, 312, 11042, 1228, 746, 1219, 1192, 4383, 1333, 51788], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1870, "seek": 466876, "start": 4697.22, "end": 4698.62, "text": " so topological", "tokens": [51788, 370, 1192, 4383, 51858], "temperature": 1.0, "avg_logprob": -0.20888357342414135, "compression_ratio": 1.944915254237288, "no_speech_prob": 8.058261300902814e-05}, {"id": 1871, "seek": 469862, "start": 4698.62, "end": 4705.5199999999995, "text": " sort is basically a laying out of a graph such that all the edges go only from left to right", "tokens": [50365, 1333, 307, 1936, 257, 14903, 484, 295, 257, 4295, 1270, 300, 439, 264, 8819, 352, 787, 490, 1411, 281, 558, 50710], "temperature": 0.0, "avg_logprob": -0.07407280306021373, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.04401443526148796}, {"id": 1872, "seek": 469862, "start": 4705.5199999999995, "end": 4713.38, "text": " basically. So here we have a graph it's a directed acyclic graph a DAG and this is two different", "tokens": [50710, 1936, 13, 407, 510, 321, 362, 257, 4295, 309, 311, 257, 12898, 696, 88, 66, 1050, 4295, 257, 9578, 38, 293, 341, 307, 732, 819, 51103], "temperature": 0.0, "avg_logprob": -0.07407280306021373, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.04401443526148796}, {"id": 1873, "seek": 469862, "start": 4713.38, "end": 4717.86, "text": " topological orders of it I believe where basically you'll see that it's a laying out of the nodes", "tokens": [51103, 1192, 4383, 9470, 295, 309, 286, 1697, 689, 1936, 291, 603, 536, 300, 309, 311, 257, 14903, 484, 295, 264, 13891, 51327], "temperature": 0.0, "avg_logprob": -0.07407280306021373, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.04401443526148796}, {"id": 1874, "seek": 469862, "start": 4717.86, "end": 4724.26, "text": " such that all the edges go only one way from left to right. And implementing topological sort you", "tokens": [51327, 1270, 300, 439, 264, 8819, 352, 787, 472, 636, 490, 1411, 281, 558, 13, 400, 18114, 1192, 4383, 1333, 291, 51647], "temperature": 0.0, "avg_logprob": -0.07407280306021373, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.04401443526148796}, {"id": 1875, "seek": 472426, "start": 4724.26, "end": 4731.0, "text": " can look in wikipedia and so on I'm not going to go through it in detail but basically this is what", "tokens": [50365, 393, 574, 294, 261, 1035, 26633, 293, 370, 322, 286, 478, 406, 516, 281, 352, 807, 309, 294, 2607, 457, 1936, 341, 307, 437, 50702], "temperature": 1.0, "avg_logprob": -0.33544782491830677, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.00014119224215392023}, {"id": 1876, "seek": 472426, "start": 4731.0, "end": 4740.16, "text": " builds a topological graph. We maintain a set of visited nodes and then we are going through", "tokens": [50702, 15182, 257, 1192, 4383, 4295, 13, 492, 6909, 257, 992, 295, 11220, 13891, 293, 550, 321, 366, 516, 807, 51160], "temperature": 1.0, "avg_logprob": -0.33544782491830677, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.00014119224215392023}, {"id": 1877, "seek": 472426, "start": 4740.16, "end": 4744.96, "text": " starting at some root node which for us is O that's where I want to start the topological sort", "tokens": [51160, 2891, 412, 512, 5593, 9984, 597, 337, 505, 307, 422, 300, 311, 689, 286, 528, 281, 722, 264, 1192, 4383, 1333, 51400], "temperature": 1.0, "avg_logprob": -0.33544782491830677, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.00014119224215392023}, {"id": 1878, "seek": 472426, "start": 4744.96, "end": 4751.0, "text": " and starting at O we go through all of its children and we need to lay them out from left to", "tokens": [51400, 293, 2891, 412, 422, 321, 352, 807, 439, 295, 1080, 2227, 293, 321, 643, 281, 2360, 552, 484, 490, 1411, 281, 51702], "temperature": 1.0, "avg_logprob": -0.33544782491830677, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.00014119224215392023}, {"id": 1879, "seek": 472426, "start": 4751.0, "end": 4754.2, "text": " right and basically this starts at OH.", "tokens": [51702, 558, 293, 1936, 341, 3719, 412, 13931, 13, 51862], "temperature": 1.0, "avg_logprob": -0.33544782491830677, "compression_ratio": 1.7458333333333333, "no_speech_prob": 0.00014119224215392023}, {"id": 1880, "seek": 475426, "start": 4754.26, "end": 4757.58, "text": " Oh, if it's not visited, then it marks it as visited.", "tokens": [50365, 876, 11, 498, 309, 311, 406, 11220, 11, 550, 309, 10640, 309, 382, 11220, 13, 50531], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1881, "seek": 475426, "start": 4757.88, "end": 4763.26, "text": " And then it iterates through all of its children and calls build topological on them.", "tokens": [50546, 400, 550, 309, 17138, 1024, 807, 439, 295, 1080, 2227, 293, 5498, 1322, 1192, 4383, 322, 552, 13, 50815], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1882, "seek": 475426, "start": 4764.08, "end": 4767.68, "text": " And then after it's gone through all the children, it adds itself.", "tokens": [50856, 400, 550, 934, 309, 311, 2780, 807, 439, 264, 2227, 11, 309, 10860, 2564, 13, 51036], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1883, "seek": 475426, "start": 4768.24, "end": 4772.7, "text": " So basically, this node that we're going to call it on, like say, oh,", "tokens": [51064, 407, 1936, 11, 341, 9984, 300, 321, 434, 516, 281, 818, 309, 322, 11, 411, 584, 11, 1954, 11, 51287], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1884, "seek": 475426, "start": 4773.06, "end": 4778.860000000001, "text": " is only going to add itself to the topo list after all of the children have been processed.", "tokens": [51305, 307, 787, 516, 281, 909, 2564, 281, 264, 1192, 78, 1329, 934, 439, 295, 264, 2227, 362, 668, 18846, 13, 51595], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1885, "seek": 475426, "start": 4778.860000000001, "end": 4783.56, "text": " And that's how this function is guaranteeing that you're only going to be in the list", "tokens": [51595, 400, 300, 311, 577, 341, 2445, 307, 10815, 278, 300, 291, 434, 787, 516, 281, 312, 294, 264, 1329, 51830], "temperature": 0.0, "avg_logprob": -0.14395755132039387, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.012173222377896309}, {"id": 1886, "seek": 478356, "start": 4783.56, "end": 4785.56, "text": " once all of your children are in the list.", "tokens": [50365, 1564, 439, 295, 428, 2227, 366, 294, 264, 1329, 13, 50465], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1887, "seek": 478356, "start": 4785.820000000001, "end": 4787.400000000001, "text": " And that's the invariant that is being maintained.", "tokens": [50478, 400, 300, 311, 264, 33270, 394, 300, 307, 885, 17578, 13, 50557], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1888, "seek": 478356, "start": 4787.820000000001, "end": 4791.34, "text": " So if we build topo on O and then inspect this list,", "tokens": [50578, 407, 498, 321, 1322, 1192, 78, 322, 422, 293, 550, 15018, 341, 1329, 11, 50754], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1889, "seek": 478356, "start": 4791.72, "end": 4795.740000000001, "text": " we're going to see that it ordered our value objects.", "tokens": [50773, 321, 434, 516, 281, 536, 300, 309, 8866, 527, 2158, 6565, 13, 50974], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1890, "seek": 478356, "start": 4796.5, "end": 4800.820000000001, "text": " And the last one is the value of 0.707, which is the output.", "tokens": [51012, 400, 264, 1036, 472, 307, 264, 2158, 295, 1958, 13, 5867, 22, 11, 597, 307, 264, 5598, 13, 51228], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1891, "seek": 478356, "start": 4801.52, "end": 4808.080000000001, "text": " So this is O, and then this is N, and then all the other nodes get laid out before it.", "tokens": [51263, 407, 341, 307, 422, 11, 293, 550, 341, 307, 426, 11, 293, 550, 439, 264, 661, 13891, 483, 9897, 484, 949, 309, 13, 51591], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1892, "seek": 478356, "start": 4809.5, "end": 4811.54, "text": " So that builds the topological graph.", "tokens": [51662, 407, 300, 15182, 264, 1192, 4383, 4295, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1893, "seek": 478356, "start": 4812.1, "end": 4813.5, "text": " And really what we're doing now,", "tokens": [51792, 400, 534, 437, 321, 434, 884, 586, 11, 51862], "temperature": 0.0, "avg_logprob": -0.14095052608773728, "compression_ratio": 1.7102040816326531, "no_speech_prob": 1.216903365275357e-05}, {"id": 1894, "seek": 481356, "start": 4813.56, "end": 4819.0, "text": " is we're just calling dot underscore backward on all of the nodes in a topological order.", "tokens": [50365, 307, 321, 434, 445, 5141, 5893, 37556, 23897, 322, 439, 295, 264, 13891, 294, 257, 1192, 4383, 1668, 13, 50637], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1895, "seek": 481356, "start": 4819.580000000001, "end": 4824.18, "text": " So if we just reset the gradients, they're all 0, what did we do?", "tokens": [50666, 407, 498, 321, 445, 14322, 264, 2771, 2448, 11, 436, 434, 439, 1958, 11, 437, 630, 321, 360, 30, 50896], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1896, "seek": 481356, "start": 4824.54, "end": 4830.4800000000005, "text": " We started by setting O.grad to be 1.", "tokens": [50914, 492, 1409, 538, 3287, 422, 13, 7165, 281, 312, 502, 13, 51211], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1897, "seek": 481356, "start": 4831.160000000001, "end": 4832.6, "text": " That's the base case.", "tokens": [51245, 663, 311, 264, 3096, 1389, 13, 51317], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1898, "seek": 481356, "start": 4833.26, "end": 4835.96, "text": " Then we built a topological order.", "tokens": [51350, 1396, 321, 3094, 257, 1192, 4383, 1668, 13, 51485], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1899, "seek": 481356, "start": 4837.96, "end": 4843.240000000001, "text": " And then we went for node in reversed.", "tokens": [51585, 400, 550, 321, 1437, 337, 9984, 294, 30563, 13, 51849], "temperature": 0.0, "avg_logprob": -0.20771289152257583, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04777442663908005}, {"id": 1900, "seek": 484356, "start": 4843.96, "end": 4844.68, "text": " Of topo.", "tokens": [50385, 2720, 1192, 78, 13, 50421], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1901, "seek": 484356, "start": 4846.22, "end": 4851.22, "text": " Now, in the reverse order, because this list goes from, you know,", "tokens": [50498, 823, 11, 294, 264, 9943, 1668, 11, 570, 341, 1329, 1709, 490, 11, 291, 458, 11, 50748], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1902, "seek": 484356, "start": 4851.620000000001, "end": 4853.080000000001, "text": " we need to go through it in reversed order.", "tokens": [50768, 321, 643, 281, 352, 807, 309, 294, 30563, 1668, 13, 50841], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1903, "seek": 484356, "start": 4853.96, "end": 4857.18, "text": " So starting at O, node dot backward.", "tokens": [50885, 407, 2891, 412, 422, 11, 9984, 5893, 23897, 13, 51046], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1904, "seek": 484356, "start": 4858.4800000000005, "end": 4861.580000000001, "text": " And this should be it.", "tokens": [51111, 400, 341, 820, 312, 309, 13, 51266], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1905, "seek": 484356, "start": 4863.18, "end": 4863.9400000000005, "text": " There we go.", "tokens": [51346, 821, 321, 352, 13, 51384], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1906, "seek": 484356, "start": 4865.38, "end": 4866.580000000001, "text": " Those are the correct derivatives.", "tokens": [51456, 3950, 366, 264, 3006, 33733, 13, 51516], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1907, "seek": 484356, "start": 4867.14, "end": 4869.4800000000005, "text": " Finally, we are going to hide this functionality.", "tokens": [51544, 6288, 11, 321, 366, 516, 281, 6479, 341, 14980, 13, 51661], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1908, "seek": 484356, "start": 4870.02, "end": 4872.42, "text": " So I'm going to copy this.", "tokens": [51688, 407, 286, 478, 516, 281, 5055, 341, 13, 51808], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1909, "seek": 484356, "start": 4872.740000000001, "end": 4873.54, "text": " And we're going to hide this functionality.", "tokens": [51824, 400, 321, 434, 516, 281, 6479, 341, 14980, 13, 51864], "temperature": 0.0, "avg_logprob": -0.2983770277893659, "compression_ratio": 1.6602870813397128, "no_speech_prob": 0.0036754943430423737}, {"id": 1910, "seek": 487356, "start": 4873.56, "end": 4874.84, "text": " And we're going to hide it inside the value class,", "tokens": [50365, 400, 321, 434, 516, 281, 6479, 309, 1854, 264, 2158, 1508, 11, 50429], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1911, "seek": 487356, "start": 4875.0, "end": 4877.34, "text": " because we don't want to have all that code lying around.", "tokens": [50437, 570, 321, 500, 380, 528, 281, 362, 439, 300, 3089, 8493, 926, 13, 50554], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1912, "seek": 487356, "start": 4878.34, "end": 4879.72, "text": " So instead of an underscore backward,", "tokens": [50604, 407, 2602, 295, 364, 37556, 23897, 11, 50673], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1913, "seek": 487356, "start": 4879.9400000000005, "end": 4881.84, "text": " we're now going to define an actual backward.", "tokens": [50684, 321, 434, 586, 516, 281, 6964, 364, 3539, 23897, 13, 50779], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1914, "seek": 487356, "start": 4882.160000000001, "end": 4884.200000000001, "text": " So that's backward, without the underscore.", "tokens": [50795, 407, 300, 311, 23897, 11, 1553, 264, 37556, 13, 50897], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1915, "seek": 487356, "start": 4886.120000000001, "end": 4888.400000000001, "text": " And that's going to do all the stuff that we just derived.", "tokens": [50993, 400, 300, 311, 516, 281, 360, 439, 264, 1507, 300, 321, 445, 18949, 13, 51107], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1916, "seek": 487356, "start": 4889.0, "end": 4890.700000000001, "text": " So let me just clean this up a little bit.", "tokens": [51137, 407, 718, 385, 445, 2541, 341, 493, 257, 707, 857, 13, 51222], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1917, "seek": 487356, "start": 4891.160000000001, "end": 4898.360000000001, "text": " So we're first going to build a topological graph,", "tokens": [51245, 407, 321, 434, 700, 516, 281, 1322, 257, 1192, 4383, 4295, 11, 51605], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1918, "seek": 487356, "start": 4898.84, "end": 4900.34, "text": " starting at self.", "tokens": [51629, 2891, 412, 2698, 13, 51704], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1919, "seek": 487356, "start": 4901.34, "end": 4903.38, "text": " So build topo of self.", "tokens": [51754, 407, 1322, 1192, 78, 295, 2698, 13, 51856], "temperature": 0.0, "avg_logprob": -0.20536322593688966, "compression_ratio": 1.8067226890756303, "no_speech_prob": 0.0009732347098179162}, {"id": 1920, "seek": 490356, "start": 4903.820000000001, "end": 4907.38, "text": " We'll populate the topological order into the topo list,", "tokens": [50378, 492, 603, 1665, 5256, 264, 1192, 4383, 1668, 666, 264, 1192, 78, 1329, 11, 50556], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1921, "seek": 490356, "start": 4907.54, "end": 4908.5, "text": " which is a local variable.", "tokens": [50564, 597, 307, 257, 2654, 7006, 13, 50612], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1922, "seek": 490356, "start": 4909.06, "end": 4911.52, "text": " Then we set self.grads to be one.", "tokens": [50640, 1396, 321, 992, 2698, 13, 861, 5834, 281, 312, 472, 13, 50763], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1923, "seek": 490356, "start": 4912.780000000001, "end": 4915.740000000001, "text": " And then for each node in the reversed list,", "tokens": [50826, 400, 550, 337, 1184, 9984, 294, 264, 30563, 1329, 11, 50974], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1924, "seek": 490356, "start": 4916.06, "end": 4918.240000000001, "text": " so starting at S and going to all the children,", "tokens": [50990, 370, 2891, 412, 318, 293, 516, 281, 439, 264, 2227, 11, 51099], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1925, "seek": 490356, "start": 4919.240000000001, "end": 4920.700000000001, "text": " underscore backward.", "tokens": [51149, 37556, 23897, 13, 51222], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1926, "seek": 490356, "start": 4922.18, "end": 4924.46, "text": " And that should be it.", "tokens": [51296, 400, 300, 820, 312, 309, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1927, "seek": 490356, "start": 4924.820000000001, "end": 4926.46, "text": " So save.", "tokens": [51428, 407, 3155, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1928, "seek": 490356, "start": 4927.700000000001, "end": 4928.72, "text": " Come down here.", "tokens": [51572, 2492, 760, 510, 13, 51623], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1929, "seek": 490356, "start": 4929.34, "end": 4930.0, "text": " We define.", "tokens": [51654, 492, 6964, 13, 51687], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1930, "seek": 490356, "start": 4931.0, "end": 4932.34, "text": " Okay, all the grads are zero.", "tokens": [51737, 1033, 11, 439, 264, 2771, 82, 366, 4018, 13, 51804], "temperature": 0.0, "avg_logprob": -0.2671766744076627, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.00390629842877388}, {"id": 1931, "seek": 493356, "start": 4933.56, "end": 4936.52, "text": " And now what we can do is odot backward without the underscore.", "tokens": [50365, 400, 586, 437, 321, 393, 360, 307, 3611, 310, 23897, 1553, 264, 37556, 13, 50513], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1932, "seek": 493356, "start": 4937.4800000000005, "end": 4942.0, "text": " And there we go.", "tokens": [50561, 400, 456, 321, 352, 13, 50787], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1933, "seek": 493356, "start": 4942.900000000001, "end": 4945.04, "text": " And that's backpropagation.", "tokens": [50832, 400, 300, 311, 646, 79, 1513, 559, 399, 13, 50939], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1934, "seek": 493356, "start": 4946.42, "end": 4947.580000000001, "text": " Place for one neuron.", "tokens": [51008, 13637, 337, 472, 34090, 13, 51066], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1935, "seek": 493356, "start": 4948.54, "end": 4950.700000000001, "text": " Now we shouldn't be too happy with ourselves, actually,", "tokens": [51114, 823, 321, 4659, 380, 312, 886, 2055, 365, 4175, 11, 767, 11, 51222], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1936, "seek": 493356, "start": 4950.700000000001, "end": 4952.700000000001, "text": " because we have a bad bug.", "tokens": [51222, 570, 321, 362, 257, 1578, 7426, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1937, "seek": 493356, "start": 4953.34, "end": 4955.06, "text": " And we have not surfaced the bug", "tokens": [51354, 400, 321, 362, 406, 9684, 3839, 264, 7426, 51440], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1938, "seek": 493356, "start": 4955.06, "end": 4958.780000000001, "text": " because of some specific conditions that we have to think about right now.", "tokens": [51440, 570, 295, 512, 2685, 4487, 300, 321, 362, 281, 519, 466, 558, 586, 13, 51626], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1939, "seek": 493356, "start": 4959.700000000001, "end": 4962.4400000000005, "text": " So here's the simplest case that shows the bug.", "tokens": [51672, 407, 510, 311, 264, 22811, 1389, 300, 3110, 264, 7426, 13, 51809], "temperature": 0.0, "avg_logprob": -0.2642917266258827, "compression_ratio": 1.6255506607929515, "no_speech_prob": 0.00024564159684814513}, {"id": 1940, "seek": 496356, "start": 4963.56, "end": 4965.8, "text": " Say I create a single node A,", "tokens": [50365, 6463, 286, 1884, 257, 2167, 9984, 316, 11, 50477], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1941, "seek": 496356, "start": 4966.160000000001, "end": 4969.9800000000005, "text": " and then I create a B that is A plus A.", "tokens": [50495, 293, 550, 286, 1884, 257, 363, 300, 307, 316, 1804, 316, 13, 50686], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1942, "seek": 496356, "start": 4971.46, "end": 4972.4400000000005, "text": " And then I call backward.", "tokens": [50760, 400, 550, 286, 818, 23897, 13, 50809], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1943, "seek": 496356, "start": 4974.740000000001, "end": 4976.780000000001, "text": " So what's going to happen is A is three,", "tokens": [50924, 407, 437, 311, 516, 281, 1051, 307, 316, 307, 1045, 11, 51026], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1944, "seek": 496356, "start": 4977.280000000001, "end": 4979.120000000001, "text": " and then B is A plus A.", "tokens": [51051, 293, 550, 363, 307, 316, 1804, 316, 13, 51143], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1945, "seek": 496356, "start": 4979.34, "end": 4981.64, "text": " So there's two arrows on top of each other here.", "tokens": [51154, 407, 456, 311, 732, 19669, 322, 1192, 295, 1184, 661, 510, 13, 51269], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1946, "seek": 496356, "start": 4983.660000000001, "end": 4986.320000000001, "text": " Then we can see that B is, of course, the forward pass works.", "tokens": [51370, 1396, 321, 393, 536, 300, 363, 307, 11, 295, 1164, 11, 264, 2128, 1320, 1985, 13, 51503], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1947, "seek": 496356, "start": 4986.780000000001, "end": 4989.240000000001, "text": " B is just A plus A, which is six.", "tokens": [51526, 363, 307, 445, 316, 1804, 316, 11, 597, 307, 2309, 13, 51649], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1948, "seek": 496356, "start": 4989.240000000001, "end": 4992.1, "text": " But the gradient here is not actually correct.", "tokens": [51649, 583, 264, 16235, 510, 307, 406, 767, 3006, 13, 51792], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1949, "seek": 496356, "start": 4992.580000000001, "end": 4993.54, "text": " That we calculated.", "tokens": [51816, 663, 321, 15598, 13, 51864], "temperature": 0.4, "avg_logprob": -0.2974481421001887, "compression_ratio": 1.6832579185520362, "no_speech_prob": 0.0007627365412190557}, {"id": 1950, "seek": 499356, "start": 4993.56, "end": 4994.160000000001, "text": " We can calculate it automatically.", "tokens": [50365, 492, 393, 8873, 309, 6772, 13, 50395], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1951, "seek": 499356, "start": 4995.740000000001, "end": 5002.160000000001, "text": " And that's because, of course, just doing calculus in your head,", "tokens": [50474, 400, 300, 311, 570, 11, 295, 1164, 11, 445, 884, 33400, 294, 428, 1378, 11, 50795], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1952, "seek": 499356, "start": 5002.54, "end": 5005.9400000000005, "text": " the derivative of B with respect to A should be two.", "tokens": [50814, 264, 13760, 295, 363, 365, 3104, 281, 316, 820, 312, 732, 13, 50984], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1953, "seek": 499356, "start": 5007.42, "end": 5008.240000000001, "text": " One plus one.", "tokens": [51058, 1485, 1804, 472, 13, 51099], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1954, "seek": 499356, "start": 5008.88, "end": 5009.580000000001, "text": " It's not one.", "tokens": [51131, 467, 311, 406, 472, 13, 51166], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1955, "seek": 499356, "start": 5010.9400000000005, "end": 5012.320000000001, "text": " Intuitively, what's happening here, right?", "tokens": [51234, 5681, 1983, 3413, 11, 437, 311, 2737, 510, 11, 558, 30, 51303], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1956, "seek": 499356, "start": 5012.38, "end": 5015.84, "text": " So B is the result of A plus A, and then we call backward on it.", "tokens": [51306, 407, 363, 307, 264, 1874, 295, 316, 1804, 316, 11, 293, 550, 321, 818, 23897, 322, 309, 13, 51479], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1957, "seek": 499356, "start": 5016.4400000000005, "end": 5019.200000000001, "text": " So let's go up and see what that does.", "tokens": [51509, 407, 718, 311, 352, 493, 293, 536, 437, 300, 775, 13, 51647], "temperature": 0.0, "avg_logprob": -0.24523609816425979, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.0036051457282155752}, {"id": 1958, "seek": 502356, "start": 5023.56, "end": 5026.68, "text": " B is the result of addition, so out as B.", "tokens": [50365, 363, 307, 264, 1874, 295, 4500, 11, 370, 484, 382, 363, 13, 50521], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1959, "seek": 502356, "start": 5028.02, "end": 5034.0, "text": " And then when we call backward, what happened is self.grad was set to one,", "tokens": [50588, 400, 550, 562, 321, 818, 23897, 11, 437, 2011, 307, 2698, 13, 7165, 390, 992, 281, 472, 11, 50887], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1960, "seek": 502356, "start": 5034.56, "end": 5036.54, "text": " and then other.grad was set to one.", "tokens": [50915, 293, 550, 661, 13, 7165, 390, 992, 281, 472, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1961, "seek": 502356, "start": 5037.280000000001, "end": 5042.740000000001, "text": " But because we're doing A plus A, self and other are actually the exact same object.", "tokens": [51051, 583, 570, 321, 434, 884, 316, 1804, 316, 11, 2698, 293, 661, 366, 767, 264, 1900, 912, 2657, 13, 51324], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1962, "seek": 502356, "start": 5043.42, "end": 5045.660000000001, "text": " So we are overriding the gradient.", "tokens": [51358, 407, 321, 366, 670, 81, 2819, 264, 16235, 13, 51470], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1963, "seek": 502356, "start": 5045.84, "end": 5049.160000000001, "text": " We are setting it to one, and then we are setting it again to one.", "tokens": [51479, 492, 366, 3287, 309, 281, 472, 11, 293, 550, 321, 366, 3287, 309, 797, 281, 472, 13, 51645], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1964, "seek": 502356, "start": 5049.5, "end": 5052.320000000001, "text": " And that's why it stays at one.", "tokens": [51662, 400, 300, 311, 983, 309, 10834, 412, 472, 13, 51803], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1965, "seek": 502356, "start": 5052.580000000001, "end": 5053.54, "text": " So that's a good thing.", "tokens": [51816, 407, 300, 311, 257, 665, 551, 13, 51864], "temperature": 0.0, "avg_logprob": -0.3004534424853926, "compression_ratio": 1.7954545454545454, "no_speech_prob": 0.0006612161523662508}, {"id": 1966, "seek": 505354, "start": 5054.54, "end": 5058.0, "text": " There's another way to see this in a little bit more complicated expression.", "tokens": [50415, 821, 311, 1071, 636, 281, 536, 341, 294, 257, 707, 857, 544, 6179, 6114, 13, 50588], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1967, "seek": 505354, "start": 5061.34, "end": 5064.66, "text": " So here we have A and B.", "tokens": [50755, 407, 510, 321, 362, 316, 293, 363, 13, 50921], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1968, "seek": 505354, "start": 5065.92, "end": 5069.32, "text": " And then D will be the multiplication of the two,", "tokens": [50984, 400, 550, 413, 486, 312, 264, 27290, 295, 264, 732, 11, 51154], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1969, "seek": 505354, "start": 5069.62, "end": 5071.24, "text": " and E will be the addition of the two.", "tokens": [51169, 293, 462, 486, 312, 264, 4500, 295, 264, 732, 13, 51250], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1970, "seek": 505354, "start": 5072.14, "end": 5074.8, "text": " And then we multiply E times D to get F.", "tokens": [51295, 400, 550, 321, 12972, 462, 1413, 413, 281, 483, 479, 13, 51428], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1971, "seek": 505354, "start": 5075.26, "end": 5076.54, "text": " And then we call F dot backward.", "tokens": [51451, 400, 550, 321, 818, 479, 5893, 23897, 13, 51515], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1972, "seek": 505354, "start": 5077.66, "end": 5080.04, "text": " And these gradients, if you check, will be incorrect.", "tokens": [51571, 400, 613, 2771, 2448, 11, 498, 291, 1520, 11, 486, 312, 18424, 13, 51690], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1973, "seek": 505354, "start": 5080.6, "end": 5082.88, "text": " So fundamentally what's happening here, again,", "tokens": [51718, 407, 17879, 437, 311, 2737, 510, 11, 797, 11, 51832], "temperature": 0.0, "avg_logprob": -0.19567798873753223, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.0003549529064912349}, {"id": 1974, "seek": 508288, "start": 5082.88, "end": 5088.66, "text": " is basically we're going to see an issue any time we use a variable more than once.", "tokens": [50365, 307, 1936, 321, 434, 516, 281, 536, 364, 2734, 604, 565, 321, 764, 257, 7006, 544, 813, 1564, 13, 50654], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1975, "seek": 508288, "start": 5089.18, "end": 5093.06, "text": " Until now, in these expressions above, every variable is used exactly once.", "tokens": [50680, 9088, 586, 11, 294, 613, 15277, 3673, 11, 633, 7006, 307, 1143, 2293, 1564, 13, 50874], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1976, "seek": 508288, "start": 5093.16, "end": 5094.16, "text": " So we didn't see the issue.", "tokens": [50879, 407, 321, 994, 380, 536, 264, 2734, 13, 50929], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1977, "seek": 508288, "start": 5094.92, "end": 5097.0, "text": " But here, if a variable is used more than once,", "tokens": [50967, 583, 510, 11, 498, 257, 7006, 307, 1143, 544, 813, 1564, 11, 51071], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1978, "seek": 508288, "start": 5097.1, "end": 5098.58, "text": " what's going to happen during backward pass?", "tokens": [51076, 437, 311, 516, 281, 1051, 1830, 23897, 1320, 30, 51150], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1979, "seek": 508288, "start": 5099.1, "end": 5101.68, "text": " We're back-propagating from F to E to D.", "tokens": [51176, 492, 434, 646, 12, 79, 1513, 559, 990, 490, 479, 281, 462, 281, 413, 13, 51305], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1980, "seek": 508288, "start": 5101.86, "end": 5102.4800000000005, "text": " So far, so good.", "tokens": [51314, 407, 1400, 11, 370, 665, 13, 51345], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1981, "seek": 508288, "start": 5102.72, "end": 5107.08, "text": " But now E calls it backward, and it deposits its gradients to A and B.", "tokens": [51357, 583, 586, 462, 5498, 309, 23897, 11, 293, 309, 30958, 1080, 2771, 2448, 281, 316, 293, 363, 13, 51575], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1982, "seek": 508288, "start": 5107.42, "end": 5110.02, "text": " But then we come back to D and call backward,", "tokens": [51592, 583, 550, 321, 808, 646, 281, 413, 293, 818, 23897, 11, 51722], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1983, "seek": 508288, "start": 5110.02, "end": 5112.86, "text": " and it overwrites those gradients at A and B.", "tokens": [51722, 293, 309, 670, 86, 30931, 729, 2771, 2448, 412, 316, 293, 363, 13, 51864], "temperature": 0.0, "avg_logprob": -0.139992889092893, "compression_ratio": 1.815217391304348, "no_speech_prob": 0.00021629605907946825}, {"id": 1984, "seek": 511288, "start": 5112.88, "end": 5116.1, "text": " So that's obviously a problem.", "tokens": [50365, 407, 300, 311, 2745, 257, 1154, 13, 50526], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1985, "seek": 511288, "start": 5117.3, "end": 5122.26, "text": " And the solution here, if you look at the multivariate case of the chain rule", "tokens": [50586, 400, 264, 3827, 510, 11, 498, 291, 574, 412, 264, 2120, 592, 3504, 473, 1389, 295, 264, 5021, 4978, 50834], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1986, "seek": 511288, "start": 5122.26, "end": 5123.42, "text": " and its generalization there,", "tokens": [50834, 293, 1080, 2674, 2144, 456, 11, 50892], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1987, "seek": 511288, "start": 5123.78, "end": 5127.88, "text": " the solution there is basically that we have to accumulate these gradients.", "tokens": [50910, 264, 3827, 456, 307, 1936, 300, 321, 362, 281, 33384, 613, 2771, 2448, 13, 51115], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1988, "seek": 511288, "start": 5128.02, "end": 5129.02, "text": " These gradients add.", "tokens": [51122, 1981, 2771, 2448, 909, 13, 51172], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1989, "seek": 511288, "start": 5130.2, "end": 5132.82, "text": " And so instead of setting those gradients,", "tokens": [51231, 400, 370, 2602, 295, 3287, 729, 2771, 2448, 11, 51362], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1990, "seek": 511288, "start": 5133.78, "end": 5136.26, "text": " we can simply do plus equals.", "tokens": [51410, 321, 393, 2935, 360, 1804, 6915, 13, 51534], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1991, "seek": 511288, "start": 5136.68, "end": 5138.38, "text": " We need to accumulate those gradients.", "tokens": [51555, 492, 643, 281, 33384, 729, 2771, 2448, 13, 51640], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1992, "seek": 511288, "start": 5138.88, "end": 5142.56, "text": " Plus equals, plus equals, plus equals.", "tokens": [51665, 7721, 6915, 11, 1804, 6915, 11, 1804, 6915, 13, 51849], "temperature": 0.0, "avg_logprob": -0.2084995566062557, "compression_ratio": 1.820754716981132, "no_speech_prob": 0.0013936856994405389}, {"id": 1993, "seek": 514288, "start": 5142.88, "end": 5149.88, "text": " And this will be okay, remember, because we are initializing them at zero.", "tokens": [50365, 400, 341, 486, 312, 1392, 11, 1604, 11, 570, 321, 366, 5883, 3319, 552, 412, 4018, 13, 50715], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1994, "seek": 514288, "start": 5150.04, "end": 5158.1, "text": " So they start at zero, and then any contribution that flows backwards will simply add.", "tokens": [50723, 407, 436, 722, 412, 4018, 11, 293, 550, 604, 13150, 300, 12867, 12204, 486, 2935, 909, 13, 51126], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1995, "seek": 514288, "start": 5158.8, "end": 5165.5, "text": " So now if we redefine this one, because the plus equals, this now works.", "tokens": [51161, 407, 586, 498, 321, 38818, 533, 341, 472, 11, 570, 264, 1804, 6915, 11, 341, 586, 1985, 13, 51496], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1996, "seek": 514288, "start": 5165.88, "end": 5169.22, "text": " Because A dot grad started at zero, and we called B dot backward,", "tokens": [51515, 1436, 316, 5893, 2771, 1409, 412, 4018, 11, 293, 321, 1219, 363, 5893, 23897, 11, 51682], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1997, "seek": 514288, "start": 5169.66, "end": 5172.46, "text": " we deposit one, and then we deposit one again.", "tokens": [51704, 321, 19107, 472, 11, 293, 550, 321, 19107, 472, 797, 13, 51844], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1998, "seek": 514288, "start": 5172.72, "end": 5172.86, "text": " And then we call B dot backward.", "tokens": [51857, 400, 550, 321, 818, 363, 5893, 23897, 13, 51864], "temperature": 0.0, "avg_logprob": -0.22996368408203124, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.001004021498374641}, {"id": 1999, "seek": 517286, "start": 5172.86, "end": 5174.28, "text": " And now this is two, which is correct.", "tokens": [50365, 400, 586, 341, 307, 732, 11, 597, 307, 3006, 13, 50436], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2000, "seek": 517286, "start": 5174.86, "end": 5177.9, "text": " And here, this will also work, and we'll get correct gradients.", "tokens": [50465, 400, 510, 11, 341, 486, 611, 589, 11, 293, 321, 603, 483, 3006, 2771, 2448, 13, 50617], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2001, "seek": 517286, "start": 5178.38, "end": 5182.0599999999995, "text": " Because when we call E dot backward, we will deposit the gradients from this branch,", "tokens": [50641, 1436, 562, 321, 818, 462, 5893, 23897, 11, 321, 486, 19107, 264, 2771, 2448, 490, 341, 9819, 11, 50825], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2002, "seek": 517286, "start": 5182.46, "end": 5186.48, "text": " and then when we get to D dot backward, it will deposit its own gradients.", "tokens": [50845, 293, 550, 562, 321, 483, 281, 413, 5893, 23897, 11, 309, 486, 19107, 1080, 1065, 2771, 2448, 13, 51046], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2003, "seek": 517286, "start": 5186.9, "end": 5189.58, "text": " And then those gradients simply add on top of each other.", "tokens": [51067, 400, 550, 729, 2771, 2448, 2935, 909, 322, 1192, 295, 1184, 661, 13, 51201], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2004, "seek": 517286, "start": 5190.12, "end": 5192.82, "text": " And so we just accumulate those gradients, and that fixes the issue.", "tokens": [51228, 400, 370, 321, 445, 33384, 729, 2771, 2448, 11, 293, 300, 32539, 264, 2734, 13, 51363], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2005, "seek": 517286, "start": 5193.44, "end": 5196.32, "text": " Okay, now before we move on, let me actually do a bit of cleanup here", "tokens": [51394, 1033, 11, 586, 949, 321, 1286, 322, 11, 718, 385, 767, 360, 257, 857, 295, 40991, 510, 51538], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2006, "seek": 517286, "start": 5196.32, "end": 5200.0, "text": " and delete some of this intermediate work.", "tokens": [51538, 293, 12097, 512, 295, 341, 19376, 589, 13, 51722], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2007, "seek": 517286, "start": 5200.719999999999, "end": 5202.62, "text": " So I'm not going to need any of this.", "tokens": [51758, 407, 286, 478, 406, 516, 281, 643, 604, 295, 341, 13, 51853], "temperature": 0.0, "avg_logprob": -0.11927626884146912, "compression_ratio": 1.8120805369127517, "no_speech_prob": 0.0007646458107046783}, {"id": 2008, "seek": 520262, "start": 5202.62, "end": 5204.0, "text": " Now that we've derived all of it.", "tokens": [50365, 823, 300, 321, 600, 18949, 439, 295, 309, 13, 50434], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2009, "seek": 520262, "start": 5205.46, "end": 5208.84, "text": " We are going to keep this, because I want to come back to it.", "tokens": [50507, 492, 366, 516, 281, 1066, 341, 11, 570, 286, 528, 281, 808, 646, 281, 309, 13, 50676], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2010, "seek": 520262, "start": 5209.64, "end": 5216.64, "text": " Delete the 10H, delete our modigating example, delete the step, delete this,", "tokens": [50716, 49452, 264, 1266, 39, 11, 12097, 527, 1072, 328, 990, 1365, 11, 12097, 264, 1823, 11, 12097, 341, 11, 51066], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2011, "seek": 520262, "start": 5216.96, "end": 5221.22, "text": " keep the code that draws, and then delete this example,", "tokens": [51082, 1066, 264, 3089, 300, 20045, 11, 293, 550, 12097, 341, 1365, 11, 51295], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2012, "seek": 520262, "start": 5221.84, "end": 5224.18, "text": " and leave behind only the definition of value.", "tokens": [51326, 293, 1856, 2261, 787, 264, 7123, 295, 2158, 13, 51443], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2013, "seek": 520262, "start": 5225.36, "end": 5228.8, "text": " And now let's come back to this non-linearity here that we implemented, the 10H.", "tokens": [51502, 400, 586, 718, 311, 808, 646, 281, 341, 2107, 12, 1889, 17409, 510, 300, 321, 12270, 11, 264, 1266, 39, 13, 51674], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2014, "seek": 520262, "start": 5229.0599999999995, "end": 5232.0599999999995, "text": " Now I told you that we could have broken down 10H", "tokens": [51687, 823, 286, 1907, 291, 300, 321, 727, 362, 5463, 760, 1266, 39, 51837], "temperature": 0.0, "avg_logprob": -0.18193050852993078, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.00360392639413476}, {"id": 2015, "seek": 523206, "start": 5232.06, "end": 5237.200000000001, "text": " into its explicit atoms in terms of other expressions if we had the exp function.", "tokens": [50365, 666, 1080, 13691, 16871, 294, 2115, 295, 661, 15277, 498, 321, 632, 264, 1278, 2445, 13, 50622], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2016, "seek": 523206, "start": 5237.88, "end": 5239.72, "text": " So if you remember, 10H is defined like this,", "tokens": [50656, 407, 498, 291, 1604, 11, 1266, 39, 307, 7642, 411, 341, 11, 50748], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2017, "seek": 523206, "start": 5240.14, "end": 5242.620000000001, "text": " and we chose to develop 10H as a single function,", "tokens": [50769, 293, 321, 5111, 281, 1499, 1266, 39, 382, 257, 2167, 2445, 11, 50893], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2018, "seek": 523206, "start": 5242.96, "end": 5245.080000000001, "text": " and we can do that because we know it's derivative,", "tokens": [50910, 293, 321, 393, 360, 300, 570, 321, 458, 309, 311, 13760, 11, 51016], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2019, "seek": 523206, "start": 5245.280000000001, "end": 5246.4400000000005, "text": " and we can backpropagate through it.", "tokens": [51026, 293, 321, 393, 646, 79, 1513, 559, 473, 807, 309, 13, 51084], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2020, "seek": 523206, "start": 5246.88, "end": 5250.740000000001, "text": " But we can also break down 10H into an expressiveness, a function of exp.", "tokens": [51106, 583, 321, 393, 611, 1821, 760, 1266, 39, 666, 364, 5109, 8477, 11, 257, 2445, 295, 1278, 13, 51299], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2021, "seek": 523206, "start": 5251.160000000001, "end": 5253.76, "text": " And I would like to do that now, because I want to prove to you", "tokens": [51320, 400, 286, 576, 411, 281, 360, 300, 586, 11, 570, 286, 528, 281, 7081, 281, 291, 51450], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2022, "seek": 523206, "start": 5253.76, "end": 5255.76, "text": " that you get all the same results and all the same gradients,", "tokens": [51450, 300, 291, 483, 439, 264, 912, 3542, 293, 439, 264, 912, 2771, 2448, 11, 51550], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2023, "seek": 523206, "start": 5256.3, "end": 5259.56, "text": " but also because it forces us to implement a few more expressions.", "tokens": [51577, 457, 611, 570, 309, 5874, 505, 281, 4445, 257, 1326, 544, 15277, 13, 51740], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2024, "seek": 523206, "start": 5259.56, "end": 5261.9400000000005, "text": " It forces us to do exponentiation,", "tokens": [51740, 467, 5874, 505, 281, 360, 37871, 6642, 11, 51859], "temperature": 0.0, "avg_logprob": -0.15058254416471992, "compression_ratio": 1.8501628664495113, "no_speech_prob": 0.001631945138797164}, {"id": 2025, "seek": 526206, "start": 5262.06, "end": 5265.160000000001, "text": " addition, subtraction, division, and things like that.", "tokens": [50365, 4500, 11, 16390, 313, 11, 10044, 11, 293, 721, 411, 300, 13, 50520], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2026, "seek": 526206, "start": 5265.160000000001, "end": 5267.660000000001, "text": " And I think it's a good exercise to go through a few more of these.", "tokens": [50520, 400, 286, 519, 309, 311, 257, 665, 5380, 281, 352, 807, 257, 1326, 544, 295, 613, 13, 50645], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2027, "seek": 526206, "start": 5268.160000000001, "end": 5271.360000000001, "text": " Okay, so let's scroll up to the definition of value.", "tokens": [50670, 1033, 11, 370, 718, 311, 11369, 493, 281, 264, 7123, 295, 2158, 13, 50830], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2028, "seek": 526206, "start": 5272.160000000001, "end": 5274.56, "text": " And here, one thing that we currently can't do is,", "tokens": [50870, 400, 510, 11, 472, 551, 300, 321, 4362, 393, 380, 360, 307, 11, 50990], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2029, "seek": 526206, "start": 5274.56, "end": 5277.56, "text": " we can do like a value of, say, 2.0.", "tokens": [50990, 321, 393, 360, 411, 257, 2158, 295, 11, 584, 11, 568, 13, 15, 13, 51140], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2030, "seek": 526206, "start": 5278.46, "end": 5282.360000000001, "text": " But we can't do, you know, here, for example, we want to add a constant 1.", "tokens": [51185, 583, 321, 393, 380, 360, 11, 291, 458, 11, 510, 11, 337, 1365, 11, 321, 528, 281, 909, 257, 5754, 502, 13, 51380], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2031, "seek": 526206, "start": 5282.56, "end": 5284.26, "text": " And we can't do something like this.", "tokens": [51390, 400, 321, 393, 380, 360, 746, 411, 341, 13, 51475], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2032, "seek": 526206, "start": 5285.26, "end": 5288.360000000001, "text": " And we can't do it because it says int object has no attribute data.", "tokens": [51525, 400, 321, 393, 380, 360, 309, 570, 309, 1619, 560, 2657, 575, 572, 19667, 1412, 13, 51680], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2033, "seek": 526206, "start": 5288.660000000001, "end": 5291.660000000001, "text": " That's because a plus 1 comes right here to add,", "tokens": [51695, 663, 311, 570, 257, 1804, 502, 1487, 558, 510, 281, 909, 11, 51845], "temperature": 0.0, "avg_logprob": -0.277964533591757, "compression_ratio": 1.7177700348432057, "no_speech_prob": 0.0005203436012379825}, {"id": 2034, "seek": 529206, "start": 5292.160000000001, "end": 5294.46, "text": " and then other is the integer 1.", "tokens": [50370, 293, 550, 661, 307, 264, 24922, 502, 13, 50485], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2035, "seek": 529206, "start": 5294.860000000001, "end": 5298.360000000001, "text": " And then here, Python is trying to access 1.data, and that's not a thing.", "tokens": [50505, 400, 550, 510, 11, 15329, 307, 1382, 281, 2105, 502, 13, 67, 3274, 11, 293, 300, 311, 406, 257, 551, 13, 50680], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2036, "seek": 529206, "start": 5298.76, "end": 5301.46, "text": " And that's because basically, 1 is not a value object,", "tokens": [50700, 400, 300, 311, 570, 1936, 11, 502, 307, 406, 257, 2158, 2657, 11, 50835], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2037, "seek": 529206, "start": 5301.46, "end": 5303.56, "text": " and we only have addition for value objects.", "tokens": [50835, 293, 321, 787, 362, 4500, 337, 2158, 6565, 13, 50940], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2038, "seek": 529206, "start": 5303.96, "end": 5307.76, "text": " So as a matter of convenience, so that we can create expressions like this", "tokens": [50960, 407, 382, 257, 1871, 295, 19283, 11, 370, 300, 321, 393, 1884, 15277, 411, 341, 51150], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2039, "seek": 529206, "start": 5307.76, "end": 5310.860000000001, "text": " and make them make sense, we can simply do something like this.", "tokens": [51150, 293, 652, 552, 652, 2020, 11, 321, 393, 2935, 360, 746, 411, 341, 13, 51305], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2040, "seek": 529206, "start": 5312.360000000001, "end": 5317.06, "text": " Basically, we let other alone if other is an instance of value.", "tokens": [51380, 8537, 11, 321, 718, 661, 3312, 498, 661, 307, 364, 5197, 295, 2158, 13, 51615], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2041, "seek": 529206, "start": 5317.26, "end": 5319.860000000001, "text": " But if it's not an instance of value, we're going to assume that it's a number,", "tokens": [51625, 583, 498, 309, 311, 406, 364, 5197, 295, 2158, 11, 321, 434, 516, 281, 6552, 300, 309, 311, 257, 1230, 11, 51755], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2042, "seek": 529206, "start": 5319.860000000001, "end": 5321.860000000001, "text": " like an integer or a float, and we're going to simply", "tokens": [51755, 411, 364, 24922, 420, 257, 15706, 11, 293, 321, 434, 516, 281, 2935, 51855], "temperature": 0.0, "avg_logprob": -0.11792895600602434, "compression_ratio": 1.9187279151943464, "no_speech_prob": 0.00025558401830494404}, {"id": 2043, "seek": 532186, "start": 5321.86, "end": 5323.86, "text": " wrap it in value.", "tokens": [50365, 7019, 309, 294, 2158, 13, 50465], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2044, "seek": 532186, "start": 5324.16, "end": 5326.0599999999995, "text": " And then other will just become value of other,", "tokens": [50480, 400, 550, 661, 486, 445, 1813, 2158, 295, 661, 11, 50575], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2045, "seek": 532186, "start": 5326.0599999999995, "end": 5328.96, "text": " and then other will have a data attribute, and this should work.", "tokens": [50575, 293, 550, 661, 486, 362, 257, 1412, 19667, 11, 293, 341, 820, 589, 13, 50720], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2046, "seek": 532186, "start": 5329.36, "end": 5332.86, "text": " So if I just say this, redefine value, then this should work.", "tokens": [50740, 407, 498, 286, 445, 584, 341, 11, 38818, 533, 2158, 11, 550, 341, 820, 589, 13, 50915], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2047, "seek": 532186, "start": 5333.36, "end": 5333.86, "text": " There we go.", "tokens": [50940, 821, 321, 352, 13, 50965], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2048, "seek": 532186, "start": 5334.36, "end": 5336.5599999999995, "text": " Okay, now let's do the exact same thing for multiply,", "tokens": [50990, 1033, 11, 586, 718, 311, 360, 264, 1900, 912, 551, 337, 12972, 11, 51100], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2049, "seek": 532186, "start": 5336.66, "end": 5341.0599999999995, "text": " because we can't do something like this, again, for the exact same reason.", "tokens": [51105, 570, 321, 393, 380, 360, 746, 411, 341, 11, 797, 11, 337, 264, 1900, 912, 1778, 13, 51325], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2050, "seek": 532186, "start": 5341.36, "end": 5345.66, "text": " So we just have to go to mol, and if other is not a value,", "tokens": [51340, 407, 321, 445, 362, 281, 352, 281, 8015, 11, 293, 498, 661, 307, 406, 257, 2158, 11, 51555], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2051, "seek": 532186, "start": 5345.66, "end": 5347.16, "text": " then let's wrap it in value.", "tokens": [51555, 550, 718, 311, 7019, 309, 294, 2158, 13, 51630], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2052, "seek": 532186, "start": 5347.66, "end": 5349.96, "text": " Let's redefine value, and now this works.", "tokens": [51655, 961, 311, 38818, 533, 2158, 11, 293, 586, 341, 1985, 13, 51770], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2053, "seek": 532186, "start": 5350.66, "end": 5351.66, "text": " Now, here's a kind of, unfortunately,", "tokens": [51805, 823, 11, 510, 311, 257, 733, 295, 11, 7015, 11, 51855], "temperature": 0.0, "avg_logprob": -0.1615254830994062, "compression_ratio": 1.916030534351145, "no_speech_prob": 0.0003561886551324278}, {"id": 2054, "seek": 535166, "start": 5351.66, "end": 5355.76, "text": " and not obvious part, a times two works, we saw that,", "tokens": [50365, 293, 406, 6322, 644, 11, 257, 1413, 732, 1985, 11, 321, 1866, 300, 11, 50570], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2055, "seek": 535166, "start": 5355.96, "end": 5358.5599999999995, "text": " but two times a, is that going to work?", "tokens": [50580, 457, 732, 1413, 257, 11, 307, 300, 516, 281, 589, 30, 50710], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2056, "seek": 535166, "start": 5359.86, "end": 5360.96, "text": " You'd expect it to, right?", "tokens": [50775, 509, 1116, 2066, 309, 281, 11, 558, 30, 50830], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2057, "seek": 535166, "start": 5361.36, "end": 5362.76, "text": " But actually, it will not.", "tokens": [50850, 583, 767, 11, 309, 486, 406, 13, 50920], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2058, "seek": 535166, "start": 5363.16, "end": 5365.76, "text": " And the reason it won't is because Python doesn't know,", "tokens": [50940, 400, 264, 1778, 309, 1582, 380, 307, 570, 15329, 1177, 380, 458, 11, 51070], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2059, "seek": 535166, "start": 5366.26, "end": 5370.86, "text": " like when you do a times two, basically, so a times two,", "tokens": [51095, 411, 562, 291, 360, 257, 1413, 732, 11, 1936, 11, 370, 257, 1413, 732, 11, 51325], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2060, "seek": 535166, "start": 5370.96, "end": 5375.76, "text": " Python will go and it will basically do something like a dot mol of two.", "tokens": [51330, 15329, 486, 352, 293, 309, 486, 1936, 360, 746, 411, 257, 5893, 8015, 295, 732, 13, 51570], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2061, "seek": 535166, "start": 5375.86, "end": 5377.0599999999995, "text": " That's basically what it will call.", "tokens": [51575, 663, 311, 1936, 437, 309, 486, 818, 13, 51635], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2062, "seek": 535166, "start": 5377.26, "end": 5381.46, "text": " But to it, two times a is the same as two dot mol of a.", "tokens": [51645, 583, 281, 309, 11, 732, 1413, 257, 307, 264, 912, 382, 732, 5893, 8015, 295, 257, 13, 51855], "temperature": 0.0, "avg_logprob": -0.16296282410621643, "compression_ratio": 1.8085106382978724, "no_speech_prob": 0.00024810669128783047}, {"id": 2063, "seek": 538166, "start": 5381.86, "end": 5385.46, "text": " And it doesn't, two can't multiply value.", "tokens": [50375, 400, 309, 1177, 380, 11, 732, 393, 380, 12972, 2158, 13, 50555], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2064, "seek": 538166, "start": 5385.5599999999995, "end": 5387.0599999999995, "text": " And so it's really confused about that.", "tokens": [50560, 400, 370, 309, 311, 534, 9019, 466, 300, 13, 50635], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2065, "seek": 538166, "start": 5387.5599999999995, "end": 5391.46, "text": " So instead, what happens is in Python, the way this works is you are free to define", "tokens": [50660, 407, 2602, 11, 437, 2314, 307, 294, 15329, 11, 264, 636, 341, 1985, 307, 291, 366, 1737, 281, 6964, 50855], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2066, "seek": 538166, "start": 5391.86, "end": 5393.46, "text": " something called the rmol.", "tokens": [50875, 746, 1219, 264, 367, 76, 401, 13, 50955], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2067, "seek": 538166, "start": 5394.46, "end": 5397.26, "text": " And rmol is kind of like a fallback.", "tokens": [51005, 400, 367, 76, 401, 307, 733, 295, 411, 257, 2100, 3207, 13, 51145], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2068, "seek": 538166, "start": 5397.36, "end": 5403.66, "text": " So if Python can't do two times a, it will check if by any chance,", "tokens": [51150, 407, 498, 15329, 393, 380, 360, 732, 1413, 257, 11, 309, 486, 1520, 498, 538, 604, 2931, 11, 51465], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2069, "seek": 538166, "start": 5403.86, "end": 5407.66, "text": " a knows how to multiply two, and that will be called into rmol.", "tokens": [51475, 257, 3255, 577, 281, 12972, 732, 11, 293, 300, 486, 312, 1219, 666, 367, 76, 401, 13, 51665], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2070, "seek": 538166, "start": 5408.86, "end": 5411.26, "text": " So because Python can't do two times a,", "tokens": [51725, 407, 570, 15329, 393, 380, 360, 732, 1413, 257, 11, 51845], "temperature": 0.0, "avg_logprob": -0.18680679003397624, "compression_ratio": 1.694915254237288, "no_speech_prob": 0.00036276396713219583}, {"id": 2071, "seek": 541166, "start": 5411.66, "end": 5413.5599999999995, "text": " it will check, is there an rmol in value?", "tokens": [50365, 309, 486, 1520, 11, 307, 456, 364, 367, 76, 401, 294, 2158, 30, 50460], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2072, "seek": 541166, "start": 5413.86, "end": 5416.36, "text": " And because there is, it will now call that.", "tokens": [50475, 400, 570, 456, 307, 11, 309, 486, 586, 818, 300, 13, 50600], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2073, "seek": 541166, "start": 5417.0599999999995, "end": 5420.36, "text": " And what we'll do here is we will swap the order of the operands.", "tokens": [50635, 400, 437, 321, 603, 360, 510, 307, 321, 486, 18135, 264, 1668, 295, 264, 2208, 2967, 13, 50800], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2074, "seek": 541166, "start": 5420.76, "end": 5423.36, "text": " So basically, two times a will redirect to rmol,", "tokens": [50820, 407, 1936, 11, 732, 1413, 257, 486, 29066, 281, 367, 76, 401, 11, 50950], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2075, "seek": 541166, "start": 5423.66, "end": 5425.76, "text": " and rmol will basically call a times two.", "tokens": [50965, 293, 367, 76, 401, 486, 1936, 818, 257, 1413, 732, 13, 51070], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2076, "seek": 541166, "start": 5426.36, "end": 5427.5599999999995, "text": " And that's how that will work.", "tokens": [51100, 400, 300, 311, 577, 300, 486, 589, 13, 51160], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2077, "seek": 541166, "start": 5428.5599999999995, "end": 5432.36, "text": " So redefining that with rmol, two times a becomes four.", "tokens": [51210, 407, 38818, 1760, 300, 365, 367, 76, 401, 11, 732, 1413, 257, 3643, 1451, 13, 51400], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2078, "seek": 541166, "start": 5432.86, "end": 5435.0599999999995, "text": " Okay, now looking at the other elements that we still need,", "tokens": [51425, 1033, 11, 586, 1237, 412, 264, 661, 4959, 300, 321, 920, 643, 11, 51535], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2079, "seek": 541166, "start": 5435.16, "end": 5436.96, "text": " we need to know how to exponentiate and how to divide.", "tokens": [51540, 321, 643, 281, 458, 577, 281, 37871, 13024, 293, 577, 281, 9845, 13, 51630], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2080, "seek": 541166, "start": 5437.46, "end": 5440.16, "text": " So let's first do the exponentiation part.", "tokens": [51655, 407, 718, 311, 700, 360, 264, 37871, 6642, 644, 13, 51790], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2081, "seek": 541166, "start": 5440.5599999999995, "end": 5441.46, "text": " We're going to introduce", "tokens": [51810, 492, 434, 516, 281, 5366, 51855], "temperature": 0.0, "avg_logprob": -0.13711454993800112, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.0006970874965190887}, {"id": 2082, "seek": 544166, "start": 5441.96, "end": 5444.36, "text": " a single function exp here.", "tokens": [50380, 257, 2167, 2445, 1278, 510, 13, 50500], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2083, "seek": 544166, "start": 5445.16, "end": 5449.86, "text": " And exp is going to mirror 10h in the sense that it's a single function", "tokens": [50540, 400, 1278, 307, 516, 281, 8013, 1266, 71, 294, 264, 2020, 300, 309, 311, 257, 2167, 2445, 50775], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2084, "seek": 544166, "start": 5449.86, "end": 5452.66, "text": " that transforms a single scalar value and outputs a single scalar value.", "tokens": [50775, 300, 35592, 257, 2167, 39684, 2158, 293, 23930, 257, 2167, 39684, 2158, 13, 50915], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2085, "seek": 544166, "start": 5453.26, "end": 5455.26, "text": " So we pop out the Python number.", "tokens": [50945, 407, 321, 1665, 484, 264, 15329, 1230, 13, 51045], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2086, "seek": 544166, "start": 5455.76, "end": 5458.86, "text": " We use math.exp to exponentiate it, create a new value object,", "tokens": [51070, 492, 764, 5221, 13, 15952, 281, 37871, 13024, 309, 11, 1884, 257, 777, 2158, 2657, 11, 51225], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2087, "seek": 544166, "start": 5459.36, "end": 5460.5599999999995, "text": " everything that we've seen before.", "tokens": [51250, 1203, 300, 321, 600, 1612, 949, 13, 51310], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2088, "seek": 544166, "start": 5461.0599999999995, "end": 5464.16, "text": " The tricky part, of course, is how do you backpropagate through e to the x?", "tokens": [51335, 440, 12414, 644, 11, 295, 1164, 11, 307, 577, 360, 291, 646, 79, 1513, 559, 473, 807, 308, 281, 264, 2031, 30, 51490], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2089, "seek": 544166, "start": 5464.86, "end": 5470.16, "text": " And so here you can potentially pause the video and think about what should go here.", "tokens": [51525, 400, 370, 510, 291, 393, 7263, 10465, 264, 960, 293, 519, 466, 437, 820, 352, 510, 13, 51790], "temperature": 0.0, "avg_logprob": -0.17014740734565548, "compression_ratio": 1.6872727272727273, "no_speech_prob": 0.0003202078223694116}, {"id": 2090, "seek": 547166, "start": 5471.66, "end": 5478.26, "text": " Okay, so basically, we need to know what is the local derivative of e to the x.", "tokens": [50365, 1033, 11, 370, 1936, 11, 321, 643, 281, 458, 437, 307, 264, 2654, 13760, 295, 308, 281, 264, 2031, 13, 50695], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2091, "seek": 547166, "start": 5478.5599999999995, "end": 5482.0599999999995, "text": " So d by dx of e to the x is famously just e to the x.", "tokens": [50710, 407, 274, 538, 30017, 295, 308, 281, 264, 2031, 307, 34360, 445, 308, 281, 264, 2031, 13, 50885], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2092, "seek": 547166, "start": 5482.36, "end": 5486.36, "text": " And we've already just calculated e to the x, and it's inside out.data.", "tokens": [50900, 400, 321, 600, 1217, 445, 15598, 308, 281, 264, 2031, 11, 293, 309, 311, 1854, 484, 13, 67, 3274, 13, 51100], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2093, "seek": 547166, "start": 5486.66, "end": 5491.26, "text": " So we can do out.data times and out.grad, that's the chain rule.", "tokens": [51115, 407, 321, 393, 360, 484, 13, 67, 3274, 1413, 293, 484, 13, 7165, 11, 300, 311, 264, 5021, 4978, 13, 51345], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2094, "seek": 547166, "start": 5492.16, "end": 5494.66, "text": " So we're just chaining on to the current running grad.", "tokens": [51390, 407, 321, 434, 445, 417, 3686, 322, 281, 264, 2190, 2614, 2771, 13, 51515], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2095, "seek": 547166, "start": 5495.36, "end": 5497.16, "text": " And this is what the expression looks like.", "tokens": [51550, 400, 341, 307, 437, 264, 6114, 1542, 411, 13, 51640], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2096, "seek": 547166, "start": 5497.36, "end": 5499.76, "text": " It looks a little confusing, but this is what it is.", "tokens": [51650, 467, 1542, 257, 707, 13181, 11, 457, 341, 307, 437, 309, 307, 13, 51770], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2097, "seek": 547166, "start": 5499.76, "end": 5501.0599999999995, "text": " And that's the exponentiation.", "tokens": [51770, 400, 300, 311, 264, 37871, 6642, 13, 51835], "temperature": 0.0, "avg_logprob": -0.16991362852208755, "compression_ratio": 1.7976190476190477, "no_speech_prob": 0.00036235686275176704}, {"id": 2098, "seek": 550166, "start": 5501.66, "end": 5504.96, "text": " So redefining, we should now be able to call a.exp.", "tokens": [50365, 407, 38818, 1760, 11, 321, 820, 586, 312, 1075, 281, 818, 257, 13, 15952, 13, 50530], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2099, "seek": 550166, "start": 5505.46, "end": 5508.16, "text": " And hopefully the backward pass works as well.", "tokens": [50555, 400, 4696, 264, 23897, 1320, 1985, 382, 731, 13, 50690], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2100, "seek": 550166, "start": 5508.36, "end": 5511.66, "text": " Okay, and the last thing we'd like to do, of course, is we'd like to be able to divide.", "tokens": [50700, 1033, 11, 293, 264, 1036, 551, 321, 1116, 411, 281, 360, 11, 295, 1164, 11, 307, 321, 1116, 411, 281, 312, 1075, 281, 9845, 13, 50865], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2101, "seek": 550166, "start": 5512.36, "end": 5516.0599999999995, "text": " Now, I actually will implement something slightly more powerful than division,", "tokens": [50900, 823, 11, 286, 767, 486, 4445, 746, 4748, 544, 4005, 813, 10044, 11, 51085], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2102, "seek": 550166, "start": 5516.0599999999995, "end": 5519.5599999999995, "text": " because division is just a special case of something a bit more powerful.", "tokens": [51085, 570, 10044, 307, 445, 257, 2121, 1389, 295, 746, 257, 857, 544, 4005, 13, 51260], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2103, "seek": 550166, "start": 5520.16, "end": 5526.96, "text": " So in particular, just by rearranging, if we have some kind of a b equals value of 4.0 here,", "tokens": [51290, 407, 294, 1729, 11, 445, 538, 29875, 9741, 11, 498, 321, 362, 512, 733, 295, 257, 272, 6915, 2158, 295, 1017, 13, 15, 510, 11, 51630], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2104, "seek": 550166, "start": 5527.0599999999995, "end": 5530.86, "text": " we'd like to basically be able to do a divide b, and we'd like this to be able to give us 0.5.", "tokens": [51635, 321, 1116, 411, 281, 1936, 312, 1075, 281, 360, 257, 9845, 272, 11, 293, 321, 1116, 411, 341, 281, 312, 1075, 281, 976, 505, 1958, 13, 20, 13, 51825], "temperature": 0.0, "avg_logprob": -0.13373067643907335, "compression_ratio": 1.7684563758389262, "no_speech_prob": 0.00013221468543633819}, {"id": 2105, "seek": 553166, "start": 5531.66, "end": 5534.96, "text": " Now, division actually can be reshuffled as follows.", "tokens": [50365, 823, 11, 10044, 767, 393, 312, 725, 71, 33974, 382, 10002, 13, 50530], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2106, "seek": 553166, "start": 5535.46, "end": 5539.36, "text": " If we have a divide b, that's actually the same as a multiplying 1 over b.", "tokens": [50555, 759, 321, 362, 257, 9845, 272, 11, 300, 311, 767, 264, 912, 382, 257, 30955, 502, 670, 272, 13, 50750], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2107, "seek": 553166, "start": 5540.0599999999995, "end": 5543.46, "text": " And that's the same as a multiplying b to the power of negative 1.", "tokens": [50785, 400, 300, 311, 264, 912, 382, 257, 30955, 272, 281, 264, 1347, 295, 3671, 502, 13, 50955], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2108, "seek": 553166, "start": 5544.46, "end": 5551.46, "text": " And so what I'd like to do instead is I basically like to implement the operation of x to the k for some constant k.", "tokens": [51005, 400, 370, 437, 286, 1116, 411, 281, 360, 2602, 307, 286, 1936, 411, 281, 4445, 264, 6916, 295, 2031, 281, 264, 350, 337, 512, 5754, 350, 13, 51355], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2109, "seek": 553166, "start": 5551.66, "end": 5553.16, "text": " So it's an integer or a float.", "tokens": [51365, 407, 309, 311, 364, 24922, 420, 257, 15706, 13, 51440], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2110, "seek": 553166, "start": 5554.16, "end": 5556.26, "text": " And we would like to be able to differentiate this.", "tokens": [51490, 400, 321, 576, 411, 281, 312, 1075, 281, 23203, 341, 13, 51595], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2111, "seek": 553166, "start": 5556.26, "end": 5560.16, "text": " And then as a special case, negative 1 will be division.", "tokens": [51595, 400, 550, 382, 257, 2121, 1389, 11, 3671, 502, 486, 312, 10044, 13, 51790], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2112, "seek": 553166, "start": 5560.96, "end": 5561.5599999999995, "text": " And so I'm doing that.", "tokens": [51830, 400, 370, 286, 478, 884, 300, 13, 51860], "temperature": 0.0, "avg_logprob": -0.10592820427634499, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.00021001983259338886}, {"id": 2113, "seek": 556156, "start": 5561.56, "end": 5566.06, "text": " Just because it's more general and you might as well do it that way.", "tokens": [50365, 1449, 570, 309, 311, 544, 2674, 293, 291, 1062, 382, 731, 360, 309, 300, 636, 13, 50590], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2114, "seek": 556156, "start": 5566.46, "end": 5573.56, "text": " So basically what I'm saying is we can redefine division, which we will put here somewhere.", "tokens": [50610, 407, 1936, 437, 286, 478, 1566, 307, 321, 393, 38818, 533, 10044, 11, 597, 321, 486, 829, 510, 4079, 13, 50965], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2115, "seek": 556156, "start": 5574.660000000001, "end": 5575.860000000001, "text": " You know, we can put it here somewhere.", "tokens": [51020, 509, 458, 11, 321, 393, 829, 309, 510, 4079, 13, 51080], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2116, "seek": 556156, "start": 5576.360000000001, "end": 5578.860000000001, "text": " What I'm saying is that we can redefine division.", "tokens": [51105, 708, 286, 478, 1566, 307, 300, 321, 393, 38818, 533, 10044, 13, 51230], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2117, "seek": 556156, "start": 5579.160000000001, "end": 5580.46, "text": " So self divide other.", "tokens": [51245, 407, 2698, 9845, 661, 13, 51310], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2118, "seek": 556156, "start": 5580.860000000001, "end": 5584.96, "text": " This can actually be rewritten as self times other to the power of negative 1.", "tokens": [51330, 639, 393, 767, 312, 319, 26859, 382, 2698, 1413, 661, 281, 264, 1347, 295, 3671, 502, 13, 51535], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2119, "seek": 556156, "start": 5585.860000000001, "end": 5590.860000000001, "text": " And now, value raised to the power of negative 1, we have to now define that.", "tokens": [51580, 400, 586, 11, 2158, 6005, 281, 264, 1347, 295, 3671, 502, 11, 321, 362, 281, 586, 6964, 300, 13, 51830], "temperature": 0.0, "avg_logprob": -0.16459657434831587, "compression_ratio": 1.825531914893617, "no_speech_prob": 0.00015296594938263297}, {"id": 2120, "seek": 559156, "start": 5591.56, "end": 5595.660000000001, "text": " So here's, so we need to implement the pow function.", "tokens": [50365, 407, 510, 311, 11, 370, 321, 643, 281, 4445, 264, 3388, 2445, 13, 50570], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2121, "seek": 559156, "start": 5596.160000000001, "end": 5597.860000000001, "text": " Where am I going to put the pow function?", "tokens": [50595, 2305, 669, 286, 516, 281, 829, 264, 3388, 2445, 30, 50680], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2122, "seek": 559156, "start": 5597.860000000001, "end": 5598.76, "text": " Maybe here somewhere.", "tokens": [50680, 2704, 510, 4079, 13, 50725], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2123, "seek": 559156, "start": 5600.160000000001, "end": 5601.360000000001, "text": " This is the skeleton for it.", "tokens": [50795, 639, 307, 264, 25204, 337, 309, 13, 50855], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2124, "seek": 559156, "start": 5602.56, "end": 5608.06, "text": " So this function will be called when we try to raise a value to some power and other will be that power.", "tokens": [50915, 407, 341, 2445, 486, 312, 1219, 562, 321, 853, 281, 5300, 257, 2158, 281, 512, 1347, 293, 661, 486, 312, 300, 1347, 13, 51190], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2125, "seek": 559156, "start": 5608.76, "end": 5612.06, "text": " Now, I'd like to make sure that other is only an int or a float.", "tokens": [51225, 823, 11, 286, 1116, 411, 281, 652, 988, 300, 661, 307, 787, 364, 560, 420, 257, 15706, 13, 51390], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2126, "seek": 559156, "start": 5612.26, "end": 5615.360000000001, "text": " Usually other is some kind of a different value object.", "tokens": [51400, 11419, 661, 307, 512, 733, 295, 257, 819, 2158, 2657, 13, 51555], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2127, "seek": 559156, "start": 5615.56, "end": 5618.46, "text": " But here other will be forced to be an int or a float.", "tokens": [51565, 583, 510, 661, 486, 312, 7579, 281, 312, 364, 560, 420, 257, 15706, 13, 51710], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2128, "seek": 559156, "start": 5618.76, "end": 5621.46, "text": " Otherwise, the math won't work.", "tokens": [51725, 10328, 11, 264, 5221, 1582, 380, 589, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1609887851504829, "compression_ratio": 1.7348484848484849, "no_speech_prob": 0.00023821007926017046}, {"id": 2129, "seek": 562156, "start": 5621.660000000001, "end": 5624.360000000001, "text": " For what we're trying to achieve in this specific case.", "tokens": [50370, 1171, 437, 321, 434, 1382, 281, 4584, 294, 341, 2685, 1389, 13, 50505], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2130, "seek": 562156, "start": 5624.76, "end": 5628.660000000001, "text": " That would be a different derivative expression if we wanted other to be a value.", "tokens": [50525, 663, 576, 312, 257, 819, 13760, 6114, 498, 321, 1415, 661, 281, 312, 257, 2158, 13, 50720], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2131, "seek": 562156, "start": 5629.76, "end": 5634.660000000001, "text": " So here we create the other value, which is just, you know, this data raised to the power of other.", "tokens": [50775, 407, 510, 321, 1884, 264, 661, 2158, 11, 597, 307, 445, 11, 291, 458, 11, 341, 1412, 6005, 281, 264, 1347, 295, 661, 13, 51020], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2132, "seek": 562156, "start": 5634.860000000001, "end": 5636.660000000001, "text": " And other here could be, for example, negative 1.", "tokens": [51030, 400, 661, 510, 727, 312, 11, 337, 1365, 11, 3671, 502, 13, 51120], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2133, "seek": 562156, "start": 5636.76, "end": 5638.360000000001, "text": " That's what we are hoping to achieve.", "tokens": [51125, 663, 311, 437, 321, 366, 7159, 281, 4584, 13, 51205], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2134, "seek": 562156, "start": 5639.46, "end": 5641.660000000001, "text": " And then this is the backward stub.", "tokens": [51260, 400, 550, 341, 307, 264, 23897, 20266, 13, 51370], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2135, "seek": 562156, "start": 5641.96, "end": 5650.96, "text": " And this is the fun part, which is what is the chain rule expression here for back propagating through", "tokens": [51385, 400, 341, 307, 264, 1019, 644, 11, 597, 307, 437, 307, 264, 5021, 4978, 6114, 510, 337, 646, 12425, 990, 807, 51835], "temperature": 0.0, "avg_logprob": -0.17664689532781053, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0002285546506755054}, {"id": 2136, "seek": 565096, "start": 5651.06, "end": 5655.16, "text": " the power function where the power is to the power of some kind of a constant.", "tokens": [50370, 264, 1347, 2445, 689, 264, 1347, 307, 281, 264, 1347, 295, 512, 733, 295, 257, 5754, 13, 50575], "temperature": 0.0, "avg_logprob": -0.126293359604557, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.000838139618281275}, {"id": 2137, "seek": 565096, "start": 5655.86, "end": 5660.86, "text": " So this is the exercise and maybe pause the video here and see if you can figure it out yourself as to what we should put here.", "tokens": [50610, 407, 341, 307, 264, 5380, 293, 1310, 10465, 264, 960, 510, 293, 536, 498, 291, 393, 2573, 309, 484, 1803, 382, 281, 437, 321, 820, 829, 510, 13, 50860], "temperature": 0.0, "avg_logprob": -0.126293359604557, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.000838139618281275}, {"id": 2138, "seek": 565096, "start": 5667.06, "end": 5672.46, "text": " Okay, so you can actually go here and look at derivative rules as an example.", "tokens": [51170, 1033, 11, 370, 291, 393, 767, 352, 510, 293, 574, 412, 13760, 4474, 382, 364, 1365, 13, 51440], "temperature": 0.0, "avg_logprob": -0.126293359604557, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.000838139618281275}, {"id": 2139, "seek": 565096, "start": 5672.76, "end": 5675.76, "text": " And we see lots of derivative rules that you can hopefully know from calculus.", "tokens": [51455, 400, 321, 536, 3195, 295, 13760, 4474, 300, 291, 393, 4696, 458, 490, 33400, 13, 51605], "temperature": 0.0, "avg_logprob": -0.126293359604557, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.000838139618281275}, {"id": 2140, "seek": 565096, "start": 5675.96, "end": 5680.86, "text": " In particular, what we're looking for is the power rule because that's telling us that if we're trying to take", "tokens": [51615, 682, 1729, 11, 437, 321, 434, 1237, 337, 307, 264, 1347, 4978, 570, 300, 311, 3585, 505, 300, 498, 321, 434, 1382, 281, 747, 51860], "temperature": 0.0, "avg_logprob": -0.126293359604557, "compression_ratio": 1.788679245283019, "no_speech_prob": 0.000838139618281275}, {"id": 2141, "seek": 568086, "start": 5680.96, "end": 5688.86, "text": " d by dx of x to the n, which is what we're doing here, then that is just n times x to the n minus 1, right?", "tokens": [50370, 274, 538, 30017, 295, 2031, 281, 264, 297, 11, 597, 307, 437, 321, 434, 884, 510, 11, 550, 300, 307, 445, 297, 1413, 2031, 281, 264, 297, 3175, 502, 11, 558, 30, 50765], "temperature": 0.0, "avg_logprob": -0.1985801618123792, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0004624413268174976}, {"id": 2142, "seek": 568086, "start": 5689.66, "end": 5695.36, "text": " Okay, so that's telling us about the local derivative of this power operation.", "tokens": [50805, 1033, 11, 370, 300, 311, 3585, 505, 466, 264, 2654, 13760, 295, 341, 1347, 6916, 13, 51090], "temperature": 0.0, "avg_logprob": -0.1985801618123792, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0004624413268174976}, {"id": 2143, "seek": 568086, "start": 5696.0599999999995, "end": 5703.0599999999995, "text": " So all we want here basically n is now other and self.data is x.", "tokens": [51125, 407, 439, 321, 528, 510, 1936, 297, 307, 586, 661, 293, 2698, 13, 67, 3274, 307, 2031, 13, 51475], "temperature": 0.0, "avg_logprob": -0.1985801618123792, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0004624413268174976}, {"id": 2144, "seek": 568086, "start": 5703.66, "end": 5709.5599999999995, "text": " And so this now becomes other which is n times self.data,", "tokens": [51505, 400, 370, 341, 586, 3643, 661, 597, 307, 297, 1413, 2698, 13, 67, 3274, 11, 51800], "temperature": 0.0, "avg_logprob": -0.1985801618123792, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0004624413268174976}, {"id": 2145, "seek": 568086, "start": 5710.46, "end": 5710.759999999999, "text": " which is now another.", "tokens": [51845, 597, 307, 586, 1071, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1985801618123792, "compression_ratio": 1.6067961165048543, "no_speech_prob": 0.0004624413268174976}, {"id": 2146, "seek": 571086, "start": 5710.96, "end": 5712.46, "text": " Python int or a float.", "tokens": [50370, 15329, 560, 420, 257, 15706, 13, 50445], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2147, "seek": 571086, "start": 5713.259999999999, "end": 5714.36, "text": " It's not a value object.", "tokens": [50485, 467, 311, 406, 257, 2158, 2657, 13, 50540], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2148, "seek": 571086, "start": 5714.36, "end": 5720.46, "text": " We're accessing the data attribute raised to the power of other minus 1 or n minus 1.", "tokens": [50540, 492, 434, 26440, 264, 1412, 19667, 6005, 281, 264, 1347, 295, 661, 3175, 502, 420, 297, 3175, 502, 13, 50845], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2149, "seek": 571086, "start": 5721.36, "end": 5727.96, "text": " I can put brackets around this, but this doesn't matter because power takes precedence over multiply in pyhelm.", "tokens": [50890, 286, 393, 829, 26179, 926, 341, 11, 457, 341, 1177, 380, 1871, 570, 1347, 2516, 16969, 655, 670, 12972, 294, 10664, 48319, 13, 51220], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2150, "seek": 571086, "start": 5727.96, "end": 5729.0599999999995, "text": " So that would have been okay.", "tokens": [51220, 407, 300, 576, 362, 668, 1392, 13, 51275], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2151, "seek": 571086, "start": 5729.66, "end": 5731.36, "text": " And that's the local derivative only.", "tokens": [51305, 400, 300, 311, 264, 2654, 13760, 787, 13, 51390], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2152, "seek": 571086, "start": 5731.36, "end": 5736.259999999999, "text": " But now we have to chain it and we chain it just simply by multiplying by a path grad that's chain rule.", "tokens": [51390, 583, 586, 321, 362, 281, 5021, 309, 293, 321, 5021, 309, 445, 2935, 538, 30955, 538, 257, 3100, 2771, 300, 311, 5021, 4978, 13, 51635], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2153, "seek": 571086, "start": 5736.86, "end": 5739.46, "text": " And this should technically work.", "tokens": [51665, 400, 341, 820, 12120, 589, 13, 51795], "temperature": 0.0, "avg_logprob": -0.20508854205791766, "compression_ratio": 1.6376811594202898, "no_speech_prob": 0.0007685291930101812}, {"id": 2154, "seek": 574086, "start": 5740.86, "end": 5742.0599999999995, "text": " And we're going to find out soon.", "tokens": [50365, 400, 321, 434, 516, 281, 915, 484, 2321, 13, 50425], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2155, "seek": 574086, "start": 5742.36, "end": 5745.96, "text": " But now if we do this, this should now work.", "tokens": [50440, 583, 586, 498, 321, 360, 341, 11, 341, 820, 586, 589, 13, 50620], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2156, "seek": 574086, "start": 5746.86, "end": 5747.96, "text": " And we get 0.5.", "tokens": [50665, 400, 321, 483, 1958, 13, 20, 13, 50720], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2157, "seek": 574086, "start": 5747.96, "end": 5750.86, "text": " So the forward pass works, but does the backward pass work?", "tokens": [50720, 407, 264, 2128, 1320, 1985, 11, 457, 775, 264, 23897, 1320, 589, 30, 50865], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2158, "seek": 574086, "start": 5751.259999999999, "end": 5753.96, "text": " And I realized that we actually also have to know how to subtract.", "tokens": [50885, 400, 286, 5334, 300, 321, 767, 611, 362, 281, 458, 577, 281, 16390, 13, 51020], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2159, "seek": 574086, "start": 5754.0599999999995, "end": 5758.46, "text": " So right now a minus b will not work to make it work.", "tokens": [51025, 407, 558, 586, 257, 3175, 272, 486, 406, 589, 281, 652, 309, 589, 13, 51245], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2160, "seek": 574086, "start": 5758.66, "end": 5761.16, "text": " We need one more piece of code here.", "tokens": [51255, 492, 643, 472, 544, 2522, 295, 3089, 510, 13, 51380], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2161, "seek": 574086, "start": 5761.86, "end": 5770.759999999999, "text": " And basically this is the subtraction and the way we're going to implement subtraction is we're going to implement it by addition of a negation.", "tokens": [51415, 400, 1936, 341, 307, 264, 16390, 313, 293, 264, 636, 321, 434, 516, 281, 4445, 16390, 313, 307, 321, 434, 516, 281, 4445, 309, 538, 4500, 295, 257, 2485, 399, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1388684075976175, "compression_ratio": 1.78515625, "no_speech_prob": 0.00024642006610520184}, {"id": 2162, "seek": 577086, "start": 5770.96, "end": 5773.46, "text": " And then to implement negation, we're going to multiply by negative one.", "tokens": [50370, 400, 550, 281, 4445, 2485, 399, 11, 321, 434, 516, 281, 12972, 538, 3671, 472, 13, 50495], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2163, "seek": 577086, "start": 5773.96, "end": 5780.759999999999, "text": " So just again using the stuff we've already built and just expressing it in terms of what we have and a minus b is not working.", "tokens": [50520, 407, 445, 797, 1228, 264, 1507, 321, 600, 1217, 3094, 293, 445, 22171, 309, 294, 2115, 295, 437, 321, 362, 293, 257, 3175, 272, 307, 406, 1364, 13, 50860], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2164, "seek": 577086, "start": 5781.259999999999, "end": 5784.46, "text": " Okay, so now let's scroll again to this expression here for this neuron.", "tokens": [50885, 1033, 11, 370, 586, 718, 311, 11369, 797, 281, 341, 6114, 510, 337, 341, 34090, 13, 51045], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2165, "seek": 577086, "start": 5785.259999999999, "end": 5788.46, "text": " And let's just compute the backward pass here.", "tokens": [51085, 400, 718, 311, 445, 14722, 264, 23897, 1320, 510, 13, 51245], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2166, "seek": 577086, "start": 5788.46, "end": 5791.259999999999, "text": " Once we've defined O and let's draw it.", "tokens": [51245, 3443, 321, 600, 7642, 422, 293, 718, 311, 2642, 309, 13, 51385], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2167, "seek": 577086, "start": 5792.16, "end": 5797.86, "text": " So here's the gradients for all these leaf nodes for this two-dimensional neuron that has a 10h that we've seen before.", "tokens": [51430, 407, 510, 311, 264, 2771, 2448, 337, 439, 613, 10871, 13891, 337, 341, 732, 12, 18759, 34090, 300, 575, 257, 1266, 71, 300, 321, 600, 1612, 949, 13, 51715], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2168, "seek": 577086, "start": 5798.5599999999995, "end": 5800.759999999999, "text": " So now what I'd like to do is I'd like to break up.", "tokens": [51750, 407, 586, 437, 286, 1116, 411, 281, 360, 307, 286, 1116, 411, 281, 1821, 493, 13, 51860], "temperature": 0.0, "avg_logprob": -0.13994829995291574, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.00017845220281742513}, {"id": 2169, "seek": 580086, "start": 5800.86, "end": 5803.96, "text": " This 10h into this expression here.", "tokens": [50365, 639, 1266, 71, 666, 341, 6114, 510, 13, 50520], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2170, "seek": 580086, "start": 5804.5599999999995, "end": 5813.0599999999995, "text": " So let me copy paste this here and now instead of will preserve the label and we will change how we define O.", "tokens": [50550, 407, 718, 385, 5055, 9163, 341, 510, 293, 586, 2602, 295, 486, 15665, 264, 7645, 293, 321, 486, 1319, 577, 321, 6964, 422, 13, 50975], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2171, "seek": 580086, "start": 5813.86, "end": 5816.46, "text": " So in particular we're going to implement this formula here.", "tokens": [51015, 407, 294, 1729, 321, 434, 516, 281, 4445, 341, 8513, 510, 13, 51145], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2172, "seek": 580086, "start": 5816.86, "end": 5820.5599999999995, "text": " So we need e to the 2x minus 1 over e to the x plus 1.", "tokens": [51165, 407, 321, 643, 308, 281, 264, 568, 87, 3175, 502, 670, 308, 281, 264, 2031, 1804, 502, 13, 51350], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2173, "seek": 580086, "start": 5820.96, "end": 5825.96, "text": " So e to the 2x we need to take 2 times n and we need to exponentiate it.", "tokens": [51370, 407, 308, 281, 264, 568, 87, 321, 643, 281, 747, 568, 1413, 297, 293, 321, 643, 281, 37871, 13024, 309, 13, 51620], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2174, "seek": 580086, "start": 5826.46, "end": 5829.5599999999995, "text": " That's e to the 2x and then because we're using it twice.", "tokens": [51645, 663, 311, 308, 281, 264, 568, 87, 293, 550, 570, 321, 434, 1228, 309, 6091, 13, 51800], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2175, "seek": 580086, "start": 5829.86, "end": 5830.759999999999, "text": " Let's create an intermediate.", "tokens": [51815, 961, 311, 1884, 364, 19376, 13, 51860], "temperature": 0.0, "avg_logprob": -0.14971001942952475, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00023168898769654334}, {"id": 2176, "seek": 583086, "start": 5830.86, "end": 5844.259999999999, "text": " Variable e and then define O as e plus 1 over e minus 1 over e plus 1 e minus 1 over e plus 1 and that should be it.", "tokens": [50365, 32511, 712, 308, 293, 550, 6964, 422, 382, 308, 1804, 502, 670, 308, 3175, 502, 670, 308, 1804, 502, 308, 3175, 502, 670, 308, 1804, 502, 293, 300, 820, 312, 309, 13, 51035], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2177, "seek": 583086, "start": 5844.36, "end": 5846.46, "text": " And then we should be able to draw dot of O.", "tokens": [51040, 400, 550, 321, 820, 312, 1075, 281, 2642, 5893, 295, 422, 13, 51145], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2178, "seek": 583086, "start": 5847.16, "end": 5850.36, "text": " So now before I run this, what do we expect to see?", "tokens": [51180, 407, 586, 949, 286, 1190, 341, 11, 437, 360, 321, 2066, 281, 536, 30, 51340], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2179, "seek": 583086, "start": 5851.0599999999995, "end": 5857.16, "text": " Number one, we're expecting to see a much longer graph here because we've broken up 10h into a bunch of other operations.", "tokens": [51375, 5118, 472, 11, 321, 434, 9650, 281, 536, 257, 709, 2854, 4295, 510, 570, 321, 600, 5463, 493, 1266, 71, 666, 257, 3840, 295, 661, 7705, 13, 51680], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2180, "seek": 583086, "start": 5857.759999999999, "end": 5860.0599999999995, "text": " But those operations are mathematically equivalent.", "tokens": [51710, 583, 729, 7705, 366, 44003, 10344, 13, 51825], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2181, "seek": 583086, "start": 5860.36, "end": 5860.759999999999, "text": " And so what we're expecting.", "tokens": [51840, 400, 370, 437, 321, 434, 9650, 13, 51860], "temperature": 0.0, "avg_logprob": -0.19093542439596994, "compression_ratio": 1.7333333333333334, "no_speech_prob": 8.08974145911634e-05}, {"id": 2182, "seek": 586086, "start": 5860.96, "end": 5864.46, "text": " To see is number one, the same result here.", "tokens": [50370, 1407, 536, 307, 1230, 472, 11, 264, 912, 1874, 510, 13, 50545], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2183, "seek": 586086, "start": 5864.5599999999995, "end": 5868.259999999999, "text": " So the forward pass works and number two because of that mathematical equivalence.", "tokens": [50550, 407, 264, 2128, 1320, 1985, 293, 1230, 732, 570, 295, 300, 18894, 9052, 655, 13, 50735], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2184, "seek": 586086, "start": 5868.5599999999995, "end": 5872.46, "text": " We expect to see the same backward pass and the same gradients on these leaf nodes.", "tokens": [50750, 492, 2066, 281, 536, 264, 912, 23897, 1320, 293, 264, 912, 2771, 2448, 322, 613, 10871, 13891, 13, 50945], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2185, "seek": 586086, "start": 5872.86, "end": 5874.46, "text": " So these gradients should be identical.", "tokens": [50965, 407, 613, 2771, 2448, 820, 312, 14800, 13, 51045], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2186, "seek": 586086, "start": 5875.16, "end": 5876.46, "text": " So let's run this.", "tokens": [51080, 407, 718, 311, 1190, 341, 13, 51145], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2187, "seek": 586086, "start": 5877.96, "end": 5881.259999999999, "text": " So number one, let's verify that instead of a single 10h node.", "tokens": [51220, 407, 1230, 472, 11, 718, 311, 16888, 300, 2602, 295, 257, 2167, 1266, 71, 9984, 13, 51385], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2188, "seek": 586086, "start": 5881.36, "end": 5886.46, "text": " We have now X and we have plus we have times negative one.", "tokens": [51390, 492, 362, 586, 1783, 293, 321, 362, 1804, 321, 362, 1413, 3671, 472, 13, 51645], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2189, "seek": 586086, "start": 5887.0599999999995, "end": 5890.759999999999, "text": " This is the division and we end up with the same forward pass.", "tokens": [51675, 639, 307, 264, 10044, 293, 321, 917, 493, 365, 264, 912, 2128, 1320, 13, 51860], "temperature": 0.0, "avg_logprob": -0.19774105168190323, "compression_ratio": 1.8306451612903225, "no_speech_prob": 0.000164707176736556}, {"id": 2190, "seek": 589086, "start": 5890.96, "end": 5892.86, "text": " Here and then the gradients.", "tokens": [50370, 1692, 293, 550, 264, 2771, 2448, 13, 50465], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2191, "seek": 589086, "start": 5892.96, "end": 5894.86, "text": " We have to be careful because they're in slightly different order.", "tokens": [50470, 492, 362, 281, 312, 5026, 570, 436, 434, 294, 4748, 819, 1668, 13, 50565], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2192, "seek": 589086, "start": 5894.96, "end": 5906.759999999999, "text": " Potentially the gradients for W2 X2 should be 0 and 0.5 W2 and X2 are 0 and 0.5 and W1 X1 are 1 and negative 1.5 1 and negative 1.5.", "tokens": [50570, 9145, 3137, 264, 2771, 2448, 337, 343, 17, 1783, 17, 820, 312, 1958, 293, 1958, 13, 20, 343, 17, 293, 1783, 17, 366, 1958, 293, 1958, 13, 20, 293, 343, 16, 1783, 16, 366, 502, 293, 3671, 502, 13, 20, 502, 293, 3671, 502, 13, 20, 13, 51160], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2193, "seek": 589086, "start": 5907.36, "end": 5914.96, "text": " So that means that both our forward passes and backward passes were correct because this turned out to be equivalent to 10h before.", "tokens": [51190, 407, 300, 1355, 300, 1293, 527, 2128, 11335, 293, 23897, 11335, 645, 3006, 570, 341, 3574, 484, 281, 312, 10344, 281, 1266, 71, 949, 13, 51570], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2194, "seek": 589086, "start": 5915.96, "end": 5918.66, "text": " And so the reason I wanted to go through this exercise is number one.", "tokens": [51620, 400, 370, 264, 1778, 286, 1415, 281, 352, 807, 341, 5380, 307, 1230, 472, 13, 51755], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2195, "seek": 589086, "start": 5918.96, "end": 5920.759999999999, "text": " We got to practice a few more operations.", "tokens": [51770, 492, 658, 281, 3124, 257, 1326, 544, 7705, 13, 51860], "temperature": 0.0, "avg_logprob": -0.16154409009356832, "compression_ratio": 1.6978417266187051, "no_speech_prob": 0.0005365206161513925}, {"id": 2196, "seek": 592086, "start": 5921.0599999999995, "end": 5923.96, "text": " And writing more backwards passes and number two.", "tokens": [50375, 400, 3579, 544, 12204, 11335, 293, 1230, 732, 13, 50520], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2197, "seek": 592086, "start": 5924.16, "end": 5931.259999999999, "text": " I wanted to illustrate the point that the the level at which you implement your operations is totally up to you.", "tokens": [50530, 286, 1415, 281, 23221, 264, 935, 300, 264, 264, 1496, 412, 597, 291, 4445, 428, 7705, 307, 3879, 493, 281, 291, 13, 50885], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2198, "seek": 592086, "start": 5931.46, "end": 5936.36, "text": " You can implement backward passes for tiny expressions like a single individual plus or a single times.", "tokens": [50895, 509, 393, 4445, 23897, 11335, 337, 5870, 15277, 411, 257, 2167, 2609, 1804, 420, 257, 2167, 1413, 13, 51140], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2199, "seek": 592086, "start": 5936.86, "end": 5941.5599999999995, "text": " Or you can implement them for say 10h which is a kind of a potential.", "tokens": [51165, 1610, 291, 393, 4445, 552, 337, 584, 1266, 71, 597, 307, 257, 733, 295, 257, 3995, 13, 51400], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2200, "seek": 592086, "start": 5941.66, "end": 5945.96, "text": " You can see it as a composite operation because it's made up of all these more atomic operations.", "tokens": [51405, 509, 393, 536, 309, 382, 257, 25557, 6916, 570, 309, 311, 1027, 493, 295, 439, 613, 544, 22275, 7705, 13, 51620], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2201, "seek": 592086, "start": 5946.46, "end": 5948.46, "text": " But really all of this is kind of like a fake concept.", "tokens": [51645, 583, 534, 439, 295, 341, 307, 733, 295, 411, 257, 7592, 3410, 13, 51745], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2202, "seek": 592086, "start": 5948.66, "end": 5950.46, "text": " All that matters is we have some kind of inputs.", "tokens": [51755, 1057, 300, 7001, 307, 321, 362, 512, 733, 295, 15743, 13, 51845], "temperature": 0.0, "avg_logprob": -0.13613245222303602, "compression_ratio": 1.8053691275167785, "no_speech_prob": 0.00021196722809690982}, {"id": 2203, "seek": 595046, "start": 5950.46, "end": 5953.76, "text": " And some kind of an output and this output is a function of the inputs in some way.", "tokens": [50365, 400, 512, 733, 295, 364, 5598, 293, 341, 5598, 307, 257, 2445, 295, 264, 15743, 294, 512, 636, 13, 50530], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2204, "seek": 595046, "start": 5953.96, "end": 5958.06, "text": " And as long as you can do forward pass and the backward pass of that little operation.", "tokens": [50540, 400, 382, 938, 382, 291, 393, 360, 2128, 1320, 293, 264, 23897, 1320, 295, 300, 707, 6916, 13, 50745], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2205, "seek": 595046, "start": 5958.46, "end": 5962.66, "text": " It doesn't matter what that operation is and how composite it is.", "tokens": [50765, 467, 1177, 380, 1871, 437, 300, 6916, 307, 293, 577, 25557, 309, 307, 13, 50975], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2206, "seek": 595046, "start": 5963.16, "end": 5967.26, "text": " If you can write the local gradients you can chain the gradient and you can continue back propagation.", "tokens": [51000, 759, 291, 393, 2464, 264, 2654, 2771, 2448, 291, 393, 5021, 264, 16235, 293, 291, 393, 2354, 646, 38377, 13, 51205], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2207, "seek": 595046, "start": 5967.46, "end": 5970.96, "text": " So the design of what those functions are is completely up to you.", "tokens": [51215, 407, 264, 1715, 295, 437, 729, 6828, 366, 307, 2584, 493, 281, 291, 13, 51390], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2208, "seek": 595046, "start": 5972.06, "end": 5976.96, "text": " So now I would like to show you how you can do the exact same thing but using a modern deep neural network library.", "tokens": [51445, 407, 586, 286, 576, 411, 281, 855, 291, 577, 291, 393, 360, 264, 1900, 912, 551, 457, 1228, 257, 4363, 2452, 18161, 3209, 6405, 13, 51690], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2209, "seek": 595046, "start": 5977.06, "end": 5978.46, "text": " Like for example PyTorch.", "tokens": [51695, 1743, 337, 1365, 9953, 51, 284, 339, 13, 51765], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2210, "seek": 595046, "start": 5978.86, "end": 5980.36, "text": " Which I've roughly modeled.", "tokens": [51785, 3013, 286, 600, 9810, 37140, 13, 51860], "temperature": 0.0, "avg_logprob": -0.13246164254262938, "compression_ratio": 1.8113207547169812, "no_speech_prob": 0.0002547376207076013}, {"id": 2211, "seek": 598046, "start": 5980.56, "end": 5982.36, "text": " Micrograd by.", "tokens": [50370, 25642, 7165, 538, 13, 50460], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2212, "seek": 598046, "start": 5983.06, "end": 5985.76, "text": " And so PyTorch is something you would use in production.", "tokens": [50495, 400, 370, 9953, 51, 284, 339, 307, 746, 291, 576, 764, 294, 4265, 13, 50630], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2213, "seek": 598046, "start": 5986.16, "end": 5989.36, "text": " And I'll show you how you can do the exact same thing but in PyTorch API.", "tokens": [50650, 400, 286, 603, 855, 291, 577, 291, 393, 360, 264, 1900, 912, 551, 457, 294, 9953, 51, 284, 339, 9362, 13, 50810], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2214, "seek": 598046, "start": 5989.86, "end": 5992.66, "text": " So I'm just going to copy paste it in and walk you through it a little bit.", "tokens": [50835, 407, 286, 478, 445, 516, 281, 5055, 9163, 309, 294, 293, 1792, 291, 807, 309, 257, 707, 857, 13, 50975], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2215, "seek": 598046, "start": 5992.86, "end": 5993.76, "text": " This is what it looks like.", "tokens": [50985, 639, 307, 437, 309, 1542, 411, 13, 51030], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2216, "seek": 598046, "start": 5994.96, "end": 5996.56, "text": " So we're going to import PyTorch.", "tokens": [51090, 407, 321, 434, 516, 281, 974, 9953, 51, 284, 339, 13, 51170], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2217, "seek": 598046, "start": 5997.06, "end": 6001.46, "text": " And then we need to define these value objects like we have here.", "tokens": [51195, 400, 550, 321, 643, 281, 6964, 613, 2158, 6565, 411, 321, 362, 510, 13, 51415], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2218, "seek": 598046, "start": 6001.96, "end": 6005.36, "text": " Now Micrograd is a scalar valued engine.", "tokens": [51440, 823, 25642, 7165, 307, 257, 39684, 22608, 2848, 13, 51610], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2219, "seek": 598046, "start": 6005.46, "end": 6008.56, "text": " So we only have scalar values like 2.0.", "tokens": [51615, 407, 321, 787, 362, 39684, 4190, 411, 568, 13, 15, 13, 51770], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2220, "seek": 598046, "start": 6009.16, "end": 6009.76, "text": " But in PyTorch.", "tokens": [51800, 583, 294, 9953, 51, 284, 339, 13, 51830], "temperature": 0.0, "avg_logprob": -0.13806179986483808, "compression_ratio": 1.7049808429118773, "no_speech_prob": 0.0001402607886120677}, {"id": 2221, "seek": 601046, "start": 6010.46, "end": 6011.76, "text": " We only have around tensors.", "tokens": [50365, 492, 787, 362, 926, 10688, 830, 13, 50430], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2222, "seek": 601046, "start": 6012.06, "end": 6015.86, "text": " And like I mentioned tensors are just n dimensional arrays of scalars.", "tokens": [50445, 400, 411, 286, 2835, 10688, 830, 366, 445, 297, 18795, 41011, 295, 15664, 685, 13, 50635], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2223, "seek": 601046, "start": 6016.36, "end": 6019.26, "text": " So that's why things get a little bit more complicated here.", "tokens": [50660, 407, 300, 311, 983, 721, 483, 257, 707, 857, 544, 6179, 510, 13, 50805], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2224, "seek": 601046, "start": 6019.36, "end": 6021.76, "text": " I just need a scalar valued tensor.", "tokens": [50810, 286, 445, 643, 257, 39684, 22608, 40863, 13, 50930], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2225, "seek": 601046, "start": 6021.86, "end": 6023.46, "text": " A tensor with just a single element.", "tokens": [50935, 316, 40863, 365, 445, 257, 2167, 4478, 13, 51015], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2226, "seek": 601046, "start": 6024.06, "end": 6030.76, "text": " But by default when you work with PyTorch you would use more complicated tensors like this.", "tokens": [51045, 583, 538, 7576, 562, 291, 589, 365, 9953, 51, 284, 339, 291, 576, 764, 544, 6179, 10688, 830, 411, 341, 13, 51380], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2227, "seek": 601046, "start": 6031.06, "end": 6032.36, "text": " So if I import PyTorch.", "tokens": [51395, 407, 498, 286, 974, 9953, 51, 284, 339, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2228, "seek": 601046, "start": 6034.56, "end": 6036.36, "text": " Then I can create tensors like this.", "tokens": [51570, 1396, 286, 393, 1884, 10688, 830, 411, 341, 13, 51660], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2229, "seek": 601046, "start": 6036.76, "end": 6037.96, "text": " And this tensor for example.", "tokens": [51680, 400, 341, 40863, 337, 1365, 13, 51740], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2230, "seek": 601046, "start": 6038.06, "end": 6039.96, "text": " Is a 2x3 array.", "tokens": [51745, 1119, 257, 568, 87, 18, 10225, 13, 51840], "temperature": 0.0, "avg_logprob": -0.2715234375, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00032576313242316246}, {"id": 2231, "seek": 603996, "start": 6039.96, "end": 6044.66, "text": " Of scalars in a single compact representation.", "tokens": [50365, 2720, 15664, 685, 294, 257, 2167, 14679, 10290, 13, 50600], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2232, "seek": 603996, "start": 6045.06, "end": 6046.06, "text": " So we can check its shape.", "tokens": [50620, 407, 321, 393, 1520, 1080, 3909, 13, 50670], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2233, "seek": 603996, "start": 6046.16, "end": 6048.86, "text": " We see that it's a 2x3 array and so on.", "tokens": [50675, 492, 536, 300, 309, 311, 257, 568, 87, 18, 10225, 293, 370, 322, 13, 50810], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2234, "seek": 603996, "start": 6049.56, "end": 6053.16, "text": " So this is usually what you would work with in the actual libraries.", "tokens": [50845, 407, 341, 307, 2673, 437, 291, 576, 589, 365, 294, 264, 3539, 15148, 13, 51025], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2235, "seek": 603996, "start": 6053.66, "end": 6058.96, "text": " So here I'm creating a tensor that has only a single element 2.0.", "tokens": [51050, 407, 510, 286, 478, 4084, 257, 40863, 300, 575, 787, 257, 2167, 4478, 568, 13, 15, 13, 51315], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2236, "seek": 603996, "start": 6060.56, "end": 6063.16, "text": " And then I'm casting it to be double.", "tokens": [51395, 400, 550, 286, 478, 17301, 309, 281, 312, 3834, 13, 51525], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2237, "seek": 603996, "start": 6063.66, "end": 6067.86, "text": " Because Python is by default using double precision for its floating point numbers.", "tokens": [51550, 1436, 15329, 307, 538, 7576, 1228, 3834, 18356, 337, 1080, 12607, 935, 3547, 13, 51760], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2238, "seek": 603996, "start": 6067.96, "end": 6069.76, "text": " So I'd like everything to be identical.", "tokens": [51765, 407, 286, 1116, 411, 1203, 281, 312, 14800, 13, 51855], "temperature": 0.0, "avg_logprob": -0.12694843395336255, "compression_ratio": 1.55893536121673, "no_speech_prob": 7.963523239595816e-05}, {"id": 2239, "seek": 606996, "start": 6069.96, "end": 6074.36, "text": " By default the data type of these tensors will be float32.", "tokens": [50365, 3146, 7576, 264, 1412, 2010, 295, 613, 10688, 830, 486, 312, 15706, 11440, 13, 50585], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2240, "seek": 606996, "start": 6074.46, "end": 6076.46, "text": " So it's only using a single precision float.", "tokens": [50590, 407, 309, 311, 787, 1228, 257, 2167, 18356, 15706, 13, 50690], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2241, "seek": 606996, "start": 6076.56, "end": 6078.26, "text": " So I'm casting it to double.", "tokens": [50695, 407, 286, 478, 17301, 309, 281, 3834, 13, 50780], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2242, "seek": 606996, "start": 6078.96, "end": 6081.86, "text": " So that we have float64 just like in Python.", "tokens": [50815, 407, 300, 321, 362, 15706, 19395, 445, 411, 294, 15329, 13, 50960], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2243, "seek": 606996, "start": 6082.66, "end": 6083.86, "text": " So I'm casting to double.", "tokens": [51000, 407, 286, 478, 17301, 281, 3834, 13, 51060], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2244, "seek": 606996, "start": 6084.06, "end": 6087.66, "text": " And then we get something similar to value of 2.", "tokens": [51070, 400, 550, 321, 483, 746, 2531, 281, 2158, 295, 568, 13, 51250], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2245, "seek": 606996, "start": 6088.06, "end": 6090.46, "text": " The next thing I have to do is because these are leaf nodes.", "tokens": [51270, 440, 958, 551, 286, 362, 281, 360, 307, 570, 613, 366, 10871, 13891, 13, 51390], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2246, "seek": 606996, "start": 6090.56, "end": 6093.66, "text": " By default PyTorch assumes that they do not require gradients.", "tokens": [51395, 3146, 7576, 9953, 51, 284, 339, 37808, 300, 436, 360, 406, 3651, 2771, 2448, 13, 51550], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2247, "seek": 606996, "start": 6093.86, "end": 6097.56, "text": " So I need to explicitly say that all of these nodes require gradients.", "tokens": [51560, 407, 286, 643, 281, 20803, 584, 300, 439, 295, 613, 13891, 3651, 2771, 2448, 13, 51745], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2248, "seek": 606996, "start": 6097.96, "end": 6098.46, "text": " Okay.", "tokens": [51765, 1033, 13, 51790], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2249, "seek": 606996, "start": 6098.56, "end": 6099.66, "text": " So this is going to construct.", "tokens": [51795, 407, 341, 307, 516, 281, 7690, 13, 51850], "temperature": 0.0, "avg_logprob": -0.18467796712681867, "compression_ratio": 1.7285714285714286, "no_speech_prob": 0.00029912107856944203}, {"id": 2250, "seek": 609966, "start": 6100.0599999999995, "end": 6102.86, "text": " Scalar valued one element tensors.", "tokens": [50385, 2747, 12031, 22608, 472, 4478, 10688, 830, 13, 50525], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2251, "seek": 609966, "start": 6103.46, "end": 6105.66, "text": " Make sure that PyTorch knows that they require gradients.", "tokens": [50555, 4387, 988, 300, 9953, 51, 284, 339, 3255, 300, 436, 3651, 2771, 2448, 13, 50665], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2252, "seek": 609966, "start": 6106.26, "end": 6109.96, "text": " Now by default these are set to false by the way because of efficiency reasons.", "tokens": [50695, 823, 538, 7576, 613, 366, 992, 281, 7908, 538, 264, 636, 570, 295, 10493, 4112, 13, 50880], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2253, "seek": 609966, "start": 6110.16, "end": 6112.96, "text": " Because usually you would not want gradients for leaf nodes.", "tokens": [50890, 1436, 2673, 291, 576, 406, 528, 2771, 2448, 337, 10871, 13891, 13, 51030], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2254, "seek": 609966, "start": 6113.66, "end": 6115.46, "text": " Like the inputs to the network.", "tokens": [51065, 1743, 264, 15743, 281, 264, 3209, 13, 51155], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2255, "seek": 609966, "start": 6115.66, "end": 6118.46, "text": " And this is just trying to be efficient in the most common cases.", "tokens": [51165, 400, 341, 307, 445, 1382, 281, 312, 7148, 294, 264, 881, 2689, 3331, 13, 51305], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2256, "seek": 609966, "start": 6119.36, "end": 6122.36, "text": " So once we've defined all of our values in PyTorch land.", "tokens": [51350, 407, 1564, 321, 600, 7642, 439, 295, 527, 4190, 294, 9953, 51, 284, 339, 2117, 13, 51500], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2257, "seek": 609966, "start": 6122.66, "end": 6125.66, "text": " We can perform arithmetic just like we can here in micrograd land.", "tokens": [51515, 492, 393, 2042, 42973, 445, 411, 321, 393, 510, 294, 4532, 7165, 2117, 13, 51665], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2258, "seek": 609966, "start": 6125.96, "end": 6126.86, "text": " So this would just work.", "tokens": [51680, 407, 341, 576, 445, 589, 13, 51725], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2259, "seek": 609966, "start": 6127.26, "end": 6129.0599999999995, "text": " And then there's a torch.10h also.", "tokens": [51745, 400, 550, 456, 311, 257, 27822, 13, 3279, 71, 611, 13, 51835], "temperature": 0.0, "avg_logprob": -0.1522719019608532, "compression_ratio": 1.694078947368421, "no_speech_prob": 0.00012673261517193168}, {"id": 2260, "seek": 612966, "start": 6129.66, "end": 6132.0599999999995, "text": " And when we get back as a tensor again.", "tokens": [50365, 400, 562, 321, 483, 646, 382, 257, 40863, 797, 13, 50485], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2261, "seek": 612966, "start": 6132.66, "end": 6134.96, "text": " And we can just like in micrograd.", "tokens": [50515, 400, 321, 393, 445, 411, 294, 4532, 7165, 13, 50630], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2262, "seek": 612966, "start": 6135.0599999999995, "end": 6137.76, "text": " It's got a data attribute and it's got grad attributes.", "tokens": [50635, 467, 311, 658, 257, 1412, 19667, 293, 309, 311, 658, 2771, 17212, 13, 50770], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2263, "seek": 612966, "start": 6138.36, "end": 6142.36, "text": " So these tensor objects just like in micrograd have a dot data and a dot grad.", "tokens": [50800, 407, 613, 40863, 6565, 445, 411, 294, 4532, 7165, 362, 257, 5893, 1412, 293, 257, 5893, 2771, 13, 51000], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2264, "seek": 612966, "start": 6142.86, "end": 6146.26, "text": " And the only difference here is that we need to call a dot item.", "tokens": [51025, 400, 264, 787, 2649, 510, 307, 300, 321, 643, 281, 818, 257, 5893, 3174, 13, 51195], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2265, "seek": 612966, "start": 6146.66, "end": 6153.96, "text": " Because otherwise PyTorch dot item basically takes a single tensor of one element.", "tokens": [51215, 1436, 5911, 9953, 51, 284, 339, 5893, 3174, 1936, 2516, 257, 2167, 40863, 295, 472, 4478, 13, 51580], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2266, "seek": 612966, "start": 6154.0599999999995, "end": 6156.86, "text": " And it just returns that element stripping out the tensor.", "tokens": [51585, 400, 309, 445, 11247, 300, 4478, 3575, 3759, 484, 264, 40863, 13, 51725], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2267, "seek": 612966, "start": 6157.96, "end": 6158.86, "text": " So let me just run this.", "tokens": [51780, 407, 718, 385, 445, 1190, 341, 13, 51825], "temperature": 0.0, "avg_logprob": -0.17442297735134094, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.0001474016171414405}, {"id": 2268, "seek": 615886, "start": 6158.86, "end": 6160.36, "text": " And hopefully we are going to get.", "tokens": [50365, 400, 4696, 321, 366, 516, 281, 483, 13, 50440], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2269, "seek": 615886, "start": 6160.46, "end": 6164.5599999999995, "text": " This is going to print the forward pass which is 0.707.", "tokens": [50445, 639, 307, 516, 281, 4482, 264, 2128, 1320, 597, 307, 1958, 13, 5867, 22, 13, 50650], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2270, "seek": 615886, "start": 6165.0599999999995, "end": 6170.759999999999, "text": " And this will be the gradients which hopefully are 0.50, negative 1.5, and 1.", "tokens": [50675, 400, 341, 486, 312, 264, 2771, 2448, 597, 4696, 366, 1958, 13, 2803, 11, 3671, 502, 13, 20, 11, 293, 502, 13, 50960], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2271, "seek": 615886, "start": 6171.259999999999, "end": 6172.46, "text": " So if we just run this.", "tokens": [50985, 407, 498, 321, 445, 1190, 341, 13, 51045], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2272, "seek": 615886, "start": 6174.0599999999995, "end": 6174.46, "text": " There we go.", "tokens": [51125, 821, 321, 352, 13, 51145], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2273, "seek": 615886, "start": 6175.16, "end": 6175.5599999999995, "text": " 0.7.", "tokens": [51180, 1958, 13, 22, 13, 51200], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2274, "seek": 615886, "start": 6175.5599999999995, "end": 6176.96, "text": " So the forward pass agrees.", "tokens": [51200, 407, 264, 2128, 1320, 26383, 13, 51270], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2275, "seek": 615886, "start": 6177.259999999999, "end": 6179.86, "text": " And then 0.50, negative 1.5, and 1.", "tokens": [51285, 400, 550, 1958, 13, 2803, 11, 3671, 502, 13, 20, 11, 293, 502, 13, 51415], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2276, "seek": 615886, "start": 6180.86, "end": 6182.259999999999, "text": " So PyTorch agrees with us.", "tokens": [51465, 407, 9953, 51, 284, 339, 26383, 365, 505, 13, 51535], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2277, "seek": 615886, "start": 6182.86, "end": 6184.0599999999995, "text": " And just to show you here basically.", "tokens": [51565, 400, 445, 281, 855, 291, 510, 1936, 13, 51625], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2278, "seek": 615886, "start": 6184.0599999999995, "end": 6187.0599999999995, "text": " Oh, here's a tensor with a single element.", "tokens": [51625, 876, 11, 510, 311, 257, 40863, 365, 257, 2167, 4478, 13, 51775], "temperature": 0.0, "avg_logprob": -0.18989915558786102, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.00047241069842129946}, {"id": 2279, "seek": 618706, "start": 6187.06, "end": 6189.160000000001, "text": " And it's a double.", "tokens": [50365, 400, 309, 311, 257, 3834, 13, 50470], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2280, "seek": 618706, "start": 6189.76, "end": 6193.660000000001, "text": " And we can call that item on it to just get the single number out.", "tokens": [50500, 400, 321, 393, 818, 300, 3174, 322, 309, 281, 445, 483, 264, 2167, 1230, 484, 13, 50695], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2281, "seek": 618706, "start": 6194.46, "end": 6195.660000000001, "text": " So that's what item does.", "tokens": [50735, 407, 300, 311, 437, 3174, 775, 13, 50795], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2282, "seek": 618706, "start": 6196.06, "end": 6198.360000000001, "text": " And O is a tensor object like I mentioned.", "tokens": [50815, 400, 422, 307, 257, 40863, 2657, 411, 286, 2835, 13, 50930], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2283, "seek": 618706, "start": 6198.660000000001, "end": 6201.160000000001, "text": " And it's got a backward function just like we've implemented.", "tokens": [50945, 400, 309, 311, 658, 257, 23897, 2445, 445, 411, 321, 600, 12270, 13, 51070], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2284, "seek": 618706, "start": 6202.26, "end": 6204.26, "text": " And then all of these also have a dot grad.", "tokens": [51125, 400, 550, 439, 295, 613, 611, 362, 257, 5893, 2771, 13, 51225], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2285, "seek": 618706, "start": 6204.26, "end": 6206.06, "text": " So like X2 for example has a grad.", "tokens": [51225, 407, 411, 1783, 17, 337, 1365, 575, 257, 2771, 13, 51315], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2286, "seek": 618706, "start": 6206.360000000001, "end": 6207.06, "text": " And it's a tensor.", "tokens": [51330, 400, 309, 311, 257, 40863, 13, 51365], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2287, "seek": 618706, "start": 6207.360000000001, "end": 6210.06, "text": " And we can pop out the individual number with dot item.", "tokens": [51380, 400, 321, 393, 1665, 484, 264, 2609, 1230, 365, 5893, 3174, 13, 51515], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2288, "seek": 618706, "start": 6211.56, "end": 6216.860000000001, "text": " So basically Torch can do what we did in micrograd as a special case.", "tokens": [51590, 407, 1936, 7160, 339, 393, 360, 437, 321, 630, 294, 4532, 7165, 382, 257, 2121, 1389, 13, 51855], "temperature": 0.0, "avg_logprob": -0.15391317264054172, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0003831378708127886}, {"id": 2289, "seek": 621706, "start": 6217.06, "end": 6220.06, "text": " When your tensors are all single element tensors.", "tokens": [50365, 1133, 428, 10688, 830, 366, 439, 2167, 4478, 10688, 830, 13, 50515], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2290, "seek": 621706, "start": 6220.56, "end": 6223.860000000001, "text": " But the big deal with PyTorch is that everything is significantly more efficient.", "tokens": [50540, 583, 264, 955, 2028, 365, 9953, 51, 284, 339, 307, 300, 1203, 307, 10591, 544, 7148, 13, 50705], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2291, "seek": 621706, "start": 6224.160000000001, "end": 6226.56, "text": " Because we are working with these tensor objects.", "tokens": [50720, 1436, 321, 366, 1364, 365, 613, 40863, 6565, 13, 50840], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2292, "seek": 621706, "start": 6226.76, "end": 6230.06, "text": " And we can do lots of operations in parallel on all of these tensors.", "tokens": [50850, 400, 321, 393, 360, 3195, 295, 7705, 294, 8952, 322, 439, 295, 613, 10688, 830, 13, 51015], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2293, "seek": 621706, "start": 6231.660000000001, "end": 6235.160000000001, "text": " But otherwise what we've built very much agrees with the API of PyTorch.", "tokens": [51095, 583, 5911, 437, 321, 600, 3094, 588, 709, 26383, 365, 264, 9362, 295, 9953, 51, 284, 339, 13, 51270], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2294, "seek": 621706, "start": 6235.76, "end": 6239.660000000001, "text": " Okay, so now that we have some machinery to build out pretty complicated mathematical expressions.", "tokens": [51300, 1033, 11, 370, 586, 300, 321, 362, 512, 27302, 281, 1322, 484, 1238, 6179, 18894, 15277, 13, 51495], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2295, "seek": 621706, "start": 6239.96, "end": 6241.860000000001, "text": " We can also start building up neural nets.", "tokens": [51510, 492, 393, 611, 722, 2390, 493, 18161, 36170, 13, 51605], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2296, "seek": 621706, "start": 6242.06, "end": 6246.26, "text": " And as I mentioned neural nets are just a specific class of mathematical expressions.", "tokens": [51615, 400, 382, 286, 2835, 18161, 36170, 366, 445, 257, 2685, 1508, 295, 18894, 15277, 13, 51825], "temperature": 0.0, "avg_logprob": -0.10302507415298344, "compression_ratio": 1.77491961414791, "no_speech_prob": 0.00017756827583070844}, {"id": 2297, "seek": 624706, "start": 6247.06, "end": 6249.46, "text": " So we're going to start building out a neural net piece by piece.", "tokens": [50365, 407, 321, 434, 516, 281, 722, 2390, 484, 257, 18161, 2533, 2522, 538, 2522, 13, 50485], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2298, "seek": 624706, "start": 6249.46, "end": 6253.860000000001, "text": " And eventually we'll build out a two-layer multi-layer layer perceptron as it's called.", "tokens": [50485, 400, 4728, 321, 603, 1322, 484, 257, 732, 12, 8376, 260, 4825, 12, 8376, 260, 4583, 43276, 2044, 382, 309, 311, 1219, 13, 50705], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2299, "seek": 624706, "start": 6254.160000000001, "end": 6255.56, "text": " And I'll show you exactly what that means.", "tokens": [50720, 400, 286, 603, 855, 291, 2293, 437, 300, 1355, 13, 50790], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2300, "seek": 624706, "start": 6256.06, "end": 6257.660000000001, "text": " Let's start with a single individual neuron.", "tokens": [50815, 961, 311, 722, 365, 257, 2167, 2609, 34090, 13, 50895], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2301, "seek": 624706, "start": 6258.06, "end": 6259.26, "text": " We've implemented one here.", "tokens": [50915, 492, 600, 12270, 472, 510, 13, 50975], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2302, "seek": 624706, "start": 6259.660000000001, "end": 6264.06, "text": " But here I'm going to implement one that also subscribes to the PyTorch API.", "tokens": [50995, 583, 510, 286, 478, 516, 281, 4445, 472, 300, 611, 2325, 6446, 281, 264, 9953, 51, 284, 339, 9362, 13, 51215], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2303, "seek": 624706, "start": 6264.06, "end": 6266.860000000001, "text": " And how it designs its neural network modules.", "tokens": [51215, 400, 577, 309, 11347, 1080, 18161, 3209, 16679, 13, 51355], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2304, "seek": 624706, "start": 6267.46, "end": 6272.660000000001, "text": " So just like we saw that we can like match the API of PyTorch on the autograd side.", "tokens": [51385, 407, 445, 411, 321, 1866, 300, 321, 393, 411, 2995, 264, 9362, 295, 9953, 51, 284, 339, 322, 264, 1476, 664, 6206, 1252, 13, 51645], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2305, "seek": 624706, "start": 6273.160000000001, "end": 6275.360000000001, "text": " We're going to try to do that on the neural network modules.", "tokens": [51670, 492, 434, 516, 281, 853, 281, 360, 300, 322, 264, 18161, 3209, 16679, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2306, "seek": 624706, "start": 6276.06, "end": 6276.96, "text": " So here's class neuron.", "tokens": [51815, 407, 510, 311, 1508, 34090, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1237988806074592, "compression_ratio": 1.8366013071895424, "no_speech_prob": 0.00018083142640534788}, {"id": 2307, "seek": 627706, "start": 6277.46, "end": 6280.660000000001, "text": " And just for the sake of efficiency.", "tokens": [50385, 400, 445, 337, 264, 9717, 295, 10493, 13, 50545], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2308, "seek": 627706, "start": 6280.96, "end": 6284.360000000001, "text": " I'm going to copy paste some sections that are relatively straightforward.", "tokens": [50560, 286, 478, 516, 281, 5055, 9163, 512, 10863, 300, 366, 7226, 15325, 13, 50730], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2309, "seek": 627706, "start": 6285.660000000001, "end": 6289.46, "text": " So the constructor will take number of inputs to this neuron.", "tokens": [50795, 407, 264, 47479, 486, 747, 1230, 295, 15743, 281, 341, 34090, 13, 50985], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2310, "seek": 627706, "start": 6289.46, "end": 6292.160000000001, "text": " Which is how many inputs come to a neuron.", "tokens": [50985, 3013, 307, 577, 867, 15743, 808, 281, 257, 34090, 13, 51120], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2311, "seek": 627706, "start": 6292.56, "end": 6294.26, "text": " So this one for example has three inputs.", "tokens": [51140, 407, 341, 472, 337, 1365, 575, 1045, 15743, 13, 51225], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2312, "seek": 627706, "start": 6295.360000000001, "end": 6296.860000000001, "text": " And then it's going to create a weight.", "tokens": [51280, 400, 550, 309, 311, 516, 281, 1884, 257, 3364, 13, 51355], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2313, "seek": 627706, "start": 6297.360000000001, "end": 6300.860000000001, "text": " That is some random number between negative one and one for every one of those inputs.", "tokens": [51380, 663, 307, 512, 4974, 1230, 1296, 3671, 472, 293, 472, 337, 633, 472, 295, 729, 15743, 13, 51555], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2314, "seek": 627706, "start": 6301.360000000001, "end": 6305.160000000001, "text": " And a bias that controls the overall trigger happiness of this neuron.", "tokens": [51580, 400, 257, 12577, 300, 9003, 264, 4787, 7875, 8324, 295, 341, 34090, 13, 51770], "temperature": 0.0, "avg_logprob": -0.1813688104802912, "compression_ratio": 1.7338403041825095, "no_speech_prob": 0.00015539187006652355}, {"id": 2315, "seek": 630516, "start": 6305.16, "end": 6312.5599999999995, "text": " And then we're going to implement a def underscore underscore call of self and x.", "tokens": [50365, 400, 550, 321, 434, 516, 281, 4445, 257, 1060, 37556, 37556, 818, 295, 2698, 293, 2031, 13, 50735], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2316, "seek": 630516, "start": 6312.5599999999995, "end": 6313.5599999999995, "text": " Some input x.", "tokens": [50735, 2188, 4846, 2031, 13, 50785], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2317, "seek": 630516, "start": 6313.5599999999995, "end": 6316.86, "text": " And really what we don't want to do here is w times x plus b.", "tokens": [50785, 400, 534, 437, 321, 500, 380, 528, 281, 360, 510, 307, 261, 1413, 2031, 1804, 272, 13, 50950], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2318, "seek": 630516, "start": 6316.86, "end": 6320.26, "text": " Where w times x here is a dot product specifically.", "tokens": [50950, 2305, 261, 1413, 2031, 510, 307, 257, 5893, 1674, 4682, 13, 51120], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2319, "seek": 630516, "start": 6320.26, "end": 6323.26, "text": " Now if you haven't seen call.", "tokens": [51120, 823, 498, 291, 2378, 380, 1612, 818, 13, 51270], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2320, "seek": 630516, "start": 6323.26, "end": 6326.16, "text": " Let me just return 0.0 here for now.", "tokens": [51270, 961, 385, 445, 2736, 1958, 13, 15, 510, 337, 586, 13, 51415], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2321, "seek": 630516, "start": 6326.16, "end": 6330.36, "text": " The way this works now is we can have an x which is say like 2.0, 3.0.", "tokens": [51415, 440, 636, 341, 1985, 586, 307, 321, 393, 362, 364, 2031, 597, 307, 584, 411, 568, 13, 15, 11, 805, 13, 15, 13, 51625], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2322, "seek": 630516, "start": 6330.36, "end": 6333.26, "text": " Then we can initialize a neuron that is two-dimensional.", "tokens": [51625, 1396, 321, 393, 5883, 1125, 257, 34090, 300, 307, 732, 12, 18759, 13, 51770], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2323, "seek": 630516, "start": 6333.26, "end": 6335.0599999999995, "text": " Because these are two numbers.", "tokens": [51770, 1436, 613, 366, 732, 3547, 13, 51860], "temperature": 0.0, "avg_logprob": -0.24745083594507025, "compression_ratio": 1.564748201438849, "no_speech_prob": 0.00038756878348067403}, {"id": 2324, "seek": 633516, "start": 6335.16, "end": 6338.5599999999995, "text": " And then we can feed those two numbers into that neuron to get an output.", "tokens": [50365, 400, 550, 321, 393, 3154, 729, 732, 3547, 666, 300, 34090, 281, 483, 364, 5598, 13, 50535], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2325, "seek": 633516, "start": 6339.5599999999995, "end": 6342.5599999999995, "text": " And so when you use this notation n of x.", "tokens": [50585, 400, 370, 562, 291, 764, 341, 24657, 297, 295, 2031, 13, 50735], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2326, "seek": 633516, "start": 6342.5599999999995, "end": 6344.0599999999995, "text": " Python will use call.", "tokens": [50735, 15329, 486, 764, 818, 13, 50810], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2327, "seek": 633516, "start": 6344.86, "end": 6346.96, "text": " So currently call just returns 0.0.", "tokens": [50850, 407, 4362, 818, 445, 11247, 1958, 13, 15, 13, 50955], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2328, "seek": 633516, "start": 6349.96, "end": 6353.96, "text": " Now we'd like to actually do the forward pass of this neuron instead.", "tokens": [51105, 823, 321, 1116, 411, 281, 767, 360, 264, 2128, 1320, 295, 341, 34090, 2602, 13, 51305], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2329, "seek": 633516, "start": 6354.76, "end": 6356.36, "text": " So we're going to do here first.", "tokens": [51345, 407, 321, 434, 516, 281, 360, 510, 700, 13, 51425], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2330, "seek": 633516, "start": 6356.5599999999995, "end": 6360.26, "text": " Is we need to basically multiply all of the elements of w.", "tokens": [51435, 1119, 321, 643, 281, 1936, 12972, 439, 295, 264, 4959, 295, 261, 13, 51620], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2331, "seek": 633516, "start": 6360.26, "end": 6362.46, "text": " With all of the elements of x pairwise.", "tokens": [51620, 2022, 439, 295, 264, 4959, 295, 2031, 6119, 3711, 13, 51730], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2332, "seek": 633516, "start": 6362.46, "end": 6363.46, "text": " We need to multiply them.", "tokens": [51730, 492, 643, 281, 12972, 552, 13, 51780], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2333, "seek": 633516, "start": 6364.16, "end": 6365.0599999999995, "text": " So the first thing we're going to do.", "tokens": [51815, 407, 264, 700, 551, 321, 434, 516, 281, 360, 13, 51860], "temperature": 0.0, "avg_logprob": -0.17375958155071924, "compression_ratio": 1.7351778656126482, "no_speech_prob": 0.0002152076194761321}, {"id": 2334, "seek": 636506, "start": 6365.06, "end": 6369.06, "text": " Is we're going to zip up salta w and x.", "tokens": [50365, 1119, 321, 434, 516, 281, 20730, 493, 1845, 1328, 261, 293, 2031, 13, 50565], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2335, "seek": 636506, "start": 6369.06, "end": 6372.660000000001, "text": " And in Python zip takes two iterators.", "tokens": [50565, 400, 294, 15329, 20730, 2516, 732, 17138, 3391, 13, 50745], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2336, "seek": 636506, "start": 6372.660000000001, "end": 6377.96, "text": " And it creates a new iterator that iterates over the tuples of their corresponding entries.", "tokens": [50745, 400, 309, 7829, 257, 777, 17138, 1639, 300, 17138, 1024, 670, 264, 2604, 2622, 295, 641, 11760, 23041, 13, 51010], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2337, "seek": 636506, "start": 6377.96, "end": 6382.06, "text": " So for example, just to show you we can print this list.", "tokens": [51010, 407, 337, 1365, 11, 445, 281, 855, 291, 321, 393, 4482, 341, 1329, 13, 51215], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2338, "seek": 636506, "start": 6382.06, "end": 6385.860000000001, "text": " And still return 0.0 here.", "tokens": [51215, 400, 920, 2736, 1958, 13, 15, 510, 13, 51405], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2339, "seek": 636506, "start": 6390.860000000001, "end": 6392.56, "text": " Sorry.", "tokens": [51655, 4919, 13, 51740], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2340, "seek": 636506, "start": 6392.56, "end": 6394.26, "text": " I'm in life.", "tokens": [51740, 286, 478, 294, 993, 13, 51825], "temperature": 0.0, "avg_logprob": -0.30821208066718525, "compression_ratio": 1.4731182795698925, "no_speech_prob": 0.00015122306649573147}, {"id": 2341, "seek": 639426, "start": 6394.26, "end": 6397.46, "text": " So we see that these w's are paired up with the x's.", "tokens": [50365, 407, 321, 536, 300, 613, 261, 311, 366, 25699, 493, 365, 264, 2031, 311, 13, 50525], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2342, "seek": 639426, "start": 6397.46, "end": 6398.66, "text": " W with x.", "tokens": [50525, 343, 365, 2031, 13, 50585], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2343, "seek": 639426, "start": 6401.66, "end": 6403.16, "text": " And now what we want to do is.", "tokens": [50735, 400, 586, 437, 321, 528, 281, 360, 307, 13, 50810], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2344, "seek": 639426, "start": 6407.56, "end": 6409.860000000001, "text": " For wi xi in.", "tokens": [51030, 1171, 26393, 36800, 294, 13, 51145], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2345, "seek": 639426, "start": 6410.860000000001, "end": 6414.26, "text": " We want to multiply w times wi times xi.", "tokens": [51195, 492, 528, 281, 12972, 261, 1413, 26393, 1413, 36800, 13, 51365], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2346, "seek": 639426, "start": 6415.06, "end": 6417.26, "text": " And then we want to sum all of that together.", "tokens": [51405, 400, 550, 321, 528, 281, 2408, 439, 295, 300, 1214, 13, 51515], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2347, "seek": 639426, "start": 6417.76, "end": 6419.06, "text": " To come up with an activation.", "tokens": [51540, 1407, 808, 493, 365, 364, 24433, 13, 51605], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2348, "seek": 639426, "start": 6419.76, "end": 6421.66, "text": " And add also salta b on top.", "tokens": [51640, 400, 909, 611, 1845, 1328, 272, 322, 1192, 13, 51735], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2349, "seek": 639426, "start": 6422.46, "end": 6423.66, "text": " So that's the raw activation.", "tokens": [51775, 407, 300, 311, 264, 8936, 24433, 13, 51835], "temperature": 0.0, "avg_logprob": -0.18569272756576538, "compression_ratio": 1.632183908045977, "no_speech_prob": 0.0001934453030116856}, {"id": 2350, "seek": 642426, "start": 6424.26, "end": 6426.860000000001, "text": " And then of course we need to pass that through a null linearity.", "tokens": [50365, 400, 550, 295, 1164, 321, 643, 281, 1320, 300, 807, 257, 18184, 8213, 507, 13, 50495], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2351, "seek": 642426, "start": 6426.860000000001, "end": 6430.26, "text": " So what we're going to be returning is act dot 10h.", "tokens": [50495, 407, 437, 321, 434, 516, 281, 312, 12678, 307, 605, 5893, 1266, 71, 13, 50665], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2352, "seek": 642426, "start": 6430.26, "end": 6432.46, "text": " And here's out.", "tokens": [50665, 400, 510, 311, 484, 13, 50775], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2353, "seek": 642426, "start": 6432.46, "end": 6435.76, "text": " So now we see that we are getting some outputs.", "tokens": [50775, 407, 586, 321, 536, 300, 321, 366, 1242, 512, 23930, 13, 50940], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2354, "seek": 642426, "start": 6435.76, "end": 6437.56, "text": " And we get a different output from a neuron each time.", "tokens": [50940, 400, 321, 483, 257, 819, 5598, 490, 257, 34090, 1184, 565, 13, 51030], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2355, "seek": 642426, "start": 6437.56, "end": 6441.56, "text": " Because we are initializing different weights and biases.", "tokens": [51030, 1436, 321, 366, 5883, 3319, 819, 17443, 293, 32152, 13, 51230], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2356, "seek": 642426, "start": 6441.56, "end": 6443.66, "text": " And then to be a bit more efficient here actually.", "tokens": [51230, 400, 550, 281, 312, 257, 857, 544, 7148, 510, 767, 13, 51335], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2357, "seek": 642426, "start": 6443.66, "end": 6447.56, "text": " Sum by the way takes a second optional parameter.", "tokens": [51335, 8626, 538, 264, 636, 2516, 257, 1150, 17312, 13075, 13, 51530], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2358, "seek": 642426, "start": 6447.56, "end": 6449.16, "text": " Which is the start.", "tokens": [51530, 3013, 307, 264, 722, 13, 51610], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2359, "seek": 642426, "start": 6449.16, "end": 6451.66, "text": " And by default the start is 0.", "tokens": [51610, 400, 538, 7576, 264, 722, 307, 1958, 13, 51735], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2360, "seek": 642426, "start": 6451.66, "end": 6453.66, "text": " So these elements of this sum.", "tokens": [51735, 407, 613, 4959, 295, 341, 2408, 13, 51835], "temperature": 0.0, "avg_logprob": -0.2022354964053992, "compression_ratio": 1.7035714285714285, "no_speech_prob": 0.0003228274581488222}, {"id": 2361, "seek": 645366, "start": 6453.66, "end": 6455.86, "text": " Will be added on top of 0 to begin with.", "tokens": [50365, 3099, 312, 3869, 322, 1192, 295, 1958, 281, 1841, 365, 13, 50475], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2362, "seek": 645366, "start": 6455.86, "end": 6457.66, "text": " But actually we can just start with salta b.", "tokens": [50475, 583, 767, 321, 393, 445, 722, 365, 1845, 1328, 272, 13, 50565], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2363, "seek": 645366, "start": 6458.5599999999995, "end": 6460.26, "text": " And then we just have an expression like this.", "tokens": [50610, 400, 550, 321, 445, 362, 364, 6114, 411, 341, 13, 50695], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2364, "seek": 645366, "start": 6465.66, "end": 6468.76, "text": " And then the generator expression here must be parenthesized in python.", "tokens": [50965, 400, 550, 264, 19265, 6114, 510, 1633, 312, 23350, 279, 1602, 294, 38797, 13, 51120], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2365, "seek": 645366, "start": 6469.5599999999995, "end": 6470.0599999999995, "text": " There we go.", "tokens": [51160, 821, 321, 352, 13, 51185], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2366, "seek": 645366, "start": 6473.96, "end": 6476.26, "text": " Yep so now we can forward a single neuron.", "tokens": [51380, 7010, 370, 586, 321, 393, 2128, 257, 2167, 34090, 13, 51495], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2367, "seek": 645366, "start": 6476.66, "end": 6479.0599999999995, "text": " Next up we're going to define a layer of neurons.", "tokens": [51515, 3087, 493, 321, 434, 516, 281, 6964, 257, 4583, 295, 22027, 13, 51635], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2368, "seek": 645366, "start": 6479.46, "end": 6482.0599999999995, "text": " So here we have a schematic for a MLP.", "tokens": [51655, 407, 510, 321, 362, 257, 44739, 337, 257, 21601, 47, 13, 51785], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2369, "seek": 645366, "start": 6482.66, "end": 6483.5599999999995, "text": " So we see that.", "tokens": [51815, 407, 321, 536, 300, 13, 51860], "temperature": 0.0, "avg_logprob": -0.14746185552294008, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.00019510864512994885}, {"id": 2370, "seek": 648366, "start": 6483.66, "end": 6485.36, "text": " These MLPs each layer.", "tokens": [50365, 1981, 21601, 23043, 1184, 4583, 13, 50450], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2371, "seek": 648366, "start": 6485.36, "end": 6486.46, "text": " This is one layer.", "tokens": [50450, 639, 307, 472, 4583, 13, 50505], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2372, "seek": 648366, "start": 6486.46, "end": 6487.96, "text": " Has actually a number of neurons.", "tokens": [50505, 8646, 767, 257, 1230, 295, 22027, 13, 50580], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2373, "seek": 648366, "start": 6487.96, "end": 6489.16, "text": " And they're not connected to each other.", "tokens": [50580, 400, 436, 434, 406, 4582, 281, 1184, 661, 13, 50640], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2374, "seek": 648366, "start": 6489.16, "end": 6491.46, "text": " But all of them are fully connected to the input.", "tokens": [50640, 583, 439, 295, 552, 366, 4498, 4582, 281, 264, 4846, 13, 50755], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2375, "seek": 648366, "start": 6491.46, "end": 6493.16, "text": " So what is a layer of neurons?", "tokens": [50755, 407, 437, 307, 257, 4583, 295, 22027, 30, 50840], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2376, "seek": 648366, "start": 6493.16, "end": 6496.76, "text": " It's just it's just a set of neurons evaluated independently.", "tokens": [50840, 467, 311, 445, 309, 311, 445, 257, 992, 295, 22027, 25509, 21761, 13, 51020], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2377, "seek": 648366, "start": 6496.76, "end": 6499.16, "text": " So in the interest of time.", "tokens": [51020, 407, 294, 264, 1179, 295, 565, 13, 51140], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2378, "seek": 648366, "start": 6499.16, "end": 6503.16, "text": " I'm going to do something fairly straightforward here.", "tokens": [51140, 286, 478, 516, 281, 360, 746, 6457, 15325, 510, 13, 51340], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2379, "seek": 648366, "start": 6503.16, "end": 6509.16, "text": " It's literally a layer is just a list of neurons.", "tokens": [51340, 467, 311, 3736, 257, 4583, 307, 445, 257, 1329, 295, 22027, 13, 51640], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2380, "seek": 648366, "start": 6509.16, "end": 6510.76, "text": " And then how many neurons do we have?", "tokens": [51640, 400, 550, 577, 867, 22027, 360, 321, 362, 30, 51720], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2381, "seek": 648366, "start": 6510.76, "end": 6512.76, "text": " We take that as an input argument here.", "tokens": [51720, 492, 747, 300, 382, 364, 4846, 6770, 510, 13, 51820], "temperature": 0.0, "avg_logprob": -0.1367545850349195, "compression_ratio": 1.7602996254681649, "no_speech_prob": 0.00026677994173951447}, {"id": 2382, "seek": 651276, "start": 6512.76, "end": 6515.860000000001, "text": " How many neurons do you want in your layer number of outputs in this layer?", "tokens": [50365, 1012, 867, 22027, 360, 291, 528, 294, 428, 4583, 1230, 295, 23930, 294, 341, 4583, 30, 50520], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2383, "seek": 651276, "start": 6516.76, "end": 6521.16, "text": " And so we just initialize completely independent neurons with this given dimensionality.", "tokens": [50565, 400, 370, 321, 445, 5883, 1125, 2584, 6695, 22027, 365, 341, 2212, 10139, 1860, 13, 50785], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2384, "seek": 651276, "start": 6521.46, "end": 6522.96, "text": " And we call on it.", "tokens": [50800, 400, 321, 818, 322, 309, 13, 50875], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2385, "seek": 651276, "start": 6522.96, "end": 6525.860000000001, "text": " We just independently evaluate them.", "tokens": [50875, 492, 445, 21761, 13059, 552, 13, 51020], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2386, "seek": 651276, "start": 6526.46, "end": 6529.66, "text": " So now instead of a neuron we can make a layer of neurons.", "tokens": [51050, 407, 586, 2602, 295, 257, 34090, 321, 393, 652, 257, 4583, 295, 22027, 13, 51210], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2387, "seek": 651276, "start": 6529.66, "end": 6531.860000000001, "text": " They are two dimensional neurons and let's have three of them.", "tokens": [51210, 814, 366, 732, 18795, 22027, 293, 718, 311, 362, 1045, 295, 552, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2388, "seek": 651276, "start": 6532.46, "end": 6537.66, "text": " And now we see that we have three independent evaluations of three different neurons, right?", "tokens": [51350, 400, 586, 321, 536, 300, 321, 362, 1045, 6695, 43085, 295, 1045, 819, 22027, 11, 558, 30, 51610], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2389, "seek": 651276, "start": 6538.96, "end": 6539.16, "text": " Okay.", "tokens": [51675, 1033, 13, 51685], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2390, "seek": 651276, "start": 6539.16, "end": 6542.56, "text": " And finally, let's complete this picture and define an entire multi-layer.", "tokens": [51685, 400, 2721, 11, 718, 311, 3566, 341, 3036, 293, 6964, 364, 2302, 4825, 12, 8376, 260, 13, 51855], "temperature": 0.0, "avg_logprob": -0.1772370565505255, "compression_ratio": 1.8428571428571427, "no_speech_prob": 0.00014930299948900938}, {"id": 2391, "seek": 654256, "start": 6542.56, "end": 6544.06, "text": " Perceptron or MLP.", "tokens": [50365, 3026, 1336, 2044, 420, 21601, 47, 13, 50440], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2392, "seek": 654256, "start": 6544.06, "end": 6548.46, "text": " And as we can see here in an MLP, these layers just feed into each other sequentially.", "tokens": [50440, 400, 382, 321, 393, 536, 510, 294, 364, 21601, 47, 11, 613, 7914, 445, 3154, 666, 1184, 661, 5123, 3137, 13, 50660], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2393, "seek": 654256, "start": 6548.46, "end": 6553.46, "text": " So let's come here and I'm just going to copy the code here in interest of time.", "tokens": [50660, 407, 718, 311, 808, 510, 293, 286, 478, 445, 516, 281, 5055, 264, 3089, 510, 294, 1179, 295, 565, 13, 50910], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2394, "seek": 654256, "start": 6553.46, "end": 6556.06, "text": " So an MLP is very similar.", "tokens": [50910, 407, 364, 21601, 47, 307, 588, 2531, 13, 51040], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2395, "seek": 654256, "start": 6556.06, "end": 6559.26, "text": " We're taking the number of inputs as before.", "tokens": [51040, 492, 434, 1940, 264, 1230, 295, 15743, 382, 949, 13, 51200], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2396, "seek": 654256, "start": 6559.26, "end": 6563.360000000001, "text": " But now instead of saying taking a single and out which is number of neurons in a single layer.", "tokens": [51200, 583, 586, 2602, 295, 1566, 1940, 257, 2167, 293, 484, 597, 307, 1230, 295, 22027, 294, 257, 2167, 4583, 13, 51405], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2397, "seek": 654256, "start": 6563.360000000001, "end": 6569.56, "text": " We're going to take a list of an outs and this list defines the sizes of all the layers that we want in our MLP.", "tokens": [51405, 492, 434, 516, 281, 747, 257, 1329, 295, 364, 14758, 293, 341, 1329, 23122, 264, 11602, 295, 439, 264, 7914, 300, 321, 528, 294, 527, 21601, 47, 13, 51715], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2398, "seek": 654256, "start": 6569.56, "end": 6572.26, "text": " So here we just put them all together and then iterate.", "tokens": [51715, 407, 510, 321, 445, 829, 552, 439, 1214, 293, 550, 44497, 13, 51850], "temperature": 0.0, "avg_logprob": -0.20482816896238526, "compression_ratio": 1.760942760942761, "no_speech_prob": 0.00011874394840560853}, {"id": 2399, "seek": 657256, "start": 6572.56, "end": 6577.06, "text": " Over consecutive pairs of these sizes and create a layer objects for them.", "tokens": [50365, 4886, 30497, 15494, 295, 613, 11602, 293, 1884, 257, 4583, 6565, 337, 552, 13, 50590], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2400, "seek": 657256, "start": 6577.76, "end": 6580.160000000001, "text": " And then in the call function, we are just calling them sequentially.", "tokens": [50625, 400, 550, 294, 264, 818, 2445, 11, 321, 366, 445, 5141, 552, 5123, 3137, 13, 50745], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2401, "seek": 657256, "start": 6580.46, "end": 6581.96, "text": " So that's an MLP really.", "tokens": [50760, 407, 300, 311, 364, 21601, 47, 534, 13, 50835], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2402, "seek": 657256, "start": 6582.76, "end": 6584.46, "text": " And let's actually re-implement this picture.", "tokens": [50875, 400, 718, 311, 767, 319, 12, 332, 43704, 341, 3036, 13, 50960], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2403, "seek": 657256, "start": 6584.46, "end": 6588.46, "text": " So we want three input neurons and then two layers of four and an output unit.", "tokens": [50960, 407, 321, 528, 1045, 4846, 22027, 293, 550, 732, 7914, 295, 1451, 293, 364, 5598, 4985, 13, 51160], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2404, "seek": 657256, "start": 6589.56, "end": 6593.360000000001, "text": " So we want three dimensional input.", "tokens": [51215, 407, 321, 528, 1045, 18795, 4846, 13, 51405], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2405, "seek": 657256, "start": 6593.46, "end": 6594.76, "text": " Say this is an example input.", "tokens": [51410, 6463, 341, 307, 364, 1365, 4846, 13, 51475], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2406, "seek": 657256, "start": 6595.160000000001, "end": 6599.96, "text": " We want three inputs into two layers of four and one output.", "tokens": [51495, 492, 528, 1045, 15743, 666, 732, 7914, 295, 1451, 293, 472, 5598, 13, 51735], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2407, "seek": 657256, "start": 6600.360000000001, "end": 6601.96, "text": " And this of course is an MLP.", "tokens": [51755, 400, 341, 295, 1164, 307, 364, 21601, 47, 13, 51835], "temperature": 0.0, "avg_logprob": -0.18269588152567545, "compression_ratio": 1.8636363636363635, "no_speech_prob": 0.00044146686559543014}, {"id": 2408, "seek": 660256, "start": 6602.56, "end": 6604.56, "text": " And there we go.", "tokens": [50365, 400, 456, 321, 352, 13, 50465], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2409, "seek": 660256, "start": 6604.56, "end": 6606.160000000001, "text": " That's a forward pass of an MLP.", "tokens": [50465, 663, 311, 257, 2128, 1320, 295, 364, 21601, 47, 13, 50545], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2410, "seek": 660256, "start": 6606.160000000001, "end": 6608.26, "text": " To make this a little bit nicer.", "tokens": [50545, 1407, 652, 341, 257, 707, 857, 22842, 13, 50650], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2411, "seek": 660256, "start": 6608.26, "end": 6613.06, "text": " You see how we have just a single element, but it's wrapped in a list because layer always returns lists.", "tokens": [50650, 509, 536, 577, 321, 362, 445, 257, 2167, 4478, 11, 457, 309, 311, 14226, 294, 257, 1329, 570, 4583, 1009, 11247, 14511, 13, 50890], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2412, "seek": 660256, "start": 6613.06, "end": 6620.06, "text": " So for convenience, return outs at zero if len outs is exactly a single element.", "tokens": [50890, 407, 337, 19283, 11, 2736, 14758, 412, 4018, 498, 40116, 14758, 307, 2293, 257, 2167, 4478, 13, 51240], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2413, "seek": 660256, "start": 6620.06, "end": 6622.06, "text": " Else return fullest.", "tokens": [51240, 45472, 2736, 45154, 13, 51340], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2414, "seek": 660256, "start": 6622.06, "end": 6627.06, "text": " And this will allow us to just get a single value out at the last layer that only has a single neuron.", "tokens": [51340, 400, 341, 486, 2089, 505, 281, 445, 483, 257, 2167, 2158, 484, 412, 264, 1036, 4583, 300, 787, 575, 257, 2167, 34090, 13, 51590], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2415, "seek": 660256, "start": 6627.06, "end": 6631.06, "text": " And finally, we should be able to draw a dot of N of X.", "tokens": [51590, 400, 2721, 11, 321, 820, 312, 1075, 281, 2642, 257, 5893, 295, 426, 295, 1783, 13, 51790], "temperature": 0.0, "avg_logprob": -0.24770773910894628, "compression_ratio": 1.6327272727272728, "no_speech_prob": 0.0005850358284078538}, {"id": 2416, "seek": 663256, "start": 6632.56, "end": 6637.96, "text": " As you might imagine, these expressions are now getting relatively involved.", "tokens": [50365, 1018, 291, 1062, 3811, 11, 613, 15277, 366, 586, 1242, 7226, 3288, 13, 50635], "temperature": 0.0, "avg_logprob": -0.1620877512385336, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0002895294746849686}, {"id": 2417, "seek": 663256, "start": 6638.660000000001, "end": 6641.160000000001, "text": " So this is an entire MLP that we're defining now.", "tokens": [50670, 407, 341, 307, 364, 2302, 21601, 47, 300, 321, 434, 17827, 586, 13, 50795], "temperature": 0.0, "avg_logprob": -0.1620877512385336, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0002895294746849686}, {"id": 2418, "seek": 663256, "start": 6645.360000000001, "end": 6647.360000000001, "text": " All the way until a single output.", "tokens": [51005, 1057, 264, 636, 1826, 257, 2167, 5598, 13, 51105], "temperature": 0.0, "avg_logprob": -0.1620877512385336, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0002895294746849686}, {"id": 2419, "seek": 663256, "start": 6648.360000000001, "end": 6653.46, "text": " Okay, and so obviously you would never differentiate on pen and paper these expressions.", "tokens": [51155, 1033, 11, 293, 370, 2745, 291, 576, 1128, 23203, 322, 3435, 293, 3035, 613, 15277, 13, 51410], "temperature": 0.0, "avg_logprob": -0.1620877512385336, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0002895294746849686}, {"id": 2420, "seek": 663256, "start": 6653.660000000001, "end": 6662.360000000001, "text": " But with micrograd, we will be able to back propagate all the way through this and back propagate into these weights of all these neurons.", "tokens": [51420, 583, 365, 4532, 7165, 11, 321, 486, 312, 1075, 281, 646, 48256, 439, 264, 636, 807, 341, 293, 646, 48256, 666, 613, 17443, 295, 439, 613, 22027, 13, 51855], "temperature": 0.0, "avg_logprob": -0.1620877512385336, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0002895294746849686}, {"id": 2421, "seek": 666256, "start": 6662.56, "end": 6664.360000000001, "text": " So let's see how that works.", "tokens": [50365, 407, 718, 311, 536, 577, 300, 1985, 13, 50455], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2422, "seek": 666256, "start": 6664.360000000001, "end": 6668.360000000001, "text": " Okay, so let's create ourselves a very simple example data set here.", "tokens": [50455, 1033, 11, 370, 718, 311, 1884, 4175, 257, 588, 2199, 1365, 1412, 992, 510, 13, 50655], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2423, "seek": 666256, "start": 6668.360000000001, "end": 6670.360000000001, "text": " So this data set has four examples.", "tokens": [50655, 407, 341, 1412, 992, 575, 1451, 5110, 13, 50755], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2424, "seek": 666256, "start": 6670.360000000001, "end": 6675.360000000001, "text": " And so we have four possible inputs into the neural net.", "tokens": [50755, 400, 370, 321, 362, 1451, 1944, 15743, 666, 264, 18161, 2533, 13, 51005], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2425, "seek": 666256, "start": 6675.360000000001, "end": 6677.360000000001, "text": " And we have four desired targets.", "tokens": [51005, 400, 321, 362, 1451, 14721, 12911, 13, 51105], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2426, "seek": 666256, "start": 6677.360000000001, "end": 6684.360000000001, "text": " So we'd like the neural net to assign or output 1.0 when it's fed this example.", "tokens": [51105, 407, 321, 1116, 411, 264, 18161, 2533, 281, 6269, 420, 5598, 502, 13, 15, 562, 309, 311, 4636, 341, 1365, 13, 51455], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2427, "seek": 666256, "start": 6684.360000000001, "end": 6686.360000000001, "text": " Negative one when it's fed these examples.", "tokens": [51455, 43230, 472, 562, 309, 311, 4636, 613, 5110, 13, 51555], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2428, "seek": 666256, "start": 6686.360000000001, "end": 6688.360000000001, "text": " And one when it's fed this example.", "tokens": [51555, 400, 472, 562, 309, 311, 4636, 341, 1365, 13, 51655], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2429, "seek": 666256, "start": 6688.360000000001, "end": 6692.360000000001, "text": " So it's a very simple binary classifier neural net basically that we would like here.", "tokens": [51655, 407, 309, 311, 257, 588, 2199, 17434, 1508, 9902, 18161, 2533, 1936, 300, 321, 576, 411, 510, 13, 51855], "temperature": 0.0, "avg_logprob": -0.13462240733797587, "compression_ratio": 1.9541666666666666, "no_speech_prob": 0.0008121413411572576}, {"id": 2430, "seek": 669256, "start": 6692.56, "end": 6695.96, "text": " Now let's think what the neural net currently thinks about these four examples.", "tokens": [50365, 823, 718, 311, 519, 437, 264, 18161, 2533, 4362, 7309, 466, 613, 1451, 5110, 13, 50535], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2431, "seek": 669256, "start": 6695.96, "end": 6698.26, "text": " We can just get their predictions.", "tokens": [50535, 492, 393, 445, 483, 641, 21264, 13, 50650], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2432, "seek": 669256, "start": 6698.26, "end": 6702.160000000001, "text": " Basically, we can just call N of X for X and Xs.", "tokens": [50650, 8537, 11, 321, 393, 445, 818, 426, 295, 1783, 337, 1783, 293, 1783, 82, 13, 50845], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2433, "seek": 669256, "start": 6702.160000000001, "end": 6705.160000000001, "text": " And then we can print.", "tokens": [50845, 400, 550, 321, 393, 4482, 13, 50995], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2434, "seek": 669256, "start": 6705.160000000001, "end": 6708.96, "text": " So these are the outputs of the neural net on those four examples.", "tokens": [50995, 407, 613, 366, 264, 23930, 295, 264, 18161, 2533, 322, 729, 1451, 5110, 13, 51185], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2435, "seek": 669256, "start": 6708.96, "end": 6713.860000000001, "text": " So the first one is 0.91, but we'd like it to be one.", "tokens": [51185, 407, 264, 700, 472, 307, 1958, 13, 29925, 11, 457, 321, 1116, 411, 309, 281, 312, 472, 13, 51430], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2436, "seek": 669256, "start": 6713.860000000001, "end": 6715.860000000001, "text": " So we should push this one higher.", "tokens": [51430, 407, 321, 820, 2944, 341, 472, 2946, 13, 51530], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2437, "seek": 669256, "start": 6715.860000000001, "end": 6718.26, "text": " This one we want to be higher.", "tokens": [51530, 639, 472, 321, 528, 281, 312, 2946, 13, 51650], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2438, "seek": 669256, "start": 6718.26, "end": 6722.360000000001, "text": " This one says 0.88, and we want this to be negative one.", "tokens": [51650, 639, 472, 1619, 1958, 13, 16919, 11, 293, 321, 528, 341, 281, 312, 3671, 472, 13, 51855], "temperature": 0.0, "avg_logprob": -0.13933328598264663, "compression_ratio": 1.7622950819672132, "no_speech_prob": 0.00022492368589155376}, {"id": 2439, "seek": 672256, "start": 6722.56, "end": 6725.160000000001, "text": " This is 0.88, we want it to be negative one.", "tokens": [50365, 639, 307, 1958, 13, 16919, 11, 321, 528, 309, 281, 312, 3671, 472, 13, 50495], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2440, "seek": 672256, "start": 6725.160000000001, "end": 6728.160000000001, "text": " And this one is 0.88, we want it to be one.", "tokens": [50495, 400, 341, 472, 307, 1958, 13, 16919, 11, 321, 528, 309, 281, 312, 472, 13, 50645], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2441, "seek": 672256, "start": 6728.160000000001, "end": 6730.160000000001, "text": " So how do we make the neural net?", "tokens": [50645, 407, 577, 360, 321, 652, 264, 18161, 2533, 30, 50745], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2442, "seek": 672256, "start": 6730.160000000001, "end": 6736.76, "text": " And how do we tune the weights to better predict the desired targets?", "tokens": [50745, 400, 577, 360, 321, 10864, 264, 17443, 281, 1101, 6069, 264, 14721, 12911, 30, 51075], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2443, "seek": 672256, "start": 6736.76, "end": 6741.860000000001, "text": " And the trick used in deep learning to achieve this is to calculate a single number", "tokens": [51075, 400, 264, 4282, 1143, 294, 2452, 2539, 281, 4584, 341, 307, 281, 8873, 257, 2167, 1230, 51330], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2444, "seek": 672256, "start": 6741.860000000001, "end": 6745.160000000001, "text": " that somehow measures the total performance of your neural net.", "tokens": [51330, 300, 6063, 8000, 264, 3217, 3389, 295, 428, 18161, 2533, 13, 51495], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2445, "seek": 672256, "start": 6745.160000000001, "end": 6748.06, "text": " And we call this single number the loss.", "tokens": [51495, 400, 321, 818, 341, 2167, 1230, 264, 4470, 13, 51640], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2446, "seek": 672256, "start": 6748.06, "end": 6752.26, "text": " So the loss first is a single number", "tokens": [51640, 407, 264, 4470, 700, 307, 257, 2167, 1230, 51850], "temperature": 0.0, "avg_logprob": -0.1345621379075852, "compression_ratio": 1.8495575221238938, "no_speech_prob": 0.0001316395791945979}, {"id": 2447, "seek": 675256, "start": 6752.56, "end": 6756.26, "text": " that we're going to define that basically measures how well the neural net is performing.", "tokens": [50365, 300, 321, 434, 516, 281, 6964, 300, 1936, 8000, 577, 731, 264, 18161, 2533, 307, 10205, 13, 50550], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2448, "seek": 675256, "start": 6756.26, "end": 6758.56, "text": " Right now, we have the intuitive sense that it's not performing very well", "tokens": [50550, 1779, 586, 11, 321, 362, 264, 21769, 2020, 300, 309, 311, 406, 10205, 588, 731, 50665], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2449, "seek": 675256, "start": 6758.56, "end": 6761.06, "text": " because we're not very much close to this.", "tokens": [50665, 570, 321, 434, 406, 588, 709, 1998, 281, 341, 13, 50790], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2450, "seek": 675256, "start": 6761.06, "end": 6764.860000000001, "text": " So the loss will be high, and we'll want to minimize the loss.", "tokens": [50790, 407, 264, 4470, 486, 312, 1090, 11, 293, 321, 603, 528, 281, 17522, 264, 4470, 13, 50980], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2451, "seek": 675256, "start": 6764.860000000001, "end": 6769.860000000001, "text": " So in particular, in this case, what we're going to do is we're going to implement the mean squared error loss.", "tokens": [50980, 407, 294, 1729, 11, 294, 341, 1389, 11, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 4445, 264, 914, 8889, 6713, 4470, 13, 51230], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2452, "seek": 675256, "start": 6769.860000000001, "end": 6774.160000000001, "text": " So what this is doing is we're going to basically iterate", "tokens": [51230, 407, 437, 341, 307, 884, 307, 321, 434, 516, 281, 1936, 44497, 51445], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2453, "seek": 675256, "start": 6774.160000000001, "end": 6781.360000000001, "text": " for Y ground truth and Y output in zip of Ys and Ybred.", "tokens": [51445, 337, 398, 2727, 3494, 293, 398, 5598, 294, 20730, 295, 398, 82, 293, 398, 65, 986, 13, 51805], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2454, "seek": 675256, "start": 6781.360000000001, "end": 6782.360000000001, "text": " So we're going to pair up", "tokens": [51805, 407, 321, 434, 516, 281, 6119, 493, 51855], "temperature": 0.0, "avg_logprob": -0.16851765176524286, "compression_ratio": 1.9084249084249085, "no_speech_prob": 0.0009999398607760668}, {"id": 2455, "seek": 678236, "start": 6782.36, "end": 6789.0599999999995, "text": " the ground truths with the predictions and the zip iterates over tuples of them.", "tokens": [50365, 264, 2727, 30079, 365, 264, 21264, 293, 264, 20730, 17138, 1024, 670, 2604, 2622, 295, 552, 13, 50700], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2456, "seek": 678236, "start": 6789.0599999999995, "end": 6793.259999999999, "text": " And for each Y ground truth and Y output,", "tokens": [50700, 400, 337, 1184, 398, 2727, 3494, 293, 398, 5598, 11, 50910], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2457, "seek": 678236, "start": 6793.259999999999, "end": 6798.759999999999, "text": " we're going to subtract them and square them.", "tokens": [50910, 321, 434, 516, 281, 16390, 552, 293, 3732, 552, 13, 51185], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2458, "seek": 678236, "start": 6798.759999999999, "end": 6803.0599999999995, "text": " So let's first see what these losses are. These are individual loss components.", "tokens": [51185, 407, 718, 311, 700, 536, 437, 613, 15352, 366, 13, 1981, 366, 2609, 4470, 6677, 13, 51400], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2459, "seek": 678236, "start": 6803.0599999999995, "end": 6806.5599999999995, "text": " And so basically for each one of the four,", "tokens": [51400, 400, 370, 1936, 337, 1184, 472, 295, 264, 1451, 11, 51575], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2460, "seek": 678236, "start": 6806.5599999999995, "end": 6809.5599999999995, "text": " we are taking the prediction and the ground truth.", "tokens": [51575, 321, 366, 1940, 264, 17630, 293, 264, 2727, 3494, 13, 51725], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2461, "seek": 678236, "start": 6809.5599999999995, "end": 6811.5599999999995, "text": " We are subtracting them and squaring them.", "tokens": [51725, 492, 366, 16390, 278, 552, 293, 2339, 1921, 552, 13, 51825], "temperature": 0.0, "avg_logprob": -0.10733320275131537, "compression_ratio": 1.7990654205607477, "no_speech_prob": 0.00047999207163229585}, {"id": 2462, "seek": 681236, "start": 6812.36, "end": 6816.36, "text": " So because this one is so close to its target,", "tokens": [50365, 407, 570, 341, 472, 307, 370, 1998, 281, 1080, 3779, 11, 50565], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2463, "seek": 681236, "start": 6816.36, "end": 6822.0599999999995, "text": " 0.91 is almost 1, subtracting them gives a very small number.", "tokens": [50565, 1958, 13, 29925, 307, 1920, 502, 11, 16390, 278, 552, 2709, 257, 588, 1359, 1230, 13, 50850], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2464, "seek": 681236, "start": 6822.0599999999995, "end": 6824.36, "text": " So here we would get like a negative 0.1,", "tokens": [50850, 407, 510, 321, 576, 483, 411, 257, 3671, 1958, 13, 16, 11, 50965], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2465, "seek": 681236, "start": 6824.36, "end": 6828.96, "text": " and then squaring it just makes sure that regardless of", "tokens": [50965, 293, 550, 2339, 1921, 309, 445, 1669, 988, 300, 10060, 295, 51195], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2466, "seek": 681236, "start": 6828.96, "end": 6831.0599999999995, "text": " whether we are more negative or more positive,", "tokens": [51195, 1968, 321, 366, 544, 3671, 420, 544, 3353, 11, 51300], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2467, "seek": 681236, "start": 6831.0599999999995, "end": 6834.46, "text": " we always get a positive number.", "tokens": [51300, 321, 1009, 483, 257, 3353, 1230, 13, 51470], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2468, "seek": 681236, "start": 6834.46, "end": 6836.16, "text": " Instead of squaring, we could also take,", "tokens": [51470, 7156, 295, 2339, 1921, 11, 321, 727, 611, 747, 11, 51555], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2469, "seek": 681236, "start": 6836.16, "end": 6839.5599999999995, "text": " for example, the absolute value. We need to discard the sign.", "tokens": [51555, 337, 1365, 11, 264, 8236, 2158, 13, 492, 643, 281, 31597, 264, 1465, 13, 51725], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2470, "seek": 681236, "start": 6839.5599999999995, "end": 6842.259999999999, "text": " And so you see that the expression is ranged so that you", "tokens": [51725, 400, 370, 291, 536, 300, 264, 6114, 307, 45570, 370, 300, 291, 51860], "temperature": 0.0, "avg_logprob": -0.17032315908384718, "compression_ratio": 1.6457564575645756, "no_speech_prob": 0.000622754858341068}, {"id": 2471, "seek": 684236, "start": 6842.36, "end": 6846.5599999999995, "text": " only get 0 exactly when Y out is equal to Y ground truth.", "tokens": [50365, 787, 483, 1958, 2293, 562, 398, 484, 307, 2681, 281, 398, 2727, 3494, 13, 50575], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2472, "seek": 684236, "start": 6846.5599999999995, "end": 6847.66, "text": " When those two are equal,", "tokens": [50575, 1133, 729, 732, 366, 2681, 11, 50630], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2473, "seek": 684236, "start": 6847.66, "end": 6849.5599999999995, "text": " so your prediction is exactly the target,", "tokens": [50630, 370, 428, 17630, 307, 2293, 264, 3779, 11, 50725], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2474, "seek": 684236, "start": 6849.5599999999995, "end": 6853.0599999999995, "text": " you are going to get 0. And if your prediction is not the target,", "tokens": [50725, 291, 366, 516, 281, 483, 1958, 13, 400, 498, 428, 17630, 307, 406, 264, 3779, 11, 50900], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2475, "seek": 684236, "start": 6853.0599999999995, "end": 6855.259999999999, "text": " you are going to get some other number.", "tokens": [50900, 291, 366, 516, 281, 483, 512, 661, 1230, 13, 51010], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2476, "seek": 684236, "start": 6855.259999999999, "end": 6857.16, "text": " So here, for example, we are way off.", "tokens": [51010, 407, 510, 11, 337, 1365, 11, 321, 366, 636, 766, 13, 51105], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2477, "seek": 684236, "start": 6857.16, "end": 6859.96, "text": " And so that's why the loss is quite high.", "tokens": [51105, 400, 370, 300, 311, 983, 264, 4470, 307, 1596, 1090, 13, 51245], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2478, "seek": 684236, "start": 6859.96, "end": 6864.16, "text": " And the more off we are, the greater the loss will be.", "tokens": [51245, 400, 264, 544, 766, 321, 366, 11, 264, 5044, 264, 4470, 486, 312, 13, 51455], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2479, "seek": 684236, "start": 6864.16, "end": 6867.96, "text": " So we don't want high loss, we want low loss.", "tokens": [51455, 407, 321, 500, 380, 528, 1090, 4470, 11, 321, 528, 2295, 4470, 13, 51645], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2480, "seek": 684236, "start": 6867.96, "end": 6872.16, "text": " And so the final loss here will be just the sum,", "tokens": [51645, 400, 370, 264, 2572, 4470, 510, 486, 312, 445, 264, 2408, 11, 51855], "temperature": 0.0, "avg_logprob": -0.12088023998119213, "compression_ratio": 1.889344262295082, "no_speech_prob": 0.0007942311349324882}, {"id": 2481, "seek": 687236, "start": 6872.36, "end": 6874.46, "text": " all of these numbers.", "tokens": [50365, 439, 295, 613, 3547, 13, 50470], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2482, "seek": 687236, "start": 6874.46, "end": 6878.66, "text": " So you see that this should be 0 roughly plus 0 roughly,", "tokens": [50470, 407, 291, 536, 300, 341, 820, 312, 1958, 9810, 1804, 1958, 9810, 11, 50680], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2483, "seek": 687236, "start": 6878.66, "end": 6880.96, "text": " but plus 7.", "tokens": [50680, 457, 1804, 1614, 13, 50795], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2484, "seek": 687236, "start": 6880.96, "end": 6885.0599999999995, "text": " So loss should be about 7 here.", "tokens": [50795, 407, 4470, 820, 312, 466, 1614, 510, 13, 51000], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2485, "seek": 687236, "start": 6885.0599999999995, "end": 6887.36, "text": " And now we want to minimize the loss.", "tokens": [51000, 400, 586, 321, 528, 281, 17522, 264, 4470, 13, 51115], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2486, "seek": 687236, "start": 6887.36, "end": 6891.66, "text": " We want the loss to be low because if loss is low,", "tokens": [51115, 492, 528, 264, 4470, 281, 312, 2295, 570, 498, 4470, 307, 2295, 11, 51330], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2487, "seek": 687236, "start": 6891.66, "end": 6896.5599999999995, "text": " then every one of the predictions is equal to its target.", "tokens": [51330, 550, 633, 472, 295, 264, 21264, 307, 2681, 281, 1080, 3779, 13, 51575], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2488, "seek": 687236, "start": 6896.5599999999995, "end": 6899.0599999999995, "text": " So the loss, the lowest it can be is 0,", "tokens": [51575, 407, 264, 4470, 11, 264, 12437, 309, 393, 312, 307, 1958, 11, 51700], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2489, "seek": 687236, "start": 6899.0599999999995, "end": 6902.16, "text": " and the greater it is, the worse off the neural net is,", "tokens": [51700, 293, 264, 5044, 309, 307, 11, 264, 5324, 766, 264, 18161, 2533, 307, 11, 51855], "temperature": 0.0, "avg_logprob": -0.13186652507257024, "compression_ratio": 1.7298578199052133, "no_speech_prob": 0.00013491154822986573}, {"id": 2490, "seek": 690236, "start": 6902.36, "end": 6905.16, "text": " and the higher the risk of shifting.", "tokens": [50365, 293, 264, 2946, 264, 3148, 295, 17573, 13, 50505], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2491, "seek": 690236, "start": 6905.16, "end": 6908.759999999999, "text": " So now, of course, if we do loss.backward,", "tokens": [50505, 407, 586, 11, 295, 1164, 11, 498, 321, 360, 4470, 13, 3207, 1007, 11, 50685], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2492, "seek": 690236, "start": 6908.759999999999, "end": 6911.5599999999995, "text": " something magical happened when I hit enter.", "tokens": [50685, 746, 12066, 2011, 562, 286, 2045, 3242, 13, 50825], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2493, "seek": 690236, "start": 6911.5599999999995, "end": 6914.36, "text": " And the magical thing, of course, that happened is that we can look at", "tokens": [50825, 400, 264, 12066, 551, 11, 295, 1164, 11, 300, 2011, 307, 300, 321, 393, 574, 412, 50965], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2494, "seek": 690236, "start": 6914.36, "end": 6919.66, "text": " n.layers.neuron, n.layers at, say, like the first layer,", "tokens": [50965, 297, 13, 8376, 433, 13, 716, 374, 266, 11, 297, 13, 8376, 433, 412, 11, 584, 11, 411, 264, 700, 4583, 11, 51230], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2495, "seek": 690236, "start": 6919.66, "end": 6923.36, "text": " that neurons at 0,", "tokens": [51230, 300, 22027, 412, 1958, 11, 51415], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2496, "seek": 690236, "start": 6923.36, "end": 6927.36, "text": " because remember that MLP has the layers, which is a list,", "tokens": [51415, 570, 1604, 300, 21601, 47, 575, 264, 7914, 11, 597, 307, 257, 1329, 11, 51615], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2497, "seek": 690236, "start": 6927.36, "end": 6929.66, "text": " and each layer has neurons, which is a list,", "tokens": [51615, 293, 1184, 4583, 575, 22027, 11, 597, 307, 257, 1329, 11, 51730], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2498, "seek": 690236, "start": 6929.66, "end": 6931.5599999999995, "text": " and that gives us an individual neuron,", "tokens": [51730, 293, 300, 2709, 505, 364, 2609, 34090, 11, 51825], "temperature": 0.2, "avg_logprob": -0.29600443158830914, "compression_ratio": 1.7735042735042734, "no_speech_prob": 0.0008234682609327137}, {"id": 2499, "seek": 693156, "start": 6931.56, "end": 6933.56, "text": " and that gives us some weights.", "tokens": [50365, 293, 300, 2709, 505, 512, 17443, 13, 50465], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2500, "seek": 693156, "start": 6933.56, "end": 6940.56, "text": " And so we can, for example, look at the weights at 0.", "tokens": [50465, 400, 370, 321, 393, 11, 337, 1365, 11, 574, 412, 264, 17443, 412, 1958, 13, 50815], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2501, "seek": 693156, "start": 6940.56, "end": 6944.56, "text": " Oops, it's not called weights, it's called w.", "tokens": [50815, 21726, 11, 309, 311, 406, 1219, 17443, 11, 309, 311, 1219, 261, 13, 51015], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2502, "seek": 693156, "start": 6944.56, "end": 6948.56, "text": " And that's a value, but now this value also has a grad", "tokens": [51015, 400, 300, 311, 257, 2158, 11, 457, 586, 341, 2158, 611, 575, 257, 2771, 51215], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2503, "seek": 693156, "start": 6948.56, "end": 6950.56, "text": " because of the backward pass.", "tokens": [51215, 570, 295, 264, 23897, 1320, 13, 51315], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2504, "seek": 693156, "start": 6950.56, "end": 6953.56, "text": " And so we see that because this gradient here", "tokens": [51315, 400, 370, 321, 536, 300, 570, 341, 16235, 510, 51465], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2505, "seek": 693156, "start": 6953.56, "end": 6955.56, "text": " on this particular weight of this particular neuron", "tokens": [51465, 322, 341, 1729, 3364, 295, 341, 1729, 34090, 51565], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2506, "seek": 693156, "start": 6955.56, "end": 6958.56, "text": " of this particular layer is negative,", "tokens": [51565, 295, 341, 1729, 4583, 307, 3671, 11, 51715], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2507, "seek": 693156, "start": 6958.56, "end": 6961.360000000001, "text": " we see that its influence on the loss is also negative.", "tokens": [51715, 321, 536, 300, 1080, 6503, 322, 264, 4470, 307, 611, 3671, 13, 51855], "temperature": 0.0, "avg_logprob": -0.21528757799853077, "compression_ratio": 1.880184331797235, "no_speech_prob": 0.00037937925662845373}, {"id": 2508, "seek": 696136, "start": 6961.36, "end": 6965.36, "text": " So slightly increasing this particular weight of this neuron of this layer", "tokens": [50365, 407, 4748, 5662, 341, 1729, 3364, 295, 341, 34090, 295, 341, 4583, 50565], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2509, "seek": 696136, "start": 6965.36, "end": 6968.36, "text": " would make the loss go down.", "tokens": [50565, 576, 652, 264, 4470, 352, 760, 13, 50715], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2510, "seek": 696136, "start": 6968.36, "end": 6972.36, "text": " And we actually have this information for every single one of our neurons", "tokens": [50715, 400, 321, 767, 362, 341, 1589, 337, 633, 2167, 472, 295, 527, 22027, 50915], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2511, "seek": 696136, "start": 6972.36, "end": 6973.36, "text": " and all of their parameters.", "tokens": [50915, 293, 439, 295, 641, 9834, 13, 50965], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2512, "seek": 696136, "start": 6973.36, "end": 6977.36, "text": " Actually, it's worth looking at also the draw dot of loss, by the way.", "tokens": [50965, 5135, 11, 309, 311, 3163, 1237, 412, 611, 264, 2642, 5893, 295, 4470, 11, 538, 264, 636, 13, 51165], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2513, "seek": 696136, "start": 6977.36, "end": 6981.36, "text": " So previously, we looked at the draw dot of a single neuron forward pass,", "tokens": [51165, 407, 8046, 11, 321, 2956, 412, 264, 2642, 5893, 295, 257, 2167, 34090, 2128, 1320, 11, 51365], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2514, "seek": 696136, "start": 6981.36, "end": 6983.36, "text": " and that was already a large expression.", "tokens": [51365, 293, 300, 390, 1217, 257, 2416, 6114, 13, 51465], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2515, "seek": 696136, "start": 6983.36, "end": 6985.36, "text": " But what is this expression?", "tokens": [51465, 583, 437, 307, 341, 6114, 30, 51565], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2516, "seek": 696136, "start": 6985.36, "end": 6988.36, "text": " We actually forwarded every one of those four examples,", "tokens": [51565, 492, 767, 2128, 292, 633, 472, 295, 729, 1451, 5110, 11, 51715], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2517, "seek": 696136, "start": 6988.36, "end": 6990.36, "text": " and then we have the loss on top of them,", "tokens": [51715, 293, 550, 321, 362, 264, 4470, 322, 1192, 295, 552, 11, 51815], "temperature": 0.0, "avg_logprob": -0.0873409051161546, "compression_ratio": 1.8210526315789475, "no_speech_prob": 0.0004293388337828219}, {"id": 2518, "seek": 699036, "start": 6990.36, "end": 6992.36, "text": " with the mean squared error.", "tokens": [50365, 365, 264, 914, 8889, 6713, 13, 50465], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2519, "seek": 699036, "start": 6992.36, "end": 6995.36, "text": " And so this is a really massive graph", "tokens": [50465, 400, 370, 341, 307, 257, 534, 5994, 4295, 50615], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2520, "seek": 699036, "start": 6995.36, "end": 6998.36, "text": " because this graph that we've built up now,", "tokens": [50615, 570, 341, 4295, 300, 321, 600, 3094, 493, 586, 11, 50765], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2521, "seek": 699036, "start": 6998.36, "end": 7000.36, "text": " oh my gosh,", "tokens": [50765, 1954, 452, 6502, 11, 50865], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2522, "seek": 699036, "start": 7000.36, "end": 7002.36, "text": " this graph that we've built up now,", "tokens": [50865, 341, 4295, 300, 321, 600, 3094, 493, 586, 11, 50965], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2523, "seek": 699036, "start": 7002.36, "end": 7004.36, "text": " which is kind of excessive,", "tokens": [50965, 597, 307, 733, 295, 22704, 11, 51065], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2524, "seek": 699036, "start": 7004.36, "end": 7007.36, "text": " it's excessive because it has four forward passes of a neural net", "tokens": [51065, 309, 311, 22704, 570, 309, 575, 1451, 2128, 11335, 295, 257, 18161, 2533, 51215], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2525, "seek": 699036, "start": 7007.36, "end": 7009.36, "text": " for every one of the examples,", "tokens": [51215, 337, 633, 472, 295, 264, 5110, 11, 51315], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2526, "seek": 699036, "start": 7009.36, "end": 7011.36, "text": " and then it has the loss on top,", "tokens": [51315, 293, 550, 309, 575, 264, 4470, 322, 1192, 11, 51415], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2527, "seek": 699036, "start": 7011.36, "end": 7014.36, "text": " and it ends with the value of the loss, which was 7.12.", "tokens": [51415, 293, 309, 5314, 365, 264, 2158, 295, 264, 4470, 11, 597, 390, 1614, 13, 4762, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2528, "seek": 699036, "start": 7014.36, "end": 7018.36, "text": " And this loss will now back propagate through all the four forward passes", "tokens": [51565, 400, 341, 4470, 486, 586, 646, 48256, 807, 439, 264, 1451, 2128, 11335, 51765], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2529, "seek": 699036, "start": 7018.36, "end": 7019.36, "text": " all the way through,", "tokens": [51765, 439, 264, 636, 807, 11, 51815], "temperature": 0.0, "avg_logprob": -0.09925975944056656, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0004172608896624297}, {"id": 2530, "seek": 701936, "start": 7019.36, "end": 7022.36, "text": " just every single intermediate value of the neural net,", "tokens": [50365, 445, 633, 2167, 19376, 2158, 295, 264, 18161, 2533, 11, 50515], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2531, "seek": 701936, "start": 7022.36, "end": 7024.36, "text": " all the way back to,", "tokens": [50515, 439, 264, 636, 646, 281, 11, 50615], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2532, "seek": 701936, "start": 7024.36, "end": 7026.36, "text": " of course, the parameters of the weights,", "tokens": [50615, 295, 1164, 11, 264, 9834, 295, 264, 17443, 11, 50715], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2533, "seek": 701936, "start": 7026.36, "end": 7027.36, "text": " which are the input.", "tokens": [50715, 597, 366, 264, 4846, 13, 50765], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2534, "seek": 701936, "start": 7027.36, "end": 7031.36, "text": " So these weight parameters here are inputs to this neural net,", "tokens": [50765, 407, 613, 3364, 9834, 510, 366, 15743, 281, 341, 18161, 2533, 11, 50965], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2535, "seek": 701936, "start": 7031.36, "end": 7033.36, "text": " and these numbers here,", "tokens": [50965, 293, 613, 3547, 510, 11, 51065], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2536, "seek": 701936, "start": 7033.36, "end": 7034.36, "text": " these scalars,", "tokens": [51065, 613, 15664, 685, 11, 51115], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2537, "seek": 701936, "start": 7034.36, "end": 7036.36, "text": " are inputs to the neural net.", "tokens": [51115, 366, 15743, 281, 264, 18161, 2533, 13, 51215], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2538, "seek": 701936, "start": 7036.36, "end": 7038.36, "text": " So if we went around here,", "tokens": [51215, 407, 498, 321, 1437, 926, 510, 11, 51315], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2539, "seek": 701936, "start": 7038.36, "end": 7041.36, "text": " we will probably find some of these examples,", "tokens": [51315, 321, 486, 1391, 915, 512, 295, 613, 5110, 11, 51465], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2540, "seek": 701936, "start": 7041.36, "end": 7042.36, "text": " this 1.0,", "tokens": [51465, 341, 502, 13, 15, 11, 51515], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2541, "seek": 701936, "start": 7042.36, "end": 7044.36, "text": " potentially maybe this 1.0,", "tokens": [51515, 7263, 1310, 341, 502, 13, 15, 11, 51615], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2542, "seek": 701936, "start": 7044.36, "end": 7046.36, "text": " or, you know, some of the others.", "tokens": [51615, 420, 11, 291, 458, 11, 512, 295, 264, 2357, 13, 51715], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2543, "seek": 701936, "start": 7046.36, "end": 7048.36, "text": " And you'll see that they all have gradients as well.", "tokens": [51715, 400, 291, 603, 536, 300, 436, 439, 362, 2771, 2448, 382, 731, 13, 51815], "temperature": 0.0, "avg_logprob": -0.07430500606838748, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.0017001056112349033}, {"id": 2544, "seek": 704836, "start": 7048.36, "end": 7051.36, "text": " The thing is these gradients on the input data", "tokens": [50365, 440, 551, 307, 613, 2771, 2448, 322, 264, 4846, 1412, 50515], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2545, "seek": 704836, "start": 7051.36, "end": 7053.36, "text": " are not that useful to us,", "tokens": [50515, 366, 406, 300, 4420, 281, 505, 11, 50615], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2546, "seek": 704836, "start": 7053.36, "end": 7057.36, "text": " and that's because the input data seems to be not changeable.", "tokens": [50615, 293, 300, 311, 570, 264, 4846, 1412, 2544, 281, 312, 406, 1319, 712, 13, 50815], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2547, "seek": 704836, "start": 7057.36, "end": 7059.36, "text": " It's a given to the problem,", "tokens": [50815, 467, 311, 257, 2212, 281, 264, 1154, 11, 50915], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2548, "seek": 704836, "start": 7059.36, "end": 7060.36, "text": " and so it's a fixed input.", "tokens": [50915, 293, 370, 309, 311, 257, 6806, 4846, 13, 50965], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2549, "seek": 704836, "start": 7060.36, "end": 7062.36, "text": " We're not going to be changing it or messing with it,", "tokens": [50965, 492, 434, 406, 516, 281, 312, 4473, 309, 420, 23258, 365, 309, 11, 51065], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2550, "seek": 704836, "start": 7062.36, "end": 7065.36, "text": " even though we do have gradients for it.", "tokens": [51065, 754, 1673, 321, 360, 362, 2771, 2448, 337, 309, 13, 51215], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2551, "seek": 704836, "start": 7065.36, "end": 7068.36, "text": " But some of these gradients here", "tokens": [51215, 583, 512, 295, 613, 2771, 2448, 510, 51365], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2552, "seek": 704836, "start": 7068.36, "end": 7070.36, "text": " will be for the neural network parameters,", "tokens": [51365, 486, 312, 337, 264, 18161, 3209, 9834, 11, 51465], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2553, "seek": 704836, "start": 7070.36, "end": 7072.36, "text": " the w's and the b's,", "tokens": [51465, 264, 261, 311, 293, 264, 272, 311, 11, 51565], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2554, "seek": 704836, "start": 7072.36, "end": 7075.36, "text": " and those we, of course, we want to change.", "tokens": [51565, 293, 729, 321, 11, 295, 1164, 11, 321, 528, 281, 1319, 13, 51715], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2555, "seek": 704836, "start": 7075.36, "end": 7077.36, "text": " Okay, so now we're going to want", "tokens": [51715, 1033, 11, 370, 586, 321, 434, 516, 281, 528, 51815], "temperature": 0.0, "avg_logprob": -0.07462379591805594, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.00029810090200044215}, {"id": 2556, "seek": 707736, "start": 7077.36, "end": 7079.36, "text": " some convenience codes to gather up", "tokens": [50365, 512, 19283, 14211, 281, 5448, 493, 50465], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2557, "seek": 707736, "start": 7079.36, "end": 7081.36, "text": " all of the parameters of the neural net", "tokens": [50465, 439, 295, 264, 9834, 295, 264, 18161, 2533, 50565], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2558, "seek": 707736, "start": 7081.36, "end": 7084.36, "text": " so that we can operate on all of them simultaneously.", "tokens": [50565, 370, 300, 321, 393, 9651, 322, 439, 295, 552, 16561, 13, 50715], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2559, "seek": 707736, "start": 7084.36, "end": 7085.36, "text": " And every one of them,", "tokens": [50715, 400, 633, 472, 295, 552, 11, 50765], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2560, "seek": 707736, "start": 7085.36, "end": 7088.36, "text": " we will nudge a tiny amount", "tokens": [50765, 321, 486, 297, 16032, 257, 5870, 2372, 50915], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2561, "seek": 707736, "start": 7088.36, "end": 7090.36, "text": " based on the gradient information.", "tokens": [50915, 2361, 322, 264, 16235, 1589, 13, 51015], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2562, "seek": 707736, "start": 7090.36, "end": 7092.36, "text": " So let's collect the parameters of the neural net", "tokens": [51015, 407, 718, 311, 2500, 264, 9834, 295, 264, 18161, 2533, 51115], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2563, "seek": 707736, "start": 7092.36, "end": 7094.36, "text": " all in one array.", "tokens": [51115, 439, 294, 472, 10225, 13, 51215], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2564, "seek": 707736, "start": 7094.36, "end": 7097.36, "text": " So let's create a parameters of self", "tokens": [51215, 407, 718, 311, 1884, 257, 9834, 295, 2698, 51365], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2565, "seek": 707736, "start": 7097.36, "end": 7099.36, "text": " that just returns", "tokens": [51365, 300, 445, 11247, 51465], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2566, "seek": 707736, "start": 7099.36, "end": 7102.36, "text": " self.w, which is a list,", "tokens": [51465, 2698, 13, 86, 11, 597, 307, 257, 1329, 11, 51615], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2567, "seek": 707736, "start": 7102.36, "end": 7106.36, "text": " concatenated with a list of self.b.", "tokens": [51615, 1588, 7186, 770, 365, 257, 1329, 295, 2698, 13, 65, 13, 51815], "temperature": 0.0, "avg_logprob": -0.06361023032146951, "compression_ratio": 1.8054298642533937, "no_speech_prob": 0.0007067665574140847}, {"id": 2568, "seek": 710736, "start": 7107.36, "end": 7109.36, "text": " So this will just return a list.", "tokens": [50365, 407, 341, 486, 445, 2736, 257, 1329, 13, 50465], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2569, "seek": 710736, "start": 7109.36, "end": 7112.36, "text": " List plus list just gives you a list.", "tokens": [50465, 17668, 1804, 1329, 445, 2709, 291, 257, 1329, 13, 50615], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2570, "seek": 710736, "start": 7112.36, "end": 7114.36, "text": " So that's parameters of neuron,", "tokens": [50615, 407, 300, 311, 9834, 295, 34090, 11, 50715], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2571, "seek": 710736, "start": 7114.36, "end": 7116.36, "text": " and I'm calling it this way", "tokens": [50715, 293, 286, 478, 5141, 309, 341, 636, 50815], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2572, "seek": 710736, "start": 7116.36, "end": 7118.36, "text": " because also PyTorch has parameters", "tokens": [50815, 570, 611, 9953, 51, 284, 339, 575, 9834, 50915], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2573, "seek": 710736, "start": 7118.36, "end": 7120.36, "text": " on every single NN module,", "tokens": [50915, 322, 633, 2167, 426, 45, 10088, 11, 51015], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2574, "seek": 710736, "start": 7120.36, "end": 7122.36, "text": " and it does exactly what we're doing here.", "tokens": [51015, 293, 309, 775, 2293, 437, 321, 434, 884, 510, 13, 51115], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2575, "seek": 710736, "start": 7122.36, "end": 7125.36, "text": " It just returns the parameter tensors.", "tokens": [51115, 467, 445, 11247, 264, 13075, 10688, 830, 13, 51265], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2576, "seek": 710736, "start": 7125.36, "end": 7128.36, "text": " For us, it's the parameter scalars.", "tokens": [51265, 1171, 505, 11, 309, 311, 264, 13075, 15664, 685, 13, 51415], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2577, "seek": 710736, "start": 7128.36, "end": 7130.36, "text": " Now, layer is also a module,", "tokens": [51415, 823, 11, 4583, 307, 611, 257, 10088, 11, 51515], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2578, "seek": 710736, "start": 7130.36, "end": 7134.36, "text": " so it will have parameters, self,", "tokens": [51515, 370, 309, 486, 362, 9834, 11, 2698, 11, 51715], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2579, "seek": 710736, "start": 7134.36, "end": 7136.36, "text": " and basically what we want to do here is", "tokens": [51715, 293, 1936, 437, 321, 528, 281, 360, 510, 307, 51815], "temperature": 0.0, "avg_logprob": -0.09420478820800782, "compression_ratio": 1.7436974789915967, "no_speech_prob": 0.00047038489719852805}, {"id": 2580, "seek": 713636, "start": 7136.36, "end": 7139.36, "text": " something like this, like", "tokens": [50365, 746, 411, 341, 11, 411, 50515], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2581, "seek": 713636, "start": 7139.36, "end": 7141.36, "text": " params is here,", "tokens": [50515, 971, 4070, 307, 510, 11, 50615], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2582, "seek": 713636, "start": 7141.36, "end": 7147.36, "text": " and then for neuron in self.neurons,", "tokens": [50615, 293, 550, 337, 34090, 294, 2698, 13, 716, 374, 892, 11, 50915], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2583, "seek": 713636, "start": 7147.36, "end": 7150.36, "text": " we want to get neuron.parameters,", "tokens": [50915, 321, 528, 281, 483, 34090, 13, 2181, 335, 6202, 11, 51065], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2584, "seek": 713636, "start": 7150.36, "end": 7154.36, "text": " and we want to params.extend.", "tokens": [51065, 293, 321, 528, 281, 971, 4070, 13, 3828, 521, 13, 51265], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2585, "seek": 713636, "start": 7154.36, "end": 7156.36, "text": " So these are the parameters of this neuron,", "tokens": [51265, 407, 613, 366, 264, 9834, 295, 341, 34090, 11, 51365], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2586, "seek": 713636, "start": 7156.36, "end": 7159.36, "text": " and then we want to put them on top of params,", "tokens": [51365, 293, 550, 321, 528, 281, 829, 552, 322, 1192, 295, 971, 4070, 11, 51515], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2587, "seek": 713636, "start": 7159.36, "end": 7162.36, "text": " so params.extend of piece,", "tokens": [51515, 370, 971, 4070, 13, 3828, 521, 295, 2522, 11, 51665], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2588, "seek": 713636, "start": 7162.36, "end": 7165.36, "text": " and then we want to return params.", "tokens": [51665, 293, 550, 321, 528, 281, 2736, 971, 4070, 13, 51815], "temperature": 0.0, "avg_logprob": -0.11648698372415978, "compression_ratio": 1.9798657718120805, "no_speech_prob": 0.0003850717330351472}, {"id": 2589, "seek": 716536, "start": 7165.36, "end": 7167.36, "text": " So this is way too much code,", "tokens": [50365, 407, 341, 307, 636, 886, 709, 3089, 11, 50465], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2590, "seek": 716536, "start": 7167.36, "end": 7169.36, "text": " so actually there's a way to simplify this,", "tokens": [50465, 370, 767, 456, 311, 257, 636, 281, 20460, 341, 11, 50565], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2591, "seek": 716536, "start": 7169.36, "end": 7179.36, "text": " which is return p for neuron in self.neurons", "tokens": [50565, 597, 307, 2736, 280, 337, 34090, 294, 2698, 13, 716, 374, 892, 51065], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2592, "seek": 716536, "start": 7179.36, "end": 7185.36, "text": " for p in neuron.parameters.", "tokens": [51065, 337, 280, 294, 34090, 13, 2181, 335, 6202, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2593, "seek": 716536, "start": 7185.36, "end": 7187.36, "text": " So it's a single list comprehension.", "tokens": [51365, 407, 309, 311, 257, 2167, 1329, 44991, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2594, "seek": 716536, "start": 7187.36, "end": 7189.36, "text": " In Python, you can sort of nest them like this,", "tokens": [51465, 682, 15329, 11, 291, 393, 1333, 295, 15646, 552, 411, 341, 11, 51565], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2595, "seek": 716536, "start": 7189.36, "end": 7194.36, "text": " and you can then create the desired array.", "tokens": [51565, 293, 291, 393, 550, 1884, 264, 14721, 10225, 13, 51815], "temperature": 0.0, "avg_logprob": -0.08781137920561291, "compression_ratio": 1.5480225988700564, "no_speech_prob": 0.0003031725063920021}, {"id": 2596, "seek": 719436, "start": 7194.36, "end": 7196.36, "text": " So these are identical.", "tokens": [50365, 407, 613, 366, 14800, 13, 50465], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2597, "seek": 719436, "start": 7196.36, "end": 7199.36, "text": " We can take this out.", "tokens": [50465, 492, 393, 747, 341, 484, 13, 50615], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2598, "seek": 719436, "start": 7199.36, "end": 7204.36, "text": " And then let's do the same here.", "tokens": [50615, 400, 550, 718, 311, 360, 264, 912, 510, 13, 50865], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2599, "seek": 719436, "start": 7204.36, "end": 7207.36, "text": " dev.parameters self", "tokens": [50865, 1905, 13, 2181, 335, 6202, 2698, 51015], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2600, "seek": 719436, "start": 7207.36, "end": 7213.36, "text": " and return a parameter for layer in self.layers", "tokens": [51015, 293, 2736, 257, 13075, 337, 4583, 294, 2698, 13, 8376, 433, 51315], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2601, "seek": 719436, "start": 7213.36, "end": 7220.36, "text": " for p in layer.parameters.", "tokens": [51315, 337, 280, 294, 4583, 13, 2181, 335, 6202, 13, 51665], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2602, "seek": 719436, "start": 7220.36, "end": 7222.36, "text": " And that should be good.", "tokens": [51665, 400, 300, 820, 312, 665, 13, 51765], "temperature": 0.0, "avg_logprob": -0.15480615110958323, "compression_ratio": 1.5114503816793894, "no_speech_prob": 0.000739426352083683}, {"id": 2603, "seek": 722236, "start": 7222.36, "end": 7225.36, "text": " Now let me pop out this", "tokens": [50365, 823, 718, 385, 1665, 484, 341, 50515], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2604, "seek": 722236, "start": 7225.36, "end": 7228.36, "text": " so we don't reinitialize our network,", "tokens": [50515, 370, 321, 500, 380, 6561, 270, 831, 1125, 527, 3209, 11, 50665], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2605, "seek": 722236, "start": 7228.36, "end": 7235.36, "text": " because we need to reinitialize our...", "tokens": [50665, 570, 321, 643, 281, 6561, 270, 831, 1125, 527, 485, 51015], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2606, "seek": 722236, "start": 7235.36, "end": 7236.36, "text": " Okay, so unfortunately,", "tokens": [51015, 1033, 11, 370, 7015, 11, 51065], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2607, "seek": 722236, "start": 7236.36, "end": 7238.36, "text": " we will have to probably reinitialize the network", "tokens": [51065, 321, 486, 362, 281, 1391, 6561, 270, 831, 1125, 264, 3209, 51165], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2608, "seek": 722236, "start": 7238.36, "end": 7241.36, "text": " because we just added functionality.", "tokens": [51165, 570, 321, 445, 3869, 14980, 13, 51315], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2609, "seek": 722236, "start": 7241.36, "end": 7242.36, "text": " Because this class, of course,", "tokens": [51315, 1436, 341, 1508, 11, 295, 1164, 11, 51365], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2610, "seek": 722236, "start": 7242.36, "end": 7245.36, "text": " I want to get all the end.parameters,", "tokens": [51365, 286, 528, 281, 483, 439, 264, 917, 13, 2181, 335, 6202, 11, 51515], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2611, "seek": 722236, "start": 7245.36, "end": 7246.36, "text": " but that's not going to work", "tokens": [51515, 457, 300, 311, 406, 516, 281, 589, 51565], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2612, "seek": 722236, "start": 7246.36, "end": 7249.36, "text": " because this is the old class.", "tokens": [51565, 570, 341, 307, 264, 1331, 1508, 13, 51715], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2613, "seek": 722236, "start": 7249.36, "end": 7250.36, "text": " Okay.", "tokens": [51715, 1033, 13, 51765], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2614, "seek": 722236, "start": 7250.36, "end": 7251.36, "text": " So unfortunately,", "tokens": [51765, 407, 7015, 11, 51815], "temperature": 0.0, "avg_logprob": -0.11425098486706219, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.0024724157992750406}, {"id": 2615, "seek": 725136, "start": 7251.36, "end": 7253.36, "text": " we do have to reinitialize the network,", "tokens": [50365, 321, 360, 362, 281, 6561, 270, 831, 1125, 264, 3209, 11, 50465], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2616, "seek": 725136, "start": 7253.36, "end": 7255.36, "text": " which will change some of the numbers.", "tokens": [50465, 597, 486, 1319, 512, 295, 264, 3547, 13, 50565], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2617, "seek": 725136, "start": 7255.36, "end": 7258.36, "text": " But let me do that so that we pick up the new API.", "tokens": [50565, 583, 718, 385, 360, 300, 370, 300, 321, 1888, 493, 264, 777, 9362, 13, 50715], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2618, "seek": 725136, "start": 7258.36, "end": 7260.36, "text": " We can now do end.parameters.", "tokens": [50715, 492, 393, 586, 360, 917, 13, 2181, 335, 6202, 13, 50815], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2619, "seek": 725136, "start": 7260.36, "end": 7262.36, "text": " And these are all the weights and biases", "tokens": [50815, 400, 613, 366, 439, 264, 17443, 293, 32152, 50915], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2620, "seek": 725136, "start": 7262.36, "end": 7265.36, "text": " inside the entire neural net.", "tokens": [50915, 1854, 264, 2302, 18161, 2533, 13, 51065], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2621, "seek": 725136, "start": 7265.36, "end": 7271.36, "text": " So in total, this MLP has 41 parameters.", "tokens": [51065, 407, 294, 3217, 11, 341, 21601, 47, 575, 18173, 9834, 13, 51365], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2622, "seek": 725136, "start": 7271.36, "end": 7275.36, "text": " And now we'll be able to change them.", "tokens": [51365, 400, 586, 321, 603, 312, 1075, 281, 1319, 552, 13, 51565], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2623, "seek": 725136, "start": 7275.36, "end": 7278.36, "text": " If we recalculate the loss here,", "tokens": [51565, 759, 321, 850, 304, 2444, 473, 264, 4470, 510, 11, 51715], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2624, "seek": 725136, "start": 7278.36, "end": 7279.36, "text": " we see that unfortunately,", "tokens": [51715, 321, 536, 300, 7015, 11, 51765], "temperature": 0.0, "avg_logprob": -0.06283288209334664, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.00020550546469166875}, {"id": 2625, "seek": 727936, "start": 7279.36, "end": 7283.36, "text": " we have slightly different predictions", "tokens": [50365, 321, 362, 4748, 819, 21264, 50565], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2626, "seek": 727936, "start": 7283.36, "end": 7286.36, "text": " and slightly different loss.", "tokens": [50565, 293, 4748, 819, 4470, 13, 50715], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2627, "seek": 727936, "start": 7286.36, "end": 7288.36, "text": " But that's okay.", "tokens": [50715, 583, 300, 311, 1392, 13, 50815], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2628, "seek": 727936, "start": 7288.36, "end": 7291.36, "text": " Okay, so we see that this neuron's gradient", "tokens": [50815, 1033, 11, 370, 321, 536, 300, 341, 34090, 311, 16235, 50965], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2629, "seek": 727936, "start": 7291.36, "end": 7293.36, "text": " is slightly negative.", "tokens": [50965, 307, 4748, 3671, 13, 51065], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2630, "seek": 727936, "start": 7293.36, "end": 7296.36, "text": " We can also look at its data right now,", "tokens": [51065, 492, 393, 611, 574, 412, 1080, 1412, 558, 586, 11, 51215], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2631, "seek": 727936, "start": 7296.36, "end": 7298.36, "text": " which is 0.85.", "tokens": [51215, 597, 307, 1958, 13, 19287, 13, 51315], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2632, "seek": 727936, "start": 7298.36, "end": 7299.36, "text": " So this is the current value of this neuron,", "tokens": [51315, 407, 341, 307, 264, 2190, 2158, 295, 341, 34090, 11, 51365], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2633, "seek": 727936, "start": 7299.36, "end": 7303.36, "text": " and this is its gradient on the loss.", "tokens": [51365, 293, 341, 307, 1080, 16235, 322, 264, 4470, 13, 51565], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2634, "seek": 727936, "start": 7303.36, "end": 7304.36, "text": " So what we want to do now", "tokens": [51565, 407, 437, 321, 528, 281, 360, 586, 51615], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2635, "seek": 727936, "start": 7304.36, "end": 7308.36, "text": " is we want to iterate for every p in end.parameters.", "tokens": [51615, 307, 321, 528, 281, 44497, 337, 633, 280, 294, 917, 13, 2181, 335, 6202, 13, 51815], "temperature": 0.0, "avg_logprob": -0.07843916632912376, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0006721570389345288}, {"id": 2636, "seek": 730836, "start": 7308.36, "end": 7311.36, "text": " So for all the 41 parameters in this neural net,", "tokens": [50365, 407, 337, 439, 264, 18173, 9834, 294, 341, 18161, 2533, 11, 50515], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2637, "seek": 730836, "start": 7311.36, "end": 7315.36, "text": " we actually want to change p.data slightly", "tokens": [50515, 321, 767, 528, 281, 1319, 280, 13, 67, 3274, 4748, 50715], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2638, "seek": 730836, "start": 7315.36, "end": 7318.36, "text": " according to the gradient information.", "tokens": [50715, 4650, 281, 264, 16235, 1589, 13, 50865], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2639, "seek": 730836, "start": 7318.36, "end": 7321.36, "text": " Okay, so dot dot dot to do here.", "tokens": [50865, 1033, 11, 370, 5893, 5893, 5893, 281, 360, 510, 13, 51015], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2640, "seek": 730836, "start": 7321.36, "end": 7324.36, "text": " But this will be basically a tiny update", "tokens": [51015, 583, 341, 486, 312, 1936, 257, 5870, 5623, 51165], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2641, "seek": 730836, "start": 7324.36, "end": 7327.36, "text": " in this gradient descent scheme.", "tokens": [51165, 294, 341, 16235, 23475, 12232, 13, 51315], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2642, "seek": 730836, "start": 7327.36, "end": 7329.36, "text": " And gradient descent,", "tokens": [51315, 400, 16235, 23475, 11, 51415], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2643, "seek": 730836, "start": 7329.36, "end": 7331.36, "text": " we are thinking of the gradient", "tokens": [51415, 321, 366, 1953, 295, 264, 16235, 51515], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2644, "seek": 730836, "start": 7331.36, "end": 7333.36, "text": " as a vector pointing in the direction", "tokens": [51515, 382, 257, 8062, 12166, 294, 264, 3513, 51615], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2645, "seek": 730836, "start": 7333.36, "end": 7337.36, "text": " of increased loss.", "tokens": [51615, 295, 6505, 4470, 13, 51815], "temperature": 0.0, "avg_logprob": -0.08113583605340187, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.00028269083122722805}, {"id": 2646, "seek": 733736, "start": 7337.36, "end": 7340.36, "text": " And so in gradient descent,", "tokens": [50365, 400, 370, 294, 16235, 23475, 11, 50515], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2647, "seek": 733736, "start": 7340.36, "end": 7343.36, "text": " we are modifying p.data", "tokens": [50515, 321, 366, 42626, 280, 13, 67, 3274, 50665], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2648, "seek": 733736, "start": 7343.36, "end": 7345.36, "text": " by a small step size", "tokens": [50665, 538, 257, 1359, 1823, 2744, 50765], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2649, "seek": 733736, "start": 7345.36, "end": 7347.36, "text": " in the direction of the gradient.", "tokens": [50765, 294, 264, 3513, 295, 264, 16235, 13, 50865], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2650, "seek": 733736, "start": 7347.36, "end": 7348.36, "text": " So the step size as an example", "tokens": [50865, 407, 264, 1823, 2744, 382, 364, 1365, 50915], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2651, "seek": 733736, "start": 7348.36, "end": 7349.36, "text": " could be like a very small number,", "tokens": [50915, 727, 312, 411, 257, 588, 1359, 1230, 11, 50965], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2652, "seek": 733736, "start": 7349.36, "end": 7351.36, "text": " like 0.01 is the step size,", "tokens": [50965, 411, 1958, 13, 10607, 307, 264, 1823, 2744, 11, 51065], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2653, "seek": 733736, "start": 7351.36, "end": 7355.36, "text": " times p.grad, right?", "tokens": [51065, 1413, 280, 13, 7165, 11, 558, 30, 51265], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2654, "seek": 733736, "start": 7355.36, "end": 7357.36, "text": " But we have to think through", "tokens": [51265, 583, 321, 362, 281, 519, 807, 51365], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2655, "seek": 733736, "start": 7357.36, "end": 7358.36, "text": " some of the signs here.", "tokens": [51365, 512, 295, 264, 7880, 510, 13, 51415], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2656, "seek": 733736, "start": 7358.36, "end": 7361.36, "text": " So in particular,", "tokens": [51415, 407, 294, 1729, 11, 51565], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2657, "seek": 733736, "start": 7361.36, "end": 7364.36, "text": " working with this specific example here,", "tokens": [51565, 1364, 365, 341, 2685, 1365, 510, 11, 51715], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2658, "seek": 733736, "start": 7364.36, "end": 7366.36, "text": " we see that if we just left it like this,", "tokens": [51715, 321, 536, 300, 498, 321, 445, 1411, 309, 411, 341, 11, 51815], "temperature": 0.0, "avg_logprob": -0.08145843926122633, "compression_ratio": 1.6375545851528384, "no_speech_prob": 0.00011924002319574356}, {"id": 2659, "seek": 736636, "start": 7366.36, "end": 7368.36, "text": " then this neuron's value", "tokens": [50365, 550, 341, 34090, 311, 2158, 50465], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2660, "seek": 736636, "start": 7368.36, "end": 7370.36, "text": " would be currently increased", "tokens": [50465, 576, 312, 4362, 6505, 50565], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2661, "seek": 736636, "start": 7370.36, "end": 7372.36, "text": " by a tiny amount of the gradient.", "tokens": [50565, 538, 257, 5870, 2372, 295, 264, 16235, 13, 50665], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2662, "seek": 736636, "start": 7372.36, "end": 7374.36, "text": " The gradient is negative,", "tokens": [50665, 440, 16235, 307, 3671, 11, 50765], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2663, "seek": 736636, "start": 7374.36, "end": 7376.36, "text": " so this value of this neuron", "tokens": [50765, 370, 341, 2158, 295, 341, 34090, 50865], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2664, "seek": 736636, "start": 7376.36, "end": 7378.36, "text": " would go slightly down.", "tokens": [50865, 576, 352, 4748, 760, 13, 50965], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2665, "seek": 736636, "start": 7378.36, "end": 7380.36, "text": " It would become like 0.84", "tokens": [50965, 467, 576, 1813, 411, 1958, 13, 25494, 51065], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2666, "seek": 736636, "start": 7380.36, "end": 7382.36, "text": " or something like that.", "tokens": [51065, 420, 746, 411, 300, 13, 51165], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2667, "seek": 736636, "start": 7382.36, "end": 7385.36, "text": " But if this neuron's value goes lower,", "tokens": [51165, 583, 498, 341, 34090, 311, 2158, 1709, 3126, 11, 51315], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2668, "seek": 736636, "start": 7385.36, "end": 7390.36, "text": " that would actually increase the loss.", "tokens": [51315, 300, 576, 767, 3488, 264, 4470, 13, 51565], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2669, "seek": 736636, "start": 7390.36, "end": 7393.36, "text": " That's because the derivative", "tokens": [51565, 663, 311, 570, 264, 13760, 51715], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2670, "seek": 736636, "start": 7393.36, "end": 7395.36, "text": " of this neuron is negative.", "tokens": [51715, 295, 341, 34090, 307, 3671, 13, 51815], "temperature": 0.0, "avg_logprob": -0.08208579433207609, "compression_ratio": 1.7959183673469388, "no_speech_prob": 0.00026405195239931345}, {"id": 2671, "seek": 739536, "start": 7395.36, "end": 7397.36, "text": " So increasing this", "tokens": [50365, 407, 5662, 341, 50465], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2672, "seek": 739536, "start": 7397.36, "end": 7399.36, "text": " makes the loss go down.", "tokens": [50465, 1669, 264, 4470, 352, 760, 13, 50565], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2673, "seek": 739536, "start": 7399.36, "end": 7401.36, "text": " So increasing it is what we want to do", "tokens": [50565, 407, 5662, 309, 307, 437, 321, 528, 281, 360, 50665], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2674, "seek": 739536, "start": 7401.36, "end": 7403.36, "text": " instead of decreasing it.", "tokens": [50665, 2602, 295, 23223, 309, 13, 50765], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2675, "seek": 739536, "start": 7403.36, "end": 7404.36, "text": " So basically what we're missing here", "tokens": [50765, 407, 1936, 437, 321, 434, 5361, 510, 50815], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2676, "seek": 739536, "start": 7404.36, "end": 7406.36, "text": " is we're actually missing a negative sign.", "tokens": [50815, 307, 321, 434, 767, 5361, 257, 3671, 1465, 13, 50915], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2677, "seek": 739536, "start": 7406.36, "end": 7409.36, "text": " And again, this other interpretation,", "tokens": [50915, 400, 797, 11, 341, 661, 14174, 11, 51065], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2678, "seek": 739536, "start": 7409.36, "end": 7411.36, "text": " and that's because we want to minimize the loss.", "tokens": [51065, 293, 300, 311, 570, 321, 528, 281, 17522, 264, 4470, 13, 51165], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2679, "seek": 739536, "start": 7411.36, "end": 7412.36, "text": " We don't want to maximize the loss.", "tokens": [51165, 492, 500, 380, 528, 281, 19874, 264, 4470, 13, 51215], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2680, "seek": 739536, "start": 7412.36, "end": 7414.36, "text": " We want to decrease it.", "tokens": [51215, 492, 528, 281, 11514, 309, 13, 51315], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2681, "seek": 739536, "start": 7414.36, "end": 7415.36, "text": " And the other interpretation, as I mentioned,", "tokens": [51315, 400, 264, 661, 14174, 11, 382, 286, 2835, 11, 51365], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2682, "seek": 739536, "start": 7415.36, "end": 7417.36, "text": " is you can think of the gradient vector,", "tokens": [51365, 307, 291, 393, 519, 295, 264, 16235, 8062, 11, 51465], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2683, "seek": 739536, "start": 7417.36, "end": 7420.36, "text": " so basically just the vector of all the gradients,", "tokens": [51465, 370, 1936, 445, 264, 8062, 295, 439, 264, 2771, 2448, 11, 51615], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2684, "seek": 739536, "start": 7420.36, "end": 7422.36, "text": " as pointing in the direction", "tokens": [51615, 382, 12166, 294, 264, 3513, 51715], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2685, "seek": 739536, "start": 7422.36, "end": 7425.36, "text": " of increasing the loss.", "tokens": [51715, 295, 5662, 264, 4470, 13, 51865], "temperature": 0.0, "avg_logprob": -0.07079166089984733, "compression_ratio": 2.0348837209302326, "no_speech_prob": 7.367809303104877e-05}, {"id": 2686, "seek": 742536, "start": 7425.36, "end": 7426.36, "text": " But then we want to decrease it.", "tokens": [50365, 583, 550, 321, 528, 281, 11514, 309, 13, 50415], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2687, "seek": 742536, "start": 7426.36, "end": 7429.36, "text": " So we actually want to go in the opposite direction.", "tokens": [50415, 407, 321, 767, 528, 281, 352, 294, 264, 6182, 3513, 13, 50565], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2688, "seek": 742536, "start": 7429.36, "end": 7430.36, "text": " And so you can convince yourself", "tokens": [50565, 400, 370, 291, 393, 13447, 1803, 50615], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2689, "seek": 742536, "start": 7430.36, "end": 7432.36, "text": " that this does the right thing here with the negative", "tokens": [50615, 300, 341, 775, 264, 558, 551, 510, 365, 264, 3671, 50715], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2690, "seek": 742536, "start": 7432.36, "end": 7435.36, "text": " because we want to minimize the loss.", "tokens": [50715, 570, 321, 528, 281, 17522, 264, 4470, 13, 50865], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2691, "seek": 742536, "start": 7435.36, "end": 7440.36, "text": " So if we nudge all the parameters by a tiny amount,", "tokens": [50865, 407, 498, 321, 297, 16032, 439, 264, 9834, 538, 257, 5870, 2372, 11, 51115], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2692, "seek": 742536, "start": 7440.36, "end": 7442.36, "text": " then we'll see that this data", "tokens": [51115, 550, 321, 603, 536, 300, 341, 1412, 51215], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2693, "seek": 742536, "start": 7442.36, "end": 7444.36, "text": " will have changed a little bit.", "tokens": [51215, 486, 362, 3105, 257, 707, 857, 13, 51315], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2694, "seek": 742536, "start": 7444.36, "end": 7449.36, "text": " So now this neuron is a tiny amount greater value.", "tokens": [51315, 407, 586, 341, 34090, 307, 257, 5870, 2372, 5044, 2158, 13, 51565], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2695, "seek": 742536, "start": 7449.36, "end": 7453.36, "text": " So 0.854 went to 0.857.", "tokens": [51565, 407, 1958, 13, 19287, 19, 1437, 281, 1958, 13, 23, 19004, 13, 51765], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2696, "seek": 742536, "start": 7453.36, "end": 7454.36, "text": " And that's a good thing", "tokens": [51765, 400, 300, 311, 257, 665, 551, 51815], "temperature": 0.0, "avg_logprob": -0.08311423635095115, "compression_ratio": 1.6987951807228916, "no_speech_prob": 0.00011548650945769623}, {"id": 2697, "seek": 745436, "start": 7454.36, "end": 7458.36, "text": " because slightly increasing this neuron data", "tokens": [50365, 570, 4748, 5662, 341, 34090, 1412, 50565], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2698, "seek": 745436, "start": 7458.36, "end": 7462.36, "text": " makes the loss go down according to the gradient.", "tokens": [50565, 1669, 264, 4470, 352, 760, 4650, 281, 264, 16235, 13, 50765], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2699, "seek": 745436, "start": 7462.36, "end": 7465.36, "text": " And so the correcting has happened sign-wise.", "tokens": [50765, 400, 370, 264, 47032, 575, 2011, 1465, 12, 3711, 13, 50915], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2700, "seek": 745436, "start": 7465.36, "end": 7467.36, "text": " And so now what we would expect, of course,", "tokens": [50915, 400, 370, 586, 437, 321, 576, 2066, 11, 295, 1164, 11, 51015], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2701, "seek": 745436, "start": 7467.36, "end": 7470.36, "text": " is that because we've changed all these parameters,", "tokens": [51015, 307, 300, 570, 321, 600, 3105, 439, 613, 9834, 11, 51165], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2702, "seek": 745436, "start": 7470.36, "end": 7474.36, "text": " we expect that the loss should have gone down a bit.", "tokens": [51165, 321, 2066, 300, 264, 4470, 820, 362, 2780, 760, 257, 857, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2703, "seek": 745436, "start": 7474.36, "end": 7476.36, "text": " So we want to reevaluate the loss.", "tokens": [51365, 407, 321, 528, 281, 43060, 3337, 10107, 264, 4470, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2704, "seek": 745436, "start": 7476.36, "end": 7479.36, "text": " Let me basically...", "tokens": [51465, 961, 385, 1936, 485, 51615], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2705, "seek": 745436, "start": 7479.36, "end": 7482.36, "text": " This is just a data definition that hasn't changed.", "tokens": [51615, 639, 307, 445, 257, 1412, 7123, 300, 6132, 380, 3105, 13, 51765], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2706, "seek": 745436, "start": 7482.36, "end": 7483.36, "text": " But the forward pass here,", "tokens": [51765, 583, 264, 2128, 1320, 510, 11, 51815], "temperature": 0.0, "avg_logprob": -0.08980775730950492, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.00016363142640329897}, {"id": 2707, "seek": 748336, "start": 7483.36, "end": 7485.36, "text": " of the network,", "tokens": [50365, 295, 264, 3209, 11, 50465], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2708, "seek": 748336, "start": 7485.36, "end": 7487.36, "text": " we can recalculate.", "tokens": [50465, 321, 393, 850, 304, 2444, 473, 13, 50565], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2709, "seek": 748336, "start": 7489.36, "end": 7491.36, "text": " And actually, let me do it outside here", "tokens": [50665, 400, 767, 11, 718, 385, 360, 309, 2380, 510, 50765], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2710, "seek": 748336, "start": 7491.36, "end": 7494.36, "text": " so that we can compare the two loss values.", "tokens": [50765, 370, 300, 321, 393, 6794, 264, 732, 4470, 4190, 13, 50915], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2711, "seek": 748336, "start": 7494.36, "end": 7497.36, "text": " So here, if I recalculate the loss,", "tokens": [50915, 407, 510, 11, 498, 286, 850, 304, 2444, 473, 264, 4470, 11, 51065], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2712, "seek": 748336, "start": 7497.36, "end": 7499.36, "text": " we'd expect the new loss now", "tokens": [51065, 321, 1116, 2066, 264, 777, 4470, 586, 51165], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2713, "seek": 748336, "start": 7499.36, "end": 7501.36, "text": " to be slightly lower than this number.", "tokens": [51165, 281, 312, 4748, 3126, 813, 341, 1230, 13, 51265], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2714, "seek": 748336, "start": 7501.36, "end": 7503.36, "text": " So hopefully, what we're getting now", "tokens": [51265, 407, 4696, 11, 437, 321, 434, 1242, 586, 51365], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2715, "seek": 748336, "start": 7503.36, "end": 7506.36, "text": " is a tiny bit lower than 4.84.", "tokens": [51365, 307, 257, 5870, 857, 3126, 813, 1017, 13, 25494, 13, 51515], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2716, "seek": 748336, "start": 7506.36, "end": 7508.36, "text": " 4.36.", "tokens": [51515, 1017, 13, 11309, 13, 51615], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2717, "seek": 748336, "start": 7508.36, "end": 7510.36, "text": " And remember, the way we've arranged this", "tokens": [51615, 400, 1604, 11, 264, 636, 321, 600, 18721, 341, 51715], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2718, "seek": 748336, "start": 7510.36, "end": 7512.36, "text": " is that low loss means that", "tokens": [51715, 307, 300, 2295, 4470, 1355, 300, 51815], "temperature": 0.0, "avg_logprob": -0.07912487983703613, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00033927932963706553}, {"id": 2719, "seek": 751236, "start": 7512.36, "end": 7514.36, "text": " our predictions are matching the targets.", "tokens": [50365, 527, 21264, 366, 14324, 264, 12911, 13, 50465], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2720, "seek": 751236, "start": 7514.36, "end": 7515.36, "text": " So our predictions now", "tokens": [50465, 407, 527, 21264, 586, 50515], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2721, "seek": 751236, "start": 7515.36, "end": 7519.36, "text": " are probably slightly closer to the targets.", "tokens": [50515, 366, 1391, 4748, 4966, 281, 264, 12911, 13, 50715], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2722, "seek": 751236, "start": 7519.36, "end": 7521.36, "text": " And now all we have to do", "tokens": [50715, 400, 586, 439, 321, 362, 281, 360, 50815], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2723, "seek": 751236, "start": 7521.36, "end": 7523.36, "text": " is we have to iterate this process.", "tokens": [50815, 307, 321, 362, 281, 44497, 341, 1399, 13, 50915], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2724, "seek": 751236, "start": 7523.36, "end": 7526.36, "text": " So again, we've done the forward pass,", "tokens": [50915, 407, 797, 11, 321, 600, 1096, 264, 2128, 1320, 11, 51065], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2725, "seek": 751236, "start": 7526.36, "end": 7527.36, "text": " and this is the loss.", "tokens": [51065, 293, 341, 307, 264, 4470, 13, 51115], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2726, "seek": 751236, "start": 7527.36, "end": 7529.36, "text": " Now we can loss that backward.", "tokens": [51115, 823, 321, 393, 4470, 300, 23897, 13, 51215], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2727, "seek": 751236, "start": 7529.36, "end": 7531.36, "text": " Let me take these out.", "tokens": [51215, 961, 385, 747, 613, 484, 13, 51315], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2728, "seek": 751236, "start": 7531.36, "end": 7533.36, "text": " And we can do a step size.", "tokens": [51315, 400, 321, 393, 360, 257, 1823, 2744, 13, 51415], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2729, "seek": 751236, "start": 7533.36, "end": 7536.36, "text": " And now we should have a slightly lower loss.", "tokens": [51415, 400, 586, 321, 820, 362, 257, 4748, 3126, 4470, 13, 51565], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2730, "seek": 751236, "start": 7536.36, "end": 7539.36, "text": " 4.36 goes to 3.9.", "tokens": [51565, 1017, 13, 11309, 1709, 281, 805, 13, 24, 13, 51715], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2731, "seek": 751236, "start": 7539.36, "end": 7541.36, "text": " And okay, so we've done the forward pass.", "tokens": [51715, 400, 1392, 11, 370, 321, 600, 1096, 264, 2128, 1320, 13, 51815], "temperature": 0.0, "avg_logprob": -0.08256133027779039, "compression_ratio": 1.8138528138528138, "no_speech_prob": 0.00046773700159974396}, {"id": 2732, "seek": 754136, "start": 7541.36, "end": 7543.36, "text": " Here's the backward pass.", "tokens": [50365, 1692, 311, 264, 23897, 1320, 13, 50465], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2733, "seek": 754136, "start": 7543.36, "end": 7545.36, "text": " Nudge.", "tokens": [50465, 426, 16032, 13, 50565], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2734, "seek": 754136, "start": 7545.36, "end": 7547.36, "text": " And now the loss is 3.66.", "tokens": [50565, 400, 586, 264, 4470, 307, 805, 13, 15237, 13, 50665], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2735, "seek": 754136, "start": 7547.36, "end": 7551.36, "text": " 3.47.", "tokens": [50665, 805, 13, 14060, 13, 50865], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2736, "seek": 754136, "start": 7551.36, "end": 7553.36, "text": " And you get the idea.", "tokens": [50865, 400, 291, 483, 264, 1558, 13, 50965], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2737, "seek": 754136, "start": 7553.36, "end": 7555.36, "text": " We just continue doing this.", "tokens": [50965, 492, 445, 2354, 884, 341, 13, 51065], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2738, "seek": 754136, "start": 7555.36, "end": 7557.36, "text": " And this is gradient descent.", "tokens": [51065, 400, 341, 307, 16235, 23475, 13, 51165], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2739, "seek": 754136, "start": 7557.36, "end": 7559.36, "text": " We're just iteratively doing forward pass,", "tokens": [51165, 492, 434, 445, 17138, 19020, 884, 2128, 1320, 11, 51265], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2740, "seek": 754136, "start": 7559.36, "end": 7561.36, "text": " backward pass, update.", "tokens": [51265, 23897, 1320, 11, 5623, 13, 51365], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2741, "seek": 754136, "start": 7561.36, "end": 7563.36, "text": " Forward pass, backward pass, update.", "tokens": [51365, 35524, 1320, 11, 23897, 1320, 11, 5623, 13, 51465], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2742, "seek": 754136, "start": 7563.36, "end": 7565.36, "text": " And the neural net is improving its predictions.", "tokens": [51465, 400, 264, 18161, 2533, 307, 11470, 1080, 21264, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2743, "seek": 754136, "start": 7565.36, "end": 7568.36, "text": " So here, if we look at ypred now,", "tokens": [51565, 407, 510, 11, 498, 321, 574, 412, 288, 79, 986, 586, 11, 51715], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2744, "seek": 754136, "start": 7568.36, "end": 7570.36, "text": " ypred,", "tokens": [51715, 288, 79, 986, 11, 51815], "temperature": 0.0, "avg_logprob": -0.09680608666461447, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.00026242827880196273}, {"id": 2745, "seek": 757036, "start": 7570.36, "end": 7576.36, "text": " we see that this value should be getting closer to 1.", "tokens": [50365, 321, 536, 300, 341, 2158, 820, 312, 1242, 4966, 281, 502, 13, 50665], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2746, "seek": 757036, "start": 7576.36, "end": 7578.36, "text": " So this value should be getting more positive.", "tokens": [50665, 407, 341, 2158, 820, 312, 1242, 544, 3353, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2747, "seek": 757036, "start": 7578.36, "end": 7579.36, "text": " These should be getting more negative.", "tokens": [50765, 1981, 820, 312, 1242, 544, 3671, 13, 50815], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2748, "seek": 757036, "start": 7579.36, "end": 7581.36, "text": " And this one should be also getting more positive.", "tokens": [50815, 400, 341, 472, 820, 312, 611, 1242, 544, 3353, 13, 50915], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2749, "seek": 757036, "start": 7581.36, "end": 7586.36, "text": " So if we just iterate this a few more times,", "tokens": [50915, 407, 498, 321, 445, 44497, 341, 257, 1326, 544, 1413, 11, 51165], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2750, "seek": 757036, "start": 7586.36, "end": 7589.36, "text": " actually, we may be able to afford to go a bit faster.", "tokens": [51165, 767, 11, 321, 815, 312, 1075, 281, 6157, 281, 352, 257, 857, 4663, 13, 51315], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2751, "seek": 757036, "start": 7589.36, "end": 7594.36, "text": " Let's try a slightly higher learning rate.", "tokens": [51315, 961, 311, 853, 257, 4748, 2946, 2539, 3314, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2752, "seek": 757036, "start": 7594.36, "end": 7595.36, "text": " Oops, okay, there we go.", "tokens": [51565, 21726, 11, 1392, 11, 456, 321, 352, 13, 51615], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2753, "seek": 757036, "start": 7595.36, "end": 7599.36, "text": " So now we're at 0.31.", "tokens": [51615, 407, 586, 321, 434, 412, 1958, 13, 12967, 13, 51815], "temperature": 0.0, "avg_logprob": -0.09860519094204684, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.0007550701848231256}, {"id": 2754, "seek": 759936, "start": 7599.36, "end": 7601.36, "text": " If you go too fast, by the way,", "tokens": [50365, 759, 291, 352, 886, 2370, 11, 538, 264, 636, 11, 50465], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2755, "seek": 759936, "start": 7601.36, "end": 7603.36, "text": " if you try to make it too big of a step,", "tokens": [50465, 498, 291, 853, 281, 652, 309, 886, 955, 295, 257, 1823, 11, 50565], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2756, "seek": 759936, "start": 7603.36, "end": 7607.36, "text": " you may actually overstep.", "tokens": [50565, 291, 815, 767, 670, 16792, 13, 50765], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2757, "seek": 759936, "start": 7607.36, "end": 7608.36, "text": " It's overconfidence.", "tokens": [50765, 467, 311, 670, 47273, 13, 50815], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2758, "seek": 759936, "start": 7608.36, "end": 7609.36, "text": " Because again, remember,", "tokens": [50815, 1436, 797, 11, 1604, 11, 50865], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2759, "seek": 759936, "start": 7609.36, "end": 7611.36, "text": " we don't actually know exactly about the loss function.", "tokens": [50865, 321, 500, 380, 767, 458, 2293, 466, 264, 4470, 2445, 13, 50965], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2760, "seek": 759936, "start": 7611.36, "end": 7613.36, "text": " The loss function has all kinds of structure.", "tokens": [50965, 440, 4470, 2445, 575, 439, 3685, 295, 3877, 13, 51065], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2761, "seek": 759936, "start": 7613.36, "end": 7616.36, "text": " And we only know about the very local dependence", "tokens": [51065, 400, 321, 787, 458, 466, 264, 588, 2654, 31704, 51215], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2762, "seek": 759936, "start": 7616.36, "end": 7618.36, "text": " of all these parameters on the loss.", "tokens": [51215, 295, 439, 613, 9834, 322, 264, 4470, 13, 51315], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2763, "seek": 759936, "start": 7618.36, "end": 7619.36, "text": " But if we step too far,", "tokens": [51315, 583, 498, 321, 1823, 886, 1400, 11, 51365], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2764, "seek": 759936, "start": 7619.36, "end": 7621.36, "text": " we may step into, you know,", "tokens": [51365, 321, 815, 1823, 666, 11, 291, 458, 11, 51465], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2765, "seek": 759936, "start": 7621.36, "end": 7623.36, "text": " a part of the loss that is completely different.", "tokens": [51465, 257, 644, 295, 264, 4470, 300, 307, 2584, 819, 13, 51565], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2766, "seek": 759936, "start": 7623.36, "end": 7625.36, "text": " And that can destabilize training", "tokens": [51565, 400, 300, 393, 2677, 5177, 1125, 3097, 51665], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2767, "seek": 759936, "start": 7625.36, "end": 7628.36, "text": " and make your loss actually blow up even.", "tokens": [51665, 293, 652, 428, 4470, 767, 6327, 493, 754, 13, 51815], "temperature": 0.0, "avg_logprob": -0.06421104849201359, "compression_ratio": 1.7708333333333333, "no_speech_prob": 0.0004270828212611377}, {"id": 2768, "seek": 762836, "start": 7628.36, "end": 7630.36, "text": " So the loss is now 0.04.", "tokens": [50365, 407, 264, 4470, 307, 586, 1958, 13, 14565, 13, 50465], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2769, "seek": 762836, "start": 7630.36, "end": 7633.36, "text": " So actually, the predictions should be really quite close.", "tokens": [50465, 407, 767, 11, 264, 21264, 820, 312, 534, 1596, 1998, 13, 50615], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2770, "seek": 762836, "start": 7633.36, "end": 7635.36, "text": " Let's take a look.", "tokens": [50615, 961, 311, 747, 257, 574, 13, 50715], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2771, "seek": 762836, "start": 7635.36, "end": 7637.36, "text": " So you see how this is almost one,", "tokens": [50715, 407, 291, 536, 577, 341, 307, 1920, 472, 11, 50815], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2772, "seek": 762836, "start": 7637.36, "end": 7639.36, "text": " almost negative one, almost one.", "tokens": [50815, 1920, 3671, 472, 11, 1920, 472, 13, 50915], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2773, "seek": 762836, "start": 7639.36, "end": 7641.36, "text": " We can continue going.", "tokens": [50915, 492, 393, 2354, 516, 13, 51015], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2774, "seek": 762836, "start": 7641.36, "end": 7645.36, "text": " So, yep, backward, update.", "tokens": [51015, 407, 11, 18633, 11, 23897, 11, 5623, 13, 51215], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2775, "seek": 762836, "start": 7645.36, "end": 7646.36, "text": " Oops, there we go.", "tokens": [51215, 21726, 11, 456, 321, 352, 13, 51265], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2776, "seek": 762836, "start": 7646.36, "end": 7648.36, "text": " So we went way too fast.", "tokens": [51265, 407, 321, 1437, 636, 886, 2370, 13, 51365], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2777, "seek": 762836, "start": 7648.36, "end": 7651.36, "text": " And we actually overstepped.", "tokens": [51365, 400, 321, 767, 670, 2941, 3320, 13, 51515], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2778, "seek": 762836, "start": 7651.36, "end": 7654.36, "text": " So we got too eager.", "tokens": [51515, 407, 321, 658, 886, 18259, 13, 51665], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2779, "seek": 762836, "start": 7654.36, "end": 7655.36, "text": " Where are we now?", "tokens": [51665, 2305, 366, 321, 586, 30, 51715], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2780, "seek": 762836, "start": 7655.36, "end": 7656.36, "text": " Oops.", "tokens": [51715, 21726, 13, 51765], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2781, "seek": 762836, "start": 7656.36, "end": 7657.36, "text": " Okay.", "tokens": [51765, 1033, 13, 51815], "temperature": 0.0, "avg_logprob": -0.07891976038614909, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.00021092775568831712}, {"id": 2782, "seek": 765736, "start": 7657.36, "end": 7658.36, "text": " 7E-9.", "tokens": [50365, 1614, 36, 12, 24, 13, 50415], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2783, "seek": 765736, "start": 7658.36, "end": 7661.36, "text": " So this is very, very low loss.", "tokens": [50415, 407, 341, 307, 588, 11, 588, 2295, 4470, 13, 50565], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2784, "seek": 765736, "start": 7661.36, "end": 7665.36, "text": " And the predictions are basically perfect.", "tokens": [50565, 400, 264, 21264, 366, 1936, 2176, 13, 50765], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2785, "seek": 765736, "start": 7665.36, "end": 7667.36, "text": " So somehow we...", "tokens": [50765, 407, 6063, 321, 485, 50865], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2786, "seek": 765736, "start": 7667.36, "end": 7669.36, "text": " Basically, we were doing way too big updates", "tokens": [50865, 8537, 11, 321, 645, 884, 636, 886, 955, 9205, 50965], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2787, "seek": 765736, "start": 7669.36, "end": 7670.36, "text": " and we briefly exploded,", "tokens": [50965, 293, 321, 10515, 27049, 11, 51015], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2788, "seek": 765736, "start": 7670.36, "end": 7673.36, "text": " but then somehow we ended up getting into a really good spot.", "tokens": [51015, 457, 550, 6063, 321, 4590, 493, 1242, 666, 257, 534, 665, 4008, 13, 51165], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2789, "seek": 765736, "start": 7673.36, "end": 7675.36, "text": " So usually this learning rate", "tokens": [51165, 407, 2673, 341, 2539, 3314, 51265], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2790, "seek": 765736, "start": 7675.36, "end": 7677.36, "text": " and the tuning of it is a subtle art.", "tokens": [51265, 293, 264, 15164, 295, 309, 307, 257, 13743, 1523, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2791, "seek": 765736, "start": 7677.36, "end": 7679.36, "text": " You want to set your learning rate.", "tokens": [51365, 509, 528, 281, 992, 428, 2539, 3314, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2792, "seek": 765736, "start": 7679.36, "end": 7680.36, "text": " If it's too low,", "tokens": [51465, 759, 309, 311, 886, 2295, 11, 51515], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2793, "seek": 765736, "start": 7680.36, "end": 7682.36, "text": " you're going to take way too long to converge.", "tokens": [51515, 291, 434, 516, 281, 747, 636, 886, 938, 281, 41881, 13, 51615], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2794, "seek": 765736, "start": 7682.36, "end": 7683.36, "text": " But if it's too high,", "tokens": [51615, 583, 498, 309, 311, 886, 1090, 11, 51665], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2795, "seek": 765736, "start": 7683.36, "end": 7684.36, "text": " the whole thing gets unstable", "tokens": [51665, 264, 1379, 551, 2170, 23742, 51715], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2796, "seek": 765736, "start": 7684.36, "end": 7686.36, "text": " and you might actually even explode the loss,", "tokens": [51715, 293, 291, 1062, 767, 754, 21411, 264, 4470, 11, 51815], "temperature": 0.0, "avg_logprob": -0.08477065645415208, "compression_ratio": 1.71875, "no_speech_prob": 0.0002134542155545205}, {"id": 2797, "seek": 768636, "start": 7686.36, "end": 7688.36, "text": " depending on your loss function.", "tokens": [50365, 5413, 322, 428, 4470, 2445, 13, 50465], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2798, "seek": 768636, "start": 7688.36, "end": 7691.36, "text": " So finding the step size to be just right,", "tokens": [50465, 407, 5006, 264, 1823, 2744, 281, 312, 445, 558, 11, 50615], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2799, "seek": 768636, "start": 7691.36, "end": 7693.36, "text": " it's a pretty subtle art sometimes", "tokens": [50615, 309, 311, 257, 1238, 13743, 1523, 2171, 50715], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2800, "seek": 768636, "start": 7693.36, "end": 7695.36, "text": " when you're using sort of vanilla gradient descent.", "tokens": [50715, 562, 291, 434, 1228, 1333, 295, 17528, 16235, 23475, 13, 50815], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2801, "seek": 768636, "start": 7695.36, "end": 7697.36, "text": " But we happened to get into a good spot.", "tokens": [50815, 583, 321, 2011, 281, 483, 666, 257, 665, 4008, 13, 50915], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2802, "seek": 768636, "start": 7697.36, "end": 7702.36, "text": " We can look at n.parameters.", "tokens": [50915, 492, 393, 574, 412, 297, 13, 2181, 335, 6202, 13, 51165], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2803, "seek": 768636, "start": 7702.36, "end": 7706.36, "text": " So this is the setting of weights and biases", "tokens": [51165, 407, 341, 307, 264, 3287, 295, 17443, 293, 32152, 51365], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2804, "seek": 768636, "start": 7706.36, "end": 7708.36, "text": " that makes our network", "tokens": [51365, 300, 1669, 527, 3209, 51465], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2805, "seek": 768636, "start": 7708.36, "end": 7711.36, "text": " predict the desired targets", "tokens": [51465, 6069, 264, 14721, 12911, 51615], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2806, "seek": 768636, "start": 7711.36, "end": 7713.36, "text": " very, very close.", "tokens": [51615, 588, 11, 588, 1998, 13, 51715], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2807, "seek": 768636, "start": 7713.36, "end": 7715.36, "text": " And basically,", "tokens": [51715, 400, 1936, 11, 51815], "temperature": 0.0, "avg_logprob": -0.08152305378633387, "compression_ratio": 1.5427350427350428, "no_speech_prob": 7.01729441061616e-05}, {"id": 2808, "seek": 771536, "start": 7715.36, "end": 7718.36, "text": " we've successfully trained a neural net.", "tokens": [50365, 321, 600, 10727, 8895, 257, 18161, 2533, 13, 50515], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2809, "seek": 771536, "start": 7718.36, "end": 7720.36, "text": " Okay, let's make this a tiny bit more respectable", "tokens": [50515, 1033, 11, 718, 311, 652, 341, 257, 5870, 857, 544, 44279, 50615], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2810, "seek": 771536, "start": 7720.36, "end": 7722.36, "text": " and implement an actual training loop", "tokens": [50615, 293, 4445, 364, 3539, 3097, 6367, 50715], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2811, "seek": 771536, "start": 7722.36, "end": 7723.36, "text": " and what that looks like.", "tokens": [50715, 293, 437, 300, 1542, 411, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2812, "seek": 771536, "start": 7723.36, "end": 7725.36, "text": " So this is the data definition that stays.", "tokens": [50765, 407, 341, 307, 264, 1412, 7123, 300, 10834, 13, 50865], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2813, "seek": 771536, "start": 7725.36, "end": 7727.36, "text": " This is the forward pass.", "tokens": [50865, 639, 307, 264, 2128, 1320, 13, 50965], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2814, "seek": 771536, "start": 7727.36, "end": 7731.36, "text": " So for k in range,", "tokens": [50965, 407, 337, 350, 294, 3613, 11, 51165], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2815, "seek": 771536, "start": 7731.36, "end": 7737.36, "text": " we're going to take a bunch of steps.", "tokens": [51165, 321, 434, 516, 281, 747, 257, 3840, 295, 4439, 13, 51465], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2816, "seek": 771536, "start": 7737.36, "end": 7739.36, "text": " First, we do the forward pass.", "tokens": [51465, 2386, 11, 321, 360, 264, 2128, 1320, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2817, "seek": 771536, "start": 7739.36, "end": 7743.36, "text": " We validate the loss.", "tokens": [51565, 492, 29562, 264, 4470, 13, 51765], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2818, "seek": 771536, "start": 7743.36, "end": 7745.36, "text": " Let's reinitialize the neural net from scratch.", "tokens": [51765, 961, 311, 6561, 270, 831, 1125, 264, 18161, 2533, 490, 8459, 13, 51865], "temperature": 0.0, "avg_logprob": -0.09690527482466264, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.0006390564958564937}, {"id": 2819, "seek": 774536, "start": 7745.36, "end": 7748.36, "text": " And here's the data.", "tokens": [50365, 400, 510, 311, 264, 1412, 13, 50515], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2820, "seek": 774536, "start": 7748.36, "end": 7750.36, "text": " And we first do the forward pass.", "tokens": [50515, 400, 321, 700, 360, 264, 2128, 1320, 13, 50615], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2821, "seek": 774536, "start": 7750.36, "end": 7752.36, "text": " Then we do the backward pass.", "tokens": [50615, 1396, 321, 360, 264, 23897, 1320, 13, 50715], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2822, "seek": 774536, "start": 7759.36, "end": 7760.36, "text": " And then we do an update.", "tokens": [51065, 400, 550, 321, 360, 364, 5623, 13, 51115], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2823, "seek": 774536, "start": 7760.36, "end": 7762.36, "text": " That's gradient descent.", "tokens": [51115, 663, 311, 16235, 23475, 13, 51215], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2824, "seek": 774536, "start": 7766.36, "end": 7767.36, "text": " And then we should be able to iterate this", "tokens": [51415, 400, 550, 321, 820, 312, 1075, 281, 44497, 341, 51465], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2825, "seek": 774536, "start": 7767.36, "end": 7770.36, "text": " and we should be able to print the current step,", "tokens": [51465, 293, 321, 820, 312, 1075, 281, 4482, 264, 2190, 1823, 11, 51615], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2826, "seek": 774536, "start": 7770.36, "end": 7772.36, "text": " the current loss.", "tokens": [51615, 264, 2190, 4470, 13, 51715], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2827, "seek": 774536, "start": 7772.36, "end": 7774.36, "text": " Let's just print the sort of", "tokens": [51715, 961, 311, 445, 4482, 264, 1333, 295, 51815], "temperature": 0.0, "avg_logprob": -0.12627810523623512, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.00035693965037353337}, {"id": 2828, "seek": 777436, "start": 7774.36, "end": 7777.36, "text": " number of the loss.", "tokens": [50365, 1230, 295, 264, 4470, 13, 50515], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2829, "seek": 777436, "start": 7777.36, "end": 7780.36, "text": " And that should be it.", "tokens": [50515, 400, 300, 820, 312, 309, 13, 50665], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2830, "seek": 777436, "start": 7780.36, "end": 7782.36, "text": " And then the learning rate,", "tokens": [50665, 400, 550, 264, 2539, 3314, 11, 50765], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2831, "seek": 777436, "start": 7782.36, "end": 7783.36, "text": " 0.01 is a little too small.", "tokens": [50765, 1958, 13, 10607, 307, 257, 707, 886, 1359, 13, 50815], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2832, "seek": 777436, "start": 7783.36, "end": 7785.36, "text": " 0.1 we saw is like a little bit dangerous", "tokens": [50815, 1958, 13, 16, 321, 1866, 307, 411, 257, 707, 857, 5795, 50915], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2833, "seek": 777436, "start": 7785.36, "end": 7786.36, "text": " and too high.", "tokens": [50915, 293, 886, 1090, 13, 50965], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2834, "seek": 777436, "start": 7786.36, "end": 7788.36, "text": " Let's go somewhere in between.", "tokens": [50965, 961, 311, 352, 4079, 294, 1296, 13, 51065], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2835, "seek": 777436, "start": 7788.36, "end": 7790.36, "text": " And we'll optimize this for", "tokens": [51065, 400, 321, 603, 19719, 341, 337, 51165], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2836, "seek": 777436, "start": 7790.36, "end": 7791.36, "text": " not 10 steps,", "tokens": [51165, 406, 1266, 4439, 11, 51215], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2837, "seek": 777436, "start": 7791.36, "end": 7794.36, "text": " but let's go for say 20 steps.", "tokens": [51215, 457, 718, 311, 352, 337, 584, 945, 4439, 13, 51365], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2838, "seek": 777436, "start": 7794.36, "end": 7799.36, "text": " Let me erase all of this junk.", "tokens": [51365, 961, 385, 23525, 439, 295, 341, 19109, 13, 51615], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2839, "seek": 777436, "start": 7799.36, "end": 7802.36, "text": " And let's run the optimization.", "tokens": [51615, 400, 718, 311, 1190, 264, 19618, 13, 51765], "temperature": 0.0, "avg_logprob": -0.09997491483335141, "compression_ratio": 1.5970149253731343, "no_speech_prob": 9.424571180716157e-05}, {"id": 2840, "seek": 780236, "start": 7802.36, "end": 7805.36, "text": " And you see how we've actually converged slower", "tokens": [50365, 400, 291, 536, 577, 321, 600, 767, 9652, 3004, 14009, 50515], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2841, "seek": 780236, "start": 7805.36, "end": 7807.36, "text": " in a more controlled manner", "tokens": [50515, 294, 257, 544, 10164, 9060, 50615], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2842, "seek": 780236, "start": 7807.36, "end": 7810.36, "text": " and got to a loss that is very low.", "tokens": [50615, 293, 658, 281, 257, 4470, 300, 307, 588, 2295, 13, 50765], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2843, "seek": 780236, "start": 7810.36, "end": 7814.36, "text": " So I expect YPred to be quite good.", "tokens": [50765, 407, 286, 2066, 398, 47, 986, 281, 312, 1596, 665, 13, 50965], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2844, "seek": 780236, "start": 7814.36, "end": 7816.36, "text": " There we go.", "tokens": [50965, 821, 321, 352, 13, 51065], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2845, "seek": 780236, "start": 7821.36, "end": 7823.36, "text": " And that's it.", "tokens": [51315, 400, 300, 311, 309, 13, 51415], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2846, "seek": 780236, "start": 7823.36, "end": 7825.36, "text": " Okay, so this is kind of embarrassing,", "tokens": [51415, 1033, 11, 370, 341, 307, 733, 295, 17299, 11, 51515], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2847, "seek": 780236, "start": 7825.36, "end": 7828.36, "text": " but we actually have a really terrible bug in here.", "tokens": [51515, 457, 321, 767, 362, 257, 534, 6237, 7426, 294, 510, 13, 51665], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2848, "seek": 780236, "start": 7828.36, "end": 7830.36, "text": " And it's a subtle bug", "tokens": [51665, 400, 309, 311, 257, 13743, 7426, 51765], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2849, "seek": 780236, "start": 7830.36, "end": 7832.36, "text": " and it's a very common bug.", "tokens": [51765, 293, 309, 311, 257, 588, 2689, 7426, 13, 51865], "temperature": 0.0, "avg_logprob": -0.11769605636596679, "compression_ratio": 1.5265700483091786, "no_speech_prob": 0.0005997337284497917}, {"id": 2850, "seek": 783236, "start": 7832.36, "end": 7834.36, "text": " And I can't believe I've done it", "tokens": [50365, 400, 286, 393, 380, 1697, 286, 600, 1096, 309, 50465], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2851, "seek": 783236, "start": 7834.36, "end": 7836.36, "text": " for the 20th time in my life,", "tokens": [50465, 337, 264, 945, 392, 565, 294, 452, 993, 11, 50565], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2852, "seek": 783236, "start": 7836.36, "end": 7837.36, "text": " especially on camera.", "tokens": [50565, 2318, 322, 2799, 13, 50615], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2853, "seek": 783236, "start": 7837.36, "end": 7839.36, "text": " And I could have reshot the whole thing,", "tokens": [50615, 400, 286, 727, 362, 725, 12194, 264, 1379, 551, 11, 50715], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2854, "seek": 783236, "start": 7839.36, "end": 7841.36, "text": " but I think it's pretty funny.", "tokens": [50715, 457, 286, 519, 309, 311, 1238, 4074, 13, 50815], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2855, "seek": 783236, "start": 7841.36, "end": 7843.36, "text": " And you get to appreciate a bit", "tokens": [50815, 400, 291, 483, 281, 4449, 257, 857, 50915], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2856, "seek": 783236, "start": 7843.36, "end": 7845.36, "text": " what working with neural nets", "tokens": [50915, 437, 1364, 365, 18161, 36170, 51015], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2857, "seek": 783236, "start": 7845.36, "end": 7847.36, "text": " maybe is like sometimes.", "tokens": [51015, 1310, 307, 411, 2171, 13, 51115], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2858, "seek": 783236, "start": 7847.36, "end": 7849.36, "text": " We are guilty of", "tokens": [51115, 492, 366, 12341, 295, 51215], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2859, "seek": 783236, "start": 7849.36, "end": 7851.36, "text": " a common bug.", "tokens": [51215, 257, 2689, 7426, 13, 51315], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2860, "seek": 783236, "start": 7851.36, "end": 7853.36, "text": " I've actually tweeted", "tokens": [51315, 286, 600, 767, 25646, 51415], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2861, "seek": 783236, "start": 7853.36, "end": 7855.36, "text": " the most common neural net mistakes", "tokens": [51415, 264, 881, 2689, 18161, 2533, 8038, 51515], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2862, "seek": 783236, "start": 7855.36, "end": 7857.36, "text": " a long time ago now.", "tokens": [51515, 257, 938, 565, 2057, 586, 13, 51615], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2863, "seek": 783236, "start": 7857.36, "end": 7859.36, "text": " And I'm not really", "tokens": [51615, 400, 286, 478, 406, 534, 51715], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2864, "seek": 783236, "start": 7859.36, "end": 7861.36, "text": " going to explain any of these,", "tokens": [51715, 516, 281, 2903, 604, 295, 613, 11, 51815], "temperature": 0.0, "avg_logprob": -0.06698346710205078, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0006202762015163898}, {"id": 2865, "seek": 786136, "start": 7861.36, "end": 7863.36, "text": " but remember we are guilty of number three.", "tokens": [50365, 457, 1604, 321, 366, 12341, 295, 1230, 1045, 13, 50465], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2866, "seek": 786136, "start": 7863.36, "end": 7865.36, "text": " You forgot to zero grad", "tokens": [50465, 509, 5298, 281, 4018, 2771, 50565], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2867, "seek": 786136, "start": 7865.36, "end": 7866.36, "text": " before dot backward.", "tokens": [50565, 949, 5893, 23897, 13, 50615], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2868, "seek": 786136, "start": 7866.36, "end": 7869.36, "text": " What is that?", "tokens": [50615, 708, 307, 300, 30, 50765], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2869, "seek": 786136, "start": 7869.36, "end": 7870.36, "text": " Basically what's happening,", "tokens": [50765, 8537, 437, 311, 2737, 11, 50815], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2870, "seek": 786136, "start": 7870.36, "end": 7871.36, "text": " and it's a subtle bug", "tokens": [50815, 293, 309, 311, 257, 13743, 7426, 50865], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2871, "seek": 786136, "start": 7871.36, "end": 7873.36, "text": " and I'm not sure if you saw it,", "tokens": [50865, 293, 286, 478, 406, 988, 498, 291, 1866, 309, 11, 50965], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2872, "seek": 786136, "start": 7873.36, "end": 7876.36, "text": " is that all of these weights here", "tokens": [50965, 307, 300, 439, 295, 613, 17443, 510, 51115], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2873, "seek": 786136, "start": 7876.36, "end": 7879.36, "text": " have a dot data and a dot grad.", "tokens": [51115, 362, 257, 5893, 1412, 293, 257, 5893, 2771, 13, 51265], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2874, "seek": 786136, "start": 7879.36, "end": 7882.36, "text": " And dot grad starts at zero.", "tokens": [51265, 400, 5893, 2771, 3719, 412, 4018, 13, 51415], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2875, "seek": 786136, "start": 7882.36, "end": 7883.36, "text": " And then we do backward", "tokens": [51415, 400, 550, 321, 360, 23897, 51465], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2876, "seek": 786136, "start": 7883.36, "end": 7885.36, "text": " and we fill in the gradients.", "tokens": [51465, 293, 321, 2836, 294, 264, 2771, 2448, 13, 51565], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2877, "seek": 786136, "start": 7885.36, "end": 7887.36, "text": " And then we do an update on the data,", "tokens": [51565, 400, 550, 321, 360, 364, 5623, 322, 264, 1412, 11, 51665], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2878, "seek": 786136, "start": 7887.36, "end": 7889.36, "text": " but we don't flush the grad.", "tokens": [51665, 457, 321, 500, 380, 19568, 264, 2771, 13, 51765], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2879, "seek": 786136, "start": 7889.36, "end": 7890.36, "text": " It stays there.", "tokens": [51765, 467, 10834, 456, 13, 51815], "temperature": 0.0, "avg_logprob": -0.10590765530005433, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0001475310855312273}, {"id": 2880, "seek": 789036, "start": 7890.36, "end": 7893.36, "text": " So when we do the second forward pass", "tokens": [50365, 407, 562, 321, 360, 264, 1150, 2128, 1320, 50515], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2881, "seek": 789036, "start": 7893.36, "end": 7895.36, "text": " and we do backward again,", "tokens": [50515, 293, 321, 360, 23897, 797, 11, 50615], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2882, "seek": 789036, "start": 7895.36, "end": 7897.36, "text": " remember that all the backward operations", "tokens": [50615, 1604, 300, 439, 264, 23897, 7705, 50715], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2883, "seek": 789036, "start": 7897.36, "end": 7899.36, "text": " do a plus equals on the grad.", "tokens": [50715, 360, 257, 1804, 6915, 322, 264, 2771, 13, 50815], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2884, "seek": 789036, "start": 7899.36, "end": 7901.36, "text": " And so these gradients just add up", "tokens": [50815, 400, 370, 613, 2771, 2448, 445, 909, 493, 50915], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2885, "seek": 789036, "start": 7901.36, "end": 7904.36, "text": " and they never get reset to zero.", "tokens": [50915, 293, 436, 1128, 483, 14322, 281, 4018, 13, 51065], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2886, "seek": 789036, "start": 7904.36, "end": 7907.36, "text": " So basically we didn't zero grad.", "tokens": [51065, 407, 1936, 321, 994, 380, 4018, 2771, 13, 51215], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2887, "seek": 789036, "start": 7907.36, "end": 7908.36, "text": " So here's how we zero grad", "tokens": [51215, 407, 510, 311, 577, 321, 4018, 2771, 51265], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2888, "seek": 789036, "start": 7908.36, "end": 7910.36, "text": " before backward.", "tokens": [51265, 949, 23897, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2889, "seek": 789036, "start": 7910.36, "end": 7913.36, "text": " We need to iterate over all the parameters.", "tokens": [51365, 492, 643, 281, 44497, 670, 439, 264, 9834, 13, 51515], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2890, "seek": 789036, "start": 7913.36, "end": 7915.36, "text": " And we need to make sure that", "tokens": [51515, 400, 321, 643, 281, 652, 988, 300, 51615], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2891, "seek": 789036, "start": 7915.36, "end": 7918.36, "text": " p dot grad is set to zero.", "tokens": [51615, 280, 5893, 2771, 307, 992, 281, 4018, 13, 51765], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2892, "seek": 789036, "start": 7918.36, "end": 7920.36, "text": " We need to reset it to zero.", "tokens": [51765, 492, 643, 281, 14322, 309, 281, 4018, 13, 51865], "temperature": 0.0, "avg_logprob": -0.08282165684975869, "compression_ratio": 1.8149779735682818, "no_speech_prob": 0.00013022570055909455}, {"id": 2893, "seek": 792036, "start": 7920.36, "end": 7922.36, "text": " Just like it is in the constructor.", "tokens": [50365, 1449, 411, 309, 307, 294, 264, 47479, 13, 50465], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2894, "seek": 792036, "start": 7922.36, "end": 7924.36, "text": " So remember all the way here", "tokens": [50465, 407, 1604, 439, 264, 636, 510, 50565], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2895, "seek": 792036, "start": 7924.36, "end": 7925.36, "text": " for all these value nodes,", "tokens": [50565, 337, 439, 613, 2158, 13891, 11, 50615], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2896, "seek": 792036, "start": 7925.36, "end": 7927.36, "text": " grad is reset to zero.", "tokens": [50615, 2771, 307, 14322, 281, 4018, 13, 50715], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2897, "seek": 792036, "start": 7927.36, "end": 7929.36, "text": " And then all these backward passes", "tokens": [50715, 400, 550, 439, 613, 23897, 11335, 50815], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2898, "seek": 792036, "start": 7929.36, "end": 7931.36, "text": " do a plus equals from that grad.", "tokens": [50815, 360, 257, 1804, 6915, 490, 300, 2771, 13, 50915], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2899, "seek": 792036, "start": 7931.36, "end": 7933.36, "text": " But we need to make sure that", "tokens": [50915, 583, 321, 643, 281, 652, 988, 300, 51015], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2900, "seek": 792036, "start": 7933.36, "end": 7935.36, "text": " we reset these grads to zero", "tokens": [51015, 321, 14322, 613, 2771, 82, 281, 4018, 51115], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2901, "seek": 792036, "start": 7935.36, "end": 7937.36, "text": " so that when we do backward,", "tokens": [51115, 370, 300, 562, 321, 360, 23897, 11, 51215], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2902, "seek": 792036, "start": 7937.36, "end": 7938.36, "text": " all of them start at zero", "tokens": [51215, 439, 295, 552, 722, 412, 4018, 51265], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2903, "seek": 792036, "start": 7938.36, "end": 7939.36, "text": " and the actual backward pass", "tokens": [51265, 293, 264, 3539, 23897, 1320, 51315], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2904, "seek": 792036, "start": 7939.36, "end": 7943.36, "text": " accumulates the loss derivatives", "tokens": [51315, 12989, 26192, 264, 4470, 33733, 51515], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2905, "seek": 792036, "start": 7943.36, "end": 7945.36, "text": " into the grads.", "tokens": [51515, 666, 264, 2771, 82, 13, 51615], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2906, "seek": 792036, "start": 7945.36, "end": 7948.36, "text": " So this is zero grad in PyTorch.", "tokens": [51615, 407, 341, 307, 4018, 2771, 294, 9953, 51, 284, 339, 13, 51765], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2907, "seek": 792036, "start": 7948.36, "end": 7949.36, "text": " And", "tokens": [51765, 400, 51815], "temperature": 0.0, "avg_logprob": -0.05397838637942359, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.0001663682924117893}, {"id": 2908, "seek": 794936, "start": 7949.36, "end": 7953.36, "text": " we will get a slightly different optimization.", "tokens": [50365, 321, 486, 483, 257, 4748, 819, 19618, 13, 50565], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2909, "seek": 794936, "start": 7953.36, "end": 7955.36, "text": " Let's reset the neural net.", "tokens": [50565, 961, 311, 14322, 264, 18161, 2533, 13, 50665], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2910, "seek": 794936, "start": 7955.36, "end": 7956.36, "text": " The data is the same.", "tokens": [50665, 440, 1412, 307, 264, 912, 13, 50715], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2911, "seek": 794936, "start": 7956.36, "end": 7958.36, "text": " This is now, I think, correct.", "tokens": [50715, 639, 307, 586, 11, 286, 519, 11, 3006, 13, 50815], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2912, "seek": 794936, "start": 7958.36, "end": 7961.36, "text": " And we get a much more", "tokens": [50815, 400, 321, 483, 257, 709, 544, 50965], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2913, "seek": 794936, "start": 7961.36, "end": 7964.36, "text": " slower descent.", "tokens": [50965, 14009, 23475, 13, 51115], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2914, "seek": 794936, "start": 7964.36, "end": 7966.36, "text": " We still end up with pretty good results.", "tokens": [51115, 492, 920, 917, 493, 365, 1238, 665, 3542, 13, 51215], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2915, "seek": 794936, "start": 7966.36, "end": 7968.36, "text": " And we can continue this a bit more", "tokens": [51215, 400, 321, 393, 2354, 341, 257, 857, 544, 51315], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2916, "seek": 794936, "start": 7968.36, "end": 7970.36, "text": " to get down lower", "tokens": [51315, 281, 483, 760, 3126, 51415], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2917, "seek": 794936, "start": 7970.36, "end": 7971.36, "text": " and lower", "tokens": [51415, 293, 3126, 51465], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2918, "seek": 794936, "start": 7971.36, "end": 7974.36, "text": " and lower.", "tokens": [51465, 293, 3126, 13, 51615], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2919, "seek": 794936, "start": 7974.36, "end": 7976.36, "text": " Yeah.", "tokens": [51615, 865, 13, 51715], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2920, "seek": 794936, "start": 7976.36, "end": 7978.36, "text": " So the only reason that the previous thing worked,", "tokens": [51715, 407, 264, 787, 1778, 300, 264, 3894, 551, 2732, 11, 51815], "temperature": 0.0, "avg_logprob": -0.08917483375186012, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.00028702011331915855}, {"id": 2921, "seek": 797836, "start": 7978.36, "end": 7980.36, "text": " it's extremely buggy.", "tokens": [50365, 309, 311, 4664, 7426, 1480, 13, 50465], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2922, "seek": 797836, "start": 7980.36, "end": 7981.36, "text": " The only reason that worked", "tokens": [50465, 440, 787, 1778, 300, 2732, 50515], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2923, "seek": 797836, "start": 7981.36, "end": 7983.36, "text": " is that", "tokens": [50515, 307, 300, 50615], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2924, "seek": 797836, "start": 7983.36, "end": 7986.36, "text": " this is a very, very simple problem.", "tokens": [50615, 341, 307, 257, 588, 11, 588, 2199, 1154, 13, 50765], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2925, "seek": 797836, "start": 7986.36, "end": 7988.36, "text": " And it's very easy for this neural net", "tokens": [50765, 400, 309, 311, 588, 1858, 337, 341, 18161, 2533, 50865], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2926, "seek": 797836, "start": 7988.36, "end": 7989.36, "text": " to fit this data.", "tokens": [50865, 281, 3318, 341, 1412, 13, 50915], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2927, "seek": 797836, "start": 7989.36, "end": 7992.36, "text": " And so the grads ended up accumulating", "tokens": [50915, 400, 370, 264, 2771, 82, 4590, 493, 12989, 12162, 51065], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2928, "seek": 797836, "start": 7992.36, "end": 7993.36, "text": " and it effectively gave us", "tokens": [51065, 293, 309, 8659, 2729, 505, 51115], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2929, "seek": 797836, "start": 7993.36, "end": 7995.36, "text": " a massive step size.", "tokens": [51115, 257, 5994, 1823, 2744, 13, 51215], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2930, "seek": 797836, "start": 7995.36, "end": 7999.36, "text": " And it made us converge extremely fast.", "tokens": [51215, 400, 309, 1027, 505, 41881, 4664, 2370, 13, 51415], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2931, "seek": 797836, "start": 7999.36, "end": 8001.36, "text": " But basically now we have to do more steps", "tokens": [51415, 583, 1936, 586, 321, 362, 281, 360, 544, 4439, 51515], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2932, "seek": 797836, "start": 8001.36, "end": 8004.36, "text": " to get to very low values of loss", "tokens": [51515, 281, 483, 281, 588, 2295, 4190, 295, 4470, 51665], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2933, "seek": 797836, "start": 8004.36, "end": 8006.36, "text": " and get YPRED to be really good.", "tokens": [51665, 293, 483, 398, 47, 3850, 35, 281, 312, 534, 665, 13, 51765], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2934, "seek": 797836, "start": 8006.36, "end": 8007.36, "text": " We can try to", "tokens": [51765, 492, 393, 853, 281, 51815], "temperature": 0.0, "avg_logprob": -0.1146984634399414, "compression_ratio": 1.608, "no_speech_prob": 0.00020694590057246387}, {"id": 2935, "seek": 800736, "start": 8007.36, "end": 8014.36, "text": " step a bit greater.", "tokens": [50365, 1823, 257, 857, 5044, 13, 50715], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2936, "seek": 800736, "start": 8014.36, "end": 8015.36, "text": " Yeah.", "tokens": [50715, 865, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2937, "seek": 800736, "start": 8015.36, "end": 8016.36, "text": " We're going to get closer and closer", "tokens": [50765, 492, 434, 516, 281, 483, 4966, 293, 4966, 50815], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2938, "seek": 800736, "start": 8016.36, "end": 8018.36, "text": " to one minus one and one.", "tokens": [50815, 281, 472, 3175, 472, 293, 472, 13, 50915], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2939, "seek": 800736, "start": 8018.36, "end": 8019.36, "text": " So", "tokens": [50915, 407, 50965], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2940, "seek": 800736, "start": 8019.36, "end": 8021.36, "text": " working with neural nets is sometimes", "tokens": [50965, 1364, 365, 18161, 36170, 307, 2171, 51065], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2941, "seek": 800736, "start": 8021.36, "end": 8024.36, "text": " tricky because", "tokens": [51065, 12414, 570, 51215], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2942, "seek": 800736, "start": 8024.36, "end": 8026.36, "text": " you may have lots of bugs in the code", "tokens": [51215, 291, 815, 362, 3195, 295, 15120, 294, 264, 3089, 51315], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2943, "seek": 800736, "start": 8026.36, "end": 8028.36, "text": " and", "tokens": [51315, 293, 51415], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2944, "seek": 800736, "start": 8028.36, "end": 8029.36, "text": " your network might actually work", "tokens": [51415, 428, 3209, 1062, 767, 589, 51465], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2945, "seek": 800736, "start": 8029.36, "end": 8031.36, "text": " just like ours worked.", "tokens": [51465, 445, 411, 11896, 2732, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2946, "seek": 800736, "start": 8031.36, "end": 8032.36, "text": " But chances are is that", "tokens": [51565, 583, 10486, 366, 307, 300, 51615], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2947, "seek": 800736, "start": 8032.36, "end": 8034.36, "text": " if we had a more complex problem", "tokens": [51615, 498, 321, 632, 257, 544, 3997, 1154, 51715], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2948, "seek": 800736, "start": 8034.36, "end": 8036.36, "text": " then actually this bug would have", "tokens": [51715, 550, 767, 341, 7426, 576, 362, 51815], "temperature": 0.0, "avg_logprob": -0.09359061115919942, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.00013527229020837694}, {"id": 2949, "seek": 803636, "start": 8036.36, "end": 8038.36, "text": " made us not optimize the loss very well.", "tokens": [50365, 1027, 505, 406, 19719, 264, 4470, 588, 731, 13, 50465], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2950, "seek": 803636, "start": 8038.36, "end": 8040.36, "text": " And we were only able to get away with it", "tokens": [50465, 400, 321, 645, 787, 1075, 281, 483, 1314, 365, 309, 50565], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2951, "seek": 803636, "start": 8040.36, "end": 8041.36, "text": " because", "tokens": [50565, 570, 50615], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2952, "seek": 803636, "start": 8041.36, "end": 8043.36, "text": " the problem is very simple.", "tokens": [50615, 264, 1154, 307, 588, 2199, 13, 50715], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2953, "seek": 803636, "start": 8043.36, "end": 8045.36, "text": " So let's now bring everything together", "tokens": [50715, 407, 718, 311, 586, 1565, 1203, 1214, 50815], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2954, "seek": 803636, "start": 8045.36, "end": 8047.36, "text": " and summarize what we learned.", "tokens": [50815, 293, 20858, 437, 321, 3264, 13, 50915], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2955, "seek": 803636, "start": 8047.36, "end": 8048.36, "text": " What are neural nets?", "tokens": [50915, 708, 366, 18161, 36170, 30, 50965], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2956, "seek": 803636, "start": 8048.36, "end": 8051.36, "text": " Neural nets are these mathematical expressions.", "tokens": [50965, 1734, 1807, 36170, 366, 613, 18894, 15277, 13, 51115], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2957, "seek": 803636, "start": 8051.36, "end": 8053.36, "text": " Fairly simple mathematical expressions", "tokens": [51115, 12157, 356, 2199, 18894, 15277, 51215], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2958, "seek": 803636, "start": 8053.36, "end": 8055.36, "text": " in the case of multi-layer perceptron", "tokens": [51215, 294, 264, 1389, 295, 4825, 12, 8376, 260, 43276, 2044, 51315], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2959, "seek": 803636, "start": 8055.36, "end": 8058.36, "text": " that take input as the data", "tokens": [51315, 300, 747, 4846, 382, 264, 1412, 51465], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2960, "seek": 803636, "start": 8058.36, "end": 8060.36, "text": " and they take input the weights", "tokens": [51465, 293, 436, 747, 4846, 264, 17443, 51565], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2961, "seek": 803636, "start": 8060.36, "end": 8061.36, "text": " and the parameters of the neural net.", "tokens": [51565, 293, 264, 9834, 295, 264, 18161, 2533, 13, 51615], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2962, "seek": 803636, "start": 8061.36, "end": 8064.36, "text": " Mathematical expression for the forward pass", "tokens": [51615, 15776, 8615, 804, 6114, 337, 264, 2128, 1320, 51765], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2963, "seek": 803636, "start": 8064.36, "end": 8065.36, "text": " followed by a loss function.", "tokens": [51765, 6263, 538, 257, 4470, 2445, 13, 51815], "temperature": 0.0, "avg_logprob": -0.07859182716312266, "compression_ratio": 1.797872340425532, "no_speech_prob": 0.00019604952831286937}, {"id": 2964, "seek": 806536, "start": 8065.36, "end": 8067.36, "text": " And the loss function tries to measure", "tokens": [50365, 400, 264, 4470, 2445, 9898, 281, 3481, 50465], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2965, "seek": 806536, "start": 8067.36, "end": 8069.36, "text": " the accuracy of the predictions.", "tokens": [50465, 264, 14170, 295, 264, 21264, 13, 50565], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2966, "seek": 806536, "start": 8069.36, "end": 8071.36, "text": " And usually the loss will be low", "tokens": [50565, 400, 2673, 264, 4470, 486, 312, 2295, 50665], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2967, "seek": 806536, "start": 8071.36, "end": 8073.36, "text": " when your predictions are matching your targets", "tokens": [50665, 562, 428, 21264, 366, 14324, 428, 12911, 50765], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2968, "seek": 806536, "start": 8073.36, "end": 8076.36, "text": " or where the network is basically behaving well.", "tokens": [50765, 420, 689, 264, 3209, 307, 1936, 35263, 731, 13, 50915], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2969, "seek": 806536, "start": 8076.36, "end": 8078.36, "text": " So we manipulate the loss function", "tokens": [50915, 407, 321, 20459, 264, 4470, 2445, 51015], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2970, "seek": 806536, "start": 8078.36, "end": 8080.36, "text": " so that when the loss is low", "tokens": [51015, 370, 300, 562, 264, 4470, 307, 2295, 51115], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2971, "seek": 806536, "start": 8080.36, "end": 8082.36, "text": " the network is doing what you want it to do", "tokens": [51115, 264, 3209, 307, 884, 437, 291, 528, 309, 281, 360, 51215], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2972, "seek": 806536, "start": 8082.36, "end": 8083.36, "text": " on your problem.", "tokens": [51215, 322, 428, 1154, 13, 51265], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2973, "seek": 806536, "start": 8083.36, "end": 8086.36, "text": " And then we backward the loss.", "tokens": [51265, 400, 550, 321, 23897, 264, 4470, 13, 51415], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2974, "seek": 806536, "start": 8086.36, "end": 8088.36, "text": " Use back propagation to get the gradient", "tokens": [51415, 8278, 646, 38377, 281, 483, 264, 16235, 51515], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2975, "seek": 806536, "start": 8088.36, "end": 8090.36, "text": " and then we know how to tune all the parameters", "tokens": [51515, 293, 550, 321, 458, 577, 281, 10864, 439, 264, 9834, 51615], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2976, "seek": 806536, "start": 8090.36, "end": 8092.36, "text": " to decrease the loss locally.", "tokens": [51615, 281, 11514, 264, 4470, 16143, 13, 51715], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2977, "seek": 806536, "start": 8092.36, "end": 8094.36, "text": " But then we have to iterate that process", "tokens": [51715, 583, 550, 321, 362, 281, 44497, 300, 1399, 51815], "temperature": 0.0, "avg_logprob": -0.051574885390187036, "compression_ratio": 1.9291044776119404, "no_speech_prob": 0.0036609049420803785}, {"id": 2978, "seek": 809436, "start": 8094.36, "end": 8097.36, "text": " many times in what's called the gradient descent.", "tokens": [50365, 867, 1413, 294, 437, 311, 1219, 264, 16235, 23475, 13, 50515], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2979, "seek": 809436, "start": 8097.36, "end": 8099.36, "text": " So we simply follow the gradient information", "tokens": [50515, 407, 321, 2935, 1524, 264, 16235, 1589, 50615], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2980, "seek": 809436, "start": 8099.36, "end": 8101.36, "text": " and that minimizes the loss", "tokens": [50615, 293, 300, 4464, 5660, 264, 4470, 50715], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2981, "seek": 809436, "start": 8101.36, "end": 8102.36, "text": " and the loss is arranged so that", "tokens": [50715, 293, 264, 4470, 307, 18721, 370, 300, 50765], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2982, "seek": 809436, "start": 8102.36, "end": 8104.36, "text": " when the loss is minimized", "tokens": [50765, 562, 264, 4470, 307, 4464, 1602, 50865], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2983, "seek": 809436, "start": 8104.36, "end": 8106.36, "text": " the network is doing what you want it to do.", "tokens": [50865, 264, 3209, 307, 884, 437, 291, 528, 309, 281, 360, 13, 50965], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2984, "seek": 809436, "start": 8106.36, "end": 8110.36, "text": " And yeah, so we just have a blob of neural stuff", "tokens": [50965, 400, 1338, 11, 370, 321, 445, 362, 257, 46115, 295, 18161, 1507, 51165], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2985, "seek": 809436, "start": 8110.36, "end": 8112.36, "text": " and we can make it do arbitrary things.", "tokens": [51165, 293, 321, 393, 652, 309, 360, 23211, 721, 13, 51265], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2986, "seek": 809436, "start": 8112.36, "end": 8115.36, "text": " And that's what gives neural nets their power.", "tokens": [51265, 400, 300, 311, 437, 2709, 18161, 36170, 641, 1347, 13, 51415], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2987, "seek": 809436, "start": 8115.36, "end": 8117.36, "text": " It's, you know, this is a very tiny network", "tokens": [51415, 467, 311, 11, 291, 458, 11, 341, 307, 257, 588, 5870, 3209, 51515], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2988, "seek": 809436, "start": 8117.36, "end": 8119.36, "text": " with 41 parameters.", "tokens": [51515, 365, 18173, 9834, 13, 51615], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2989, "seek": 809436, "start": 8119.36, "end": 8121.36, "text": " But you can build significantly more complicated", "tokens": [51615, 583, 291, 393, 1322, 10591, 544, 6179, 51715], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2990, "seek": 809436, "start": 8121.36, "end": 8123.36, "text": " neural nets with billions", "tokens": [51715, 18161, 36170, 365, 17375, 51815], "temperature": 0.0, "avg_logprob": -0.0926975379312845, "compression_ratio": 1.725085910652921, "no_speech_prob": 0.0003829083580058068}, {"id": 2991, "seek": 812336, "start": 8123.36, "end": 8126.36, "text": " at this point almost trillions of parameters.", "tokens": [50365, 412, 341, 935, 1920, 504, 46279, 295, 9834, 13, 50515], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2992, "seek": 812336, "start": 8126.36, "end": 8128.36, "text": " And it's a massive blob of neural tissue", "tokens": [50515, 400, 309, 311, 257, 5994, 46115, 295, 18161, 12404, 50615], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2993, "seek": 812336, "start": 8128.36, "end": 8130.36, "text": " simulated neural tissue", "tokens": [50615, 41713, 18161, 12404, 50715], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2994, "seek": 812336, "start": 8130.36, "end": 8132.36, "text": " roughly speaking.", "tokens": [50715, 9810, 4124, 13, 50815], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2995, "seek": 812336, "start": 8132.36, "end": 8135.36, "text": " And you can make it do extremely complex problems.", "tokens": [50815, 400, 291, 393, 652, 309, 360, 4664, 3997, 2740, 13, 50965], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2996, "seek": 812336, "start": 8135.36, "end": 8137.36, "text": " And these neural nets then", "tokens": [50965, 400, 613, 18161, 36170, 550, 51065], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2997, "seek": 812336, "start": 8137.36, "end": 8139.36, "text": " have all kinds of very fascinating emergent properties", "tokens": [51065, 362, 439, 3685, 295, 588, 10343, 4345, 6930, 7221, 51165], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2998, "seek": 812336, "start": 8139.36, "end": 8143.36, "text": " in when you try to make them do", "tokens": [51165, 294, 562, 291, 853, 281, 652, 552, 360, 51365], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 2999, "seek": 812336, "start": 8143.36, "end": 8145.36, "text": " significantly hard problems.", "tokens": [51365, 10591, 1152, 2740, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 3000, "seek": 812336, "start": 8145.36, "end": 8147.36, "text": " As in the case of GPT for example", "tokens": [51465, 1018, 294, 264, 1389, 295, 26039, 51, 337, 1365, 51565], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 3001, "seek": 812336, "start": 8147.36, "end": 8150.36, "text": " we have massive amounts of text from the internet", "tokens": [51565, 321, 362, 5994, 11663, 295, 2487, 490, 264, 4705, 51715], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 3002, "seek": 812336, "start": 8150.36, "end": 8152.36, "text": " and we're trying to get a neural net to predict", "tokens": [51715, 293, 321, 434, 1382, 281, 483, 257, 18161, 2533, 281, 6069, 51815], "temperature": 0.0, "avg_logprob": -0.08709483768628991, "compression_ratio": 1.726235741444867, "no_speech_prob": 0.000246618059463799}, {"id": 3003, "seek": 815236, "start": 8152.36, "end": 8154.36, "text": " to take like a few words", "tokens": [50365, 281, 747, 411, 257, 1326, 2283, 50465], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3004, "seek": 815236, "start": 8154.36, "end": 8156.36, "text": " and try to predict the next word in a sequence.", "tokens": [50465, 293, 853, 281, 6069, 264, 958, 1349, 294, 257, 8310, 13, 50565], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3005, "seek": 815236, "start": 8156.36, "end": 8158.36, "text": " That's the learning problem.", "tokens": [50565, 663, 311, 264, 2539, 1154, 13, 50665], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3006, "seek": 815236, "start": 8158.36, "end": 8159.36, "text": " And it turns out that when you train this", "tokens": [50665, 400, 309, 4523, 484, 300, 562, 291, 3847, 341, 50715], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3007, "seek": 815236, "start": 8159.36, "end": 8160.36, "text": " on all of internet", "tokens": [50715, 322, 439, 295, 4705, 50765], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3008, "seek": 815236, "start": 8160.36, "end": 8162.36, "text": " the neural net actually has like really remarkable", "tokens": [50765, 264, 18161, 2533, 767, 575, 411, 534, 12802, 50865], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3009, "seek": 815236, "start": 8162.36, "end": 8164.36, "text": " emergent properties.", "tokens": [50865, 4345, 6930, 7221, 13, 50965], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3010, "seek": 815236, "start": 8164.36, "end": 8165.36, "text": " But that neural net would have", "tokens": [50965, 583, 300, 18161, 2533, 576, 362, 51015], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3011, "seek": 815236, "start": 8165.36, "end": 8167.36, "text": " hundreds of billions of parameters.", "tokens": [51015, 6779, 295, 17375, 295, 9834, 13, 51115], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3012, "seek": 815236, "start": 8167.36, "end": 8170.36, "text": " But it works on fundamentally the exact same principles.", "tokens": [51115, 583, 309, 1985, 322, 17879, 264, 1900, 912, 9156, 13, 51265], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3013, "seek": 815236, "start": 8170.36, "end": 8173.36, "text": " The neural net of course will be a bit more complex.", "tokens": [51265, 440, 18161, 2533, 295, 1164, 486, 312, 257, 857, 544, 3997, 13, 51415], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3014, "seek": 815236, "start": 8173.36, "end": 8176.36, "text": " But otherwise the evaluating the gradient", "tokens": [51415, 583, 5911, 264, 27479, 264, 16235, 51565], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3015, "seek": 815236, "start": 8176.36, "end": 8179.36, "text": " is there and will be identical.", "tokens": [51565, 307, 456, 293, 486, 312, 14800, 13, 51715], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3016, "seek": 815236, "start": 8179.36, "end": 8181.36, "text": " And the gradient descent would be there", "tokens": [51715, 400, 264, 16235, 23475, 576, 312, 456, 51815], "temperature": 0.0, "avg_logprob": -0.09666387962572502, "compression_ratio": 1.8041237113402062, "no_speech_prob": 0.00029499438824132085}, {"id": 3017, "seek": 818136, "start": 8181.36, "end": 8182.36, "text": " and basically identical.", "tokens": [50365, 293, 1936, 14800, 13, 50415], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3018, "seek": 818136, "start": 8182.36, "end": 8184.36, "text": " But people usually use slightly different updates.", "tokens": [50415, 583, 561, 2673, 764, 4748, 819, 9205, 13, 50515], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3019, "seek": 818136, "start": 8184.36, "end": 8188.36, "text": " This is a very simple stochastic gradient descent update.", "tokens": [50515, 639, 307, 257, 588, 2199, 342, 8997, 2750, 16235, 23475, 5623, 13, 50715], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3020, "seek": 818136, "start": 8188.36, "end": 8191.36, "text": " And the loss function would not be a mean squared error.", "tokens": [50715, 400, 264, 4470, 2445, 576, 406, 312, 257, 914, 8889, 6713, 13, 50865], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3021, "seek": 818136, "start": 8191.36, "end": 8193.36, "text": " They would be using something called the cross entropy loss", "tokens": [50865, 814, 576, 312, 1228, 746, 1219, 264, 3278, 30867, 4470, 50965], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3022, "seek": 818136, "start": 8193.36, "end": 8195.36, "text": " for predicting the next token.", "tokens": [50965, 337, 32884, 264, 958, 14862, 13, 51065], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3023, "seek": 818136, "start": 8195.36, "end": 8196.36, "text": " So there's a few more details", "tokens": [51065, 407, 456, 311, 257, 1326, 544, 4365, 51115], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3024, "seek": 818136, "start": 8196.36, "end": 8198.36, "text": " but fundamentally the neural network setup", "tokens": [51115, 457, 17879, 264, 18161, 3209, 8657, 51215], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3025, "seek": 818136, "start": 8198.36, "end": 8199.36, "text": " and neural network training", "tokens": [51215, 293, 18161, 3209, 3097, 51265], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3026, "seek": 818136, "start": 8199.36, "end": 8201.36, "text": " is identical and pervasive.", "tokens": [51265, 307, 14800, 293, 680, 39211, 13, 51365], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3027, "seek": 818136, "start": 8201.36, "end": 8203.36, "text": " And now you understand intuitively", "tokens": [51365, 400, 586, 291, 1223, 46506, 51465], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3028, "seek": 818136, "start": 8203.36, "end": 8205.36, "text": " how that works under the hood.", "tokens": [51465, 577, 300, 1985, 833, 264, 13376, 13, 51565], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3029, "seek": 818136, "start": 8205.36, "end": 8206.36, "text": " In the beginning of this video", "tokens": [51565, 682, 264, 2863, 295, 341, 960, 51615], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3030, "seek": 818136, "start": 8206.36, "end": 8208.36, "text": " I told you that by the end of it", "tokens": [51615, 286, 1907, 291, 300, 538, 264, 917, 295, 309, 51715], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3031, "seek": 818136, "start": 8208.36, "end": 8210.36, "text": " you would understand everything in MicroGrad", "tokens": [51715, 291, 576, 1223, 1203, 294, 25642, 38, 6206, 51815], "temperature": 0.0, "avg_logprob": -0.10947796996210662, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.00024287034466397017}, {"id": 3032, "seek": 821036, "start": 8210.36, "end": 8212.36, "text": " and then we'd slowly build it up.", "tokens": [50365, 293, 550, 321, 1116, 5692, 1322, 309, 493, 13, 50465], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3033, "seek": 821036, "start": 8212.36, "end": 8214.36, "text": " Let me briefly prove that to you.", "tokens": [50465, 961, 385, 10515, 7081, 300, 281, 291, 13, 50565], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3034, "seek": 821036, "start": 8214.36, "end": 8215.36, "text": " So I'm going to step through all the code", "tokens": [50565, 407, 286, 478, 516, 281, 1823, 807, 439, 264, 3089, 50615], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3035, "seek": 821036, "start": 8215.36, "end": 8217.36, "text": " that is in MicroGrad as of today.", "tokens": [50615, 300, 307, 294, 25642, 38, 6206, 382, 295, 965, 13, 50715], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3036, "seek": 821036, "start": 8217.36, "end": 8219.36, "text": " Actually potentially some of the code will change", "tokens": [50715, 5135, 7263, 512, 295, 264, 3089, 486, 1319, 50815], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3037, "seek": 821036, "start": 8219.36, "end": 8220.36, "text": " by the time you watch this video", "tokens": [50815, 538, 264, 565, 291, 1159, 341, 960, 50865], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3038, "seek": 821036, "start": 8220.36, "end": 8223.36, "text": " because I intend to continue developing MicroGrad.", "tokens": [50865, 570, 286, 19759, 281, 2354, 6416, 25642, 38, 6206, 13, 51015], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3039, "seek": 821036, "start": 8223.36, "end": 8225.36, "text": " But let's look at what we have so far at least.", "tokens": [51015, 583, 718, 311, 574, 412, 437, 321, 362, 370, 1400, 412, 1935, 13, 51115], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3040, "seek": 821036, "start": 8225.36, "end": 8227.36, "text": " Init.py is empty.", "tokens": [51115, 22937, 13, 8200, 307, 6707, 13, 51215], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3041, "seek": 821036, "start": 8227.36, "end": 8230.36, "text": " When you go to engine.py that has the value.", "tokens": [51215, 1133, 291, 352, 281, 2848, 13, 8200, 300, 575, 264, 2158, 13, 51365], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3042, "seek": 821036, "start": 8230.36, "end": 8232.36, "text": " Everything here you should mostly recognize.", "tokens": [51365, 5471, 510, 291, 820, 5240, 5521, 13, 51465], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3043, "seek": 821036, "start": 8232.36, "end": 8234.36, "text": " So we have the data.data.grad attributes.", "tokens": [51465, 407, 321, 362, 264, 1412, 13, 67, 3274, 13, 7165, 17212, 13, 51565], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3044, "seek": 821036, "start": 8234.36, "end": 8236.36, "text": " We have the backward function.", "tokens": [51565, 492, 362, 264, 23897, 2445, 13, 51665], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3045, "seek": 821036, "start": 8236.36, "end": 8237.36, "text": " We have the previous set of children", "tokens": [51665, 492, 362, 264, 3894, 992, 295, 2227, 51715], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3046, "seek": 821036, "start": 8237.36, "end": 8240.36, "text": " and the operation that produced this value.", "tokens": [51715, 293, 264, 6916, 300, 7126, 341, 2158, 13, 51865], "temperature": 0.0, "avg_logprob": -0.0720814321099258, "compression_ratio": 1.6723646723646723, "no_speech_prob": 0.000748421240132302}, {"id": 3047, "seek": 824036, "start": 8240.36, "end": 8242.36, "text": " We have addition, multiplication", "tokens": [50365, 492, 362, 4500, 11, 27290, 50465], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3048, "seek": 824036, "start": 8242.36, "end": 8244.36, "text": " and raising to a scalar power.", "tokens": [50465, 293, 11225, 281, 257, 39684, 1347, 13, 50565], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3049, "seek": 824036, "start": 8244.36, "end": 8246.36, "text": " We have the ReLU non-linearity", "tokens": [50565, 492, 362, 264, 1300, 43, 52, 2107, 12, 1889, 17409, 50665], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3050, "seek": 824036, "start": 8246.36, "end": 8248.36, "text": " which is a slightly different type of non-linearity", "tokens": [50665, 597, 307, 257, 4748, 819, 2010, 295, 2107, 12, 1889, 17409, 50765], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3051, "seek": 824036, "start": 8248.36, "end": 8250.36, "text": " than tanh that we used in this video.", "tokens": [50765, 813, 7603, 71, 300, 321, 1143, 294, 341, 960, 13, 50865], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3052, "seek": 824036, "start": 8250.36, "end": 8252.36, "text": " Both of them are non-linearities", "tokens": [50865, 6767, 295, 552, 366, 2107, 12, 28263, 1088, 50965], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3053, "seek": 824036, "start": 8252.36, "end": 8254.36, "text": " and notably tanh is not actually present", "tokens": [50965, 293, 31357, 7603, 71, 307, 406, 767, 1974, 51065], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3054, "seek": 824036, "start": 8254.36, "end": 8256.36, "text": " in MicroGrad as of right now", "tokens": [51065, 294, 25642, 38, 6206, 382, 295, 558, 586, 51165], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3055, "seek": 824036, "start": 8256.36, "end": 8258.36, "text": " but I intend to add it later.", "tokens": [51165, 457, 286, 19759, 281, 909, 309, 1780, 13, 51265], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3056, "seek": 824036, "start": 8258.36, "end": 8260.36, "text": " We have the backward which is identical", "tokens": [51265, 492, 362, 264, 23897, 597, 307, 14800, 51365], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3057, "seek": 824036, "start": 8260.36, "end": 8262.36, "text": " and then all of these other operations", "tokens": [51365, 293, 550, 439, 295, 613, 661, 7705, 51465], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3058, "seek": 824036, "start": 8262.36, "end": 8265.36, "text": " which are built up on top of operations here.", "tokens": [51465, 597, 366, 3094, 493, 322, 1192, 295, 7705, 510, 13, 51615], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3059, "seek": 824036, "start": 8265.36, "end": 8267.36, "text": " So values should be very recognizable", "tokens": [51615, 407, 4190, 820, 312, 588, 40757, 51715], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3060, "seek": 824036, "start": 8267.36, "end": 8269.36, "text": " except for the non-linearity used in this video.", "tokens": [51715, 3993, 337, 264, 2107, 12, 1889, 17409, 1143, 294, 341, 960, 13, 51815], "temperature": 0.0, "avg_logprob": -0.05537244718368739, "compression_ratio": 1.8054607508532423, "no_speech_prob": 0.00035929784644395113}, {"id": 3061, "seek": 827036, "start": 8270.36, "end": 8272.36, "text": " There's no massive difference between ReLU and tanh", "tokens": [50365, 821, 311, 572, 5994, 2649, 1296, 1300, 43, 52, 293, 7603, 71, 50465], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3062, "seek": 827036, "start": 8272.36, "end": 8274.36, "text": " and sigmoid and these other non-linearities.", "tokens": [50465, 293, 4556, 3280, 327, 293, 613, 661, 2107, 12, 28263, 1088, 13, 50565], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3063, "seek": 827036, "start": 8274.36, "end": 8276.36, "text": " They're all roughly equivalent", "tokens": [50565, 814, 434, 439, 9810, 10344, 50665], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3064, "seek": 827036, "start": 8276.36, "end": 8278.36, "text": " and can be used in MLPs.", "tokens": [50665, 293, 393, 312, 1143, 294, 21601, 23043, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3065, "seek": 827036, "start": 8278.36, "end": 8280.36, "text": " So I use tanh because it's a bit smoother", "tokens": [50765, 407, 286, 764, 7603, 71, 570, 309, 311, 257, 857, 28640, 50865], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3066, "seek": 827036, "start": 8280.36, "end": 8282.36, "text": " and because it's a little bit more complicated than ReLU", "tokens": [50865, 293, 570, 309, 311, 257, 707, 857, 544, 6179, 813, 1300, 43, 52, 50965], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3067, "seek": 827036, "start": 8282.36, "end": 8284.36, "text": " and therefore it's stressed a little bit more", "tokens": [50965, 293, 4412, 309, 311, 14471, 257, 707, 857, 544, 51065], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3068, "seek": 827036, "start": 8284.36, "end": 8286.36, "text": " the local gradients", "tokens": [51065, 264, 2654, 2771, 2448, 51165], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3069, "seek": 827036, "start": 8286.36, "end": 8288.36, "text": " and working with those derivatives", "tokens": [51165, 293, 1364, 365, 729, 33733, 51265], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3070, "seek": 827036, "start": 8288.36, "end": 8290.36, "text": " which I thought would be useful.", "tokens": [51265, 597, 286, 1194, 576, 312, 4420, 13, 51365], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3071, "seek": 827036, "start": 8290.36, "end": 8292.36, "text": " Init.py is the neural networks library", "tokens": [51365, 22937, 13, 8200, 307, 264, 18161, 9590, 6405, 51465], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3072, "seek": 827036, "start": 8292.36, "end": 8294.36, "text": " as I mentioned.", "tokens": [51465, 382, 286, 2835, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3073, "seek": 827036, "start": 8294.36, "end": 8296.36, "text": " So you should recognize identical implementation", "tokens": [51565, 407, 291, 820, 5521, 14800, 11420, 51665], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3074, "seek": 827036, "start": 8296.36, "end": 8298.36, "text": " of neuron, layer and MLP.", "tokens": [51665, 295, 34090, 11, 4583, 293, 21601, 47, 13, 51765], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3075, "seek": 827036, "start": 8298.36, "end": 8300.36, "text": " Notably, or not so much", "tokens": [51765, 1726, 1188, 11, 420, 406, 370, 709, 51865], "temperature": 0.0, "avg_logprob": -0.09325883865356445, "compression_ratio": 1.7056962025316456, "no_speech_prob": 0.00020782357023563236}, {"id": 3076, "seek": 830036, "start": 8300.36, "end": 8302.36, "text": " we have a class module here", "tokens": [50365, 321, 362, 257, 1508, 10088, 510, 50465], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3077, "seek": 830036, "start": 8302.36, "end": 8304.36, "text": " that is a parent class of all these modules.", "tokens": [50465, 300, 307, 257, 2596, 1508, 295, 439, 613, 16679, 13, 50565], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3078, "seek": 830036, "start": 8304.36, "end": 8306.36, "text": " I did that because there's an nn.module class", "tokens": [50565, 286, 630, 300, 570, 456, 311, 364, 297, 77, 13, 8014, 2271, 1508, 50665], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3079, "seek": 830036, "start": 8306.36, "end": 8308.36, "text": " in PyTorch", "tokens": [50665, 294, 9953, 51, 284, 339, 50765], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3080, "seek": 830036, "start": 8308.36, "end": 8310.36, "text": " and so this exactly matches that API", "tokens": [50765, 293, 370, 341, 2293, 10676, 300, 9362, 50865], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3081, "seek": 830036, "start": 8310.36, "end": 8312.36, "text": " and nn.module in PyTorch has also a 0 grad", "tokens": [50865, 293, 297, 77, 13, 8014, 2271, 294, 9953, 51, 284, 339, 575, 611, 257, 1958, 2771, 50965], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3082, "seek": 830036, "start": 8312.36, "end": 8314.36, "text": " which I refactored out here.", "tokens": [50965, 597, 286, 1895, 578, 2769, 484, 510, 13, 51065], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3083, "seek": 830036, "start": 8316.36, "end": 8318.36, "text": " So that's the end of MicroGrad really.", "tokens": [51165, 407, 300, 311, 264, 917, 295, 25642, 38, 6206, 534, 13, 51265], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3084, "seek": 830036, "start": 8318.36, "end": 8320.36, "text": " Then there's a test", "tokens": [51265, 1396, 456, 311, 257, 1500, 51365], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3085, "seek": 830036, "start": 8320.36, "end": 8322.36, "text": " which you'll see basically creates", "tokens": [51365, 597, 291, 603, 536, 1936, 7829, 51465], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3086, "seek": 830036, "start": 8322.36, "end": 8324.36, "text": " two chunks of code", "tokens": [51465, 732, 24004, 295, 3089, 51565], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3087, "seek": 830036, "start": 8324.36, "end": 8326.36, "text": " one in MicroGrad and one in PyTorch", "tokens": [51565, 472, 294, 25642, 38, 6206, 293, 472, 294, 9953, 51, 284, 339, 51665], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3088, "seek": 830036, "start": 8326.36, "end": 8328.36, "text": " and we'll make sure that the forward", "tokens": [51665, 293, 321, 603, 652, 988, 300, 264, 2128, 51765], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3089, "seek": 830036, "start": 8328.36, "end": 8330.36, "text": " and the backward pass agree identically.", "tokens": [51765, 293, 264, 23897, 1320, 3986, 2473, 984, 13, 51865], "temperature": 0.0, "avg_logprob": -0.08338786460257866, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0006846372853033245}, {"id": 3090, "seek": 833036, "start": 8330.36, "end": 8332.36, "text": " For a slightly less complicated expression", "tokens": [50365, 1171, 257, 4748, 1570, 6179, 6114, 50465], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3091, "seek": 833036, "start": 8332.36, "end": 8334.36, "text": " and slightly more complicated expression", "tokens": [50465, 293, 4748, 544, 6179, 6114, 50565], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3092, "seek": 833036, "start": 8334.36, "end": 8336.36, "text": " everything agrees", "tokens": [50565, 1203, 26383, 50665], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3093, "seek": 833036, "start": 8336.36, "end": 8338.36, "text": " so we agree with PyTorch on all of these operations.", "tokens": [50665, 370, 321, 3986, 365, 9953, 51, 284, 339, 322, 439, 295, 613, 7705, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3094, "seek": 833036, "start": 8338.36, "end": 8340.36, "text": " And finally there's a demo.pypyymb", "tokens": [50765, 400, 2721, 456, 311, 257, 10723, 13, 8200, 8200, 88, 2504, 50865], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3095, "seek": 833036, "start": 8340.36, "end": 8342.36, "text": " here and it's a bit more", "tokens": [50865, 510, 293, 309, 311, 257, 857, 544, 50965], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3096, "seek": 833036, "start": 8342.36, "end": 8344.36, "text": " complicated binary classification demo", "tokens": [50965, 6179, 17434, 21538, 10723, 51065], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3097, "seek": 833036, "start": 8344.36, "end": 8346.36, "text": " than the one I covered in this lecture.", "tokens": [51065, 813, 264, 472, 286, 5343, 294, 341, 7991, 13, 51165], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3098, "seek": 833036, "start": 8346.36, "end": 8348.36, "text": " So we only had a tiny data set of four examples.", "tokens": [51165, 407, 321, 787, 632, 257, 5870, 1412, 992, 295, 1451, 5110, 13, 51265], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3099, "seek": 833036, "start": 8348.36, "end": 8350.36, "text": " Here we have a bit more", "tokens": [51265, 1692, 321, 362, 257, 857, 544, 51365], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3100, "seek": 833036, "start": 8350.36, "end": 8352.36, "text": " complicated example with lots of", "tokens": [51365, 6179, 1365, 365, 3195, 295, 51465], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3101, "seek": 833036, "start": 8352.36, "end": 8354.36, "text": " blue points and lots of red points", "tokens": [51465, 3344, 2793, 293, 3195, 295, 2182, 2793, 51565], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3102, "seek": 833036, "start": 8354.36, "end": 8356.36, "text": " and we're trying to again build a binary classifier", "tokens": [51565, 293, 321, 434, 1382, 281, 797, 1322, 257, 17434, 1508, 9902, 51665], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3103, "seek": 833036, "start": 8356.36, "end": 8358.36, "text": " to distinguish two-dimensional", "tokens": [51665, 281, 20206, 732, 12, 18759, 51765], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3104, "seek": 833036, "start": 8358.36, "end": 8360.36, "text": " points as red or blue.", "tokens": [51765, 2793, 382, 2182, 420, 3344, 13, 51865], "temperature": 0.0, "avg_logprob": -0.09634862723925434, "compression_ratio": 1.8815331010452963, "no_speech_prob": 0.0001391670957673341}, {"id": 3105, "seek": 836036, "start": 8360.36, "end": 8362.36, "text": " It's a bit more complicated MLP here", "tokens": [50365, 467, 311, 257, 857, 544, 6179, 21601, 47, 510, 50465], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3106, "seek": 836036, "start": 8362.36, "end": 8364.36, "text": " with it's a bigger MLP.", "tokens": [50465, 365, 309, 311, 257, 3801, 21601, 47, 13, 50565], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3107, "seek": 836036, "start": 8364.36, "end": 8366.36, "text": " The loss is a bit more complicated", "tokens": [50565, 440, 4470, 307, 257, 857, 544, 6179, 50665], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3108, "seek": 836036, "start": 8366.36, "end": 8368.36, "text": " because it supports batches", "tokens": [50665, 570, 309, 9346, 15245, 279, 50765], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3109, "seek": 836036, "start": 8368.36, "end": 8370.36, "text": " so because our data set", "tokens": [50765, 370, 570, 527, 1412, 992, 50865], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3110, "seek": 836036, "start": 8370.36, "end": 8372.36, "text": " was so tiny we always did a forward pass", "tokens": [50865, 390, 370, 5870, 321, 1009, 630, 257, 2128, 1320, 50965], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3111, "seek": 836036, "start": 8372.36, "end": 8374.36, "text": " on the entire data set of four examples.", "tokens": [50965, 322, 264, 2302, 1412, 992, 295, 1451, 5110, 13, 51065], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3112, "seek": 836036, "start": 8374.36, "end": 8376.36, "text": " But when your data set is like a million", "tokens": [51065, 583, 562, 428, 1412, 992, 307, 411, 257, 2459, 51165], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3113, "seek": 836036, "start": 8376.36, "end": 8378.36, "text": " examples what we usually do in practice", "tokens": [51165, 5110, 437, 321, 2673, 360, 294, 3124, 51265], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3114, "seek": 836036, "start": 8378.36, "end": 8380.36, "text": " is we basically", "tokens": [51265, 307, 321, 1936, 51365], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3115, "seek": 836036, "start": 8380.36, "end": 8382.36, "text": " pick out some random subset, we call that a batch", "tokens": [51365, 1888, 484, 512, 4974, 25993, 11, 321, 818, 300, 257, 15245, 51465], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3116, "seek": 836036, "start": 8382.36, "end": 8384.36, "text": " and then we only process the batch", "tokens": [51465, 293, 550, 321, 787, 1399, 264, 15245, 51565], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3117, "seek": 836036, "start": 8384.36, "end": 8386.36, "text": " forward, backward and update.", "tokens": [51565, 2128, 11, 23897, 293, 5623, 13, 51665], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3118, "seek": 836036, "start": 8386.36, "end": 8388.36, "text": " So we don't have to forward the entire training set.", "tokens": [51665, 407, 321, 500, 380, 362, 281, 2128, 264, 2302, 3097, 992, 13, 51765], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3119, "seek": 836036, "start": 8388.36, "end": 8390.36, "text": " So this is", "tokens": [51765, 407, 341, 307, 51865], "temperature": 0.0, "avg_logprob": -0.09010701822050919, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.00017472826584707946}, {"id": 3120, "seek": 839036, "start": 8390.36, "end": 8392.36, "text": " something that supports batching", "tokens": [50365, 746, 300, 9346, 15245, 278, 50465], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3121, "seek": 839036, "start": 8392.36, "end": 8394.36, "text": " because there's a lot more examples here.", "tokens": [50465, 570, 456, 311, 257, 688, 544, 5110, 510, 13, 50565], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3122, "seek": 839036, "start": 8394.36, "end": 8396.36, "text": " We do a forward pass.", "tokens": [50565, 492, 360, 257, 2128, 1320, 13, 50665], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3123, "seek": 839036, "start": 8396.36, "end": 8398.36, "text": " The loss is slightly more different.", "tokens": [50665, 440, 4470, 307, 4748, 544, 819, 13, 50765], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3124, "seek": 839036, "start": 8398.36, "end": 8400.36, "text": " This is a max margin loss that I implement here.", "tokens": [50765, 639, 307, 257, 11469, 10270, 4470, 300, 286, 4445, 510, 13, 50865], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3125, "seek": 839036, "start": 8400.36, "end": 8402.36, "text": " The one that we used was", "tokens": [50865, 440, 472, 300, 321, 1143, 390, 50965], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3126, "seek": 839036, "start": 8402.36, "end": 8404.36, "text": " the mean squared error loss", "tokens": [50965, 264, 914, 8889, 6713, 4470, 51065], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3127, "seek": 839036, "start": 8404.36, "end": 8406.36, "text": " because it's the simplest one.", "tokens": [51065, 570, 309, 311, 264, 22811, 472, 13, 51165], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3128, "seek": 839036, "start": 8406.36, "end": 8408.36, "text": " There's also the binary cross entropy loss.", "tokens": [51165, 821, 311, 611, 264, 17434, 3278, 30867, 4470, 13, 51265], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3129, "seek": 839036, "start": 8408.36, "end": 8410.36, "text": " All of them can be used for binary classification", "tokens": [51265, 1057, 295, 552, 393, 312, 1143, 337, 17434, 21538, 51365], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3130, "seek": 839036, "start": 8410.36, "end": 8412.36, "text": " and don't make too much of a difference", "tokens": [51365, 293, 500, 380, 652, 886, 709, 295, 257, 2649, 51465], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3131, "seek": 839036, "start": 8412.36, "end": 8414.36, "text": " in the simple examples that we looked at so far.", "tokens": [51465, 294, 264, 2199, 5110, 300, 321, 2956, 412, 370, 1400, 13, 51565], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3132, "seek": 839036, "start": 8414.36, "end": 8416.36, "text": " There's something called L2 regularization", "tokens": [51565, 821, 311, 746, 1219, 441, 17, 3890, 2144, 51665], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3133, "seek": 839036, "start": 8416.36, "end": 8418.36, "text": " used here.", "tokens": [51665, 1143, 510, 13, 51765], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3134, "seek": 839036, "start": 8418.36, "end": 8420.36, "text": " This has to do with generalization of the neural net", "tokens": [51765, 639, 575, 281, 360, 365, 2674, 2144, 295, 264, 18161, 2533, 51865], "temperature": 0.0, "avg_logprob": -0.0804954905088256, "compression_ratio": 1.834983498349835, "no_speech_prob": 0.00037894429988227785}, {"id": 3135, "seek": 842036, "start": 8420.36, "end": 8422.36, "text": " that controls the overfitting in machine learning setting", "tokens": [50365, 300, 9003, 264, 670, 69, 2414, 294, 3479, 2539, 3287, 50465], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3136, "seek": 842036, "start": 8422.36, "end": 8424.36, "text": " but I did not cover these concepts", "tokens": [50465, 457, 286, 630, 406, 2060, 613, 10392, 50565], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3137, "seek": 842036, "start": 8424.36, "end": 8426.36, "text": " in this video, potentially later.", "tokens": [50565, 294, 341, 960, 11, 7263, 1780, 13, 50665], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3138, "seek": 842036, "start": 8426.36, "end": 8428.36, "text": " And the training loop you should recognize.", "tokens": [50665, 400, 264, 3097, 6367, 291, 820, 5521, 13, 50765], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3139, "seek": 842036, "start": 8428.36, "end": 8430.36, "text": " So forward, backward,", "tokens": [50765, 407, 2128, 11, 23897, 11, 50865], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3140, "seek": 842036, "start": 8430.36, "end": 8432.36, "text": " with, zero grad", "tokens": [50865, 365, 11, 4018, 2771, 50965], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3141, "seek": 842036, "start": 8432.36, "end": 8434.36, "text": " and update and so on.", "tokens": [50965, 293, 5623, 293, 370, 322, 13, 51065], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3142, "seek": 842036, "start": 8434.36, "end": 8436.36, "text": " You'll notice that in the update here", "tokens": [51065, 509, 603, 3449, 300, 294, 264, 5623, 510, 51165], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3143, "seek": 842036, "start": 8436.36, "end": 8438.36, "text": " the learning rate is scaled as a function of", "tokens": [51165, 264, 2539, 3314, 307, 36039, 382, 257, 2445, 295, 51265], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3144, "seek": 842036, "start": 8438.36, "end": 8440.36, "text": " number of iterations and it", "tokens": [51265, 1230, 295, 36540, 293, 309, 51365], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3145, "seek": 842036, "start": 8440.36, "end": 8442.36, "text": " shrinks.", "tokens": [51365, 9884, 16431, 13, 51465], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3146, "seek": 842036, "start": 8442.36, "end": 8444.36, "text": " And this is something called learning rate decay.", "tokens": [51465, 400, 341, 307, 746, 1219, 2539, 3314, 21039, 13, 51565], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3147, "seek": 842036, "start": 8444.36, "end": 8446.36, "text": " So in the beginning you have a high learning rate", "tokens": [51565, 407, 294, 264, 2863, 291, 362, 257, 1090, 2539, 3314, 51665], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3148, "seek": 842036, "start": 8446.36, "end": 8448.36, "text": " and as the network sort of stabilizes near the end", "tokens": [51665, 293, 382, 264, 3209, 1333, 295, 11652, 5660, 2651, 264, 917, 51765], "temperature": 0.0, "avg_logprob": -0.09633071494824959, "compression_ratio": 1.745644599303136, "no_speech_prob": 0.00010067298717331141}, {"id": 3149, "seek": 844836, "start": 8448.36, "end": 8450.36, "text": " you bring down the learning rate", "tokens": [50365, 291, 1565, 760, 264, 2539, 3314, 50465], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3150, "seek": 844836, "start": 8450.36, "end": 8452.36, "text": " to get to some of the fine details in the end.", "tokens": [50465, 281, 483, 281, 512, 295, 264, 2489, 4365, 294, 264, 917, 13, 50565], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3151, "seek": 844836, "start": 8452.36, "end": 8454.36, "text": " And in the end we see", "tokens": [50565, 400, 294, 264, 917, 321, 536, 50665], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3152, "seek": 844836, "start": 8454.36, "end": 8456.36, "text": " the decision surface of the neural net", "tokens": [50665, 264, 3537, 3753, 295, 264, 18161, 2533, 50765], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3153, "seek": 844836, "start": 8456.36, "end": 8458.36, "text": " and we see that it learned to separate out the red", "tokens": [50765, 293, 321, 536, 300, 309, 3264, 281, 4994, 484, 264, 2182, 50865], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3154, "seek": 844836, "start": 8458.36, "end": 8460.36, "text": " and the blue area based on", "tokens": [50865, 293, 264, 3344, 1859, 2361, 322, 50965], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3155, "seek": 844836, "start": 8460.36, "end": 8462.36, "text": " the data points.", "tokens": [50965, 264, 1412, 2793, 13, 51065], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3156, "seek": 844836, "start": 8462.36, "end": 8464.36, "text": " So that's the slightly more complicated example", "tokens": [51065, 407, 300, 311, 264, 4748, 544, 6179, 1365, 51165], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3157, "seek": 844836, "start": 8464.36, "end": 8466.36, "text": " in the demo.hypiYMB", "tokens": [51165, 294, 264, 10723, 13, 3495, 22630, 56, 47554, 51265], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3158, "seek": 844836, "start": 8466.36, "end": 8468.36, "text": " that you're free to go over.", "tokens": [51265, 300, 291, 434, 1737, 281, 352, 670, 13, 51365], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3159, "seek": 844836, "start": 8468.36, "end": 8470.36, "text": " But yeah, as of today, that is MicroGrad.", "tokens": [51365, 583, 1338, 11, 382, 295, 965, 11, 300, 307, 25642, 38, 6206, 13, 51465], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3160, "seek": 844836, "start": 8470.36, "end": 8472.36, "text": " I also wanted to show you a little bit of real stuff", "tokens": [51465, 286, 611, 1415, 281, 855, 291, 257, 707, 857, 295, 957, 1507, 51565], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3161, "seek": 844836, "start": 8472.36, "end": 8474.36, "text": " so that you get to see how this is actually implemented", "tokens": [51565, 370, 300, 291, 483, 281, 536, 577, 341, 307, 767, 12270, 51665], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3162, "seek": 844836, "start": 8474.36, "end": 8476.36, "text": " in a production grade library like PyTorch.", "tokens": [51665, 294, 257, 4265, 7204, 6405, 411, 9953, 51, 284, 339, 13, 51765], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3163, "seek": 844836, "start": 8476.36, "end": 8478.36, "text": " So in particular I wanted to show", "tokens": [51765, 407, 294, 1729, 286, 1415, 281, 855, 51865], "temperature": 0.0, "avg_logprob": -0.08994324014794013, "compression_ratio": 1.753125, "no_speech_prob": 0.0002193525288021192}, {"id": 3164, "seek": 847836, "start": 8478.36, "end": 8480.36, "text": " I wanted to find and show you", "tokens": [50365, 286, 1415, 281, 915, 293, 855, 291, 50465], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3165, "seek": 847836, "start": 8480.36, "end": 8482.36, "text": " the backward pass for 10h in PyTorch.", "tokens": [50465, 264, 23897, 1320, 337, 1266, 71, 294, 9953, 51, 284, 339, 13, 50565], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3166, "seek": 847836, "start": 8482.36, "end": 8484.36, "text": " So here in MicroGrad", "tokens": [50565, 407, 510, 294, 25642, 38, 6206, 50665], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3167, "seek": 847836, "start": 8484.36, "end": 8486.36, "text": " we see that the backward pass for 10h", "tokens": [50665, 321, 536, 300, 264, 23897, 1320, 337, 1266, 71, 50765], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3168, "seek": 847836, "start": 8486.36, "end": 8488.36, "text": " is 1 minus t squared", "tokens": [50765, 307, 502, 3175, 256, 8889, 50865], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3169, "seek": 847836, "start": 8488.36, "end": 8490.36, "text": " where t is the output of the 10h", "tokens": [50865, 689, 256, 307, 264, 5598, 295, 264, 1266, 71, 50965], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3170, "seek": 847836, "start": 8490.36, "end": 8492.36, "text": " of x", "tokens": [50965, 295, 2031, 51065], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3171, "seek": 847836, "start": 8492.36, "end": 8494.36, "text": " times of that grad", "tokens": [51065, 1413, 295, 300, 2771, 51165], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3172, "seek": 847836, "start": 8494.36, "end": 8496.36, "text": " which is the chain rule.", "tokens": [51165, 597, 307, 264, 5021, 4978, 13, 51265], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3173, "seek": 847836, "start": 8496.36, "end": 8498.36, "text": " So we're looking for something that looks like this.", "tokens": [51265, 407, 321, 434, 1237, 337, 746, 300, 1542, 411, 341, 13, 51365], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3174, "seek": 847836, "start": 8498.36, "end": 8500.36, "text": " Now, I went to PyTorch", "tokens": [51365, 823, 11, 286, 1437, 281, 9953, 51, 284, 339, 51465], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3175, "seek": 847836, "start": 8500.36, "end": 8502.36, "text": " which has", "tokens": [51465, 597, 575, 51565], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3176, "seek": 847836, "start": 8502.36, "end": 8504.36, "text": " an open source GitHub codebase", "tokens": [51565, 364, 1269, 4009, 23331, 3089, 17429, 51665], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3177, "seek": 847836, "start": 8504.36, "end": 8506.36, "text": " and I looked through a lot of its code", "tokens": [51665, 293, 286, 2956, 807, 257, 688, 295, 1080, 3089, 51765], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3178, "seek": 847836, "start": 8506.36, "end": 8508.36, "text": " and honestly", "tokens": [51765, 293, 6095, 51865], "temperature": 0.0, "avg_logprob": -0.06766299467820387, "compression_ratio": 1.6722689075630253, "no_speech_prob": 0.00014246630598790944}, {"id": 3179, "seek": 850836, "start": 8508.36, "end": 8510.36, "text": " I spent about 15 minutes", "tokens": [50365, 286, 4418, 466, 2119, 2077, 50465], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3180, "seek": 850836, "start": 8510.36, "end": 8512.36, "text": " and I couldn't find 10h.", "tokens": [50465, 293, 286, 2809, 380, 915, 1266, 71, 13, 50565], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3181, "seek": 850836, "start": 8512.36, "end": 8514.36, "text": " And that's because these libraries, unfortunately", "tokens": [50565, 400, 300, 311, 570, 613, 15148, 11, 7015, 50665], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3182, "seek": 850836, "start": 8514.36, "end": 8516.36, "text": " they grow in size and entropy.", "tokens": [50665, 436, 1852, 294, 2744, 293, 30867, 13, 50765], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3183, "seek": 850836, "start": 8516.36, "end": 8518.36, "text": " And if you just search for 10h", "tokens": [50765, 400, 498, 291, 445, 3164, 337, 1266, 71, 50865], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3184, "seek": 850836, "start": 8518.36, "end": 8520.36, "text": " you get apparently 2,800 results", "tokens": [50865, 291, 483, 7970, 568, 11, 14423, 3542, 50965], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3185, "seek": 850836, "start": 8520.36, "end": 8522.36, "text": " and 406 files.", "tokens": [50965, 293, 3356, 21, 7098, 13, 51065], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3186, "seek": 850836, "start": 8522.36, "end": 8524.36, "text": " So I don't know what these files", "tokens": [51065, 407, 286, 500, 380, 458, 437, 613, 7098, 51165], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3187, "seek": 850836, "start": 8524.36, "end": 8526.36, "text": " are doing, honestly.", "tokens": [51165, 366, 884, 11, 6095, 13, 51265], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3188, "seek": 850836, "start": 8526.36, "end": 8528.36, "text": " And why there are", "tokens": [51265, 400, 983, 456, 366, 51365], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3189, "seek": 850836, "start": 8528.36, "end": 8530.36, "text": " so many mentions of 10h.", "tokens": [51365, 370, 867, 23844, 295, 1266, 71, 13, 51465], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3190, "seek": 850836, "start": 8530.36, "end": 8532.36, "text": " But unfortunately these libraries are quite complex", "tokens": [51465, 583, 7015, 613, 15148, 366, 1596, 3997, 51565], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3191, "seek": 850836, "start": 8532.36, "end": 8534.36, "text": " they're meant to be used, not really inspected.", "tokens": [51565, 436, 434, 4140, 281, 312, 1143, 11, 406, 534, 1028, 10729, 13, 51665], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3192, "seek": 850836, "start": 8534.36, "end": 8536.36, "text": " Eventually I did", "tokens": [51665, 17586, 286, 630, 51765], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3193, "seek": 850836, "start": 8536.36, "end": 8538.36, "text": " stumble on someone", "tokens": [51765, 41302, 322, 1580, 51865], "temperature": 0.0, "avg_logprob": -0.07565024495124817, "compression_ratio": 1.5785714285714285, "no_speech_prob": 0.00022321466531138867}, {"id": 3194, "seek": 853836, "start": 8538.36, "end": 8540.36, "text": " who tries to change", "tokens": [50365, 567, 9898, 281, 1319, 50465], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3195, "seek": 853836, "start": 8540.36, "end": 8542.36, "text": " the 10h backward code for some reason", "tokens": [50465, 264, 1266, 71, 23897, 3089, 337, 512, 1778, 50565], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3196, "seek": 853836, "start": 8542.36, "end": 8544.36, "text": " and someone here pointed to the", "tokens": [50565, 293, 1580, 510, 10932, 281, 264, 50665], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3197, "seek": 853836, "start": 8544.36, "end": 8546.36, "text": " CPU kernel and the CUDA kernel for", "tokens": [50665, 13199, 28256, 293, 264, 29777, 7509, 28256, 337, 50765], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3198, "seek": 853836, "start": 8546.36, "end": 8548.36, "text": " 10h backward.", "tokens": [50765, 1266, 71, 23897, 13, 50865], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3199, "seek": 853836, "start": 8548.36, "end": 8550.36, "text": " So basically it depends on if you're using", "tokens": [50865, 407, 1936, 309, 5946, 322, 498, 291, 434, 1228, 50965], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3200, "seek": 853836, "start": 8550.36, "end": 8552.36, "text": " PyTorch on a CPU device or on a GPU", "tokens": [50965, 9953, 51, 284, 339, 322, 257, 13199, 4302, 420, 322, 257, 18407, 51065], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3201, "seek": 853836, "start": 8552.36, "end": 8554.36, "text": " which these are different devices", "tokens": [51065, 597, 613, 366, 819, 5759, 51165], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3202, "seek": 853836, "start": 8554.36, "end": 8556.36, "text": " and I haven't covered this.", "tokens": [51165, 293, 286, 2378, 380, 5343, 341, 13, 51265], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3203, "seek": 853836, "start": 8556.36, "end": 8558.36, "text": " But this is the 10h backward kernel", "tokens": [51265, 583, 341, 307, 264, 1266, 71, 23897, 28256, 51365], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3204, "seek": 853836, "start": 8558.36, "end": 8560.36, "text": " for CPU", "tokens": [51365, 337, 13199, 51465], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3205, "seek": 853836, "start": 8560.36, "end": 8562.36, "text": " and the reason it's so large", "tokens": [51465, 293, 264, 1778, 309, 311, 370, 2416, 51565], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3206, "seek": 853836, "start": 8562.36, "end": 8564.36, "text": " is that", "tokens": [51565, 307, 300, 51665], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3207, "seek": 853836, "start": 8564.36, "end": 8566.36, "text": " number one, this is like if you're using a complex type", "tokens": [51665, 1230, 472, 11, 341, 307, 411, 498, 291, 434, 1228, 257, 3997, 2010, 51765], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3208, "seek": 853836, "start": 8566.36, "end": 8568.36, "text": " which we haven't even talked about", "tokens": [51765, 597, 321, 2378, 380, 754, 2825, 466, 51865], "temperature": 0.0, "avg_logprob": -0.07265707603970864, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0003722597612068057}, {"id": 3209, "seek": 856836, "start": 8568.36, "end": 8570.36, "text": " you're using a specific data type of bfloat16", "tokens": [50365, 291, 434, 1228, 257, 2685, 1412, 2010, 295, 272, 43645, 267, 6866, 50465], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3210, "seek": 856836, "start": 8570.36, "end": 8572.36, "text": " which we haven't talked about", "tokens": [50465, 597, 321, 2378, 380, 2825, 466, 50565], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3211, "seek": 856836, "start": 8572.36, "end": 8574.36, "text": " and then if you're not", "tokens": [50565, 293, 550, 498, 291, 434, 406, 50665], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3212, "seek": 856836, "start": 8574.36, "end": 8576.36, "text": " then this is the kernel", "tokens": [50665, 550, 341, 307, 264, 28256, 50765], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3213, "seek": 856836, "start": 8576.36, "end": 8578.36, "text": " and deep here we see something that resembles", "tokens": [50765, 293, 2452, 510, 321, 536, 746, 300, 34433, 50865], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3214, "seek": 856836, "start": 8578.36, "end": 8580.36, "text": " our backward pass.", "tokens": [50865, 527, 23897, 1320, 13, 50965], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3215, "seek": 856836, "start": 8580.36, "end": 8582.36, "text": " So they have a times one minus", "tokens": [50965, 407, 436, 362, 257, 1413, 472, 3175, 51065], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3216, "seek": 856836, "start": 8582.36, "end": 8584.36, "text": " b square", "tokens": [51065, 272, 3732, 51165], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3217, "seek": 856836, "start": 8584.36, "end": 8586.36, "text": " so this b here", "tokens": [51165, 370, 341, 272, 510, 51265], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3218, "seek": 856836, "start": 8586.36, "end": 8588.36, "text": " must be the output of the 10h", "tokens": [51265, 1633, 312, 264, 5598, 295, 264, 1266, 71, 51365], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3219, "seek": 856836, "start": 8588.36, "end": 8590.36, "text": " and this is the out.grad", "tokens": [51365, 293, 341, 307, 264, 484, 13, 7165, 51465], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3220, "seek": 856836, "start": 8590.36, "end": 8592.36, "text": " so here we found it", "tokens": [51465, 370, 510, 321, 1352, 309, 51565], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3221, "seek": 856836, "start": 8592.36, "end": 8594.36, "text": " deep inside", "tokens": [51565, 2452, 1854, 51665], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3222, "seek": 856836, "start": 8594.36, "end": 8596.36, "text": " PyTorch on this location", "tokens": [51665, 9953, 51, 284, 339, 322, 341, 4914, 51765], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3223, "seek": 856836, "start": 8596.36, "end": 8598.36, "text": " for some reason inside binary ops kernel", "tokens": [51765, 337, 512, 1778, 1854, 17434, 44663, 28256, 51865], "temperature": 0.0, "avg_logprob": -0.10386055560151408, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00027255871100351214}, {"id": 3224, "seek": 859836, "start": 8598.36, "end": 8600.36, "text": " 10h is not actually binary op", "tokens": [50365, 1266, 71, 307, 406, 767, 17434, 999, 50465], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3225, "seek": 859836, "start": 8600.36, "end": 8602.36, "text": " and then this is the", "tokens": [50465, 293, 550, 341, 307, 264, 50565], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3226, "seek": 859836, "start": 8602.36, "end": 8604.36, "text": " GPU kernel", "tokens": [50565, 18407, 28256, 50665], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3227, "seek": 859836, "start": 8604.36, "end": 8606.36, "text": " we're not complex", "tokens": [50665, 321, 434, 406, 3997, 50765], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3228, "seek": 859836, "start": 8606.36, "end": 8608.36, "text": " we're here", "tokens": [50765, 321, 434, 510, 50865], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3229, "seek": 859836, "start": 8608.36, "end": 8610.36, "text": " and here we go with one line of code", "tokens": [50865, 293, 510, 321, 352, 365, 472, 1622, 295, 3089, 50965], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3230, "seek": 859836, "start": 8610.36, "end": 8612.36, "text": " so we did find it", "tokens": [50965, 370, 321, 630, 915, 309, 51065], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3231, "seek": 859836, "start": 8612.36, "end": 8614.36, "text": " but basically unfortunately", "tokens": [51065, 457, 1936, 7015, 51165], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3232, "seek": 859836, "start": 8614.36, "end": 8616.36, "text": " these code bases are very large", "tokens": [51165, 613, 3089, 17949, 366, 588, 2416, 51265], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3233, "seek": 859836, "start": 8616.36, "end": 8618.36, "text": " and micrograd is very very simple", "tokens": [51265, 293, 4532, 7165, 307, 588, 588, 2199, 51365], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3234, "seek": 859836, "start": 8618.36, "end": 8620.36, "text": " but if you actually want to use real stuff", "tokens": [51365, 457, 498, 291, 767, 528, 281, 764, 957, 1507, 51465], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3235, "seek": 859836, "start": 8620.36, "end": 8622.36, "text": " finding the code for it", "tokens": [51465, 5006, 264, 3089, 337, 309, 51565], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3236, "seek": 859836, "start": 8622.36, "end": 8624.36, "text": " you'll actually find that difficult", "tokens": [51565, 291, 603, 767, 915, 300, 2252, 51665], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3237, "seek": 859836, "start": 8624.36, "end": 8626.36, "text": " I also wanted to show you", "tokens": [51665, 286, 611, 1415, 281, 855, 291, 51765], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3238, "seek": 859836, "start": 8626.36, "end": 8628.36, "text": " a little example here where PyTorch is showing you", "tokens": [51765, 257, 707, 1365, 510, 689, 9953, 51, 284, 339, 307, 4099, 291, 51865], "temperature": 0.0, "avg_logprob": -0.0743994156519572, "compression_ratio": 1.7102040816326531, "no_speech_prob": 0.0005029664025641978}, {"id": 3239, "seek": 862836, "start": 8628.36, "end": 8630.36, "text": " you can register a new type of function", "tokens": [50365, 291, 393, 7280, 257, 777, 2010, 295, 2445, 50465], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3240, "seek": 862836, "start": 8630.36, "end": 8632.36, "text": " that you want to add to PyTorch", "tokens": [50465, 300, 291, 528, 281, 909, 281, 9953, 51, 284, 339, 50565], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3241, "seek": 862836, "start": 8632.36, "end": 8634.36, "text": " as a lego building block", "tokens": [50565, 382, 257, 476, 1571, 2390, 3461, 50665], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3242, "seek": 862836, "start": 8634.36, "end": 8636.36, "text": " so here if you want to for example add", "tokens": [50665, 370, 510, 498, 291, 528, 281, 337, 1365, 909, 50765], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3243, "seek": 862836, "start": 8636.36, "end": 8638.36, "text": " a gender polynomial 3", "tokens": [50765, 257, 7898, 26110, 805, 50865], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3244, "seek": 862836, "start": 8638.36, "end": 8640.36, "text": " here's how you could do it", "tokens": [50865, 510, 311, 577, 291, 727, 360, 309, 50965], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3245, "seek": 862836, "start": 8640.36, "end": 8642.36, "text": " you will register it", "tokens": [50965, 291, 486, 7280, 309, 51065], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3246, "seek": 862836, "start": 8642.36, "end": 8644.36, "text": " as a class that", "tokens": [51065, 382, 257, 1508, 300, 51165], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3247, "seek": 862836, "start": 8644.36, "end": 8646.36, "text": " subclass says torch.rgrad.function", "tokens": [51165, 1422, 11665, 1619, 27822, 13, 81, 7165, 13, 22845, 51265], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3248, "seek": 862836, "start": 8646.36, "end": 8648.36, "text": " and then you have to tell PyTorch how to forward", "tokens": [51265, 293, 550, 291, 362, 281, 980, 9953, 51, 284, 339, 577, 281, 2128, 51365], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3249, "seek": 862836, "start": 8648.36, "end": 8650.36, "text": " your new function", "tokens": [51365, 428, 777, 2445, 51465], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3250, "seek": 862836, "start": 8650.36, "end": 8652.36, "text": " and how to backward through it", "tokens": [51465, 293, 577, 281, 23897, 807, 309, 51565], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3251, "seek": 862836, "start": 8652.36, "end": 8654.36, "text": " so as long as you can do the forward pass", "tokens": [51565, 370, 382, 938, 382, 291, 393, 360, 264, 2128, 1320, 51665], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3252, "seek": 862836, "start": 8654.36, "end": 8656.36, "text": " of this little function piece that you want to add", "tokens": [51665, 295, 341, 707, 2445, 2522, 300, 291, 528, 281, 909, 51765], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3253, "seek": 862836, "start": 8656.36, "end": 8658.36, "text": " and as long as you know the local", "tokens": [51765, 293, 382, 938, 382, 291, 458, 264, 2654, 51865], "temperature": 0.0, "avg_logprob": -0.09794298360045527, "compression_ratio": 1.8862745098039215, "no_speech_prob": 0.0002313222357770428}, {"id": 3254, "seek": 865836, "start": 8658.36, "end": 8660.36, "text": " derivative, the local gradients", "tokens": [50365, 13760, 11, 264, 2654, 2771, 2448, 50465], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3255, "seek": 865836, "start": 8660.36, "end": 8662.36, "text": " which are implemented in the backward", "tokens": [50465, 597, 366, 12270, 294, 264, 23897, 50565], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3256, "seek": 865836, "start": 8662.36, "end": 8664.36, "text": " PyTorch will be able to back propagate through your function", "tokens": [50565, 9953, 51, 284, 339, 486, 312, 1075, 281, 646, 48256, 807, 428, 2445, 50665], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3257, "seek": 865836, "start": 8664.36, "end": 8666.36, "text": " and then you can use this as a lego block", "tokens": [50665, 293, 550, 291, 393, 764, 341, 382, 257, 476, 1571, 3461, 50765], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3258, "seek": 865836, "start": 8666.36, "end": 8668.36, "text": " in a larger lego castle", "tokens": [50765, 294, 257, 4833, 476, 1571, 14114, 50865], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3259, "seek": 865836, "start": 8668.36, "end": 8670.36, "text": " of all the different lego blocks that PyTorch already has", "tokens": [50865, 295, 439, 264, 819, 476, 1571, 8474, 300, 9953, 51, 284, 339, 1217, 575, 50965], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3260, "seek": 865836, "start": 8670.36, "end": 8672.36, "text": " and so that's the only thing", "tokens": [50965, 293, 370, 300, 311, 264, 787, 551, 51065], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3261, "seek": 865836, "start": 8672.36, "end": 8674.36, "text": " you have to tell PyTorch and everything will just work", "tokens": [51065, 291, 362, 281, 980, 9953, 51, 284, 339, 293, 1203, 486, 445, 589, 51165], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3262, "seek": 865836, "start": 8674.36, "end": 8676.36, "text": " and you can register new types of functions", "tokens": [51165, 293, 291, 393, 7280, 777, 3467, 295, 6828, 51265], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3263, "seek": 865836, "start": 8676.36, "end": 8678.36, "text": " in this way following this example", "tokens": [51265, 294, 341, 636, 3480, 341, 1365, 51365], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3264, "seek": 865836, "start": 8678.36, "end": 8680.36, "text": " and that is everything that I wanted to cover", "tokens": [51365, 293, 300, 307, 1203, 300, 286, 1415, 281, 2060, 51465], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3265, "seek": 865836, "start": 8680.36, "end": 8682.36, "text": " in this lecture", "tokens": [51465, 294, 341, 7991, 51565], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3266, "seek": 865836, "start": 8682.36, "end": 8684.36, "text": " so I hope you enjoyed building out micrograd with me", "tokens": [51565, 370, 286, 1454, 291, 4626, 2390, 484, 4532, 7165, 365, 385, 51665], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3267, "seek": 865836, "start": 8684.36, "end": 8686.36, "text": " I hope you find it interesting, insightful", "tokens": [51665, 286, 1454, 291, 915, 309, 1880, 11, 46401, 51765], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3268, "seek": 865836, "start": 8686.36, "end": 8688.36, "text": " and yeah", "tokens": [51765, 293, 1338, 51865], "temperature": 0.0, "avg_logprob": -0.06561588931393314, "compression_ratio": 1.825, "no_speech_prob": 0.00045129709178581834}, {"id": 3269, "seek": 868836, "start": 8688.36, "end": 8690.36, "text": " I will post a lot of the links", "tokens": [50365, 286, 486, 2183, 257, 688, 295, 264, 6123, 50465], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3270, "seek": 868836, "start": 8690.36, "end": 8692.36, "text": " that are related to this video", "tokens": [50465, 300, 366, 4077, 281, 341, 960, 50565], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3271, "seek": 868836, "start": 8692.36, "end": 8694.36, "text": " in the video description below", "tokens": [50565, 294, 264, 960, 3855, 2507, 50665], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3272, "seek": 868836, "start": 8694.36, "end": 8696.36, "text": " I will also probably post a link to a discussion forum", "tokens": [50665, 286, 486, 611, 1391, 2183, 257, 2113, 281, 257, 5017, 17542, 50765], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3273, "seek": 868836, "start": 8696.36, "end": 8698.36, "text": " or discussion group where you can ask", "tokens": [50765, 420, 5017, 1594, 689, 291, 393, 1029, 50865], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3274, "seek": 868836, "start": 8698.36, "end": 8700.36, "text": " questions related to this video", "tokens": [50865, 1651, 4077, 281, 341, 960, 50965], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3275, "seek": 868836, "start": 8700.36, "end": 8702.36, "text": " and then I can answer or someone else can answer", "tokens": [50965, 293, 550, 286, 393, 1867, 420, 1580, 1646, 393, 1867, 51065], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3276, "seek": 868836, "start": 8702.36, "end": 8704.36, "text": " your questions", "tokens": [51065, 428, 1651, 51165], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3277, "seek": 868836, "start": 8704.36, "end": 8706.36, "text": " and I may also do a follow up video", "tokens": [51165, 293, 286, 815, 611, 360, 257, 1524, 493, 960, 51265], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3278, "seek": 868836, "start": 8706.36, "end": 8708.36, "text": " that answers some of the most common questions", "tokens": [51265, 300, 6338, 512, 295, 264, 881, 2689, 1651, 51365], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3279, "seek": 868836, "start": 8708.36, "end": 8710.36, "text": " but for now that's it", "tokens": [51365, 457, 337, 586, 300, 311, 309, 51465], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3280, "seek": 868836, "start": 8710.36, "end": 8712.36, "text": " I hope you enjoyed it", "tokens": [51465, 286, 1454, 291, 4626, 309, 51565], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3281, "seek": 868836, "start": 8712.36, "end": 8714.36, "text": " if you did then please like and subscribe", "tokens": [51565, 498, 291, 630, 550, 1767, 411, 293, 3022, 51665], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3282, "seek": 868836, "start": 8714.36, "end": 8716.36, "text": " so that YouTube knows to feature this video to more people", "tokens": [51665, 370, 300, 3088, 3255, 281, 4111, 341, 960, 281, 544, 561, 51765], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3283, "seek": 868836, "start": 8716.36, "end": 8718.36, "text": " and that's it for now, I'll see you later", "tokens": [51765, 293, 300, 311, 309, 337, 586, 11, 286, 603, 536, 291, 1780, 51865], "temperature": 0.0, "avg_logprob": -0.06054817305670844, "compression_ratio": 1.9469964664310955, "no_speech_prob": 0.0015640065539628267}, {"id": 3284, "seek": 871836, "start": 8718.36, "end": 8720.36, "text": " bye", "tokens": [50365, 6543, 50465], "temperature": 0.0, "avg_logprob": -0.4047190248966217, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.02858535386621952}, {"id": 3285, "seek": 874836, "start": 8748.36, "end": 8750.36, "text": " I know what happened there", "tokens": [50365, 286, 458, 437, 2011, 456, 50465], "temperature": 0.0, "avg_logprob": -0.19994410872459412, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.015487274155020714}], "language": "en"}