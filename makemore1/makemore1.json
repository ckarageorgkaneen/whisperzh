{"text": " hi everyone hope you're well and next up what i'd like to do is i'd like to build out make more like micrograd before it make more is a repository that i have on my github webpage you can look at it but just like with micrograd i'm going to build it out step by step and i'm going to spell everything out so we're going to build it out slowly and together now what is make more make more as the name suggests makes more of things that you give it so here's an example names.txt is an example data set to make more and when you look at names.txt you'll find that it's a very large data set of names so here's lots of different types of names in fact i believe there are 32 000 names that i've sort of found randomly on the government website and if you train make more on this data set it will learn to make more of things like this and in particular in this case that will mean more things that sound name-like but are actually unique names and maybe if you have a baby and you're trying to assign a name maybe you're looking for a cool new sounding unique name make more might help you so here are some example generations from the neural network once we train it on our data set so here's some example unique names that it will generate don't tell i wrote zendy and so on and so all these sort of sound name-like but they're not of course names so under the hood make more is a character level language model so what that means is that it is treating every single line here as an example and within each example it's treating them all as sequences of individual characters so r e e s e is this example and that's the sequence of characters and that's the level on which we are building out make more and what it means to be a character level language model then is that it's just sort of modeling those sequences of characters and it knows how to predict the next character in the sequence now we're actually going to implement a large number of character level language models in terms of the neural networks that are involved in predicting the next character in a sequence so very simple bigram and bag of root models multilevel perceptrons recurring neural networks all the way to modern transformers in fact the transformer that we will build will be basically the equivalent transformer to gpt2 if you have heard of gpt so that's kind of a big deal it's a modern network and by the end of this series you will actually understand how that works on the level of characters now to give you a sense of the extensions here after characters we will probably spend some time on the word level so that we can generate documents of words not just little you know segments of characters but we can generate entire large much larger documents go into images and image text networks such as DALI stable diffusion and so on but for now we have to start here character level language modeling let's go so like before we are starting with a completely blank Jupyter notebook page the first thing is i would like to basically load up the data set names.txt so we're going to open up names.txt for reading and we're going to read in everything into a massive string and then because it's a massive string we only like the individual words and put them in the list so let's call split lines on that string to get all of our words as a python list of strings so basically we can look at for example the first 10 words and we have that it's a list of emma olivia ava and so on and if we look at the top of the page here that is indeed what we see um so that's good this list actually makes me feel that this is probably sorted by frequency but okay so these are the words now we'd like to actually like learn a little bit more about this data set let's look at the total number of words we expect this to be roughly 32 000 and then what is the for example shortest word so min of length of each word for w in words so the shortest word will be length two and max of one w for w in words so the longest word will be 15 characters so let's now think through our very first language model as i mentioned a character level language model is predicting the next character in a sequence given already some concrete sequence of characters before it now what we have to realize here is that every single word here like isabella is actually quite a few examples packed in to that single word because what is an instance of a word like isabella in the data set telling us really it's saying that the character i is a very likely character to come first in the sequence of a name the character s is likely to come after i the character a is likely to come after is the character b is very likely to come after isa and so on all the way to a following as a bell and then there's one more example actually packed in here and that is that after there's isabella the word is very likely to end so that's one more sort of explicit piece of information that we have here that we have to be careful with and so there's a lot packed into a single individual word in terms of the statistical structure of what's likely to follow in these character sequences and then of course we don't have just an individual word we actually have 32 000 of these and so there's a lot of structure here to model now in the beginning what i'd like to start with is I'd like to start with building a bigram language model. Now, in a bigram language model, we're always working with just two characters at a time. So we're only looking at one character that we are given, and we're trying to predict the next character in the sequence. So what characters are likely to follow R, what characters are likely to follow A, and so on. And we're just modeling that kind of a little local structure. And we're forgetting the fact that we may have a lot more information if we're always just looking at the previous character to predict the next one. So it's a very simple and weak language model, but I think it's a great place to start. So now let's begin by looking at these bigrams in our data set and what they look like. And these bigrams, again, are just two characters in a row. So for W in words, each W here is an individual word, a string. We want to iterate this word with consecutive characters. So two characters at a time, sliding it through the word. Now, an interesting, nice way, cute way to do this in Python, by the way, is doing something like this. For character1, character2, in, zip, off, W, and W at 1. One column. Print, character1, character2. And let's not do all the words. Let's just do the first three words. And I'm going to show you in a second how this works. But for now, basically, as an example, let's just do the very first word alone, MR. You see how we have a M up, and this will just print EM, MM, MA. And the reason this works is because W is the string M up, W at 1 column is the string MMA, and zip takes two iterators, and it pairs them up and then creates an iterator over the tuples of their consecutive entries. And if any one of these lists is shorter than the other, then it will just halt and return. So basically, that's why we return EM, MM, MM, MA. But then, because this iterator's second one here runs out of elements, zip just ends, and that's why we only get these tuples. So pretty cute. So these are the consecutive elements in the first word. Now, we have to be careful because we actually have more information here than just these three examples. As I mentioned, we know that E is very likely to come first, but that A, in this case, is coming last. So one way to do this is, basically, we're going to create a special array here, all characters, and we're going to hallucinate a special start token here. I'm going to call it like, special start. This is a list of one element plus W, and then plus a special end character. And the reason I'm wrapping the list of w here is because w is a string, Emma. List of w will just have the individual characters in the list. And then doing this again now, but not iterating over w's, but over the characters, will give us something like this. So e is likely, so this is a bigram of the start character and e, and this is a bigram of the a and the special end character. And now we can look at, for example, what this looks like for Olivia or Ava. And indeed, we can actually potentially do this for the entire dataset, but we won't print that. That's going to be too much. But these are the individual character bigrams, and we can print them. Now, in order to learn the statistics about which characters are likely to follow other characters, the simplest way in the bigram language models is to simply do it by counting. So we're basically just going to count how often any one of these combinations occurs in the training set in these words. So we're going to need some kind of a dictionary that's going to maintain some counts for every one of these bigrams. So let's use a dictionary b, and this will map these bigrams. So bigram is a tuple of character1, character2. And then b at bigram will be b.get of bigram, which is basically the same as b at bigram. But in the case that bigram is not in the dictionary b, we would like to, by default, return a 0, plus 1. So this will basically add up all the bigrams and count how often they occur. Let's get rid of printing. Or rather, let's keep the printing, and let's just inspect what b is in this case. And we see that many bigrams occur just a single time. This one allegedly occurred three times. So a was an ending character three times, and that's true for all of these words. All of Emma, Olivia, and Ava end with a. So that's why this occurred three times. Now let's do it for all the words. Oops, I should not have printed. I meant to erase that. Let's kill this. Let's just run. And now b will have the statistics of the entire dataset. So these are the counts across all the words of the individual bigrams. And we could, for example, look at some of the most common ones and least common ones. This kind of grows in Python, but the way to do this, the simplest way I like, is we just use b.items. b.items returns the tuples of key value. And in this case, the keys are the character bigrams, and the values are the counts. And so then what we want to do is we want to do sorted of this. But by default, sort is on the first item of a tuple. But we want to sort by the values, which are the second element of a tuple, that is the key value. So we want to use the key equals lambda that takes the key value and returns the key value at 1, not at 0, but at 1, which is the count. So we want to sort by the count. Well, these elements. And actually, we want it to go backwards. So here what we have is the bigram QNR occurs only a single time. DZ occurred only a single time. And when we sort this the other way around, we're going to see the most likely bigrams. So we see that N was very often an ending character, many, many times. And apparently, N almost always follows an A, and that's a very likely combination as well. So this is kind of the individual counts that we achieve over the entirely. Now it's actually going to be significantly more convenient for us to keep this information in one two-dimensional array So we're going to sort this information in two D array and the rose are going to be the first character of the Bank and the columns are going to be the second character, and each entry in this two-dimensional array will tell us. Um, us how often that first character follows the second character in the data set. So in particular the array representation that we're going to use or the library is that of PyTorch and PyTorch is a deep learning neural network framework but part of it is also this torch.tensor which allows us to create multi-dimensional arrays and manipulate them very efficiently. So let's import PyTorch which you can do by import torch and then we can create arrays. So let's create an array of zeros and we give it a size of this array. Let's create a 3x5 array as an example and this is a 3x5 array of zeros and by default you'll notice a.d type which is short for data type is float 32. So these are single precision floating point numbers. Because we are going to represent counts we're going to use a single precision floating point number. So we're going to use a single precision floating point number. Let's actually use d type as torch.in32. So these are 32-bit integers. So now you see that we have integer data inside this tensor. Now tensors allow us to really manipulate all the individual entries and do it very efficiently. So for example if we want to change this bit we have to index into the tensor and in particular here this is the first row and the because it's zero indexed. So this is row index one and column index zero one two three. So a at one comma three we can set that to one and then a will have a one over there. We can of course also do things like this. So now a will be two over there or three and also we can for example say a zero zero is five and then a will have a five over here. So that's how we can index into. the arrays. Now of course the array that we are interested in is much much bigger. So for our purposes we have 26 letters of the alphabet and then we have two special characters s and e. So we want 26 plus 2 or 28 by 28 array and let's call it the capital N because it's going to represent sort of the counts. Let me erase this stuff. So that's the array that starts at zeros 28 by 28 and now let's copy paste that into the array. So that's the array that starts at zeros 28 by 28 and now let's copy paste the this here. But instead of having a dictionary b which we're going to erase we now have an n. Now the problem here is that we have these characters which are strings but we have to now basically index into a array and we have to index using integers. So we need some kind of a lookup table from characters to integers. So let's construct such a character array and the way we're going to do this is we're going to take all the words which is a list of strings and we're going to concatenate all of it into a massive string. So this is just simply the entire data set as a single string. We're going to pass this to the set constructor which takes this massive string and throws out duplicates because sets do not allow duplicates. So set of this will just be the set of all the lowercase characters and there should be a total of 26 of them. And now we actually don't want a set we want a list. But we don't want a list sorted in some weird arbitrary way we want it to be sorted from a to z. So sorted list. So those are our characters. Now what we want is this lookup table as I mentioned. So let's create a special s to i I will call it. s is string or character and this will be an s to i mapping for is in enumerate of these characters. So enumerate basically gives us this iterator over the integer index and the actual element of the list and then we are mapping the character to the integer. So s to i is a mapping from a to 0 b to 1 etc all the way from z to 25. And that's going to be useful here but we actually also have to specifically set that s will be 26 and s to i at e. Will be 27 right because z was 25. So those are the lookups and now we can come here and we can map both character 1 and character 2 to their integers. So this will be s to i at character 1 and i x 2 will be s to i of character 2. And now we should be able to do this line but using our array. So n at i x 1 i x 2 this is the two-dimensional array indexing I've shown you before and honestly just plus equals 1. Because everything starts at 0. So this should work and give us a large 28 by 28 array of all these counts. So if we print n this is the array but of course it looks ugly. So let's erase this ugly mess and let's try to visualize it a bit more nicer. So for that we're going to use a library called matplotlib. So matplotlib allows us to create figures. So we can do things like this. We can do things like plti and show of the count array. So this is the 28 by 28 array and this is the structure. But even this I would say is still pretty ugly. So we're going to try to create a much nicer visualization of it and I wrote a bunch of code for that. The first thing we're going to need is we're going to need to invert this array here, this dictionary. So s to i is a mapping from s to i and in i to s we're going to reverse the array. So iterating over all the items and just reverse that array. So i to s maps inversely from 0 to a, 1 to b, etc. So we'll need that. And then here's the code that I came up with to try to make this a little bit nicer. We create a figure, we plot n and then we visualize a bunch of things later. Let me just run it so you get a sense of what this is. So we're going to do this. Okay, so you see here that we have the array spaced out and every one of these is basically like b follows g 0 times. b follows h 41 times. So a follows j 175 times. What you can see that I'm doing here is first I show that entire array and then I iterate over all the individual little cells here and I create a character string here which is the inverse mapping, i to s, of the integer i and the integer j. So those are the bigrams in a character representation. And then I plot just the bigram text. And then I plot the number of times that this bigram occurs. Now, the reason that there's a dot item here is because when you index into these arrays, these are torch tensors, you see that we still get a tensor back. So the type of this thing, you'd think it would be just an integer, 149, but it's actually a torch dot tensor. And so if you do dot item, then it will pop out that individual integer. So it'll just be 149. So that's what's happening there. And these are just some options to make it look nice. So what is the structure of this array? We have all these counts and we see that some of them occur often and some of them do not occur often. Now, if you scrutinize this carefully, you will notice that we're not actually being very clever. That's because when you come over here you'll notice that, for example, we have an entire row of completely zeros. And that's because the end character is never possibly going to be the first character of a bigram, because we're always placing these end tokens all at the end of the bigram. Similarly, we have entire columns of zeros here because the S character will never possibly be the second element of a bigram because we always start with S and we end with E and we only have the words in between. So we have an entire column of zeros, an entire row of zeros, and in this little two by two matrix here as well, the only one that can possibly happen is if S directly follows E. That can be non-zero if we have a word that has no letters. So in that case, there's no letters in the word, it's an empty word, and we just have S follows E. But the other ones are just not possible. And so we're basically wasting space. And not only that, but the S and the E are getting very crowded here. I was using these brackets because there's convention in natural language processing, to use these kinds of brackets to denote special tokens. But we're going to use something else. So let's fix all this and make it prettier. We're not actually going to have two special tokens. We're only going to have one special token. So we're going to have n by n array of 27 by set 27 instead. Instead of having two, we will just have one, and I will call it a dot. Okay. Let me swing this over here. Now, one more thing that I would like to do is I would actually like to make this special character have position zero. And I would like to offset all the other letters off. I find that a little bit more pleasing. So we need a plus one here so that the first character, which is A, will start at one. So S to I will now be A starts at one and dot is zero. And I to S, of course, we're not changing this, because I to S just creates a reverse mapping and this will work fine. So one is A, two is B, zero is dot. So we've reversed that here. We have a dot and a dot. This should work fine. Make sure I start at zeros. Count. And then here, we don't go up to 28, we go up to 27. And this should just work. Okay, so we see that dot dot never happened. It's at zero because we don't have empty words. Then this row here now is just very simply the counts for all the first letters. So J starts a word, H starts a word, I starts a word, etc. And then these are all the ending characters. And in between, we have the structure of what characters follow each other. So this is the counts array. This is the counts array of our entire data set. So this array actually has all the information necessary for us to actually sample from this bigram character-level language model. And roughly speaking, what we're going to do is we're just going to start following these probabilities and these counts, and we're going to start sampling from the model. So in the beginning, of course, we start with the dot, the start token dot. So to sample the first character of a name, we're looking at this right here. So we're looking at this right here. So we're looking at this right here. So we see that we have the counts, and those counts externally are telling us how often any one of these characters is to start a word. So if we take this N and we grab the first row, we can do that by using just indexing a zero, and then using this notation, colon, for the rest of that row. So N zero colon is indexing into the zero, and then it's grabbing all the columns. And so this will give us a one-dimensional array of the first row. So zero, four, four, 10. You know, it's zero, four, four, 10, one, three, oh, six, one, five, four, two, et cetera. It's just the first row. The shape of this is 27. It's just the row of 27. And the other way that you can do this also is you just, you don't actually give this, you just grab the zeroth row like this. This is equivalent. Now, these are the counts. And now what we'd like to do is we'd like to basically sample from this. Since these are the raw counts, we actually have to convert this to probabilities. So we create a probability vector. So we'll take N of zero, and we'll actually convert this to float first. Okay, so these integers are converted to float, floating point numbers. And the reason we're creating floats is because we're about to normalize these counts. So to create a probability distribution here, we want to divide, we basically want to do p, p divide, p.sum. And now we get a vector of smaller numbers, and these are now probabilities. So of course, because we divided by the sum, the sum of p now is one. So this is a nice proper probability distribution. It sums to one. And this is giving us the probability for any single character to be the first character of a word. So we can do this. So now we can try to sample from this distribution. To sample from these distributions, we're going to use torch.multinomial, which I've pulled up here. So torch.multinomial returns samples from the multinomial probability distribution, which is a complicated way of saying, you give me probabilities and I will give you integers, which are sampled according to the probability distribution. So this is the signature of the method. And to make everything deterministic, we're going to use a generator object in PyTorch. So this makes everything deterministic. So when you run this on your computer, you're going to get the exact same results that I'm getting here on my computer. So let me show you how this works. Here's the deterministic way of creating a torch generator object, seeding it with some number that we can agree on. So that seeds a generator, gives us an object g. And then we can pass that g to a function, a function that creates here random numbers. torch.rand creates random numbers, three of them. And it's using this generator object as a source of randomness. So without normalizing it, I can just print. This is sort of like numbers between 0 and 1 that are random according to this thing. And whenever I run it again, I'm always going to get the same result because I keep using the same generator object, which I'm seeding here. And then if I divide to normalize, I'm going to get a nice probability distribution of just three elements. And then we can use torch.multinomial to draw samples from it. So this is what that looks like. torch.multinomial will take the torch tensor of probability distributions. Then we can ask for a number of samples, let's say 20. Replacement equals true means that when we draw an element, we can draw it, and then we can put it back into the list of eligible indices to draw again. And we have to specify replacement as true because by default, for some reason, it's false. And I think it's just something to be careful with. And the generator is passed in here. So we are going to always get deterministic results, the same results. So if I run these two, we're going to get a bunch of samples from this distribution. Now, you'll notice here that the probability for the first element in this tensor is 60%. So in these 20 samples, we'd expect 60% of them to be 0. We'd expect 30% of them to be 1. And because the element index 2 has only 10% probability, very few of these samples should be 2. And indeed, we only have a small number of 2s. And we can sample as many as we want. And the more we sample, the more these numbers should roughly have the distribution here. So we should have lots of 0s, half as many 1s. And we should have three times as few 1s and three times as few 2s. So you see that we have very few 2s. We have some 1s, and most of them are 0s. So that's what we're going to do. Thank you. So that's what Torchlight Multinomial is doing. For us here, we are interested in this row. We've created this p here. And now we can sample from it. So if we use the same seed, and then we sample from this distribution, and let's just get one sample, then we see that the sample is, say, 13. So this will be the index. And let's see. See how it's a tensor that wraps 13? We again have to use .item to pop out that integer. And now index would be just the number 13. And of course, we can map the i2s of ix to figure out exactly which character we're sampling here. We're sampling m. So we're saying that the first character is m in our generation. And just looking at the row here, m was drawn. And we can see that m actually starts a large number of words. m started 2,500 words out of 32,000 words. So almost a bit less than 10% of the words start with m. So this was actually a fairly likely character to draw. So that would be the first character of our word. And now we can continue to sample more characters, because now we know that m is already sampled. So now to draw the next character, we're going to use m. m is already sampled. So now to draw the next character, we're going to use m. m is already sampled. So now to draw the next character, we're going to use m. And we'll come back here, and we will look for the row that starts with m. So you see m, and we have a row here. So we see that m dot is 516, m a is this many, m b is this many, etc. So these are the counts for the next row, and that's the next character that we are going to now generate. So I think we are ready to actually just write out the loop, because I think you're starting to get a sense of how this is going to go. The... We always begin at index zero because that's the start token and Then while true We're going to grab the row corresponding to index that we're currently on so that's P So that's n array at IX Converted to float is our P Then we normalize the speed to sum to one I Accidentally ran the infinite loop we normalize P to sum to one then we need this generator object Now we're going to initialize up here and we're going to draw a single sample from this distribution And Then this is going to tell us what index is going to be next If the index sampled is zero then that's now the end token So we will break Otherwise we are going to print s2i of ix i2s of ix That's pretty much it we're just this should work Okay more So that's the that's the name that we've sampled. We started with M. The next step was O then R and then dot And this dot is We printed here as well, so Let's not do this a few times So let's actually create an out list here And instead of printing we're going to append so out dot append this character and Then here let's just print it at the end So let's just join up all the outs, and we're just going to print more okay now always getting the same result because of the generator so if we want to do this a few times we can go for high in range 10 we can sample 10 names and we can just do that 10 times and these are the names that we're getting out let's do 20. i'll be honest with you this doesn't look right so i started a few minutes to convince myself that it actually is right the reason these samples are so terrible is that bigram language model is actually just like really terrible we can generate a few more here and you can see that they're kind of like their name like a little bit like yanu riley etc but they're just like totally messed up and i mean the reason that this is so bad like we're generating h as a name but you have to think through it from the model's eyes it doesn't know that this h is different very first h all it knows is that h was previously and now how likely is h the last character well it's somewhat likely and so it just makes it last character it doesn't know that there were other things before it or there were not other things before it and so that's why it's generating all these like some nonsense names another way to do this is to convince yourself that it's actually doing something reasonable even though it's so terrible is these little piece here are 27 right like 27 so how about if we did something like this instead of p having any structure whatsoever how about if p was just torch dot ones of 27 by default this is a float 32 so this is fine divide 27 so what i'm doing here is this is the uniform distribution which will make everything equally likely and we can sample from that so let's see if that does any better okay so it's this is what you have from a model that is completely untrained where everything is equally likely so it's obviously garbage and then if we have a trained model which is trained on just bigrams this is what we get so you can see that it is more name like it is actually working it's just bigram is so terrible and we have to do better now next i would like to fix an inefficiency that we have going on here because what we're doing here is we're always fetching a row of n from the counts matrix up ahead and then we're always doing the same things we're converting to float and we're dividing and we're doing this every single iteration of this loop and we just keep renormalizing these rows over and over again and it's extremely inefficient and wasteful so we're doing this every single iteration of this loop and we just keep renormalizing these rows over so what i'd like to do is i'd like to actually prepare a matrix capital p that will just have the probabilities in it so in other words it's going to be the same as the capital n matrix here of counts but every single row will have the row of probabilities that is normalized to one indicating the probability distribution for the next character given the character before it as defined by which row we're in so basically what we'd like to do is we'd like to just do it up front here and then we would like to just use that row here so here we would like to just do p equals p of i x instead okay the other reason i want to do this is not just for efficiency but also i would like us to practice these n-dimensional tensors and i'd like us to practice their manipulation and especially something that's called broadcasting that we'll go into in a second we're actually going to have to become very good at these tensor manipulations because if we're going to build out all the way to transformers we're going to be doing some pretty complicated array operations for efficiency and we're going to have to do some pretty complicated array operations for efficiency and we need to really understand that and be very good at it so intuitively what we want to do is we first want to grab the floating point copy of n and i'm mimicking the line here basically and then we want to divide all the rows so that they sum to one so we'd like to do something like this p divide p dot sum but now we have to be careful because p dot sum actually produces a sum sorry p equals n dot float copy p dot sum produces a um sums up all of the counts of this entire matrix n and gives us a single number of just the summation of everything so that's not the way we want to define divide we want to simultaneously and in parallel divide all the rows by their respective sums so what we have to do now is we have to go into documentation for torch.sum and we can scroll down here to a definition of the sum and we can see that the sum is a definition that is relevant to us which is where we don't only provide an input array that we want to sum but we also provide the dimension along which we want to sum and in particular we want to sum up over rows right now one more argument that i want you to pay attention to here is the keep them is false if keep them is true then the output tensor is of the same size as input except of course the dimension along which you summed which will become just one but if you pass in uh keep them as false then this dimension is squeezed out and so torch.sum not only does the sum and collapses dimension to be of size one but in addition it does what's called a squeeze where it squeeze out it squeezes out that dimension so basically what we want here is we instead want to do p dot sum of sum axis and in particular notice that p dot shape is 27 by 27 so when we sum up across axis 0 then we would be taking the 0th dimension and we would be summing across it so when keep dim is true then this thing will not only give us the counts across along the columns but notice that basically the shape of this is 1 by 27 we just get a row vector and the reason we get a row vector here again is because we passed in 0 dimension so this 0th dimension becomes 1 and we've done a sum and we get a row and so basically we've done the sum this way, vertically and arrived at just a single 1 by 27 vector of counts what happens when you take out keep dim is that we just get 27 so it squeezes out that dimension and we just get a 1 dimensional vector of size 27 now we don't actually want 1 by 27 row vector because that gives us the counts or the sums across 0th the columns we actually want to sum the other way along dimension 1 and you'll see that the shape of this is 27 by 1 so it's a column vector it's a 27 by 1 vector of counts and that's because what's happened here is that we're going horizontally and this 27 by 27 matrix becomes a 27 by 1 array now you'll notice by the way that the actual numbers of these counts are identical and that's because this special array of counts here comes from bigram statistics and actually it just so happens by chance or because of the way this array is constructed that the sums along the columns or along the rows horizontally or vertically is identical but actually what we want to do in this case is we want to sum across the rows horizontally so what we want here is p.sum of 1 with keep dim true 27 by 1 column vector and now what we want to do is we want to divide by that now we have to be careful here again is it possible to take what's a p.shape you see here is 27 by 27 is it possible to take a 27 by 27 array and divide it by what is a 27 by 1 array is that an operation that you can do and whether or not you can perform this operation is determined by what's called broadcasting rules so if you just search broadcasting semantics in torch you'll notice that there's a special definition for what's called broadcasting that for whether or not these two arrays can be combined in a binary operation like division so the first condition is each tensor has at least one dimension which is the case for us and then when iterating over the dimension sizes starting at the trailing dimension the dimension sizes must either be equal one of them is 1 or one of them does not exist okay so let's do that we need to align the two arrays and their shapes which is very easy because both of these shapes have two elements so they're aligned then we iterate over from the right and going to the left each dimension must be either equal one of them is a 1 or one of them does not exist so in this case they're not equal but one of them is a 1 so this is fine and then this dimension they're both equal so this is fine so all the dimensions are fine and therefore this operation is broadcastable. So that means that this operation is allowed. And what is it that these arrays do when you divide 27 by 27 by 27 by 1? What it does is that it takes this dimension 1 and it stretches it out. It copies it to match 27 here in this case. So in our case, it takes this column vector, which is 27 by 1, and it copies it 27 times to make these both be 27 by 27 internally. You can think of it that way. And so it copies those counts and then it does an element-wise division, which is what we want because these counts we want to divide by them on every single one of these columns in this matrix. So this actually we expect will normalize every single row. And we can check that this is true by taking the first row, for example, and taking its sum. We expect this to be 1 because it's now normalized. And then we expect this now because if we actually correctly normalize all the rows, we expect to get the exact same result here. So let's run this. It's the exact same result. So this is correct. So now I would like to scare you a little bit. You actually have to like, I basically encourage you very strongly to read through broadcasting semantics. And I encourage you to treat this with respect. And it's not something you should do with it. It's something to really respect, really understand and look up maybe some tutorials for broadcasting and practice it and be careful with it because you can very quickly run into bugs. Let me show you what I mean. You see how here we have p dot sum of 1, keep them as true. The shape of this is 27 by 1. Let me take out this line just so we have the n, and then we can see the counts. We can see that this is all the counts across all the rows. And it's 27 by 1. vector right now suppose that I tried to do the following but I erase keep them just true here what does that do if keep them is not true it's false then remember according to documentation it gets rid of this dimension one it squeezes it out so basically we just get all the same counts the same result except the shape of it is not 27 by 1 it's just 27 the one disappears but all the counts are the same so you'd think that this divide that would would work first of all can we even write this and will it even is it even is it even expected to run is it broadcastable let's determine if this result is broadcastable p.summit1 is shape is 27 this is 27 by 27 so 27 by 27 broadcasting into 27 so now rules of broadcasting number one align all the dimensions on the right done now iteration over all the dimensions starting from the right going to the left all the dimensions must either be equal one of them must be one or one then does not exist so here they are all equal here the dimension does not exist so internally what broadcasting will do is it will create a one here and then we see that one of them is a one and this will get copied and this will run this will broadcast okay so you'd expect this to work because we we are this broadcast and this we can divide this now if I run this you'd expect it to work but it doesn't you actually get garbage you get a wrong result because this is actually a bug this keep them equals true makes it work this is a bug but it's actually we are this in both cases we are doing the correct counts we are summing up across the rows but keep them is saving us and making it work so in this case I'd like you to encourage you to potentially like pause this video at this point and try to think about why this is buggy and why the keep dem was necessary here okay so the reason to do for this is I'm trying to hint at here when I was sort of giving you a bit of a hint on how this works this 27 factor is internally inside the broadcasting this becomes a 1 by 27 and 1 by 27 is a row vector right and now we are dividing 27 by 27 by 1 by 27 and torch will replicate this dimension so basically it will take it will take this row vector and it will copy it vertically now 27 times so the 27 by 27 lines exactly and element wise divides and so basically what's happening here is we're actually normalizing the columns instead of normalizing the rows so you can check that what's happening here is that P at 0 which is the first row of P dot sum is not 1 it's 7 it is the first column as an example that sums to 1 so to summarize where does the issue come from the issue comes from the silent adding of a dimension here because in broadcasting rules you align on the right and go from right to left and if dimension doesn't exist you create it so that's where the problem happens we still did the counts correctly we did the counts across the rows and we got the counts on the right here as a column vector but because the keep dims was true this this this dimension was discarded and now we just have a vector 27 and because of broadcasting the way it works this vector of 27 suddenly becomes a row vector and then this row vector gets replicated vertically and at every single point we are dividing by the by the count in the opposite direction so so this thing just doesn't work this needs to be keep dims equals true in this case so then then we have that P at 0 is normalized and conversely the first column you'd expect to potentially not be normalized and this is what makes it work so pretty subtle and hopefully this helps to scare you that you should have respect for broadcasting be careful check your work and understand how it works under the hood and make sure that it's broadcasting in the direction that you like otherwise you're going to introduce very subtle bugs very hard to find bugs and just be careful one more note on efficiency we don't want to be doing this here because this creates a completely new tensor that we store into p we prefer to use in place operations if possible uh so this would be an in-place operation it has the potential to be faster it doesn't create new memory under the hood and then let's erase this we don't need it and let's also um just do fewer just so i'm not wasting space okay so we're actually in a pretty good spot now we trained a bigram language model and we trained it really just by counting uh how frequently any pairing occurs and then normalizing so that we get a nice property distribution so really these elements of this array p are really the parameters of our bigram language model giving us in summarizing the statistics of these bigrams so we train the model and then we know how to sample from the model we just iteratively uh sample the next character and feed it in each time and get the next character now what i'd like to do is i'd like to somehow evaluate the quality of this model we'd like to somehow summarize the quality of this model into a single number how good is it at predicting the quality of the data and we can use that here to kind of write out which is not what we want to use here but like to do keep in front of a table for FARM summarize the quality of this model into a single number how good is it at predicting the number of Bana summarize the quality of this model into a single number. How good is it at predicting the training set? And as an example, so in the training set, we can evaluate now the training loss. And this training loss is telling us about sort of the quality of this model in a single number, just like we saw in micrograd. So let's try to think through the quality of the model and how we would evaluate it. Basically, what we're going to do is we're going to copy paste this code that we previously used for counting. And let me just print these bigrams first. We're going to use fstrings, and I'm going to print character one followed by character two. These are the bigrams. And then I don't want to do it for all the words, just do the first three words. So here we have Emma, Olivia, and Ava bigrams. Now what we'd like to do is we'd like to basically look at the probability that the model assigns to every one of these bigrams. So in other words, we can look at the probability of the model, and we can look at the probability of the model, and we can look at the probability of the model, and we can look at the probability of the model, which is summarized in the matrix B of Ix1, Ix2. And then we can print it here as probability. And because these probabilities are way too large, let me percent or colon .4f to truncate it a bit. So what do we have here, right? We're looking at the probabilities that the model assigns to every one of these bigrams in the dataset. And so we can see some of them are 4%, 3%, etc. Just to have a measuring stick in our mind, by the way. We have 27 possible characters or tokens. And if everything was equally likely, then you'd expect all these probabilities to be 4% roughly. So anything above 4% means that we've learned something useful from these bigram statistics. And you see that roughly some of these are 4%, but some of them are as high as 40%, 35%, and so on. So you see that the model actually assigned a pretty high probability to whatever's in the training set. And so that's a good thing. And so we can look at the probability of the model, and we can look at the probability of the model. Basically, if you have a very good model, you'd expect that these probabilities should be near one, because that means that your model is correctly predicting what's going to come next, especially on the training set where you trained your model. So now we'd like to think about how can we summarize these probabilities into a single number that measures the quality of this model. Now, when you look at the literature into maximum likelihood estimation and statistical modeling and so on, you'll see that what's typically used here is something called the likelihood. And the likelihood is the product of all of these probabilities. And so the product of all of these probabilities is the likelihood. And it's really telling us about the probability of the entire data set assigned by the model that we've trained. And that is a measure of quality. So the product of these should be as high as possible when you are training the model and when you have a good model. Your product of these probabilities should be very high. Now, because the product of these probabilities is an unwieldy thing to work with, you can see that all of them are between zero and one. So your product of these probabilities will be a very tiny number. So for convenience, what people work with usually is not the likelihood, but they work with what's called the log likelihood. So the product of these is the likelihood. To get the log likelihood, we just have to take the log of the probability. And so the log of the probability here, I have the log of x from zero to one. The log is a, you see here, monotonic transformation of the probability, where if you pass in one, you get zero. So probability one gets you log probability of zero. And then as you go lower and lower probability, the log will grow more and more negative until all the way to negative infinity at zero. So here we have a log prob, which is really just a torch.log of probability. Let's print it out to get a sense of what that looks like. Let's print it out to get a sense of what that looks like. Let's print it out to get a sense of what that looks like. Log prob, also, 0.4f. So as you can see, when we plug in numbers that are very close to some of our higher numbers, we get closer and closer to zero. And then if we plug in very bad probabilities, we get more and more negative number that's bad. So, and the reason we work with this is for a large extent, convenience, because we have, mathematically, that if you have some product A x B x C analyze a function and add some product, you've got a set method. Yes. all these probabilities right the likelihood is the product of all these probabilities then the log of these is just log of a plus log of b plus log of c if you remember your logs from your high school or undergrad and so on so we have that basically the likelihood of the product probabilities the log likelihood is just the sum of the logs of the individual probabilities so log likelihood starts at zero and then log likelihood here we can just accumulate simply and then the end we can print this print the log likelihood f strings maybe you're familiar with this so log likelihood is negative 38 okay now we actually want um so how high can log likelihood get it can go to zero so when all the probabilities are one log likelihood will be zero and then when all the probabilities are lower this will grow more and more negative now we don't actually like this because what we'd like is a loss function and a loss function has the semantics that low is good because we're trying to minimize the loss so we actually need to invert this and that's what gives us something called the negative log likelihood negative log likelihood is just negative of the log likelihood these are f strings by the way if you'd like to look this up negative log likelihood equals so negative log likelihood now is just negative of it and so the negative log likelihood is a negative likelihood, is a very nice loss function because the lowest it can get is zero. And the higher it is, the worse off the predictions are that you're making. And then one more modification to this that sometimes people do is that for convenience, they actually like to normalize by, they like to make it an average instead of a sum. And so here, let's just keep some counts as well. So n plus equals one starts at zero. And then here, we can have sort of like a normalized log likelihood. If we just normalize it by the count, then we will sort of get the average log likelihood. So this would be usually our loss function here. This is what we would use. So our loss function for the training set assigned by the model is 2.4. That's the quality of this model. And the lower it is, the better off we are. And the higher it is, the worse off we are. And the job of our, you know, training is to find the parameters that minimize the negative log likelihood loss. And that would be like a high quality model. Okay, so to summarize, I actually wrote it out here. So our goal is to maximize likelihood, which is the product of all the probabilities assigned by the model. And we want to maximize this likelihood with respect to the model parameters. And in our case, we want to maximize the likelihood of all the probabilities assigned by the model. And in our case, the model parameters here are defined in the table. These numbers, the probabilities are the model parameters sort of in our diagram language model so far. But you have to keep in mind that here we are storing everything in a table format, the probabilities. But what's coming up as a brief preview is that these numbers will not be kept explicitly, but these numbers will be calculated by a neural network. So that's coming up. And we want to change and tune the parameters of these neural networks. We want to change these parameters to maximize the likelihood of all the probabilities the likelihood, the product of the probabilities. Now, maximizing the likelihood is equivalent to maximizing the log likelihood, because log is a monotonic function. Here's the graph of log. And basically, all it is doing is it's just scaling your, you can look at it as just a scaling of the loss function. And so the optimization problem here, and here are actually equivalent, because this is just scaling, you can look at it that way. And so these are two identical optimization problems. Maximizing the log likelihood is equivalent to minimizing the negative log likelihood. And then in practice, people actually minimize the average negative log likelihood to get numbers like 2.4. And then this summarizes the quality of your model. And we'd like to minimize it and make it as small as possible. And the lowest it can get is zero. And the lower it is, the better off your model is because it's assigning it's assigning high probabilities to your data. Now let's estimate. The probability over the entire training set just to make sure that we get something around 2.4. Let's run this over the entire oops, let's take out the print statement as well. Okay, 2.45 for the entire training set. Now what I'd like to show you is that you can actually evaluate the probability for any word that you want. Like for example, if we just test a single word Andre, and bring back the print statement, then you see that Andre is actually kind of like an unlikely word or like on average, we take three log probability to represent it. And roughly, that's because EJ apparently is very uncommon as an example. Now, think through this. When I take Andre and I append Q, and I test the probability of it Andre q, we actually get infinity. And that's because J Q has a 0% probability according to our model. So the log likelihood, so the log of 0% is 0% which is the probability of actually dancing. And then what happens when I take Andre, I take Andre q, and I test the So the log of 0 will be negative infinity. We get infinite loss. So this is kind of undesirable, right? Because we plugged in a string that could be like a somewhat reasonable name. But basically what this is saying is that this model is exactly 0% likely to predict this name. And our loss is infinity on this example. And really the reason for that is that j is followed by q 0 times. Where is q? jq is 0. And so jq is 0% likely. So it's actually kind of gross and people don't like this too much. To fix this, there's a very simple fix that people like to do to sort of like smooth out your model a little bit. And it's called model smoothing. And roughly what's happening is that we will add some fake counts. So imagine adding a count of 1 to everything. So we add a count of 1 like this. And then we recalculate the probabilities. And that's model smoothing. And you can add as much as you like. You can add 5 and that will give you a smoother model. And the more you add here, the more uniform model you're going to have. And the less you add, the more peaked model you are going to have, of course. So 1 is like a pretty decent count to add. And that will ensure that there will be no zeros in our probability matrix P. And so this will, of course, change the generations a little bit. In this case, it didn't. But in principle, it could. But what that's going to do... What it's going to do now is that nothing will be infinity unlikely. So now our model will predict some other probability. And we see that jq now has a very small probability. So the model still finds it very surprising that this was a word or a bigram. But we don't get negative infinity. So it's kind of like a nice fix that people like to apply sometimes. And it's called model smoothing. Okay, so we've now trained a respectable bigram character-level language model. And we saw that we both sort of trained the model by looking at the counts of all the bigrams. And normalizing the rows to get probability distributions. We saw that we can also then use those parameters of this model to perform sampling of new words. So we sample new names according to those distributions. And we also saw that we can evaluate the quality of this model. And the quality of this model is summarized in a single number, which is the negative log likelihood. And the lower this number is, the better the model is. Because it is giving high probabilities to the actual next characters. And all the bigrams in our training set. So that's all well and good. But we've arrived at this model explicitly by doing something that felt sensible. We were just performing counts. And then we were normalizing those counts. Now what I would like to do is I would like to take an alternative approach. We will end up in a very, very similar position. But the approach will look very different. Because I would like to cast the problem of bigram character-level language modeling into the neural network framework. And in the neural network framework, we're going to approach things. Slightly differently, but again, end up in a very similar spot. I'll go into that later. Now, our neural network is going to be a still a bigram character-level language model. So it receives a single character as an input. Then there's neural network with some weights or some parameters w. And it's going to output the probability distribution over the next character in a sequence. It's going to make guesses as to what is likely to follow this character that was input to the model. And then in addition to that, we're going to be able to evaluate any setting of the parameters of the neural net. Because we have the loss function, the negative log likelihood. So we're going to take a look at its probability distributions. And we're going to use the labels, which are basically just the identity of the next character in that bigram, the second character. So knowing what the second character actually comes next in the bigram allows us to then look at how high of probability the model assigns to that character. And then we, of course, want the probability to be very high. And that is another way of saying that the loss is low. So we're going to use gradient-based optimization then to tune the parameters of this network. Because we have the loss function and we're going to minimize it. So we're going to tune the weights so that the neural net is correctly predicting the probabilities for the next character. So let's get started. The first thing I want to do is I want to compile the training set of this neural network, right? So create the training set of all the bigrams. Okay, and here I'm going to copy-paste this code because this code iterates over all the bigrams. So here we start with the words, we iterate over all the bigrams. And previously, as you recall, we did the counts. But now we're not going to do counts. We're just creating a training set. Now this training set will be made up of two lists. We have the... inputs and the targets, the labels. And these bigrams will denote x, y. Those are the characters, right? And so we're given the first character of the bigram and then we're trying to predict the next one. Both of these are going to be integers. So here we'll take xs.append is just x1. ys.append is x2. And then here we actually don't want lists of integers. We will create tensors out of these. xs is torch.tensor of xs. And ys is torch.tensor of ys. And then we don't actually want to take all the words just yet because I want everything to be manageable. So let's just do the first word, which is Emma. And then it's clear what these xs and ys would be. Here let me print character1, character2, just so you see what's going on here. So the bigrams of these characters is... So this single word, as I mentioned, has one, two, three, four, five examples for our neural network. There are five separate examples in Emma. And those examples I'll summarize here. When the input to the neural network is integer 0, the desired label is integer 5, which corresponds to e. When the input to the neural network is 5, we want its weights to be arranged, so that 13 gets a very high probability. When 13 is put in, we want 13 to have a high probability. When 13 is put in, we also want 1 to have a high probability. When 1 is input, we want 0 to have a very high probability. So there are five separate input examples to a neural net in this dataset. I wanted to add a tangent of a note of caution to be careful with a lot of the APIs of some of these frameworks. You saw me silently use torch.tensor with a lowercase t, and the output looked right. But you should be aware that there's actually two ways of constructing a tensor. There's a torch.lowercase tensor, and there's also a torch.capitalTensor class, which you can also construct, so you can actually call both. You can also do torch.capitalTensor, and you get an x as in y as well. So that's not confusing at all. There are threads on what is the difference between these two. And unfortunately, the docs are just not clear on the difference. And when you look at the docs of lowercase tensor, constructs tensor with no autograd history by copying data. It's just like, it doesn't make sense. So the actual difference, as far as I can tell, is explained eventually in this random thread that you can Google. And really it comes down to, I believe, that... Where is this? Torch.tensor infers the D type, the data type, automatically, while torch.tensor just returns a float tensor. I would recommend to stick to torch.lowercase tensor. So indeed, we see that when I construct this with a capital T, the data type here of x is float32. But torch.lowercase tensor, you see how it's now x.dtype is now integer. So it's advised that you use lowercase t and you can read more about it if you like in some of these threads. But basically, I'm pointing out some of these things because I want to caution you and I want you to get used to reading a lot of documentation and reading through a lot of Q&As and threads like this. And some of this stuff is unfortunately not easy and not very well documented and you have to be careful out there. What we want here is integers because that's what makes sense. And so lowercase tensor is what we are using. OK, now we want to think through how we're going to feed in these examples into a neural network. Now, it's not quite as straightforward as plugging it in because these examples right now are integers. So there's like a 0, 5 or 13. It gives us the index of the character. And you can't just plug an integer index into a neural net. These neural nets are sort of made up of these neurons and these neurons have weights. And as you saw in microGRAD, these weights act multiplicatively on the inputs. WX plus B, there's 10 Hs and so on. And so it doesn't really make sense to make an input neuron take on integer values that you feed in and then multiply on with weights. So instead, a common way of encoding integers is what's called one-hot encoding. In one-hot encoding, we take an integer like 13 and we create a vector that is all zeros except for the 13th dimension, which we turn to a 1. And then that vector can feed into a neural net. Now, conveniently, PyTorch actually has something called the one-hot function inside torch and then functional. It takes a tensor made up of integers. Long is an integer. And it also takes a number of classes, which is how large you want your tensor, your vector to be. So here, let's import torch.nn.func. This is a common way of importing it. And then let's do f.one-hot. And we feed in the integers that we want to encode. So we can actually feed in the entire array of Xs. And we can tell it that numclasses is 27. So it doesn't have to try to guess it. It may have guessed that it's only 13 and would give us an incorrect result. So this is the one-hot. Let's call this xinc for xencoded. And then we see that xencoded.shape is 5 by 27. And we can also visualize it, plt.imshow of xinc, to make it a little bit more clear because this is a little messy. So we see that we've encoded all the five examples into vectors. We have five examples, so we have five rows, and each row here is now an example into a neural net. And we see that the appropriate bit is turned on as a one, and everything else is zero. So here, for example, the zeroth bit is turned on. The fifth bit is turned on. Thirteenth bits are turned on for both of these examples. And then the first bit here is turned on. So that's how we can encode integers into vectors. And then these vectors can feed into neural nets. One more issue to be careful with here, by the way, is let's look at the data type of xincoding. We always want to be careful with data types. What would you expect xincoding's data type to be? When we're plugging numbers into neural nets, we don't want them to be integers. We want them to be floating-point numbers that can take on various values. But the dtype here is actually a 64-bit integer. And the reason for that, I suspect, is that one hot received a 64-bit integer here, and it returned the same data type. And when you look at the signature of one hot, it doesn't even take a dtype, a desired data type, of the output tensor. And so we can't, in a lot of functions in Torch, we'd be able to do something like dtype equals torch.float32, which is what we want, but one hot does not support that. So instead, we're going to want to cast this to float like this. So that these, everything is the same, everything looks the same, but the dtype is float32. And floats can feed into neural nets. So now let's construct our first neuron. This neuron will look at these input vectors. And as you remember from micrograd, these neurons basically perform a very simple function, wx plus b, where wx is a dot product, right? So we can achieve the same thing here. Let's first define the weights of this neuron, basically. What are the initial weights at initialization for this neuron? Let's initialize them with torch.random. torch.random fills a tensor with random numbers drawn from a normal distribution. And a normal distribution has a probability density function like this. And so most of the numbers drawn from this distribution will be around zero, but some of them will be as high as almost three and so on. And very few numbers will be above three in magnitude. So we need to take a size as an input here. And I'm going to use size to be 27 by one. So 27 by one and then let's visualize w. So w is a column vector of 27 numbers. And these weights are then multiplied by the inputs. So now to perform this multiplication, we can take x encoding and we can multiply it with w. This is a matrix multiplication operator in PyTorch. And the output of this operation is five by one. The reason it's five by one is the following. We took x encoding which is five by 27 and we multiplied it by 27 by one. And in matrix multiplication, you see that the output will become five by one because these 27 will multiply and add. So basically what we're seeing here out of this operation is we are seeing the five activations of this neuron on these five inputs. And we've evaluated all of them in parallel. We didn't feed in just a single input to the single neuron. We fed in simultaneously all the five inputs into the same neuron. And in parallel, PyTorch has evaluated the wx plus b. But here is just wx. There's no bias. It has value w times x for all of them independently. Now instead of a single neuron though, I would like to have 27 neurons. And I'll show you in a second why I want 27 neurons. So instead of having just a one here, which is indicating this presence of one single neuron, we can use 27. And then when w is 27 by 27, this will in parallel evaluate all the 27 neurons on all the five inputs, giving us a much bigger result. So now what we've done is five by 27 multiplied 27 by 27. And the output of this is now five by 27. So we can see that the shape of this is five by 27. So what is every element here telling us, right? It's telling us for every one of 27 neurons that we created, what is the firing rate of those neurons on every one of those five examples? So the element, for example, three comma 13, is giving us the firing rate of the 13th neuron looking at the third input. And the way this was achieved is by a dot product between the third input and the 13th column of this w matrix here. So using matrix multiplication, we can very efficiently evaluate the dot product between lots of input examples in a batch and lots of neurons where all of those neurons have weights in the columns of those w's. And in matrix multiplication, we're just doing those dot products in parallel. Just to show you that this is the case, we can take xank and we can take the third row. And we can take the w and take its 13th column. And then we can do xank at three element-wise multiply with w at 13 and sum that up. That's wx plus b. Well, there's no plus b, it's just wx dot product. And that's this number. So you see that this is just being done efficiently by the matrix multiplication operation for all the input examples and for all the output neurons of this first layer. Okay, so we fed our 27 dimensional inputs into a first layer of a neural net that has 27 neurons, right? So we have 27 inputs and now we have 27 neurons. These neurons perform w times x. They don't have a bias and they don't have a nonlinearity like tanh. We're going to leave them to be a linear layer. In addition to that, we're not going to have any other layers. This is going to be it. It's just going to be the dumbest, smallest, simplest neural net, which is just a single linear layer. And now I'd like to explain what I want those 27 outputs to be. Intuitively, what we're trying to produce here for every single input example is we're trying to produce some kind of a probability distribution for the next character in a sequence. And there's 27 of them. But we have to come up with precise semantics for exactly how we're going to interpret these 27 numbers that these neurons take on. Now intuitively, you see here that these numbers are negative and some of them are positive, etc. And that's because these are coming out of the neural net layer initialized with these normal distribution parameters. But what we want is we want something like we had here. Like each row here told us the counts and then we normalize the counts to get probabilities. And we want something similar to come out of the neural net. But what we just have right now is just some negative and positive numbers. Now we want those numbers to somehow represent the probabilities for the next character. But you see that probabilities, they have a special structure. They're positive numbers and they sum to one. And so that doesn't just come out of a neural net. And then they can't be counts because these counts are positive and counts are integers. So counts are also not really a good thing to output from a neural net. So instead, what the neural net is going to output and how we are going to interpret the 27 numbers is that these 27 numbers are giving us log counts, basically. So instead of giving us counts directly, like in this table, they're giving us log counts. And to get the counts, we're going to take the log counts and we're going to exponentiate them. Now, exponentiation takes the following form. It takes numbers that are negative or they are positive. It takes the entire real line. And then if you plug in negative numbers, you're going to get e to the x, which is always below one. So you're getting numbers lower than one. And if you plug in numbers greater than zero, you're getting numbers greater than one all the way growing to the infinity. And this here grows to zero. So basically, we're going to take these numbers here and instead of them being positive and negative in all their place, we're going to interpret them as log counts. And then we're going to element-wise exponentiate these numbers. Exponentiating them now gives us something like this. And you see that these numbers now, because they went through an exponent, all the negative numbers turned into numbers below one, like 0.338. And all the positive numbers, originally, turned into even more positive numbers, sort of greater than one. So like, for example, seven is some positive number over here that is greater than zero. But exponentiated outputs here basically give us something that we can use and interpret as the equivalent of counts originally. So you see these counts here? 1, 12, 7, 51, 1, etc. The neural net is kind of now predicting counts. And these counts are positive numbers. They're probably below zero, so that makes sense. And they can now take on various values depending on the settings of W. So let me break this down. We're going to interpret these to be the log counts. In other words for this, that is often used, is so-called logits. These are logits, log counts. And these will be sort of the counts. Logits exponentiated. And this is equivalent to the n matrix, sort of the n array that we used previously. Remember this was the n? This is the array of counts. And each row here are the counts for the next character, sort of. So those are the counts. And now the probabilities are just the counts normalized. And so I'm not going to find the same, but basically I'm not going to scroll all over the place. We've already done this. We want to counts.sum along the first dimension. And we want to keep dims as true. We've went over this. And this is how we normalize the rows of our counts matrix to get our probabilities. Props. So now these are the probabilities. And these are the counts that we have currently. And now when I show the probabilities, you see that every row here, of course, will sum to one because they're normalized. And the shape of this is 5 by 27. And so really what we've achieved is for every one of our five examples, we now have a row that came out of a neural net. And because of the transformations here, we made sure that this output of this neural net now can be interpreted to be probabilities or we can interpret to be probabilities. So our WX here gave us logits. And then we interpret those to be log counts. We exponentiate to get something that looks like counts. And then we normalize those counts to get a probability distribution. And all of these are differentiable operations. So what we've done now is we are taking inputs. We have differentiable operations that we can back propagate through. And we're getting out probability distributions. So for example, for the zeroth example that fed in, which was the zeroth example here, was a one-hot vector of zero. And it basically corresponded to feeding in this example here. So we're feeding in a dot into a neural net. And the way we fed the dot into a neural net is that we first got its index. Then we one-hot encoded it. Then it went into the neural net. And out came this distribution of probabilities. And its shape is 27. There's 27 numbers. And we're going to interpret this as the neural net's assignment for how likely every one of these characters, the 27 characters, are to come next. And as we tune the weights W, we're going to be, of course, getting different probabilities out for any character that you input. And so now the question is just, can we optimize and find a good W such that the probabilities coming out are pretty good? And the way we measure pretty good is by the loss function. Okay, so I organized everything into a single summary so that hopefully it's a bit more clear. So it starts here. We have an input data set. We have some inputs to the neural net. And we have some labels for the correct next character in a sequence. And these are integers. Here I'm using torch generators now so that you see the same numbers that I see. And I'm generating 27 neurons' weights. And each neuron here receives 27 inputs. Then here we're going to plug in all the input examples, x's, into a neural net. So here, this is a forward pass. First, we have to encode all of the inputs into one-hot representations. So we have 27 classes. We pass in these integers. And xinc becomes an array that is 5 by 27. Zeros except for a few ones. We then multiply this in the first layer of a neural net to get logits. Exponentiate the logits to get fake counts, sort of. And normalize these counts to get probabilities. So these last two lines, by the way, here are called the softmax, which I pulled up here. Softmax is a very often used layer in a neural net that takes these z's, which are logits, exponentiates them, and divides and normalizes. It's a way of taking outputs of a neural net layer. And these outputs can be positive or negative. And it outputs probability distributions. It outputs something that is always sums to one and are positive numbers, just like probabilities. So it's kind of like a normalization function if you want to think of it that way. And you can put it on top of any other linear layer inside a neural net. And it basically makes a neural net output probabilities that's very often used. And we used it as well here. So this is the forward pass, and that's how we made a neural net output probability. Now, you'll notice that all of these, this entire forward pass is made up of differentiable layers. Everything here we can backpropagate through. And we saw some of the backpropagation in micrograd. This is just multiplication and addition. All that's happening here is just multiply and add. And we know how to backpropagate through them. Exponentiation, we know how to backpropagate through. And then here, we are summing. And sum is easily backpropagatable as well. And division as well. So everything here is a differentiable operation. And we can backpropagate through. Now, we achieve these probabilities, which are 5 by 27. For every single example, we have a vector of probabilities that sum to 1. And then here, I wrote a bunch of stuff to sort of like break down the examples. So we have 5 examples making up Emma, right? And there are 5 bigrams inside Emma. So bigram example 1 is that E is the beginning character right after dot. And the indexes for these are 0 and 5. So then we feed in a 0 that's the input to the neural net. We get probabilities from the neural net that are 27 numbers. And then the label is 5 because E actually comes after dot. So that's the label. And then we use this label 5 to index into the probability distribution here. So this index 5 here is 0, 1, 2, 3, 4, 5. It's this number here, and this number here. So that's basically the probability assigned by the neural net to the actual correct character. You see that the network currently thinks that this next character, that E following dot, is only 1% likely, which is of course not very good, right? Because this actually is a training example, and the network thinks that this is currently very, very unlikely. But that's just because we didn't get very lucky in generating a good setting of W. So right now this network thinks this is unlikely, and 0.01 is not a good outcome. So the log likelihood then is very negative. And the negative log likelihood is very positive. And so 4 is a very high negative log likelihood, and that means we're going to have a high loss. Because what is the loss? The loss is just the average negative log likelihood. So the second character is E . And you see here that also the network thought that M following E is very unlikely, 1%. For M following M, it thought it was 2%. And for A following M, it actually thought it was 7% likely. So just by chance, this one actually has a pretty good probability, and therefore a pretty low negative log likelihood. And finally here, it thought this was 1% likely. So overall, our average negative log likelihood, which is the loss, the total loss that summarizes basically how well this network currently works, at least on this one word, not on the full data set, just the one word, is 3.76, which is actually a fairly high loss. This is not a very good setting of Ws. Now here's what we can do. We're currently getting 3.76. We can actually come here and we can change our W. We can resample it. So let me just add one to have a different seed. And then we get a different W. And then we can rerun this. And with this different seed, with this different setting of Ws, we now get 3.37. So this is a much better W, right? And it's better because the probabilities just happen to come out higher for the characters that actually are next. And so you can imagine actually just resampling this. We can try 2. Okay, this was not very good. Let's try one more. We can try 3. Okay, this was a terrible setting because we have a very high loss. So anyway, I'm going to erase this. What I'm doing here, which is just guess and check of randomly assigning parameters and seeing if the network is good, that is amateur hour. That's not how you optimize in neural net. The way you optimize in neural net is you start with some random guess and we're going to commit to this one, even though it's not very good. But now the big deal is we have a loss function. So this loss is made up only of differentiable operations. And we can minimize the loss by tuning Ws by computing the gradients of the loss with respect to these W matrices. And so then we can tune W to minimize the loss and find a good setting of W using gradient based optimization. So let's see how that will work. Now things are actually going to look almost identical to what we had with micrograd. So here I pulled up the lecture from micrograd, the notebook that's from this repository. And when I scroll all the way to the end where we left off with micrograd, we had something very, very similar. We had a number of input examples. In this case, we had four input examples inside Xs. And we had their targets, desired targets. Just like here, we have our Xs now, but we have five of them. And they're now integers instead of vectors. But we're going to convert our integers to vectors, except our vectors will be 27 large instead of three large. And then here what we did is first we did a forward pass where we ran a neural net from all of the inputs to get predictions. Our neural net at the time, this NFX, was a multi-layer perceptron. Our neural net is going to look different because our neural net is just a single layer, single linear layer followed by a softmax. So that's our neural net. And the loss here was the mean squared error. So we simply subtracted the prediction from the ground truth and squared it and summed it all up. And that was the loss. And loss was the single number that summarized the quality of the neural net. And when loss is low, like almost zero, that means the neural net is predicting correctly. So we had a single number that summarized the performance of the neural net. And everything here was differentiable and was stored in a massive compute graph. And then we iterated over all the parameters. We made sure that the gradients are set to zero. And we called loss.backward. And loss.backward and we iterated backpropagation at the final output node of loss. So remember these expressions? We had loss all the way at the end. We start backpropagation and we went all the way back. And we made sure that we populated all the parameters .grad. So .grad started at zero, but backpropagation filled it in. And then in the update, we iterated over all the parameters and we simply did a parameter update where every single element of our parameters was notched in the opposite direction of the gradient. And so we're going to do the exact same thing here. So I'm going to pull this up on the side here so that we have it available. And we're actually going to do the exact same thing. So this was the forward pass. So we did this. And props is our YPred. So now we have to evaluate the loss, but we're not using the mean squared error. We're using the negative log likelihood because we are doing classification. We're not doing regression as it's called. So here we want to calculate loss. Now, the way we calculate it is just this average negative log likelihood. Now, this props here has a shape of five by twenty seven. And so to get all that, we basically want to pluck out the probabilities at the correct indices here. So in particular, because the labels are stored here in the array wise, basically what we're after is for the first example, we're looking at probability of five right at index five. For the second example, at the second row or row index one, we are interested in the probability assigned to index 13. At the second example, we also have 13. At the third row, we want one. And at the last row, which is four, we want zero. So these are the probabilities. We're interested in. And you can see that they're not amazing as we saw above. So these are the probabilities we want, but we want like a more efficient way to access these probabilities, not just listing them out in a tuple like this. So it turns out that the way to do this in PyTorch, one of the ways, at least, is we can basically pass in all of these sorry about that, all of these integers in the vectors. So these ones, you see how they're just zero, one, two, three, four. We can actually create that using MP, not MP, sorry, torch.arrange of five. Zero, one, two, three, four. So we can index here with torch.arrange of five. And here we index with wise. And you see that that gives us exactly these numbers. So that plucks up the probabilities of that. That the neural network assigns to the correct next character. Now we take those probabilities and we don't we actually look at the log probability, so we want to dot log and then we want to just average that up. So take the mean of all of that and then it's the negative average log likelihood that is the loss. So the loss here is three point seven something. And you see that this loss, three point seven six, three point seven six is exactly as we've obtained before, but this is a vectorized form of that expression. So we get the same loss and the same loss we can consider sort of as part of this forward pass and we've achieved here now loss. OK, so we made our way all the way to loss. We've defined the forward pass. We forwarded the network and the loss. Now we're ready to do the backward pass. So backward pass. We want to first make sure that all the gradients are reset. So they're at zero. Now, in PyTorch, you can set the gradients to be zero, but you can also just set it to none and setting it to none is more efficient. And PyTorch will interpret none as like a lack of a gradient and is the same as zeros. So this is a way to set to zero the gradient. And now we do loss.backward. Before we do loss.backward, we need one more thing. If you remember from micrograd, PyTorch actually requires that we pass in requires grad is true so that we tell PyTorch that we are interested in calculating gradients for this leaf tensor by default, this is false. So let me recalculate with that and then set to none and loss.backward. Now, something magical happened when loss.backward was run because PyTorch, just like micrograd, when we did the forward pass here, it keeps track of all the operations under the hood. It builds a full computational graph, just like the graphs we produced in micrograd. Those graphs exist inside PyTorch. And so it knows all the dependencies and all the mathematical operations of everything. And when you then calculate the loss, we can call a dot.backward on it. And dot.backward then fills in the gradients of all the intermediates all the way back to w's, which are the parameters of our neural net. So now we can do w.grad and we see that it has structure. There's stuff inside it. And these gradients, every single element here, so w.shape is 27 by 27, w.grad's shape is the same, 27 by 27. And every element of w.grad is telling us the influence of that weight on the loss function. So, for example, this number all the way here, if this element, the 00 element of w, because the gradient is positive, it's telling us that this has a positive influence on the loss, slightly nudging w, slightly taking w00 and adding a small h to it would increase the loss mildly because this gradient is positive. Some of these gradients are also negative. So that's telling us about the gradient information. And we can use this gradient information to update the weights of this neural network. So let's now do the update. It's going to be very similar to what we had in micrograd. We need no loop over all the parameters because we only have one parameter tensor and that is w. So we simply do w.data plus equals. We can actually copy this almost exactly negative 0.1 times w.grad. And that would be the update to the tensor. So that updates the tensor. And because the tensor is updated, we would expect that now the loss should decrease. So here, if I print loss, that item, it was 3.76, right? So we've updated the w here. So if I recalculate forward pass, the loss now should be slightly lower. So 3.76 goes to 3.74. And then we can again set grad to none and backward, update. And now the parameters changed again. So if we recalculate the forward pass, we expect a lower loss again, 3.72. OK, and this is again doing the, we're now doing gradient descent. And when we achieve a low loss, that will mean that the network is assigning high probabilities to the correct next characters. OK, so I rearranged everything and I put it all together from scratch. So here is where we construct our data set of bigrams. You see that we are still iterating only over the first word, Emma. I'm going to change that in a second. I added a number that counts the number of elements in Xs so that we explicitly see that number of examples is five, because currently we're just working with Emma and there's five bigrams there. And here I added a loop of exactly what we had before. So we had ten iterations of gradient descent of forward pass, backward pass and update. And so running these two cells, initialization and gradient descent gives us some improvement on the loss function. But now I want to use all the words and there's not five, but 228,000 bigrams now. However, this should require no modification whatsoever. Everything should just run because all the code we wrote doesn't care if there's five bigrams or 228,000 bigrams and with everything, we should just work. So you see that this will just run. But now we are optimizing over the entire training set of all the bigrams. And you see now that we are decreasing very slightly. So actually, we can probably afford a larger learning rate. And probably afford even larger learning rate. Even 50 seems to work on this very, very simple example, right? So let me re-initialize and let's run 100 iterations. See what happens. Okay. We seem to be coming up to some pretty good losses here. 2.47. Let me run 100 more. What is the number that we expect, by the way, in the loss? We expect to get something around what we had originally, actually. So all the way back, if you remember in the beginning of this video, when we optimized just by counting, our loss was roughly 2.47 after we added smoothing. But before smoothing, we had roughly 2.45 loss. And so that's actually roughly the vicinity of what we expect to achieve. But before we achieved it by counting. And here we are. We're achieving roughly the same result, but with gradient based optimization. So we come to about 2.46, 2.45, etc. And that makes sense because fundamentally, we're not taking in any additional information. We're still just taking in the previous character and trying to predict the next one. But instead of doing it explicitly by counting and normalizing, we are doing it with gradient based learning. And it just so happens that the explicit approach happens to very well optimize the loss function without any need for gradient based optimization, because the setup for bigram language models is so straightforward and so simple, we can just afford to estimate those probabilities directly and maintain them in a table. But the gradient based approach is significantly more flexible. So we've actually gained a lot because what we can do now is we can expand this approach and complexify the neural net. So currently we're just taking a single character and feeding into a neural net. And the neural net is extremely simple, but we're about to iterate on this substantially. We're going to be taking multiple previous characters and we're going to be feeding them into increasingly more complex neural nets. But fundamentally, the output of the neural net will always just be logits. And those logits will go through the exact same transformation. We are going to take them through a softmax, calculate the loss function and the negative log likelihood, and do gradient based optimization. And so actually, as we complexify, the neural nets and work all the way up to transformers, none of this will really fundamentally change. None of this will fundamentally change. The only thing that will change is the way we do the forward pass, where we take in some previous characters and calculate logits for the next character in a sequence that will become more complex. And we'll use the same machinery to optimize it. And it's not obvious how we would have extended this bigram approach into a space where there are many more characters at the input, because eventually these tables would get way too large because there's way too many combinations of what previous characters could be. If you only have one previous character, we can just keep everything in a table that counts. But if you have the last 10 characters that are input, we can't actually keep everything in the table anymore. So this is fundamentally an unscalable approach. And the neural network approach is significantly more scalable. And it's something that actually we can improve on over time. So that's where we will be digging next. I wanted to point out two more things. Number one, I want you to notice that this X-ENG here, this is made up of one-hot vectors. And then those one-hot vectors are multiplied by this W matrix. And we think of this as multiple neurons being forwarded in a fully connected manner. But actually what's happening here is that, for example, if you have a one-hot vector here that has a one at, say, the fifth dimension, then because of the way the matrix multiplication works, multiplying that one-hot vector with W actually ends up plucking out the fifth row of W. Logits would become just the fifth row of W. And that's because of the way the matrix multiplication works. So that's actually what ends up happening. So but that's actually exactly what happened before, because remember all the way up here, we have a bigram, we took the first character and then that first character indexed into a row of this array here, and that row gave us the probability distribution for the next character. So the first character was used as a lookup into a matrix here to get the probability distribution. Well, that's actually exactly what's happening here, because we're taking the index, we're encoding it as one-hot and multiplying it by W. So logits literally becomes the appropriate row of W. And that gets just as before, exponentiated to create the counts and then normalized and becomes probability. So this W here is literally the same as this array here. But W, remember, is the log counts, not the counts. So it's more precise to say that W exponentiated, W dot exp, is this array. But this array was filled in by counting and by basically populating the counts of bigrams, whereas in the gradient-based framework, we initialize it randomly and then we let the loss guide us to arrive at the exact same array. So this array exactly here is basically the array W at the end of optimization, except we arrived at it piece by piece by following the loss. And that's why we also obtain the same loss function at the end. And the second note is if I come here, remember the smoothing where we added fake counts to our counts in order to smooth out and make more uniform the distributions of these probabilities. And that prevented us from assigning zero probability to to any one bigram. Now, if I increase the count here, what's happening to the probability? As I increase the count, probability becomes more and more uniform, right? Because these counts go only up to like 900 or whatever. So if I'm adding plus a million to every single number here, you can see how the row and its probability then when you divide is just going to become more and more close to exactly even probability, uniform distribution. It turns out that the gradient-based framework has an equivalent to smoothing. In particular, think through these W's here. Which we initialize randomly. We could also think about initializing W's to be zero. If all the entries of W are zero, then you'll see that logits will become all zero. And then exponentiating those logits becomes all one. And then the probabilities turn out to be exactly uniform. So basically, when W's are all equal to each other or say, especially zero, then the probabilities come out completely uniform. So trying to incentivize W to be near zero is basically equivalent to label smoothing. And the more you incentivize that in a loss function, the more smooth distribution you're going to achieve. So this brings us to something that's called regularization, where we can actually augment the loss function to have a small component that we call a regularization loss. In particular, what we're going to do is we can take W and we can, for example, square all of its entries. And then, we can, whoops, sorry about that. We can take all the entries of W and we can sum them. And because we're squaring, there will be no signs anymore. Negatives and positives all get squashed to be positive numbers. And then the way this works is you achieve zero loss if W is exactly or zero. But if W has non-zero numbers, you accumulate loss. And so we can actually take this and we can add it on here. So we can do something like loss plus W square dot sum. Or let's actually instead of sum, let's take a mean because otherwise the sum gets too large. So mean is like a little bit more manageable. And then we have a regularization loss here. Let's say 0.01 times or something like that. You can choose the regularization strength and then we can just optimize this. And now this optimization actually has two components. Not only is it trying to make all the probabilities work out, but in addition to that, there's an additional component that simultaneously tries to make all Ws be zero. Because if Ws are non-zero, you feel a loss. And so minimizing this, the only way to achieve that is for W to be zero. And so you can think of this as adding like a spring force or like a gravity force that pushes W to be zero. So W wants to be zero and the probabilities want to be uniform, but they also simultaneously want to match up your probabilities as indicated by the data. And so the strength of this regularization is exactly controlling the amount of counts that you add here. Adding a lot more counts here corresponds to increasing this number, because the more you increase it, the more this part of the loss function dominates this part. And the more these weights will be unable to grow, because as they grow, they accumulate way too much loss. And so if this is strong enough, then we are not able to overcome the force of this loss and we will never and basically everything will be uniform predictions. So I thought that's kind of cool. OK, and lastly, before we wrap up, I wanted to show you how you would sample from this neural net model. And I copy pasted the sampling code from before, where remember that we sampled five times. And all we did is we start at zero. We grabbed the current ix row of p and that was our probability row from which we sampled the next index and just accumulated that and break when zero. And running this gave us these results. I still have the p in memory, so this is fine. Now, this p doesn't come from the row of p. Instead, it comes from this neural net. First, we take ix and we encode it into a one hot row of xank. This xank multiplies our w, which really just plucks out the row of w corresponding to ix. Really, that's what's happening. And that gets our logits. And then we normalize those logits, exponentiate to get counts and then normalize to get the distribution. And then we can sample from the distribution. So if I run this, it's kind of anticlimactic or climatic, depending how you look at it. But we get the exact same result. And that's because this is the identical model. Not only does it achieve the same loss, but as I mentioned, these are identical models and this w is the log counts of what we've estimated before. But we came to this answer in a very different way and it's got a very different interpretation. But fundamentally, this is basically the same model and gives the same samples here. And so that's kind of cool. OK, so we've actually covered a lot of ground. We introduced the bigram character level language model. We saw how we can train the model, how we can sample from the model and how we can evaluate the quality of the model using the negative log likelihood loss. And then we actually trained the model in two completely different ways that actually get the same result and the same model. In the first way, we just counted up the frequency of all the bigrams and normalized. In the second way, we used the negative log likelihood loss as a guide to optimizing the counts matrix or the counts array so that the loss is minimized in a gradient based framework. And we saw that both of them give the same result. And that's it. Now, the second one of these, the gradient based framework is much more flexible. And right now, our neural network is super simple. We're taking a single previous character and we're taking it through a single linear layer to calculate the logits. This is about to complexify. So in the follow up videos, we're going to be taking more and more of these characters and we're going to be feeding them into a neural net. But this neural net will still output the exact same thing. The neural net will output logits. And these logits will still be normalized in the exact same way. And all the loss and everything else in the gradient based framework, everything stays identical. It's just that this neural net will now complexify all the way to transformers. So that's going to be pretty awesome and I'm looking forward to it. So for now, bye.", "segments": [{"id": 0, "seek": 0, "start": 0.24, "end": 6.4, "text": " hi everyone hope you're well and next up what i'd like to do is i'd like to build out make more like", "tokens": [50377, 4879, 1518, 1454, 291, 434, 731, 293, 958, 493, 437, 741, 1116, 411, 281, 360, 307, 741, 1116, 411, 281, 1322, 484, 652, 544, 411, 50685], "temperature": 0.0, "avg_logprob": -0.08740292706535858, "compression_ratio": 1.946341463414634, "no_speech_prob": 0.016368282958865166}, {"id": 1, "seek": 0, "start": 6.4, "end": 12.96, "text": " micrograd before it make more is a repository that i have on my github webpage you can look at it but", "tokens": [50685, 4532, 7165, 949, 309, 652, 544, 307, 257, 25841, 300, 741, 362, 322, 452, 290, 355, 836, 37852, 291, 393, 574, 412, 309, 457, 51013], "temperature": 0.0, "avg_logprob": -0.08740292706535858, "compression_ratio": 1.946341463414634, "no_speech_prob": 0.016368282958865166}, {"id": 2, "seek": 0, "start": 12.96, "end": 17.68, "text": " just like with micrograd i'm going to build it out step by step and i'm going to spell everything out", "tokens": [51013, 445, 411, 365, 4532, 7165, 741, 478, 516, 281, 1322, 309, 484, 1823, 538, 1823, 293, 741, 478, 516, 281, 9827, 1203, 484, 51249], "temperature": 0.0, "avg_logprob": -0.08740292706535858, "compression_ratio": 1.946341463414634, "no_speech_prob": 0.016368282958865166}, {"id": 3, "seek": 0, "start": 17.68, "end": 23.52, "text": " so we're going to build it out slowly and together now what is make more make more as the name", "tokens": [51249, 370, 321, 434, 516, 281, 1322, 309, 484, 5692, 293, 1214, 586, 437, 307, 652, 544, 652, 544, 382, 264, 1315, 51541], "temperature": 0.0, "avg_logprob": -0.08740292706535858, "compression_ratio": 1.946341463414634, "no_speech_prob": 0.016368282958865166}, {"id": 4, "seek": 2352, "start": 23.52, "end": 31.04, "text": " suggests makes more of things that you give it so here's an example names.txt is an example data set", "tokens": [50365, 13409, 1669, 544, 295, 721, 300, 291, 976, 309, 370, 510, 311, 364, 1365, 5288, 13, 83, 734, 307, 364, 1365, 1412, 992, 50741], "temperature": 0.0, "avg_logprob": -0.04745065386050215, "compression_ratio": 1.868421052631579, "no_speech_prob": 3.539200406521559e-05}, {"id": 5, "seek": 2352, "start": 31.04, "end": 38.4, "text": " to make more and when you look at names.txt you'll find that it's a very large data set of names so", "tokens": [50741, 281, 652, 544, 293, 562, 291, 574, 412, 5288, 13, 83, 734, 291, 603, 915, 300, 309, 311, 257, 588, 2416, 1412, 992, 295, 5288, 370, 51109], "temperature": 0.0, "avg_logprob": -0.04745065386050215, "compression_ratio": 1.868421052631579, "no_speech_prob": 3.539200406521559e-05}, {"id": 6, "seek": 2352, "start": 40.16, "end": 44.879999999999995, "text": " here's lots of different types of names in fact i believe there are 32 000 names that i've sort", "tokens": [51197, 510, 311, 3195, 295, 819, 3467, 295, 5288, 294, 1186, 741, 1697, 456, 366, 8858, 13711, 5288, 300, 741, 600, 1333, 51433], "temperature": 0.0, "avg_logprob": -0.04745065386050215, "compression_ratio": 1.868421052631579, "no_speech_prob": 3.539200406521559e-05}, {"id": 7, "seek": 2352, "start": 44.879999999999995, "end": 50.72, "text": " of found randomly on the government website and if you train make more on this data set", "tokens": [51433, 295, 1352, 16979, 322, 264, 2463, 3144, 293, 498, 291, 3847, 652, 544, 322, 341, 1412, 992, 51725], "temperature": 0.0, "avg_logprob": -0.04745065386050215, "compression_ratio": 1.868421052631579, "no_speech_prob": 3.539200406521559e-05}, {"id": 8, "seek": 2352, "start": 50.72, "end": 53.36, "text": " it will learn to make more of things like", "tokens": [51725, 309, 486, 1466, 281, 652, 544, 295, 721, 411, 51857], "temperature": 0.0, "avg_logprob": -0.04745065386050215, "compression_ratio": 1.868421052631579, "no_speech_prob": 3.539200406521559e-05}, {"id": 9, "seek": 5352, "start": 53.52, "end": 60.64, "text": " this and in particular in this case that will mean more things that sound name-like but are", "tokens": [50365, 341, 293, 294, 1729, 294, 341, 1389, 300, 486, 914, 544, 721, 300, 1626, 1315, 12, 4092, 457, 366, 50721], "temperature": 0.0, "avg_logprob": -0.0712992171851956, "compression_ratio": 1.8143459915611815, "no_speech_prob": 1.971418532775715e-05}, {"id": 10, "seek": 5352, "start": 60.64, "end": 65.2, "text": " actually unique names and maybe if you have a baby and you're trying to assign a name maybe", "tokens": [50721, 767, 3845, 5288, 293, 1310, 498, 291, 362, 257, 3186, 293, 291, 434, 1382, 281, 6269, 257, 1315, 1310, 50949], "temperature": 0.0, "avg_logprob": -0.0712992171851956, "compression_ratio": 1.8143459915611815, "no_speech_prob": 1.971418532775715e-05}, {"id": 11, "seek": 5352, "start": 65.2, "end": 70.08, "text": " you're looking for a cool new sounding unique name make more might help you so here are some", "tokens": [50949, 291, 434, 1237, 337, 257, 1627, 777, 24931, 3845, 1315, 652, 544, 1062, 854, 291, 370, 510, 366, 512, 51193], "temperature": 0.0, "avg_logprob": -0.0712992171851956, "compression_ratio": 1.8143459915611815, "no_speech_prob": 1.971418532775715e-05}, {"id": 12, "seek": 5352, "start": 70.08, "end": 77.2, "text": " example generations from the neural network once we train it on our data set so here's some example", "tokens": [51193, 1365, 10593, 490, 264, 18161, 3209, 1564, 321, 3847, 309, 322, 527, 1412, 992, 370, 510, 311, 512, 1365, 51549], "temperature": 0.0, "avg_logprob": -0.0712992171851956, "compression_ratio": 1.8143459915611815, "no_speech_prob": 1.971418532775715e-05}, {"id": 13, "seek": 5352, "start": 77.76, "end": 82.24000000000001, "text": " unique names that it will generate don't tell i wrote", "tokens": [51577, 3845, 5288, 300, 309, 486, 8460, 500, 380, 980, 741, 4114, 51801], "temperature": 0.0, "avg_logprob": -0.0712992171851956, "compression_ratio": 1.8143459915611815, "no_speech_prob": 1.971418532775715e-05}, {"id": 14, "seek": 8352, "start": 83.52, "end": 89.19999999999999, "text": " zendy and so on and so all these sort of sound name-like but they're not of course names", "tokens": [50365, 710, 18642, 293, 370, 322, 293, 370, 439, 613, 1333, 295, 1626, 1315, 12, 4092, 457, 436, 434, 406, 295, 1164, 5288, 50649], "temperature": 0.0, "avg_logprob": -0.04440723474209125, "compression_ratio": 1.8771186440677967, "no_speech_prob": 0.00018525842460803688}, {"id": 15, "seek": 8352, "start": 90.64, "end": 94.72, "text": " so under the hood make more is a character level language model", "tokens": [50721, 370, 833, 264, 13376, 652, 544, 307, 257, 2517, 1496, 2856, 2316, 50925], "temperature": 0.0, "avg_logprob": -0.04440723474209125, "compression_ratio": 1.8771186440677967, "no_speech_prob": 0.00018525842460803688}, {"id": 16, "seek": 8352, "start": 94.72, "end": 100.32, "text": " so what that means is that it is treating every single line here as an example and within each", "tokens": [50925, 370, 437, 300, 1355, 307, 300, 309, 307, 15083, 633, 2167, 1622, 510, 382, 364, 1365, 293, 1951, 1184, 51205], "temperature": 0.0, "avg_logprob": -0.04440723474209125, "compression_ratio": 1.8771186440677967, "no_speech_prob": 0.00018525842460803688}, {"id": 17, "seek": 8352, "start": 100.32, "end": 108.88, "text": " example it's treating them all as sequences of individual characters so r e e s e is this example", "tokens": [51205, 1365, 309, 311, 15083, 552, 439, 382, 22978, 295, 2609, 4342, 370, 367, 308, 308, 262, 308, 307, 341, 1365, 51633], "temperature": 0.0, "avg_logprob": -0.04440723474209125, "compression_ratio": 1.8771186440677967, "no_speech_prob": 0.00018525842460803688}, {"id": 18, "seek": 8352, "start": 108.88, "end": 113.19999999999999, "text": " and that's the sequence of characters and that's the level on which we are building out make more", "tokens": [51633, 293, 300, 311, 264, 8310, 295, 4342, 293, 300, 311, 264, 1496, 322, 597, 321, 366, 2390, 484, 652, 544, 51849], "temperature": 0.0, "avg_logprob": -0.04440723474209125, "compression_ratio": 1.8771186440677967, "no_speech_prob": 0.00018525842460803688}, {"id": 19, "seek": 11352, "start": 113.83999999999999, "end": 117.52, "text": " and what it means to be a character level language model then is that it's just", "tokens": [50381, 293, 437, 309, 1355, 281, 312, 257, 2517, 1496, 2856, 2316, 550, 307, 300, 309, 311, 445, 50565], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 20, "seek": 11352, "start": 118.16, "end": 121.92, "text": " sort of modeling those sequences of characters and it knows how to predict the next character", "tokens": [50597, 1333, 295, 15983, 729, 22978, 295, 4342, 293, 309, 3255, 577, 281, 6069, 264, 958, 2517, 50785], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 21, "seek": 11352, "start": 121.92, "end": 127.11999999999999, "text": " in the sequence now we're actually going to implement a large number of character level", "tokens": [50785, 294, 264, 8310, 586, 321, 434, 767, 516, 281, 4445, 257, 2416, 1230, 295, 2517, 1496, 51045], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 22, "seek": 11352, "start": 127.11999999999999, "end": 131.2, "text": " language models in terms of the neural networks that are involved in predicting the next character", "tokens": [51045, 2856, 5245, 294, 2115, 295, 264, 18161, 9590, 300, 366, 3288, 294, 32884, 264, 958, 2517, 51249], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 23, "seek": 11352, "start": 131.2, "end": 137.12, "text": " in a sequence so very simple bigram and bag of root models multilevel perceptrons recurring", "tokens": [51249, 294, 257, 8310, 370, 588, 2199, 955, 2356, 293, 3411, 295, 5593, 5245, 2120, 794, 779, 43276, 13270, 32279, 51545], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 24, "seek": 11352, "start": 137.12, "end": 143.2, "text": " neural networks all the way to modern transformers in fact the transformer that we will build will be", "tokens": [51545, 18161, 9590, 439, 264, 636, 281, 4363, 4088, 433, 294, 1186, 264, 31782, 300, 321, 486, 1322, 486, 312, 51849], "temperature": 0.0, "avg_logprob": -0.053419955845536854, "compression_ratio": 2.021897810218978, "no_speech_prob": 0.00025454553542658687}, {"id": 25, "seek": 14352, "start": 144.48000000000002, "end": 150.0, "text": " basically the equivalent transformer to gpt2 if you have heard of gpt so that's kind of a big", "tokens": [50413, 1936, 264, 10344, 31782, 281, 290, 662, 17, 498, 291, 362, 2198, 295, 290, 662, 370, 300, 311, 733, 295, 257, 955, 50689], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 26, "seek": 14352, "start": 150.0, "end": 154.8, "text": " deal it's a modern network and by the end of this series you will actually understand how that works", "tokens": [50689, 2028, 309, 311, 257, 4363, 3209, 293, 538, 264, 917, 295, 341, 2638, 291, 486, 767, 1223, 577, 300, 1985, 50929], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 27, "seek": 14352, "start": 155.44, "end": 161.44, "text": " on the level of characters now to give you a sense of the extensions here after characters", "tokens": [50961, 322, 264, 1496, 295, 4342, 586, 281, 976, 291, 257, 2020, 295, 264, 25129, 510, 934, 4342, 51261], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 28, "seek": 14352, "start": 161.44, "end": 165.20000000000002, "text": " we will probably spend some time on the word level so that we can generate documents of", "tokens": [51261, 321, 486, 1391, 3496, 512, 565, 322, 264, 1349, 1496, 370, 300, 321, 393, 8460, 8512, 295, 51449], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 29, "seek": 14352, "start": 165.20000000000002, "end": 170.88, "text": " words not just little you know segments of characters but we can generate entire large much", "tokens": [51449, 2283, 406, 445, 707, 291, 458, 19904, 295, 4342, 457, 321, 393, 8460, 2302, 2416, 709, 51733], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 30, "seek": 14352, "start": 170.88, "end": 172.0, "text": " larger documents", "tokens": [51733, 4833, 8512, 51789], "temperature": 1.0, "avg_logprob": -0.3329343795776367, "compression_ratio": 1.8754863813229572, "no_speech_prob": 0.0011160922003909945}, {"id": 31, "seek": 17200, "start": 172.0, "end": 178.72, "text": " go into images and image text networks such as DALI stable diffusion and so on but for now we", "tokens": [50365, 352, 666, 5267, 293, 3256, 2487, 9590, 1270, 382, 413, 11566, 8351, 25242, 293, 370, 322, 457, 337, 586, 321, 50701], "temperature": 0.0, "avg_logprob": -0.10877910573431786, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010078515857458115}, {"id": 32, "seek": 17200, "start": 178.72, "end": 184.56, "text": " have to start here character level language modeling let's go so like before we are starting", "tokens": [50701, 362, 281, 722, 510, 2517, 1496, 2856, 15983, 718, 311, 352, 370, 411, 949, 321, 366, 2891, 50993], "temperature": 0.0, "avg_logprob": -0.10877910573431786, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010078515857458115}, {"id": 33, "seek": 17200, "start": 184.56, "end": 189.28, "text": " with a completely blank Jupyter notebook page the first thing is i would like to basically load up", "tokens": [50993, 365, 257, 2584, 8247, 22125, 88, 391, 21060, 3028, 264, 700, 551, 307, 741, 576, 411, 281, 1936, 3677, 493, 51229], "temperature": 0.0, "avg_logprob": -0.10877910573431786, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010078515857458115}, {"id": 34, "seek": 17200, "start": 189.28, "end": 196.88, "text": " the data set names.txt so we're going to open up names.txt for reading and we're going to read in", "tokens": [51229, 264, 1412, 992, 5288, 13, 83, 734, 370, 321, 434, 516, 281, 1269, 493, 5288, 13, 83, 734, 337, 3760, 293, 321, 434, 516, 281, 1401, 294, 51609], "temperature": 0.0, "avg_logprob": -0.10877910573431786, "compression_ratio": 1.6228813559322033, "no_speech_prob": 0.010078515857458115}, {"id": 35, "seek": 19688, "start": 196.88, "end": 202.64, "text": " everything into a massive string and then because it's a massive string we only like the individual", "tokens": [50365, 1203, 666, 257, 5994, 6798, 293, 550, 570, 309, 311, 257, 5994, 6798, 321, 787, 411, 264, 2609, 50653], "temperature": 0.0, "avg_logprob": -0.06274031675778903, "compression_ratio": 1.8552036199095023, "no_speech_prob": 2.0532503185677342e-05}, {"id": 36, "seek": 19688, "start": 202.64, "end": 209.28, "text": " words and put them in the list so let's call split lines on that string to get all of our words as a", "tokens": [50653, 2283, 293, 829, 552, 294, 264, 1329, 370, 718, 311, 818, 7472, 3876, 322, 300, 6798, 281, 483, 439, 295, 527, 2283, 382, 257, 50985], "temperature": 0.0, "avg_logprob": -0.06274031675778903, "compression_ratio": 1.8552036199095023, "no_speech_prob": 2.0532503185677342e-05}, {"id": 37, "seek": 19688, "start": 209.28, "end": 217.04, "text": " python list of strings so basically we can look at for example the first 10 words and we have that", "tokens": [50985, 38797, 1329, 295, 13985, 370, 1936, 321, 393, 574, 412, 337, 1365, 264, 700, 1266, 2283, 293, 321, 362, 300, 51373], "temperature": 0.0, "avg_logprob": -0.06274031675778903, "compression_ratio": 1.8552036199095023, "no_speech_prob": 2.0532503185677342e-05}, {"id": 38, "seek": 19688, "start": 217.04, "end": 225.6, "text": " it's a list of emma olivia ava and so on and if we look at the top of the page here that is indeed", "tokens": [51373, 309, 311, 257, 1329, 295, 846, 1696, 2545, 18503, 1305, 64, 293, 370, 322, 293, 498, 321, 574, 412, 264, 1192, 295, 264, 3028, 510, 300, 307, 6451, 51801], "temperature": 0.0, "avg_logprob": -0.06274031675778903, "compression_ratio": 1.8552036199095023, "no_speech_prob": 2.0532503185677342e-05}, {"id": 39, "seek": 19688, "start": 225.6, "end": 226.16, "text": " what we see", "tokens": [51801, 437, 321, 536, 51829], "temperature": 0.0, "avg_logprob": -0.06274031675778903, "compression_ratio": 1.8552036199095023, "no_speech_prob": 2.0532503185677342e-05}, {"id": 40, "seek": 22688, "start": 227.04, "end": 233.92, "text": " um so that's good this list actually makes me feel that this is probably sorted by frequency", "tokens": [50373, 1105, 370, 300, 311, 665, 341, 1329, 767, 1669, 385, 841, 300, 341, 307, 1391, 25462, 538, 7893, 50717], "temperature": 0.0, "avg_logprob": -0.05360963443915049, "compression_ratio": 1.7445887445887447, "no_speech_prob": 8.344254456460476e-05}, {"id": 41, "seek": 22688, "start": 235.6, "end": 241.04, "text": " but okay so these are the words now we'd like to actually like learn a little bit more about this", "tokens": [50801, 457, 1392, 370, 613, 366, 264, 2283, 586, 321, 1116, 411, 281, 767, 411, 1466, 257, 707, 857, 544, 466, 341, 51073], "temperature": 0.0, "avg_logprob": -0.05360963443915049, "compression_ratio": 1.7445887445887447, "no_speech_prob": 8.344254456460476e-05}, {"id": 42, "seek": 22688, "start": 241.04, "end": 246.88, "text": " data set let's look at the total number of words we expect this to be roughly 32 000 and then what", "tokens": [51073, 1412, 992, 718, 311, 574, 412, 264, 3217, 1230, 295, 2283, 321, 2066, 341, 281, 312, 9810, 8858, 13711, 293, 550, 437, 51365], "temperature": 0.0, "avg_logprob": -0.05360963443915049, "compression_ratio": 1.7445887445887447, "no_speech_prob": 8.344254456460476e-05}, {"id": 43, "seek": 22688, "start": 246.88, "end": 255.44, "text": " is the for example shortest word so min of length of each word for w in words so the shortest word", "tokens": [51365, 307, 264, 337, 1365, 31875, 1349, 370, 923, 295, 4641, 295, 1184, 1349, 337, 261, 294, 2283, 370, 264, 31875, 1349, 51793], "temperature": 0.0, "avg_logprob": -0.05360963443915049, "compression_ratio": 1.7445887445887447, "no_speech_prob": 8.344254456460476e-05}, {"id": 44, "seek": 22688, "start": 255.44, "end": 256.4, "text": " will be length", "tokens": [51793, 486, 312, 4641, 51841], "temperature": 0.0, "avg_logprob": -0.05360963443915049, "compression_ratio": 1.7445887445887447, "no_speech_prob": 8.344254456460476e-05}, {"id": 45, "seek": 25688, "start": 257.04, "end": 264.0, "text": " two and max of one w for w in words so the longest word will be 15 characters", "tokens": [50373, 732, 293, 11469, 295, 472, 261, 337, 261, 294, 2283, 370, 264, 15438, 1349, 486, 312, 2119, 4342, 50721], "temperature": 0.0, "avg_logprob": -0.0743277559475023, "compression_ratio": 1.7786561264822134, "no_speech_prob": 0.00044896930921822786}, {"id": 46, "seek": 25688, "start": 264.56, "end": 269.04, "text": " so let's now think through our very first language model as i mentioned a character level language", "tokens": [50749, 370, 718, 311, 586, 519, 807, 527, 588, 700, 2856, 2316, 382, 741, 2835, 257, 2517, 1496, 2856, 50973], "temperature": 0.0, "avg_logprob": -0.0743277559475023, "compression_ratio": 1.7786561264822134, "no_speech_prob": 0.00044896930921822786}, {"id": 47, "seek": 25688, "start": 269.04, "end": 274.64, "text": " model is predicting the next character in a sequence given already some concrete sequence", "tokens": [50973, 2316, 307, 32884, 264, 958, 2517, 294, 257, 8310, 2212, 1217, 512, 9859, 8310, 51253], "temperature": 0.0, "avg_logprob": -0.0743277559475023, "compression_ratio": 1.7786561264822134, "no_speech_prob": 0.00044896930921822786}, {"id": 48, "seek": 25688, "start": 274.64, "end": 279.44, "text": " of characters before it now what we have to realize here is that every single word here", "tokens": [51253, 295, 4342, 949, 309, 586, 437, 321, 362, 281, 4325, 510, 307, 300, 633, 2167, 1349, 510, 51493], "temperature": 0.0, "avg_logprob": -0.0743277559475023, "compression_ratio": 1.7786561264822134, "no_speech_prob": 0.00044896930921822786}, {"id": 49, "seek": 25688, "start": 279.44, "end": 286.56, "text": " like isabella is actually quite a few examples packed in to that single word because what is an", "tokens": [51493, 411, 307, 455, 9885, 307, 767, 1596, 257, 1326, 5110, 13265, 294, 281, 300, 2167, 1349, 570, 437, 307, 364, 51849], "temperature": 0.0, "avg_logprob": -0.0743277559475023, "compression_ratio": 1.7786561264822134, "no_speech_prob": 0.00044896930921822786}, {"id": 50, "seek": 28688, "start": 286.88, "end": 292.0, "text": " instance of a word like isabella in the data set telling us really it's saying that the character", "tokens": [50365, 5197, 295, 257, 1349, 411, 307, 455, 9885, 294, 264, 1412, 992, 3585, 505, 534, 309, 311, 1566, 300, 264, 2517, 50621], "temperature": 0.0, "avg_logprob": -0.10649811137806285, "compression_ratio": 2.0876288659793816, "no_speech_prob": 0.0007484048255719244}, {"id": 51, "seek": 28688, "start": 292.0, "end": 300.8, "text": " i is a very likely character to come first in the sequence of a name the character s is likely to", "tokens": [50621, 741, 307, 257, 588, 3700, 2517, 281, 808, 700, 294, 264, 8310, 295, 257, 1315, 264, 2517, 262, 307, 3700, 281, 51061], "temperature": 0.0, "avg_logprob": -0.10649811137806285, "compression_ratio": 2.0876288659793816, "no_speech_prob": 0.0007484048255719244}, {"id": 52, "seek": 28688, "start": 300.8, "end": 309.6, "text": " come after i the character a is likely to come after is the character b is very likely to come", "tokens": [51061, 808, 934, 741, 264, 2517, 257, 307, 3700, 281, 808, 934, 307, 264, 2517, 272, 307, 588, 3700, 281, 808, 51501], "temperature": 0.0, "avg_logprob": -0.10649811137806285, "compression_ratio": 2.0876288659793816, "no_speech_prob": 0.0007484048255719244}, {"id": 53, "seek": 28688, "start": 309.6, "end": 316.15999999999997, "text": " after isa and so on all the way to a following as a bell and then there's one more example actually", "tokens": [51501, 934, 307, 64, 293, 370, 322, 439, 264, 636, 281, 257, 3480, 382, 257, 4549, 293, 550, 456, 311, 472, 544, 1365, 767, 51829], "temperature": 0.0, "avg_logprob": -0.10649811137806285, "compression_ratio": 2.0876288659793816, "no_speech_prob": 0.0007484048255719244}, {"id": 54, "seek": 28688, "start": 316.15999999999997, "end": 316.8, "text": " packed in here", "tokens": [51829, 13265, 294, 510, 51861], "temperature": 0.0, "avg_logprob": -0.10649811137806285, "compression_ratio": 2.0876288659793816, "no_speech_prob": 0.0007484048255719244}, {"id": 55, "seek": 31688, "start": 317.28, "end": 325.04, "text": " and that is that after there's isabella the word is very likely to end so that's one more sort of", "tokens": [50385, 293, 300, 307, 300, 934, 456, 311, 307, 455, 9885, 264, 1349, 307, 588, 3700, 281, 917, 370, 300, 311, 472, 544, 1333, 295, 50773], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 56, "seek": 31688, "start": 325.04, "end": 330.71999999999997, "text": " explicit piece of information that we have here that we have to be careful with and so there's", "tokens": [50773, 13691, 2522, 295, 1589, 300, 321, 362, 510, 300, 321, 362, 281, 312, 5026, 365, 293, 370, 456, 311, 51057], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 57, "seek": 31688, "start": 330.71999999999997, "end": 335.04, "text": " a lot packed into a single individual word in terms of the statistical structure of what's", "tokens": [51057, 257, 688, 13265, 666, 257, 2167, 2609, 1349, 294, 2115, 295, 264, 22820, 3877, 295, 437, 311, 51273], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 58, "seek": 31688, "start": 335.04, "end": 339.6, "text": " likely to follow in these character sequences and then of course we don't have just an individual", "tokens": [51273, 3700, 281, 1524, 294, 613, 2517, 22978, 293, 550, 295, 1164, 321, 500, 380, 362, 445, 364, 2609, 51501], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 59, "seek": 31688, "start": 339.6, "end": 343.84, "text": " word we actually have 32 000 of these and so there's a lot of structure here to model", "tokens": [51501, 1349, 321, 767, 362, 8858, 13711, 295, 613, 293, 370, 456, 311, 257, 688, 295, 3877, 510, 281, 2316, 51713], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 60, "seek": 31688, "start": 344.8, "end": 346.56, "text": " now in the beginning what i'd like to start with", "tokens": [51761, 586, 294, 264, 2863, 437, 741, 1116, 411, 281, 722, 365, 51849], "temperature": 0.6000000000000001, "avg_logprob": -0.04299628439028401, "compression_ratio": 1.89010989010989, "no_speech_prob": 0.0005130278295837343}, {"id": 61, "seek": 34688, "start": 346.88, "end": 349.92, "text": " is I'd like to start with building a bigram language model.", "tokens": [50365, 307, 286, 1116, 411, 281, 722, 365, 2390, 257, 955, 2356, 2856, 2316, 13, 50517], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 62, "seek": 34688, "start": 351.06, "end": 352.65999999999997, "text": " Now, in a bigram language model,", "tokens": [50574, 823, 11, 294, 257, 955, 2356, 2856, 2316, 11, 50654], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 63, "seek": 34688, "start": 352.86, "end": 356.0, "text": " we're always working with just two characters at a time.", "tokens": [50664, 321, 434, 1009, 1364, 365, 445, 732, 4342, 412, 257, 565, 13, 50821], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 64, "seek": 34688, "start": 356.56, "end": 360.02, "text": " So we're only looking at one character that we are given,", "tokens": [50849, 407, 321, 434, 787, 1237, 412, 472, 2517, 300, 321, 366, 2212, 11, 51022], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 65, "seek": 34688, "start": 360.42, "end": 362.96, "text": " and we're trying to predict the next character in the sequence.", "tokens": [51042, 293, 321, 434, 1382, 281, 6069, 264, 958, 2517, 294, 264, 8310, 13, 51169], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 66, "seek": 34688, "start": 363.84, "end": 367.0, "text": " So what characters are likely to follow R,", "tokens": [51213, 407, 437, 4342, 366, 3700, 281, 1524, 497, 11, 51371], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 67, "seek": 34688, "start": 367.36, "end": 369.7, "text": " what characters are likely to follow A, and so on.", "tokens": [51389, 437, 4342, 366, 3700, 281, 1524, 316, 11, 293, 370, 322, 13, 51506], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 68, "seek": 34688, "start": 369.74, "end": 372.3, "text": " And we're just modeling that kind of a little local structure.", "tokens": [51508, 400, 321, 434, 445, 15983, 300, 733, 295, 257, 707, 2654, 3877, 13, 51636], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 69, "seek": 34688, "start": 372.86, "end": 376.52, "text": " And we're forgetting the fact that we may have a lot more information", "tokens": [51664, 400, 321, 434, 25428, 264, 1186, 300, 321, 815, 362, 257, 688, 544, 1589, 51847], "temperature": 0.0, "avg_logprob": -0.15722490650738857, "compression_ratio": 1.900763358778626, "no_speech_prob": 0.014800249598920345}, {"id": 70, "seek": 37652, "start": 376.52, "end": 379.84, "text": " if we're always just looking at the previous character to predict the next one.", "tokens": [50365, 498, 321, 434, 1009, 445, 1237, 412, 264, 3894, 2517, 281, 6069, 264, 958, 472, 13, 50531], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 71, "seek": 37652, "start": 380.12, "end": 381.97999999999996, "text": " So it's a very simple and weak language model,", "tokens": [50545, 407, 309, 311, 257, 588, 2199, 293, 5336, 2856, 2316, 11, 50638], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 72, "seek": 37652, "start": 382.2, "end": 383.47999999999996, "text": " but I think it's a great place to start.", "tokens": [50649, 457, 286, 519, 309, 311, 257, 869, 1081, 281, 722, 13, 50713], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 73, "seek": 37652, "start": 384.03999999999996, "end": 387.03999999999996, "text": " So now let's begin by looking at these bigrams in our data set", "tokens": [50741, 407, 586, 718, 311, 1841, 538, 1237, 412, 613, 955, 2356, 82, 294, 527, 1412, 992, 50891], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 74, "seek": 37652, "start": 387.03999999999996, "end": 387.88, "text": " and what they look like.", "tokens": [50891, 293, 437, 436, 574, 411, 13, 50933], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 75, "seek": 37652, "start": 387.97999999999996, "end": 390.34, "text": " And these bigrams, again, are just two characters in a row.", "tokens": [50938, 400, 613, 955, 2356, 82, 11, 797, 11, 366, 445, 732, 4342, 294, 257, 5386, 13, 51056], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 76, "seek": 37652, "start": 390.96, "end": 395.5, "text": " So for W in words, each W here is an individual word, a string.", "tokens": [51087, 407, 337, 343, 294, 2283, 11, 1184, 343, 510, 307, 364, 2609, 1349, 11, 257, 6798, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 77, "seek": 37652, "start": 396.09999999999997, "end": 403.06, "text": " We want to iterate this word with consecutive characters.", "tokens": [51344, 492, 528, 281, 44497, 341, 1349, 365, 30497, 4342, 13, 51692], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 78, "seek": 37652, "start": 403.7, "end": 406.29999999999995, "text": " So two characters at a time, sliding it through the word.", "tokens": [51724, 407, 732, 4342, 412, 257, 565, 11, 21169, 309, 807, 264, 1349, 13, 51854], "temperature": 0.0, "avg_logprob": -0.1467394510904948, "compression_ratio": 1.7615658362989324, "no_speech_prob": 6.172908342705341e-06}, {"id": 79, "seek": 40652, "start": 406.52, "end": 410.88, "text": " Now, an interesting, nice way, cute way to do this in Python, by the way,", "tokens": [50365, 823, 11, 364, 1880, 11, 1481, 636, 11, 4052, 636, 281, 360, 341, 294, 15329, 11, 538, 264, 636, 11, 50583], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 80, "seek": 40652, "start": 411.08, "end": 412.52, "text": " is doing something like this.", "tokens": [50593, 307, 884, 746, 411, 341, 13, 50665], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 81, "seek": 40652, "start": 412.9, "end": 418.14, "text": " For character1, character2, in, zip, off, W, and W at 1.", "tokens": [50684, 1171, 2517, 16, 11, 2517, 17, 11, 294, 11, 20730, 11, 766, 11, 343, 11, 293, 343, 412, 502, 13, 50946], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 82, "seek": 40652, "start": 419.85999999999996, "end": 420.56, "text": " One column.", "tokens": [51032, 1485, 7738, 13, 51067], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 83, "seek": 40652, "start": 421.71999999999997, "end": 423.96, "text": " Print, character1, character2.", "tokens": [51125, 34439, 11, 2517, 16, 11, 2517, 17, 13, 51237], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 84, "seek": 40652, "start": 424.62, "end": 425.74, "text": " And let's not do all the words.", "tokens": [51270, 400, 718, 311, 406, 360, 439, 264, 2283, 13, 51326], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 85, "seek": 40652, "start": 425.84, "end": 427.18, "text": " Let's just do the first three words.", "tokens": [51331, 961, 311, 445, 360, 264, 700, 1045, 2283, 13, 51398], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 86, "seek": 40652, "start": 427.38, "end": 429.38, "text": " And I'm going to show you in a second how this works.", "tokens": [51408, 400, 286, 478, 516, 281, 855, 291, 294, 257, 1150, 577, 341, 1985, 13, 51508], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 87, "seek": 40652, "start": 429.97999999999996, "end": 433.96, "text": " But for now, basically, as an example, let's just do the very first word alone, MR.", "tokens": [51538, 583, 337, 586, 11, 1936, 11, 382, 364, 1365, 11, 718, 311, 445, 360, 264, 588, 700, 1349, 3312, 11, 9808, 13, 51737], "temperature": 0.0, "avg_logprob": -0.1957560095168252, "compression_ratio": 1.64, "no_speech_prob": 0.0004648168687708676}, {"id": 88, "seek": 43396, "start": 433.96, "end": 440.21999999999997, "text": " You see how we have a M up, and this will just print EM, MM, MA.", "tokens": [50365, 509, 536, 577, 321, 362, 257, 376, 493, 11, 293, 341, 486, 445, 4482, 16237, 11, 34191, 11, 12191, 13, 50678], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 89, "seek": 43396, "start": 440.73999999999995, "end": 444.97999999999996, "text": " And the reason this works is because W is the string M up,", "tokens": [50704, 400, 264, 1778, 341, 1985, 307, 570, 343, 307, 264, 6798, 376, 493, 11, 50916], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 90, "seek": 43396, "start": 445.44, "end": 447.71999999999997, "text": " W at 1 column is the string MMA,", "tokens": [50939, 343, 412, 502, 7738, 307, 264, 6798, 48700, 11, 51053], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 91, "seek": 43396, "start": 448.5, "end": 453.08, "text": " and zip takes two iterators, and it pairs them up", "tokens": [51092, 293, 20730, 2516, 732, 17138, 3391, 11, 293, 309, 15494, 552, 493, 51321], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 92, "seek": 43396, "start": 453.08, "end": 456.76, "text": " and then creates an iterator over the tuples of their consecutive entries.", "tokens": [51321, 293, 550, 7829, 364, 17138, 1639, 670, 264, 2604, 2622, 295, 641, 30497, 23041, 13, 51505], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 93, "seek": 43396, "start": 457.4, "end": 460.12, "text": " And if any one of these lists is shorter than the other,", "tokens": [51537, 400, 498, 604, 472, 295, 613, 14511, 307, 11639, 813, 264, 661, 11, 51673], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 94, "seek": 43396, "start": 460.12, "end": 462.85999999999996, "text": " then it will just halt and return.", "tokens": [51673, 550, 309, 486, 445, 12479, 293, 2736, 13, 51810], "temperature": 0.0, "avg_logprob": -0.18871437500570423, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.00042214366840198636}, {"id": 95, "seek": 46286, "start": 462.86, "end": 469.34000000000003, "text": " So basically, that's why we return EM, MM, MM, MA.", "tokens": [50365, 407, 1936, 11, 300, 311, 983, 321, 2736, 16237, 11, 34191, 11, 34191, 11, 12191, 13, 50689], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 96, "seek": 46286, "start": 470.0, "end": 473.68, "text": " But then, because this iterator's second one here runs out of elements,", "tokens": [50722, 583, 550, 11, 570, 341, 17138, 1639, 311, 1150, 472, 510, 6676, 484, 295, 4959, 11, 50906], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 97, "seek": 46286, "start": 474.16, "end": 477.2, "text": " zip just ends, and that's why we only get these tuples.", "tokens": [50930, 20730, 445, 5314, 11, 293, 300, 311, 983, 321, 787, 483, 613, 2604, 2622, 13, 51082], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 98, "seek": 46286, "start": 477.78000000000003, "end": 478.44, "text": " So pretty cute.", "tokens": [51111, 407, 1238, 4052, 13, 51144], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 99, "seek": 46286, "start": 479.52000000000004, "end": 482.6, "text": " So these are the consecutive elements in the first word.", "tokens": [51198, 407, 613, 366, 264, 30497, 4959, 294, 264, 700, 1349, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 100, "seek": 46286, "start": 483.08000000000004, "end": 485.6, "text": " Now, we have to be careful because we actually have more information here", "tokens": [51376, 823, 11, 321, 362, 281, 312, 5026, 570, 321, 767, 362, 544, 1589, 510, 51502], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 101, "seek": 46286, "start": 485.6, "end": 487.76, "text": " than just these three examples.", "tokens": [51502, 813, 445, 613, 1045, 5110, 13, 51610], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 102, "seek": 46286, "start": 487.76, "end": 492.12, "text": " As I mentioned, we know that E is very likely to come first,", "tokens": [51610, 1018, 286, 2835, 11, 321, 458, 300, 462, 307, 588, 3700, 281, 808, 700, 11, 51828], "temperature": 0.0, "avg_logprob": -0.1364704349584747, "compression_ratio": 1.6456692913385826, "no_speech_prob": 0.00011954273213632405}, {"id": 103, "seek": 49286, "start": 492.86, "end": 495.08000000000004, "text": " but that A, in this case, is coming last.", "tokens": [50365, 457, 300, 316, 11, 294, 341, 1389, 11, 307, 1348, 1036, 13, 50476], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 104, "seek": 49286, "start": 496.0, "end": 498.08000000000004, "text": " So one way to do this is, basically,", "tokens": [50522, 407, 472, 636, 281, 360, 341, 307, 11, 1936, 11, 50626], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 105, "seek": 49286, "start": 498.08000000000004, "end": 502.64, "text": " we're going to create a special array here, all characters,", "tokens": [50626, 321, 434, 516, 281, 1884, 257, 2121, 10225, 510, 11, 439, 4342, 11, 50854], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 106, "seek": 49286, "start": 503.32, "end": 507.24, "text": " and we're going to hallucinate a special start token here.", "tokens": [50888, 293, 321, 434, 516, 281, 35212, 13923, 257, 2121, 722, 14862, 510, 13, 51084], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 107, "seek": 49286, "start": 508.76, "end": 511.98, "text": " I'm going to call it like, special start.", "tokens": [51160, 286, 478, 516, 281, 818, 309, 411, 11, 2121, 722, 13, 51321], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 108, "seek": 49286, "start": 512.78, "end": 517.44, "text": " This is a list of one element plus W,", "tokens": [51361, 639, 307, 257, 1329, 295, 472, 4478, 1804, 343, 11, 51594], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 109, "seek": 49286, "start": 518.0600000000001, "end": 520.52, "text": " and then plus a special end character.", "tokens": [51625, 293, 550, 1804, 257, 2121, 917, 2517, 13, 51748], "temperature": 0.8, "avg_logprob": -0.72754882484354, "compression_ratio": 1.726775956284153, "no_speech_prob": 0.0006185829406604171}, {"id": 110, "seek": 52052, "start": 520.52, "end": 525.3, "text": " And the reason I'm wrapping the list of w here is because w is a string, Emma.", "tokens": [50365, 400, 264, 1778, 286, 478, 21993, 264, 1329, 295, 261, 510, 307, 570, 261, 307, 257, 6798, 11, 17124, 13, 50604], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 111, "seek": 52052, "start": 525.78, "end": 529.78, "text": " List of w will just have the individual characters in the list.", "tokens": [50628, 17668, 295, 261, 486, 445, 362, 264, 2609, 4342, 294, 264, 1329, 13, 50828], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 112, "seek": 52052, "start": 530.56, "end": 536.84, "text": " And then doing this again now, but not iterating over w's, but over the characters,", "tokens": [50867, 400, 550, 884, 341, 797, 586, 11, 457, 406, 17138, 990, 670, 261, 311, 11, 457, 670, 264, 4342, 11, 51181], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 113, "seek": 52052, "start": 537.54, "end": 539.24, "text": " will give us something like this.", "tokens": [51216, 486, 976, 505, 746, 411, 341, 13, 51301], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 114, "seek": 52052, "start": 540.18, "end": 544.4399999999999, "text": " So e is likely, so this is a bigram of the start character and e,", "tokens": [51348, 407, 308, 307, 3700, 11, 370, 341, 307, 257, 955, 2356, 295, 264, 722, 2517, 293, 308, 11, 51561], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 115, "seek": 52052, "start": 544.64, "end": 548.34, "text": " and this is a bigram of the a and the special end character.", "tokens": [51571, 293, 341, 307, 257, 955, 2356, 295, 264, 257, 293, 264, 2121, 917, 2517, 13, 51756], "temperature": 0.0, "avg_logprob": -0.19617690327011536, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.09107459336519241}, {"id": 116, "seek": 54834, "start": 548.34, "end": 553.1600000000001, "text": " And now we can look at, for example, what this looks like for Olivia or Ava.", "tokens": [50365, 400, 586, 321, 393, 574, 412, 11, 337, 1365, 11, 437, 341, 1542, 411, 337, 26023, 420, 316, 2757, 13, 50606], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 117, "seek": 54834, "start": 554.4200000000001, "end": 557.7800000000001, "text": " And indeed, we can actually potentially do this for the entire dataset,", "tokens": [50669, 400, 6451, 11, 321, 393, 767, 7263, 360, 341, 337, 264, 2302, 28872, 11, 50837], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 118, "seek": 54834, "start": 558.14, "end": 559.1600000000001, "text": " but we won't print that.", "tokens": [50855, 457, 321, 1582, 380, 4482, 300, 13, 50906], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 119, "seek": 54834, "start": 559.22, "end": 560.02, "text": " That's going to be too much.", "tokens": [50909, 663, 311, 516, 281, 312, 886, 709, 13, 50949], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 120, "seek": 54834, "start": 560.8000000000001, "end": 564.12, "text": " But these are the individual character bigrams, and we can print them.", "tokens": [50988, 583, 613, 366, 264, 2609, 2517, 955, 2356, 82, 11, 293, 321, 393, 4482, 552, 13, 51154], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 121, "seek": 54834, "start": 565.0, "end": 569.44, "text": " Now, in order to learn the statistics about which characters are likely to follow other characters,", "tokens": [51198, 823, 11, 294, 1668, 281, 1466, 264, 12523, 466, 597, 4342, 366, 3700, 281, 1524, 661, 4342, 11, 51420], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 122, "seek": 54834, "start": 569.74, "end": 573.8000000000001, "text": " the simplest way in the bigram language models is to simply do it by counting.", "tokens": [51435, 264, 22811, 636, 294, 264, 955, 2356, 2856, 5245, 307, 281, 2935, 360, 309, 538, 13251, 13, 51638], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 123, "seek": 54834, "start": 574.22, "end": 578.32, "text": " So we're basically just going to count how often any one of these combinations", "tokens": [51659, 407, 321, 434, 1936, 445, 516, 281, 1207, 577, 2049, 604, 472, 295, 613, 21267, 51864], "temperature": 0.0, "avg_logprob": -0.11741059525568683, "compression_ratio": 1.707395498392283, "no_speech_prob": 7.775874837534502e-05}, {"id": 124, "seek": 57832, "start": 578.44, "end": 581.24, "text": " occurs in the training set in these words.", "tokens": [50371, 11843, 294, 264, 3097, 992, 294, 613, 2283, 13, 50511], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 125, "seek": 57832, "start": 581.7, "end": 585.32, "text": " So we're going to need some kind of a dictionary that's going to maintain some counts", "tokens": [50534, 407, 321, 434, 516, 281, 643, 512, 733, 295, 257, 25890, 300, 311, 516, 281, 6909, 512, 14893, 50715], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 126, "seek": 57832, "start": 585.32, "end": 586.94, "text": " for every one of these bigrams.", "tokens": [50715, 337, 633, 472, 295, 613, 955, 2356, 82, 13, 50796], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 127, "seek": 57832, "start": 586.94, "end": 591.94, "text": " So let's use a dictionary b, and this will map these bigrams.", "tokens": [50796, 407, 718, 311, 764, 257, 25890, 272, 11, 293, 341, 486, 4471, 613, 955, 2356, 82, 13, 51046], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 128, "seek": 57832, "start": 592.86, "end": 595.0600000000001, "text": " So bigram is a tuple of character1, character2.", "tokens": [51092, 407, 955, 2356, 307, 257, 2604, 781, 295, 2517, 16, 11, 2517, 17, 13, 51202], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 129, "seek": 57832, "start": 595.82, "end": 603.7, "text": " And then b at bigram will be b.get of bigram, which is basically the same as b at bigram.", "tokens": [51240, 400, 550, 272, 412, 955, 2356, 486, 312, 272, 13, 847, 295, 955, 2356, 11, 597, 307, 1936, 264, 912, 382, 272, 412, 955, 2356, 13, 51634], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 130, "seek": 57832, "start": 604.5200000000001, "end": 608.2800000000001, "text": " But in the case that bigram is not in the dictionary b,", "tokens": [51675, 583, 294, 264, 1389, 300, 955, 2356, 307, 406, 294, 264, 25890, 272, 11, 51863], "temperature": 0.0, "avg_logprob": -0.16330548583484086, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0005982316797599196}, {"id": 131, "seek": 60832, "start": 608.32, "end": 612.36, "text": " we would like to, by default, return a 0, plus 1.", "tokens": [50365, 321, 576, 411, 281, 11, 538, 7576, 11, 2736, 257, 1958, 11, 1804, 502, 13, 50567], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 132, "seek": 60832, "start": 612.9200000000001, "end": 617.5600000000001, "text": " So this will basically add up all the bigrams and count how often they occur.", "tokens": [50595, 407, 341, 486, 1936, 909, 493, 439, 264, 955, 2356, 82, 293, 1207, 577, 2049, 436, 5160, 13, 50827], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 133, "seek": 60832, "start": 618.1400000000001, "end": 619.22, "text": " Let's get rid of printing.", "tokens": [50856, 961, 311, 483, 3973, 295, 14699, 13, 50910], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 134, "seek": 60832, "start": 620.0, "end": 625.96, "text": " Or rather, let's keep the printing, and let's just inspect what b is in this case.", "tokens": [50949, 1610, 2831, 11, 718, 311, 1066, 264, 14699, 11, 293, 718, 311, 445, 15018, 437, 272, 307, 294, 341, 1389, 13, 51247], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 135, "seek": 60832, "start": 626.9000000000001, "end": 629.94, "text": " And we see that many bigrams occur just a single time.", "tokens": [51294, 400, 321, 536, 300, 867, 955, 2356, 82, 5160, 445, 257, 2167, 565, 13, 51446], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 136, "seek": 60832, "start": 630.22, "end": 632.3000000000001, "text": " This one allegedly occurred three times.", "tokens": [51460, 639, 472, 26794, 11068, 1045, 1413, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 137, "seek": 60832, "start": 633.1600000000001, "end": 637.3000000000001, "text": " So a was an ending character three times, and that's true for all of these words.", "tokens": [51607, 407, 257, 390, 364, 8121, 2517, 1045, 1413, 11, 293, 300, 311, 2074, 337, 439, 295, 613, 2283, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1711815728081597, "compression_ratio": 1.6468253968253967, "no_speech_prob": 0.0006857163389213383}, {"id": 138, "seek": 63730, "start": 637.3, "end": 640.66, "text": " All of Emma, Olivia, and Ava end with a.", "tokens": [50365, 1057, 295, 17124, 11, 26023, 11, 293, 316, 2757, 917, 365, 257, 13, 50533], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 139, "seek": 63730, "start": 641.76, "end": 644.06, "text": " So that's why this occurred three times.", "tokens": [50588, 407, 300, 311, 983, 341, 11068, 1045, 1413, 13, 50703], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 140, "seek": 63730, "start": 646.3399999999999, "end": 648.54, "text": " Now let's do it for all the words.", "tokens": [50817, 823, 718, 311, 360, 309, 337, 439, 264, 2283, 13, 50927], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 141, "seek": 63730, "start": 651.04, "end": 653.1999999999999, "text": " Oops, I should not have printed.", "tokens": [51052, 21726, 11, 286, 820, 406, 362, 13567, 13, 51160], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 142, "seek": 63730, "start": 654.8199999999999, "end": 656.0799999999999, "text": " I meant to erase that.", "tokens": [51241, 286, 4140, 281, 23525, 300, 13, 51304], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 143, "seek": 63730, "start": 656.74, "end": 657.8, "text": " Let's kill this.", "tokens": [51337, 961, 311, 1961, 341, 13, 51390], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 144, "seek": 63730, "start": 658.7199999999999, "end": 659.9599999999999, "text": " Let's just run.", "tokens": [51436, 961, 311, 445, 1190, 13, 51498], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 145, "seek": 63730, "start": 660.64, "end": 663.12, "text": " And now b will have the statistics of the entire dataset.", "tokens": [51532, 400, 586, 272, 486, 362, 264, 12523, 295, 264, 2302, 28872, 13, 51656], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 146, "seek": 63730, "start": 663.8599999999999, "end": 667.12, "text": " So these are the counts across all the words of the individual bigrams.", "tokens": [51693, 407, 613, 366, 264, 14893, 2108, 439, 264, 2283, 295, 264, 2609, 955, 2356, 82, 13, 51856], "temperature": 0.0, "avg_logprob": -0.19537423883826988, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.00012235839676577598}, {"id": 147, "seek": 66730, "start": 667.3, "end": 671.9399999999999, "text": " And we could, for example, look at some of the most common ones and least common ones.", "tokens": [50365, 400, 321, 727, 11, 337, 1365, 11, 574, 412, 512, 295, 264, 881, 2689, 2306, 293, 1935, 2689, 2306, 13, 50597], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 148, "seek": 66730, "start": 673.24, "end": 676.9599999999999, "text": " This kind of grows in Python, but the way to do this, the simplest way I like,", "tokens": [50662, 639, 733, 295, 13156, 294, 15329, 11, 457, 264, 636, 281, 360, 341, 11, 264, 22811, 636, 286, 411, 11, 50848], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 149, "seek": 66730, "start": 677.2199999999999, "end": 678.88, "text": " is we just use b.items.", "tokens": [50861, 307, 321, 445, 764, 272, 13, 270, 9097, 13, 50944], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 150, "seek": 66730, "start": 679.54, "end": 685.02, "text": " b.items returns the tuples of key value.", "tokens": [50977, 272, 13, 270, 9097, 11247, 264, 2604, 2622, 295, 2141, 2158, 13, 51251], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 151, "seek": 66730, "start": 685.3199999999999, "end": 690.02, "text": " And in this case, the keys are the character bigrams, and the values are the counts.", "tokens": [51266, 400, 294, 341, 1389, 11, 264, 9317, 366, 264, 2517, 955, 2356, 82, 11, 293, 264, 4190, 366, 264, 14893, 13, 51501], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 152, "seek": 66730, "start": 690.66, "end": 696.8199999999999, "text": " And so then what we want to do is we want to do sorted of this.", "tokens": [51533, 400, 370, 550, 437, 321, 528, 281, 360, 307, 321, 528, 281, 360, 25462, 295, 341, 13, 51841], "temperature": 0.0, "avg_logprob": -0.1864043644496373, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.007981890812516212}, {"id": 153, "seek": 69730, "start": 698.24, "end": 705.28, "text": " But by default, sort is on the first item of a tuple.", "tokens": [50412, 583, 538, 7576, 11, 1333, 307, 322, 264, 700, 3174, 295, 257, 2604, 781, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15405583632619757, "compression_ratio": 1.8941176470588235, "no_speech_prob": 0.018756423145532608}, {"id": 154, "seek": 69730, "start": 705.5799999999999, "end": 709.8399999999999, "text": " But we want to sort by the values, which are the second element of a tuple, that is the key value.", "tokens": [50779, 583, 321, 528, 281, 1333, 538, 264, 4190, 11, 597, 366, 264, 1150, 4478, 295, 257, 2604, 781, 11, 300, 307, 264, 2141, 2158, 13, 50992], "temperature": 0.0, "avg_logprob": -0.15405583632619757, "compression_ratio": 1.8941176470588235, "no_speech_prob": 0.018756423145532608}, {"id": 155, "seek": 69730, "start": 710.4599999999999, "end": 716.5, "text": " So we want to use the key equals lambda that takes the key value", "tokens": [51023, 407, 321, 528, 281, 764, 264, 2141, 6915, 13607, 300, 2516, 264, 2141, 2158, 51325], "temperature": 0.0, "avg_logprob": -0.15405583632619757, "compression_ratio": 1.8941176470588235, "no_speech_prob": 0.018756423145532608}, {"id": 156, "seek": 69730, "start": 716.5, "end": 723.62, "text": " and returns the key value at 1, not at 0, but at 1, which is the count.", "tokens": [51325, 293, 11247, 264, 2141, 2158, 412, 502, 11, 406, 412, 1958, 11, 457, 412, 502, 11, 597, 307, 264, 1207, 13, 51681], "temperature": 0.0, "avg_logprob": -0.15405583632619757, "compression_ratio": 1.8941176470588235, "no_speech_prob": 0.018756423145532608}, {"id": 157, "seek": 69730, "start": 723.62, "end": 725.9599999999999, "text": " So we want to sort by the count.", "tokens": [51681, 407, 321, 528, 281, 1333, 538, 264, 1207, 13, 51798], "temperature": 0.0, "avg_logprob": -0.15405583632619757, "compression_ratio": 1.8941176470588235, "no_speech_prob": 0.018756423145532608}, {"id": 158, "seek": 72730, "start": 727.3, "end": 728.5, "text": " Well, these elements.", "tokens": [50365, 1042, 11, 613, 4959, 13, 50425], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 159, "seek": 72730, "start": 730.1999999999999, "end": 731.9599999999999, "text": " And actually, we want it to go backwards.", "tokens": [50510, 400, 767, 11, 321, 528, 309, 281, 352, 12204, 13, 50598], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 160, "seek": 72730, "start": 732.8, "end": 737.5999999999999, "text": " So here what we have is the bigram QNR occurs only a single time.", "tokens": [50640, 407, 510, 437, 321, 362, 307, 264, 955, 2356, 1249, 45, 49, 11843, 787, 257, 2167, 565, 13, 50880], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 161, "seek": 72730, "start": 738.5999999999999, "end": 740.18, "text": " DZ occurred only a single time.", "tokens": [50930, 413, 57, 11068, 787, 257, 2167, 565, 13, 51009], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 162, "seek": 72730, "start": 740.62, "end": 745.9, "text": " And when we sort this the other way around, we're going to see the most likely bigrams.", "tokens": [51031, 400, 562, 321, 1333, 341, 264, 661, 636, 926, 11, 321, 434, 516, 281, 536, 264, 881, 3700, 955, 2356, 82, 13, 51295], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 163, "seek": 72730, "start": 746.24, "end": 751.42, "text": " So we see that N was very often an ending character, many, many times.", "tokens": [51312, 407, 321, 536, 300, 426, 390, 588, 2049, 364, 8121, 2517, 11, 867, 11, 867, 1413, 13, 51571], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 164, "seek": 72730, "start": 751.42, "end": 756.38, "text": " And apparently, N almost always follows an A, and that's a very likely combination as well.", "tokens": [51571, 400, 7970, 11, 426, 1920, 1009, 10002, 364, 316, 11, 293, 300, 311, 257, 588, 3700, 6562, 382, 731, 13, 51819], "temperature": 0.0, "avg_logprob": -0.16857336293096128, "compression_ratio": 1.6546184738955823, "no_speech_prob": 0.0005364232929423451}, {"id": 165, "seek": 75730, "start": 757.3, "end": 762.68, "text": " So this is kind of the individual counts that we achieve over the entirely.", "tokens": [50365, 407, 341, 307, 733, 295, 264, 2609, 14893, 300, 321, 4584, 670, 264, 7696, 13, 50634], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 166, "seek": 75730, "start": 762.8399999999999, "end": 769.04, "text": " Now it's actually going to be significantly more convenient for us to keep this information in one", "tokens": [50642, 823, 309, 311, 767, 516, 281, 312, 10591, 544, 10851, 337, 505, 281, 1066, 341, 1589, 294, 472, 50952], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 167, "seek": 75730, "start": 769.06, "end": 770.18, "text": " two-dimensional array", "tokens": [50953, 732, 12, 18759, 10225, 51009], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 168, "seek": 75730, "start": 772.7199999999999, "end": 779.3399999999999, "text": " So we're going to sort this information in two D array and the rose are going to be the", "tokens": [51136, 407, 321, 434, 516, 281, 1333, 341, 1589, 294, 732, 413, 10225, 293, 264, 10895, 366, 516, 281, 312, 264, 51467], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 169, "seek": 75730, "start": 779.3399999999999, "end": 784.0, "text": " first character of the Bank and the columns are going to be the second character,", "tokens": [51467, 700, 2517, 295, 264, 8915, 293, 264, 13766, 366, 516, 281, 312, 264, 1150, 2517, 11, 51700], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 170, "seek": 75730, "start": 784.0, "end": 786.5999999999999, "text": " and each entry in this two-dimensional array will tell us.", "tokens": [51700, 293, 1184, 8729, 294, 341, 732, 12, 18759, 10225, 486, 980, 505, 13, 51830], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 171, "seek": 75730, "start": 786.5999999999999, "end": 787.26, "text": " Um,", "tokens": [51830, 3301, 11, 51863], "temperature": 1.0, "avg_logprob": -1.161241971529447, "compression_ratio": 1.8412017167381973, "no_speech_prob": 0.0016288217157125473}, {"id": 172, "seek": 78726, "start": 787.26, "end": 793.42, "text": " us how often that first character follows the second character in the data set. So in particular", "tokens": [50365, 505, 577, 2049, 300, 700, 2517, 10002, 264, 1150, 2517, 294, 264, 1412, 992, 13, 407, 294, 1729, 50673], "temperature": 0.0, "avg_logprob": -0.06596875959827055, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.020374299958348274}, {"id": 173, "seek": 78726, "start": 793.42, "end": 799.54, "text": " the array representation that we're going to use or the library is that of PyTorch and PyTorch is", "tokens": [50673, 264, 10225, 10290, 300, 321, 434, 516, 281, 764, 420, 264, 6405, 307, 300, 295, 9953, 51, 284, 339, 293, 9953, 51, 284, 339, 307, 50979], "temperature": 0.0, "avg_logprob": -0.06596875959827055, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.020374299958348274}, {"id": 174, "seek": 78726, "start": 799.54, "end": 805.9, "text": " a deep learning neural network framework but part of it is also this torch.tensor which allows us", "tokens": [50979, 257, 2452, 2539, 18161, 3209, 8388, 457, 644, 295, 309, 307, 611, 341, 27822, 13, 83, 23153, 597, 4045, 505, 51297], "temperature": 0.0, "avg_logprob": -0.06596875959827055, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.020374299958348274}, {"id": 175, "seek": 78726, "start": 805.9, "end": 811.9399999999999, "text": " to create multi-dimensional arrays and manipulate them very efficiently. So let's import PyTorch", "tokens": [51297, 281, 1884, 4825, 12, 18759, 41011, 293, 20459, 552, 588, 19621, 13, 407, 718, 311, 974, 9953, 51, 284, 339, 51599], "temperature": 0.0, "avg_logprob": -0.06596875959827055, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.020374299958348274}, {"id": 176, "seek": 81194, "start": 811.94, "end": 819.72, "text": " which you can do by import torch and then we can create arrays. So let's create an array of zeros", "tokens": [50365, 597, 291, 393, 360, 538, 974, 27822, 293, 550, 321, 393, 1884, 41011, 13, 407, 718, 311, 1884, 364, 10225, 295, 35193, 50754], "temperature": 0.0, "avg_logprob": -0.11292374035543647, "compression_ratio": 1.9873949579831933, "no_speech_prob": 3.47210188920144e-05}, {"id": 177, "seek": 81194, "start": 819.72, "end": 830.0600000000001, "text": " and we give it a size of this array. Let's create a 3x5 array as an example and this is a 3x5 array", "tokens": [50754, 293, 321, 976, 309, 257, 2744, 295, 341, 10225, 13, 961, 311, 1884, 257, 805, 87, 20, 10225, 382, 364, 1365, 293, 341, 307, 257, 805, 87, 20, 10225, 51271], "temperature": 0.0, "avg_logprob": -0.11292374035543647, "compression_ratio": 1.9873949579831933, "no_speech_prob": 3.47210188920144e-05}, {"id": 178, "seek": 81194, "start": 830.0600000000001, "end": 837.0, "text": " of zeros and by default you'll notice a.d type which is short for data type is float 32. So these", "tokens": [51271, 295, 35193, 293, 538, 7576, 291, 603, 3449, 257, 13, 67, 2010, 597, 307, 2099, 337, 1412, 2010, 307, 15706, 8858, 13, 407, 613, 51618], "temperature": 0.0, "avg_logprob": -0.11292374035543647, "compression_ratio": 1.9873949579831933, "no_speech_prob": 3.47210188920144e-05}, {"id": 179, "seek": 81194, "start": 837.0, "end": 841.44, "text": " are single precision floating point numbers. Because we are going to represent counts", "tokens": [51618, 366, 2167, 18356, 12607, 935, 3547, 13, 1436, 321, 366, 516, 281, 2906, 14893, 51840], "temperature": 0.0, "avg_logprob": -0.11292374035543647, "compression_ratio": 1.9873949579831933, "no_speech_prob": 3.47210188920144e-05}, {"id": 180, "seek": 81194, "start": 841.44, "end": 841.9200000000001, "text": " we're going to use a single precision floating point number. So we're going to use a single", "tokens": [51840, 321, 434, 516, 281, 764, 257, 2167, 18356, 12607, 935, 1230, 13, 407, 321, 434, 516, 281, 764, 257, 2167, 51864], "temperature": 0.0, "avg_logprob": -0.11292374035543647, "compression_ratio": 1.9873949579831933, "no_speech_prob": 3.47210188920144e-05}, {"id": 181, "seek": 84192, "start": 841.92, "end": 848.66, "text": " precision floating point number. Let's actually use d type as torch.in32. So these are 32-bit", "tokens": [50365, 18356, 12607, 935, 1230, 13, 961, 311, 767, 764, 274, 2010, 382, 27822, 13, 259, 11440, 13, 407, 613, 366, 8858, 12, 5260, 50702], "temperature": 0.0, "avg_logprob": -0.12689510656862843, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.00015303892723750323}, {"id": 182, "seek": 84192, "start": 848.66, "end": 856.3, "text": " integers. So now you see that we have integer data inside this tensor. Now tensors allow us to really", "tokens": [50702, 41674, 13, 407, 586, 291, 536, 300, 321, 362, 24922, 1412, 1854, 341, 40863, 13, 823, 10688, 830, 2089, 505, 281, 534, 51084], "temperature": 0.0, "avg_logprob": -0.12689510656862843, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.00015303892723750323}, {"id": 183, "seek": 84192, "start": 856.3, "end": 862.0999999999999, "text": " manipulate all the individual entries and do it very efficiently. So for example if we want to", "tokens": [51084, 20459, 439, 264, 2609, 23041, 293, 360, 309, 588, 19621, 13, 407, 337, 1365, 498, 321, 528, 281, 51374], "temperature": 0.0, "avg_logprob": -0.12689510656862843, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.00015303892723750323}, {"id": 184, "seek": 84192, "start": 862.0999999999999, "end": 869.24, "text": " change this bit we have to index into the tensor and in particular here this is the first row", "tokens": [51374, 1319, 341, 857, 321, 362, 281, 8186, 666, 264, 40863, 293, 294, 1729, 510, 341, 307, 264, 700, 5386, 51731], "temperature": 0.0, "avg_logprob": -0.12689510656862843, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.00015303892723750323}, {"id": 185, "seek": 84192, "start": 869.38, "end": 871.9, "text": " and the because it's", "tokens": [51738, 293, 264, 570, 309, 311, 51864], "temperature": 0.0, "avg_logprob": -0.12689510656862843, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.00015303892723750323}, {"id": 186, "seek": 87192, "start": 871.92, "end": 880.88, "text": " zero indexed. So this is row index one and column index zero one two three. So a at one comma three", "tokens": [50365, 4018, 8186, 292, 13, 407, 341, 307, 5386, 8186, 472, 293, 7738, 8186, 4018, 472, 732, 1045, 13, 407, 257, 412, 472, 22117, 1045, 50813], "temperature": 0.0, "avg_logprob": -0.09330636024475097, "compression_ratio": 1.921875, "no_speech_prob": 0.00037323954165913165}, {"id": 187, "seek": 87192, "start": 880.88, "end": 888.78, "text": " we can set that to one and then a will have a one over there. We can of course also do things like", "tokens": [50813, 321, 393, 992, 300, 281, 472, 293, 550, 257, 486, 362, 257, 472, 670, 456, 13, 492, 393, 295, 1164, 611, 360, 721, 411, 51208], "temperature": 0.0, "avg_logprob": -0.09330636024475097, "compression_ratio": 1.921875, "no_speech_prob": 0.00037323954165913165}, {"id": 188, "seek": 87192, "start": 888.78, "end": 896.48, "text": " this. So now a will be two over there or three and also we can for example say a zero zero is five", "tokens": [51208, 341, 13, 407, 586, 257, 486, 312, 732, 670, 456, 420, 1045, 293, 611, 321, 393, 337, 1365, 584, 257, 4018, 4018, 307, 1732, 51593], "temperature": 0.0, "avg_logprob": -0.09330636024475097, "compression_ratio": 1.921875, "no_speech_prob": 0.00037323954165913165}, {"id": 189, "seek": 87192, "start": 896.9599999999999, "end": 901.9, "text": " and then a will have a five over here. So that's how we can index into.", "tokens": [51617, 293, 550, 257, 486, 362, 257, 1732, 670, 510, 13, 407, 300, 311, 577, 321, 393, 8186, 666, 13, 51864], "temperature": 0.0, "avg_logprob": -0.09330636024475097, "compression_ratio": 1.921875, "no_speech_prob": 0.00037323954165913165}, {"id": 190, "seek": 90192, "start": 901.92, "end": 906.8399999999999, "text": " the arrays. Now of course the array that we are interested in is much much bigger. So for our", "tokens": [50365, 264, 41011, 13, 823, 295, 1164, 264, 10225, 300, 321, 366, 3102, 294, 307, 709, 709, 3801, 13, 407, 337, 527, 50611], "temperature": 0.4, "avg_logprob": -0.25466173612154447, "compression_ratio": 2.0118577075098814, "no_speech_prob": 0.0011505450820550323}, {"id": 191, "seek": 90192, "start": 906.8399999999999, "end": 915.1999999999999, "text": " purposes we have 26 letters of the alphabet and then we have two special characters s and e. So we", "tokens": [50611, 9932, 321, 362, 7551, 7825, 295, 264, 23339, 293, 550, 321, 362, 732, 2121, 4342, 262, 293, 308, 13, 407, 321, 51029], "temperature": 0.4, "avg_logprob": -0.25466173612154447, "compression_ratio": 2.0118577075098814, "no_speech_prob": 0.0011505450820550323}, {"id": 192, "seek": 90192, "start": 915.1999999999999, "end": 922.0799999999999, "text": " want 26 plus 2 or 28 by 28 array and let's call it the capital N because it's going to represent", "tokens": [51029, 528, 7551, 1804, 568, 420, 7562, 538, 7562, 10225, 293, 718, 311, 818, 309, 264, 4238, 426, 570, 309, 311, 516, 281, 2906, 51373], "temperature": 0.4, "avg_logprob": -0.25466173612154447, "compression_ratio": 2.0118577075098814, "no_speech_prob": 0.0011505450820550323}, {"id": 193, "seek": 90192, "start": 922.0799999999999, "end": 929.88, "text": " sort of the counts. Let me erase this stuff. So that's the array that starts at zeros 28 by 28 and", "tokens": [51373, 1333, 295, 264, 14893, 13, 961, 385, 23525, 341, 1507, 13, 407, 300, 311, 264, 10225, 300, 3719, 412, 35193, 7562, 538, 7562, 293, 51763], "temperature": 0.4, "avg_logprob": -0.25466173612154447, "compression_ratio": 2.0118577075098814, "no_speech_prob": 0.0011505450820550323}, {"id": 194, "seek": 90192, "start": 929.88, "end": 931.88, "text": " now let's copy paste that into the array. So that's the array that starts at zeros 28 by 28 and now let's copy paste the", "tokens": [51763, 586, 718, 311, 5055, 9163, 300, 666, 264, 10225, 13, 407, 300, 311, 264, 10225, 300, 3719, 412, 35193, 7562, 538, 7562, 293, 586, 718, 311, 5055, 9163, 264, 51863], "temperature": 0.4, "avg_logprob": -0.25466173612154447, "compression_ratio": 2.0118577075098814, "no_speech_prob": 0.0011505450820550323}, {"id": 195, "seek": 93188, "start": 931.88, "end": 941.28, "text": " this here. But instead of having a dictionary b which we're going to erase we now have an n. Now", "tokens": [50365, 341, 510, 13, 583, 2602, 295, 1419, 257, 25890, 272, 597, 321, 434, 516, 281, 23525, 321, 586, 362, 364, 297, 13, 823, 50835], "temperature": 0.0, "avg_logprob": -0.09499630434759732, "compression_ratio": 1.9233870967741935, "no_speech_prob": 0.0008755515445955098}, {"id": 196, "seek": 93188, "start": 941.28, "end": 946.24, "text": " the problem here is that we have these characters which are strings but we have to now basically", "tokens": [50835, 264, 1154, 510, 307, 300, 321, 362, 613, 4342, 597, 366, 13985, 457, 321, 362, 281, 586, 1936, 51083], "temperature": 0.0, "avg_logprob": -0.09499630434759732, "compression_ratio": 1.9233870967741935, "no_speech_prob": 0.0008755515445955098}, {"id": 197, "seek": 93188, "start": 946.24, "end": 952.68, "text": " index into a array and we have to index using integers. So we need some kind of a lookup table", "tokens": [51083, 8186, 666, 257, 10225, 293, 321, 362, 281, 8186, 1228, 41674, 13, 407, 321, 643, 512, 733, 295, 257, 574, 1010, 3199, 51405], "temperature": 0.0, "avg_logprob": -0.09499630434759732, "compression_ratio": 1.9233870967741935, "no_speech_prob": 0.0008755515445955098}, {"id": 198, "seek": 93188, "start": 952.68, "end": 958.78, "text": " from characters to integers. So let's construct such a character array and the way we're going", "tokens": [51405, 490, 4342, 281, 41674, 13, 407, 718, 311, 7690, 1270, 257, 2517, 10225, 293, 264, 636, 321, 434, 516, 51710], "temperature": 0.0, "avg_logprob": -0.09499630434759732, "compression_ratio": 1.9233870967741935, "no_speech_prob": 0.0008755515445955098}, {"id": 199, "seek": 93188, "start": 958.78, "end": 961.86, "text": " to do this is we're going to take all the words which is a list of strings and we're going to", "tokens": [51710, 281, 360, 341, 307, 321, 434, 516, 281, 747, 439, 264, 2283, 597, 307, 257, 1329, 295, 13985, 293, 321, 434, 516, 281, 51864], "temperature": 0.0, "avg_logprob": -0.09499630434759732, "compression_ratio": 1.9233870967741935, "no_speech_prob": 0.0008755515445955098}, {"id": 200, "seek": 96188, "start": 961.88, "end": 967.68, "text": " concatenate all of it into a massive string. So this is just simply the entire data set as a single", "tokens": [50365, 1588, 7186, 473, 439, 295, 309, 666, 257, 5994, 6798, 13, 407, 341, 307, 445, 2935, 264, 2302, 1412, 992, 382, 257, 2167, 50655], "temperature": 0.0, "avg_logprob": -0.09843237583453839, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.000894028227776289}, {"id": 201, "seek": 96188, "start": 967.68, "end": 973.84, "text": " string. We're going to pass this to the set constructor which takes this massive string", "tokens": [50655, 6798, 13, 492, 434, 516, 281, 1320, 341, 281, 264, 992, 47479, 597, 2516, 341, 5994, 6798, 50963], "temperature": 0.0, "avg_logprob": -0.09843237583453839, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.000894028227776289}, {"id": 202, "seek": 96188, "start": 974.4, "end": 980.48, "text": " and throws out duplicates because sets do not allow duplicates. So set of this will just be", "tokens": [50991, 293, 19251, 484, 17154, 1024, 570, 6352, 360, 406, 2089, 17154, 1024, 13, 407, 992, 295, 341, 486, 445, 312, 51295], "temperature": 0.0, "avg_logprob": -0.09843237583453839, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.000894028227776289}, {"id": 203, "seek": 96188, "start": 980.48, "end": 986.16, "text": " the set of all the lowercase characters and there should be a total of 26 of them.", "tokens": [51295, 264, 992, 295, 439, 264, 3126, 9765, 4342, 293, 456, 820, 312, 257, 3217, 295, 7551, 295, 552, 13, 51579], "temperature": 0.0, "avg_logprob": -0.09843237583453839, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.000894028227776289}, {"id": 204, "seek": 96188, "start": 988.56, "end": 990.64, "text": " And now we actually don't want a set we want a list.", "tokens": [51699, 400, 586, 321, 767, 500, 380, 528, 257, 992, 321, 528, 257, 1329, 13, 51803], "temperature": 0.0, "avg_logprob": -0.09843237583453839, "compression_ratio": 1.7291666666666667, "no_speech_prob": 0.000894028227776289}, {"id": 205, "seek": 99188, "start": 991.88, "end": 996.6, "text": " But we don't want a list sorted in some weird arbitrary way we want it to be sorted", "tokens": [50365, 583, 321, 500, 380, 528, 257, 1329, 25462, 294, 512, 3657, 23211, 636, 321, 528, 309, 281, 312, 25462, 50601], "temperature": 0.0, "avg_logprob": -0.11743467119004991, "compression_ratio": 1.62, "no_speech_prob": 0.0008425472769886255}, {"id": 206, "seek": 99188, "start": 997.56, "end": 1003.0, "text": " from a to z. So sorted list. So those are our characters.", "tokens": [50649, 490, 257, 281, 710, 13, 407, 25462, 1329, 13, 407, 729, 366, 527, 4342, 13, 50921], "temperature": 0.0, "avg_logprob": -0.11743467119004991, "compression_ratio": 1.62, "no_speech_prob": 0.0008425472769886255}, {"id": 207, "seek": 99188, "start": 1005.56, "end": 1011.08, "text": " Now what we want is this lookup table as I mentioned. So let's create a special s to i", "tokens": [51049, 823, 437, 321, 528, 307, 341, 574, 1010, 3199, 382, 286, 2835, 13, 407, 718, 311, 1884, 257, 2121, 262, 281, 741, 51325], "temperature": 0.0, "avg_logprob": -0.11743467119004991, "compression_ratio": 1.62, "no_speech_prob": 0.0008425472769886255}, {"id": 208, "seek": 99188, "start": 1011.08, "end": 1021.56, "text": " I will call it. s is string or character and this will be an s to i mapping for is in enumerate", "tokens": [51325, 286, 486, 818, 309, 13, 262, 307, 6798, 420, 2517, 293, 341, 486, 312, 364, 262, 281, 741, 18350, 337, 307, 294, 465, 15583, 473, 51849], "temperature": 0.0, "avg_logprob": -0.11743467119004991, "compression_ratio": 1.62, "no_speech_prob": 0.0008425472769886255}, {"id": 209, "seek": 102188, "start": 1021.88, "end": 1029.96, "text": " of these characters. So enumerate basically gives us this iterator over the integer index and the", "tokens": [50365, 295, 613, 4342, 13, 407, 465, 15583, 473, 1936, 2709, 505, 341, 17138, 1639, 670, 264, 24922, 8186, 293, 264, 50769], "temperature": 0.0, "avg_logprob": -0.13268858194351196, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.00044714321848005056}, {"id": 210, "seek": 102188, "start": 1029.96, "end": 1037.0, "text": " actual element of the list and then we are mapping the character to the integer. So s to i is a", "tokens": [50769, 3539, 4478, 295, 264, 1329, 293, 550, 321, 366, 18350, 264, 2517, 281, 264, 24922, 13, 407, 262, 281, 741, 307, 257, 51121], "temperature": 0.0, "avg_logprob": -0.13268858194351196, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.00044714321848005056}, {"id": 211, "seek": 102188, "start": 1037.0, "end": 1045.64, "text": " mapping from a to 0 b to 1 etc all the way from z to 25. And that's going to be useful here but we", "tokens": [51121, 18350, 490, 257, 281, 1958, 272, 281, 502, 5183, 439, 264, 636, 490, 710, 281, 3552, 13, 400, 300, 311, 516, 281, 312, 4420, 510, 457, 321, 51553], "temperature": 0.0, "avg_logprob": -0.13268858194351196, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.00044714321848005056}, {"id": 212, "seek": 102188, "start": 1045.64, "end": 1051.24, "text": " actually also have to specifically set that s will be 26 and s to i at e.", "tokens": [51553, 767, 611, 362, 281, 4682, 992, 300, 262, 486, 312, 7551, 293, 262, 281, 741, 412, 308, 13, 51833], "temperature": 0.0, "avg_logprob": -0.13268858194351196, "compression_ratio": 1.6712328767123288, "no_speech_prob": 0.00044714321848005056}, {"id": 213, "seek": 105188, "start": 1052.0400000000002, "end": 1059.3200000000002, "text": " Will be 27 right because z was 25. So those are the lookups and now we can come here and we can map", "tokens": [50373, 3099, 312, 7634, 558, 570, 710, 390, 3552, 13, 407, 729, 366, 264, 574, 7528, 293, 586, 321, 393, 808, 510, 293, 321, 393, 4471, 50737], "temperature": 0.4, "avg_logprob": -0.1604729720524379, "compression_ratio": 1.7341772151898733, "no_speech_prob": 0.0004872959398198873}, {"id": 214, "seek": 105188, "start": 1059.88, "end": 1064.6000000000001, "text": " both character 1 and character 2 to their integers. So this will be s to i at character 1", "tokens": [50765, 1293, 2517, 502, 293, 2517, 568, 281, 641, 41674, 13, 407, 341, 486, 312, 262, 281, 741, 412, 2517, 502, 51001], "temperature": 0.4, "avg_logprob": -0.1604729720524379, "compression_ratio": 1.7341772151898733, "no_speech_prob": 0.0004872959398198873}, {"id": 215, "seek": 105188, "start": 1065.24, "end": 1073.0800000000002, "text": " and i x 2 will be s to i of character 2. And now we should be able to do this line", "tokens": [51033, 293, 741, 2031, 568, 486, 312, 262, 281, 741, 295, 2517, 568, 13, 400, 586, 321, 820, 312, 1075, 281, 360, 341, 1622, 51425], "temperature": 0.4, "avg_logprob": -0.1604729720524379, "compression_ratio": 1.7341772151898733, "no_speech_prob": 0.0004872959398198873}, {"id": 216, "seek": 105188, "start": 1073.0800000000002, "end": 1081.5600000000002, "text": " but using our array. So n at i x 1 i x 2 this is the two-dimensional array indexing I've shown you before and honestly just plus equals 1.", "tokens": [51425, 457, 1228, 527, 10225, 13, 407, 297, 412, 741, 2031, 502, 741, 2031, 568, 341, 307, 264, 732, 12, 18759, 10225, 8186, 278, 286, 600, 4898, 291, 949, 293, 6095, 445, 1804, 6915, 502, 13, 51849], "temperature": 0.4, "avg_logprob": -0.1604729720524379, "compression_ratio": 1.7341772151898733, "no_speech_prob": 0.0004872959398198873}, {"id": 217, "seek": 108188, "start": 1082.8400000000001, "end": 1092.1200000000001, "text": " Because everything starts at 0. So this should work and give us a large 28 by 28 array", "tokens": [50413, 1436, 1203, 3719, 412, 1958, 13, 407, 341, 820, 589, 293, 976, 505, 257, 2416, 7562, 538, 7562, 10225, 50877], "temperature": 0.0, "avg_logprob": -0.1194146535928967, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00016979302745312452}, {"id": 218, "seek": 108188, "start": 1092.92, "end": 1100.7600000000002, "text": " of all these counts. So if we print n this is the array but of course it looks ugly. So let's erase", "tokens": [50917, 295, 439, 613, 14893, 13, 407, 498, 321, 4482, 297, 341, 307, 264, 10225, 457, 295, 1164, 309, 1542, 12246, 13, 407, 718, 311, 23525, 51309], "temperature": 0.0, "avg_logprob": -0.1194146535928967, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00016979302745312452}, {"id": 219, "seek": 108188, "start": 1100.7600000000002, "end": 1106.2800000000002, "text": " this ugly mess and let's try to visualize it a bit more nicer. So for that we're going to use", "tokens": [51309, 341, 12246, 2082, 293, 718, 311, 853, 281, 23273, 309, 257, 857, 544, 22842, 13, 407, 337, 300, 321, 434, 516, 281, 764, 51585], "temperature": 0.0, "avg_logprob": -0.1194146535928967, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00016979302745312452}, {"id": 220, "seek": 108188, "start": 1106.2800000000002, "end": 1111.16, "text": " a library called matplotlib. So matplotlib allows us to create figures. So we can do things like this.", "tokens": [51585, 257, 6405, 1219, 3803, 564, 310, 38270, 13, 407, 3803, 564, 310, 38270, 4045, 505, 281, 1884, 9624, 13, 407, 321, 393, 360, 721, 411, 341, 13, 51829], "temperature": 0.0, "avg_logprob": -0.1194146535928967, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.00016979302745312452}, {"id": 221, "seek": 111188, "start": 1111.88, "end": 1120.92, "text": " We can do things like plti and show of the count array. So this is the 28 by 28 array and this is the structure.", "tokens": [50365, 492, 393, 360, 721, 411, 499, 7317, 293, 855, 295, 264, 1207, 10225, 13, 407, 341, 307, 264, 7562, 538, 7562, 10225, 293, 341, 307, 264, 3877, 13, 50817], "temperature": 0.4, "avg_logprob": -0.21375133610573135, "compression_ratio": 1.8032128514056225, "no_speech_prob": 6.448197382269427e-05}, {"id": 222, "seek": 111188, "start": 1120.92, "end": 1126.0400000000002, "text": " But even this I would say is still pretty ugly. So we're going to try to create a much nicer", "tokens": [50817, 583, 754, 341, 286, 576, 584, 307, 920, 1238, 12246, 13, 407, 321, 434, 516, 281, 853, 281, 1884, 257, 709, 22842, 51073], "temperature": 0.4, "avg_logprob": -0.21375133610573135, "compression_ratio": 1.8032128514056225, "no_speech_prob": 6.448197382269427e-05}, {"id": 223, "seek": 111188, "start": 1126.0400000000002, "end": 1131.16, "text": " visualization of it and I wrote a bunch of code for that. The first thing we're going to need is", "tokens": [51073, 25801, 295, 309, 293, 286, 4114, 257, 3840, 295, 3089, 337, 300, 13, 440, 700, 551, 321, 434, 516, 281, 643, 307, 51329], "temperature": 0.4, "avg_logprob": -0.21375133610573135, "compression_ratio": 1.8032128514056225, "no_speech_prob": 6.448197382269427e-05}, {"id": 224, "seek": 111188, "start": 1131.88, "end": 1140.3600000000001, "text": " we're going to need to invert this array here, this dictionary. So s to i is a mapping from s to i and in i to s we're going to reverse the array.", "tokens": [51365, 321, 434, 516, 281, 643, 281, 33966, 341, 10225, 510, 11, 341, 25890, 13, 407, 262, 281, 741, 307, 257, 18350, 490, 262, 281, 741, 293, 294, 741, 281, 262, 321, 434, 516, 281, 9943, 264, 10225, 13, 51789], "temperature": 0.4, "avg_logprob": -0.21375133610573135, "compression_ratio": 1.8032128514056225, "no_speech_prob": 6.448197382269427e-05}, {"id": 225, "seek": 114188, "start": 1141.88, "end": 1148.44, "text": " So iterating over all the items and just reverse that array. So i to s maps inversely from 0 to a,", "tokens": [50365, 407, 17138, 990, 670, 439, 264, 4754, 293, 445, 9943, 300, 10225, 13, 407, 741, 281, 262, 11317, 21378, 736, 490, 1958, 281, 257, 11, 50693], "temperature": 0.0, "avg_logprob": -0.36715757196599785, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0004699224082287401}, {"id": 226, "seek": 114188, "start": 1148.44, "end": 1155.0, "text": " 1 to b, etc. So we'll need that. And then here's the code that I came up with to try to make this a little bit nicer.", "tokens": [50693, 502, 281, 272, 11, 5183, 13, 407, 321, 603, 643, 300, 13, 400, 550, 510, 311, 264, 3089, 300, 286, 1361, 493, 365, 281, 853, 281, 652, 341, 257, 707, 857, 22842, 13, 51021], "temperature": 0.0, "avg_logprob": -0.36715757196599785, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0004699224082287401}, {"id": 227, "seek": 114188, "start": 1157.0800000000002, "end": 1163.64, "text": " We create a figure, we plot n and then we visualize a bunch of things later.", "tokens": [51125, 492, 1884, 257, 2573, 11, 321, 7542, 297, 293, 550, 321, 23273, 257, 3840, 295, 721, 1780, 13, 51453], "temperature": 0.0, "avg_logprob": -0.36715757196599785, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0004699224082287401}, {"id": 228, "seek": 114188, "start": 1163.64, "end": 1166.2, "text": " Let me just run it so you get a sense of what this is.", "tokens": [51453, 961, 385, 445, 1190, 309, 370, 291, 483, 257, 2020, 295, 437, 341, 307, 13, 51581], "temperature": 0.0, "avg_logprob": -0.36715757196599785, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0004699224082287401}, {"id": 229, "seek": 114188, "start": 1169.88, "end": 1170.8400000000001, "text": " So we're going to do this.", "tokens": [51765, 407, 321, 434, 516, 281, 360, 341, 13, 51813], "temperature": 0.0, "avg_logprob": -0.36715757196599785, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0004699224082287401}, {"id": 230, "seek": 117188, "start": 1171.88, "end": 1174.2, "text": " Okay, so you see here that we have", "tokens": [50365, 1033, 11, 370, 291, 536, 510, 300, 321, 362, 50481], "temperature": 0.8, "avg_logprob": -0.1960344214188425, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00036272744182497263}, {"id": 231, "seek": 117188, "start": 1175.24, "end": 1181.64, "text": " the array spaced out and every one of these is basically like b follows g 0 times.", "tokens": [50533, 264, 10225, 43766, 484, 293, 633, 472, 295, 613, 307, 1936, 411, 272, 10002, 290, 1958, 1413, 13, 50853], "temperature": 0.8, "avg_logprob": -0.1960344214188425, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00036272744182497263}, {"id": 232, "seek": 117188, "start": 1182.2800000000002, "end": 1189.88, "text": " b follows h 41 times. So a follows j 175 times. What you can see that I'm doing here is", "tokens": [50885, 272, 10002, 276, 18173, 1413, 13, 407, 257, 10002, 361, 41165, 1413, 13, 708, 291, 393, 536, 300, 286, 478, 884, 510, 307, 51265], "temperature": 0.8, "avg_logprob": -0.1960344214188425, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00036272744182497263}, {"id": 233, "seek": 117188, "start": 1189.88, "end": 1195.64, "text": " first I show that entire array and then I iterate over all the individual little cells here", "tokens": [51265, 700, 286, 855, 300, 2302, 10225, 293, 550, 286, 44497, 670, 439, 264, 2609, 707, 5438, 510, 51553], "temperature": 0.8, "avg_logprob": -0.1960344214188425, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00036272744182497263}, {"id": 234, "seek": 117188, "start": 1196.68, "end": 1201.64, "text": " and I create a character string here which is the inverse mapping, i to s,", "tokens": [51605, 293, 286, 1884, 257, 2517, 6798, 510, 597, 307, 264, 17340, 18350, 11, 741, 281, 262, 11, 51853], "temperature": 0.8, "avg_logprob": -0.1960344214188425, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.00036272744182497263}, {"id": 235, "seek": 120188, "start": 1201.88, "end": 1204.74, "text": " of the integer i and the integer j.", "tokens": [50365, 295, 264, 24922, 741, 293, 264, 24922, 361, 13, 50508], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 236, "seek": 120188, "start": 1204.74, "end": 1207.8000000000002, "text": " So those are the bigrams in a character representation.", "tokens": [50508, 407, 729, 366, 264, 955, 2356, 82, 294, 257, 2517, 10290, 13, 50661], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 237, "seek": 120188, "start": 1208.66, "end": 1212.2, "text": " And then I plot just the bigram text.", "tokens": [50704, 400, 550, 286, 7542, 445, 264, 955, 2356, 2487, 13, 50881], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 238, "seek": 120188, "start": 1212.2, "end": 1214.22, "text": " And then I plot the number of times", "tokens": [50881, 400, 550, 286, 7542, 264, 1230, 295, 1413, 50982], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 239, "seek": 120188, "start": 1214.22, "end": 1216.16, "text": " that this bigram occurs.", "tokens": [50982, 300, 341, 955, 2356, 11843, 13, 51079], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 240, "seek": 120188, "start": 1216.16, "end": 1218.44, "text": " Now, the reason that there's a dot item here", "tokens": [51079, 823, 11, 264, 1778, 300, 456, 311, 257, 5893, 3174, 510, 51193], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 241, "seek": 120188, "start": 1218.44, "end": 1221.0800000000002, "text": " is because when you index into these arrays,", "tokens": [51193, 307, 570, 562, 291, 8186, 666, 613, 41011, 11, 51325], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 242, "seek": 120188, "start": 1221.0800000000002, "end": 1223.1000000000001, "text": " these are torch tensors,", "tokens": [51325, 613, 366, 27822, 10688, 830, 11, 51426], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 243, "seek": 120188, "start": 1223.1000000000001, "end": 1226.0800000000002, "text": " you see that we still get a tensor back.", "tokens": [51426, 291, 536, 300, 321, 920, 483, 257, 40863, 646, 13, 51575], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 244, "seek": 120188, "start": 1226.0800000000002, "end": 1227.74, "text": " So the type of this thing,", "tokens": [51575, 407, 264, 2010, 295, 341, 551, 11, 51658], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 245, "seek": 120188, "start": 1227.74, "end": 1229.7800000000002, "text": " you'd think it would be just an integer, 149,", "tokens": [51658, 291, 1116, 519, 309, 576, 312, 445, 364, 24922, 11, 3499, 24, 11, 51760], "temperature": 0.0, "avg_logprob": -0.1125181884765625, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.05086572468280792}, {"id": 246, "seek": 122978, "start": 1229.78, "end": 1232.04, "text": " but it's actually a torch dot tensor.", "tokens": [50365, 457, 309, 311, 767, 257, 27822, 5893, 40863, 13, 50478], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 247, "seek": 122978, "start": 1232.04, "end": 1234.46, "text": " And so if you do dot item,", "tokens": [50478, 400, 370, 498, 291, 360, 5893, 3174, 11, 50599], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 248, "seek": 122978, "start": 1234.46, "end": 1237.32, "text": " then it will pop out that individual integer.", "tokens": [50599, 550, 309, 486, 1665, 484, 300, 2609, 24922, 13, 50742], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 249, "seek": 122978, "start": 1238.54, "end": 1240.74, "text": " So it'll just be 149.", "tokens": [50803, 407, 309, 603, 445, 312, 3499, 24, 13, 50913], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 250, "seek": 122978, "start": 1240.74, "end": 1242.48, "text": " So that's what's happening there.", "tokens": [50913, 407, 300, 311, 437, 311, 2737, 456, 13, 51000], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 251, "seek": 122978, "start": 1242.48, "end": 1245.3799999999999, "text": " And these are just some options to make it look nice.", "tokens": [51000, 400, 613, 366, 445, 512, 3956, 281, 652, 309, 574, 1481, 13, 51145], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 252, "seek": 122978, "start": 1245.3799999999999, "end": 1247.28, "text": " So what is the structure of this array?", "tokens": [51145, 407, 437, 307, 264, 3877, 295, 341, 10225, 30, 51240], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 253, "seek": 122978, "start": 1249.34, "end": 1250.18, "text": " We have all these counts", "tokens": [51343, 492, 362, 439, 613, 14893, 51385], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 254, "seek": 122978, "start": 1250.18, "end": 1251.98, "text": " and we see that some of them occur often", "tokens": [51385, 293, 321, 536, 300, 512, 295, 552, 5160, 2049, 51475], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 255, "seek": 122978, "start": 1251.98, "end": 1254.08, "text": " and some of them do not occur often.", "tokens": [51475, 293, 512, 295, 552, 360, 406, 5160, 2049, 13, 51580], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 256, "seek": 122978, "start": 1254.08, "end": 1256.08, "text": " Now, if you scrutinize this carefully,", "tokens": [51580, 823, 11, 498, 291, 28949, 259, 1125, 341, 7500, 11, 51680], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 257, "seek": 122978, "start": 1256.08, "end": 1258.74, "text": " you will notice that we're not actually being very clever.", "tokens": [51680, 291, 486, 3449, 300, 321, 434, 406, 767, 885, 588, 13494, 13, 51813], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 258, "seek": 122978, "start": 1258.74, "end": 1259.78, "text": " That's because when you come over here", "tokens": [51813, 663, 311, 570, 562, 291, 808, 670, 510, 51865], "temperature": 0.0, "avg_logprob": -0.09956189802476575, "compression_ratio": 1.7182130584192439, "no_speech_prob": 2.7575966669246554e-05}, {"id": 259, "seek": 125978, "start": 1259.78, "end": 1261.7, "text": " you'll notice that, for example,", "tokens": [50365, 291, 603, 3449, 300, 11, 337, 1365, 11, 50461], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 260, "seek": 125978, "start": 1261.7, "end": 1264.72, "text": " we have an entire row of completely zeros.", "tokens": [50461, 321, 362, 364, 2302, 5386, 295, 2584, 35193, 13, 50612], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 261, "seek": 125978, "start": 1264.72, "end": 1267.1, "text": " And that's because the end character", "tokens": [50612, 400, 300, 311, 570, 264, 917, 2517, 50731], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 262, "seek": 125978, "start": 1267.1, "end": 1269.12, "text": " is never possibly going to be the first character", "tokens": [50731, 307, 1128, 6264, 516, 281, 312, 264, 700, 2517, 50832], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 263, "seek": 125978, "start": 1269.12, "end": 1269.96, "text": " of a bigram,", "tokens": [50832, 295, 257, 955, 2356, 11, 50874], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 264, "seek": 125978, "start": 1269.96, "end": 1271.98, "text": " because we're always placing these end tokens", "tokens": [50874, 570, 321, 434, 1009, 17221, 613, 917, 22667, 50975], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 265, "seek": 125978, "start": 1271.98, "end": 1274.3799999999999, "text": " all at the end of the bigram.", "tokens": [50975, 439, 412, 264, 917, 295, 264, 955, 2356, 13, 51095], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 266, "seek": 125978, "start": 1274.3799999999999, "end": 1277.48, "text": " Similarly, we have entire columns of zeros here", "tokens": [51095, 13157, 11, 321, 362, 2302, 13766, 295, 35193, 510, 51250], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 267, "seek": 125978, "start": 1277.48, "end": 1280.2, "text": " because the S character", "tokens": [51250, 570, 264, 318, 2517, 51386], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 268, "seek": 125978, "start": 1280.2, "end": 1283.42, "text": " will never possibly be the second element of a bigram", "tokens": [51386, 486, 1128, 6264, 312, 264, 1150, 4478, 295, 257, 955, 2356, 51547], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 269, "seek": 125978, "start": 1283.42, "end": 1285.8, "text": " because we always start with S and we end with E", "tokens": [51547, 570, 321, 1009, 722, 365, 318, 293, 321, 917, 365, 462, 51666], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 270, "seek": 125978, "start": 1285.8, "end": 1287.78, "text": " and we only have the words in between.", "tokens": [51666, 293, 321, 787, 362, 264, 2283, 294, 1296, 13, 51765], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 271, "seek": 125978, "start": 1287.78, "end": 1289.44, "text": " So we have an entire column of zeros,", "tokens": [51765, 407, 321, 362, 364, 2302, 7738, 295, 35193, 11, 51848], "temperature": 0.0, "avg_logprob": -0.159258295507992, "compression_ratio": 1.942084942084942, "no_speech_prob": 0.0005909675965085626}, {"id": 272, "seek": 128944, "start": 1289.44, "end": 1291.8, "text": " an entire row of zeros,", "tokens": [50365, 364, 2302, 5386, 295, 35193, 11, 50483], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 273, "seek": 128944, "start": 1291.8, "end": 1294.1200000000001, "text": " and in this little two by two matrix here as well,", "tokens": [50483, 293, 294, 341, 707, 732, 538, 732, 8141, 510, 382, 731, 11, 50599], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 274, "seek": 128944, "start": 1294.1200000000001, "end": 1296.06, "text": " the only one that can possibly happen", "tokens": [50599, 264, 787, 472, 300, 393, 6264, 1051, 50696], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 275, "seek": 128944, "start": 1296.06, "end": 1298.6200000000001, "text": " is if S directly follows E.", "tokens": [50696, 307, 498, 318, 3838, 10002, 462, 13, 50824], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 276, "seek": 128944, "start": 1298.6200000000001, "end": 1303.14, "text": " That can be non-zero if we have a word that has no letters.", "tokens": [50824, 663, 393, 312, 2107, 12, 32226, 498, 321, 362, 257, 1349, 300, 575, 572, 7825, 13, 51050], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 277, "seek": 128944, "start": 1303.14, "end": 1304.72, "text": " So in that case, there's no letters in the word,", "tokens": [51050, 407, 294, 300, 1389, 11, 456, 311, 572, 7825, 294, 264, 1349, 11, 51129], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 278, "seek": 128944, "start": 1304.72, "end": 1307.64, "text": " it's an empty word, and we just have S follows E.", "tokens": [51129, 309, 311, 364, 6707, 1349, 11, 293, 321, 445, 362, 318, 10002, 462, 13, 51275], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 279, "seek": 128944, "start": 1307.64, "end": 1310.22, "text": " But the other ones are just not possible.", "tokens": [51275, 583, 264, 661, 2306, 366, 445, 406, 1944, 13, 51404], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 280, "seek": 128944, "start": 1310.22, "end": 1311.76, "text": " And so we're basically wasting space.", "tokens": [51404, 400, 370, 321, 434, 1936, 20457, 1901, 13, 51481], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 281, "seek": 128944, "start": 1311.76, "end": 1312.6000000000001, "text": " And not only that,", "tokens": [51481, 400, 406, 787, 300, 11, 51523], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 282, "seek": 128944, "start": 1312.6000000000001, "end": 1315.68, "text": " but the S and the E are getting very crowded here.", "tokens": [51523, 457, 264, 318, 293, 264, 462, 366, 1242, 588, 21634, 510, 13, 51677], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 283, "seek": 128944, "start": 1315.68, "end": 1316.92, "text": " I was using these brackets", "tokens": [51677, 286, 390, 1228, 613, 26179, 51739], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 284, "seek": 128944, "start": 1316.92, "end": 1319.3200000000002, "text": " because there's convention in natural language processing,", "tokens": [51739, 570, 456, 311, 10286, 294, 3303, 2856, 9007, 11, 51859], "temperature": 0.0, "avg_logprob": -0.12689701610843077, "compression_ratio": 1.7656765676567656, "no_speech_prob": 0.00030987069476395845}, {"id": 285, "seek": 131932, "start": 1319.32, "end": 1323.34, "text": " to use these kinds of brackets to denote special tokens.", "tokens": [50365, 281, 764, 613, 3685, 295, 26179, 281, 45708, 2121, 22667, 13, 50566], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 286, "seek": 131932, "start": 1323.34, "end": 1325.28, "text": " But we're going to use something else.", "tokens": [50566, 583, 321, 434, 516, 281, 764, 746, 1646, 13, 50663], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 287, "seek": 131932, "start": 1325.28, "end": 1328.34, "text": " So let's fix all this and make it prettier.", "tokens": [50663, 407, 718, 311, 3191, 439, 341, 293, 652, 309, 36825, 13, 50816], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 288, "seek": 131932, "start": 1328.34, "end": 1330.4199999999998, "text": " We're not actually going to have two special tokens.", "tokens": [50816, 492, 434, 406, 767, 516, 281, 362, 732, 2121, 22667, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 289, "seek": 131932, "start": 1330.4199999999998, "end": 1333.04, "text": " We're only going to have one special token.", "tokens": [50920, 492, 434, 787, 516, 281, 362, 472, 2121, 14862, 13, 51051], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 290, "seek": 131932, "start": 1333.04, "end": 1337.84, "text": " So we're going to have n by n array of 27 by set 27 instead.", "tokens": [51051, 407, 321, 434, 516, 281, 362, 297, 538, 297, 10225, 295, 7634, 538, 992, 7634, 2602, 13, 51291], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 291, "seek": 131932, "start": 1338.8799999999999, "end": 1341.6599999999999, "text": " Instead of having two, we will just have one,", "tokens": [51343, 7156, 295, 1419, 732, 11, 321, 486, 445, 362, 472, 11, 51482], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 292, "seek": 131932, "start": 1341.6599999999999, "end": 1343.1799999999998, "text": " and I will call it a dot.", "tokens": [51482, 293, 286, 486, 818, 309, 257, 5893, 13, 51558], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 293, "seek": 131932, "start": 1344.8799999999999, "end": 1345.72, "text": " Okay.", "tokens": [51643, 1033, 13, 51685], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 294, "seek": 131932, "start": 1347.4199999999998, "end": 1348.96, "text": " Let me swing this over here.", "tokens": [51770, 961, 385, 11173, 341, 670, 510, 13, 51847], "temperature": 0.0, "avg_logprob": -0.1577836699404959, "compression_ratio": 1.7565217391304349, "no_speech_prob": 9.799341933103278e-05}, {"id": 295, "seek": 134932, "start": 1349.32, "end": 1351.98, "text": " Now, one more thing that I would like to do", "tokens": [50365, 823, 11, 472, 544, 551, 300, 286, 576, 411, 281, 360, 50498], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 296, "seek": 134932, "start": 1351.98, "end": 1354.48, "text": " is I would actually like to make this special character", "tokens": [50498, 307, 286, 576, 767, 411, 281, 652, 341, 2121, 2517, 50623], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 297, "seek": 134932, "start": 1354.48, "end": 1356.34, "text": " have position zero.", "tokens": [50623, 362, 2535, 4018, 13, 50716], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 298, "seek": 134932, "start": 1356.34, "end": 1359.04, "text": " And I would like to offset all the other letters off.", "tokens": [50716, 400, 286, 576, 411, 281, 18687, 439, 264, 661, 7825, 766, 13, 50851], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 299, "seek": 134932, "start": 1359.04, "end": 1361.28, "text": " I find that a little bit more pleasing.", "tokens": [50851, 286, 915, 300, 257, 707, 857, 544, 32798, 13, 50963], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 300, "seek": 134932, "start": 1362.62, "end": 1367.22, "text": " So we need a plus one here so that the first character,", "tokens": [51030, 407, 321, 643, 257, 1804, 472, 510, 370, 300, 264, 700, 2517, 11, 51260], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 301, "seek": 134932, "start": 1367.22, "end": 1369.9199999999998, "text": " which is A, will start at one.", "tokens": [51260, 597, 307, 316, 11, 486, 722, 412, 472, 13, 51395], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 302, "seek": 134932, "start": 1369.9199999999998, "end": 1374.9199999999998, "text": " So S to I will now be A starts at one and dot is zero.", "tokens": [51395, 407, 318, 281, 286, 486, 586, 312, 316, 3719, 412, 472, 293, 5893, 307, 4018, 13, 51645], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 303, "seek": 134932, "start": 1375.9199999999998, "end": 1378.96, "text": " And I to S, of course, we're not changing this,", "tokens": [51695, 400, 286, 281, 318, 11, 295, 1164, 11, 321, 434, 406, 4473, 341, 11, 51847], "temperature": 0.0, "avg_logprob": -0.16065466606010825, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.0003002130251843482}, {"id": 304, "seek": 137896, "start": 1378.96, "end": 1381.02, "text": " because I to S just creates a reverse mapping", "tokens": [50365, 570, 286, 281, 318, 445, 7829, 257, 9943, 18350, 50468], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 305, "seek": 137896, "start": 1381.02, "end": 1382.28, "text": " and this will work fine.", "tokens": [50468, 293, 341, 486, 589, 2489, 13, 50531], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 306, "seek": 137896, "start": 1382.28, "end": 1385.24, "text": " So one is A, two is B, zero is dot.", "tokens": [50531, 407, 472, 307, 316, 11, 732, 307, 363, 11, 4018, 307, 5893, 13, 50679], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 307, "seek": 137896, "start": 1386.68, "end": 1389.16, "text": " So we've reversed that here.", "tokens": [50751, 407, 321, 600, 30563, 300, 510, 13, 50875], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 308, "seek": 137896, "start": 1389.16, "end": 1391.52, "text": " We have a dot and a dot.", "tokens": [50875, 492, 362, 257, 5893, 293, 257, 5893, 13, 50993], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 309, "seek": 137896, "start": 1393.04, "end": 1394.88, "text": " This should work fine.", "tokens": [51069, 639, 820, 589, 2489, 13, 51161], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 310, "seek": 137896, "start": 1394.88, "end": 1396.22, "text": " Make sure I start at zeros.", "tokens": [51161, 4387, 988, 286, 722, 412, 35193, 13, 51228], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 311, "seek": 137896, "start": 1397.9, "end": 1398.8600000000001, "text": " Count.", "tokens": [51312, 5247, 13, 51360], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 312, "seek": 137896, "start": 1398.8600000000001, "end": 1401.7, "text": " And then here, we don't go up to 28, we go up to 27.", "tokens": [51360, 400, 550, 510, 11, 321, 500, 380, 352, 493, 281, 7562, 11, 321, 352, 493, 281, 7634, 13, 51502], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 313, "seek": 137896, "start": 1402.66, "end": 1404.82, "text": " And this should just work.", "tokens": [51550, 400, 341, 820, 445, 589, 13, 51658], "temperature": 0.0, "avg_logprob": -0.17469062057195925, "compression_ratio": 1.5935828877005347, "no_speech_prob": 0.00032464548712596297}, {"id": 314, "seek": 140896, "start": 1408.96, "end": 1413.58, "text": " Okay, so we see that dot dot never happened.", "tokens": [50365, 1033, 11, 370, 321, 536, 300, 5893, 5893, 1128, 2011, 13, 50596], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 315, "seek": 140896, "start": 1413.58, "end": 1416.52, "text": " It's at zero because we don't have empty words.", "tokens": [50596, 467, 311, 412, 4018, 570, 321, 500, 380, 362, 6707, 2283, 13, 50743], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 316, "seek": 140896, "start": 1416.52, "end": 1419.48, "text": " Then this row here now is just very simply", "tokens": [50743, 1396, 341, 5386, 510, 586, 307, 445, 588, 2935, 50891], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 317, "seek": 140896, "start": 1419.48, "end": 1423.56, "text": " the counts for all the first letters.", "tokens": [50891, 264, 14893, 337, 439, 264, 700, 7825, 13, 51095], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 318, "seek": 140896, "start": 1423.56, "end": 1428.56, "text": " So J starts a word, H starts a word, I starts a word, etc.", "tokens": [51095, 407, 508, 3719, 257, 1349, 11, 389, 3719, 257, 1349, 11, 286, 3719, 257, 1349, 11, 5183, 13, 51345], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 319, "seek": 140896, "start": 1429.6200000000001, "end": 1433.02, "text": " And then these are all the ending characters.", "tokens": [51398, 400, 550, 613, 366, 439, 264, 8121, 4342, 13, 51568], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 320, "seek": 140896, "start": 1433.02, "end": 1434.58, "text": " And in between, we have the structure", "tokens": [51568, 400, 294, 1296, 11, 321, 362, 264, 3877, 51646], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 321, "seek": 140896, "start": 1434.58, "end": 1437.1200000000001, "text": " of what characters follow each other.", "tokens": [51646, 295, 437, 4342, 1524, 1184, 661, 13, 51773], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 322, "seek": 140896, "start": 1437.1200000000001, "end": 1438.82, "text": " So this is the counts array.", "tokens": [51773, 407, 341, 307, 264, 14893, 10225, 13, 51858], "temperature": 0.0, "avg_logprob": -0.15732439723583536, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.0003610366547945887}, {"id": 323, "seek": 143882, "start": 1438.82, "end": 1441.74, "text": " This is the counts array of our entire data set.", "tokens": [50365, 639, 307, 264, 14893, 10225, 295, 527, 2302, 1412, 992, 13, 50511], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 324, "seek": 143882, "start": 1441.74, "end": 1444.46, "text": " So this array actually has all the information necessary", "tokens": [50511, 407, 341, 10225, 767, 575, 439, 264, 1589, 4818, 50647], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 325, "seek": 143882, "start": 1444.46, "end": 1446.04, "text": " for us to actually sample", "tokens": [50647, 337, 505, 281, 767, 6889, 50726], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 326, "seek": 143882, "start": 1446.04, "end": 1449.72, "text": " from this bigram character-level language model.", "tokens": [50726, 490, 341, 955, 2356, 2517, 12, 12418, 2856, 2316, 13, 50910], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 327, "seek": 143882, "start": 1449.72, "end": 1452.2, "text": " And roughly speaking, what we're going to do", "tokens": [50910, 400, 9810, 4124, 11, 437, 321, 434, 516, 281, 360, 51034], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 328, "seek": 143882, "start": 1452.2, "end": 1454.6799999999998, "text": " is we're just going to start following these probabilities", "tokens": [51034, 307, 321, 434, 445, 516, 281, 722, 3480, 613, 33783, 51158], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 329, "seek": 143882, "start": 1454.6799999999998, "end": 1456.86, "text": " and these counts, and we're going to start sampling", "tokens": [51158, 293, 613, 14893, 11, 293, 321, 434, 516, 281, 722, 21179, 51267], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 330, "seek": 143882, "start": 1456.86, "end": 1458.8999999999999, "text": " from the model.", "tokens": [51267, 490, 264, 2316, 13, 51369], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 331, "seek": 143882, "start": 1458.8999999999999, "end": 1461.86, "text": " So in the beginning, of course, we start with the dot,", "tokens": [51369, 407, 294, 264, 2863, 11, 295, 1164, 11, 321, 722, 365, 264, 5893, 11, 51517], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 332, "seek": 143882, "start": 1461.86, "end": 1464.6399999999999, "text": " the start token dot.", "tokens": [51517, 264, 722, 14862, 5893, 13, 51656], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 333, "seek": 143882, "start": 1464.6399999999999, "end": 1468.1799999999998, "text": " So to sample the first character of a name,", "tokens": [51656, 407, 281, 6889, 264, 700, 2517, 295, 257, 1315, 11, 51833], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 334, "seek": 143882, "start": 1468.1799999999998, "end": 1468.3799999999999, "text": " we're looking at this right here.", "tokens": [51833, 321, 434, 1237, 412, 341, 558, 510, 13, 51843], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 335, "seek": 143882, "start": 1468.3799999999999, "end": 1468.6399999999999, "text": " So we're looking at this right here.", "tokens": [51843, 407, 321, 434, 1237, 412, 341, 558, 510, 13, 51856], "temperature": 0.0, "avg_logprob": -0.22560466660393608, "compression_ratio": 1.9392857142857143, "no_speech_prob": 0.0002747905673459172}, {"id": 336, "seek": 146864, "start": 1468.64, "end": 1470.6000000000001, "text": " So we're looking at this right here.", "tokens": [50365, 407, 321, 434, 1237, 412, 341, 558, 510, 13, 50463], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 337, "seek": 146864, "start": 1470.6000000000001, "end": 1472.74, "text": " So we see that we have the counts,", "tokens": [50463, 407, 321, 536, 300, 321, 362, 264, 14893, 11, 50570], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 338, "seek": 146864, "start": 1472.74, "end": 1474.68, "text": " and those counts externally are telling us", "tokens": [50570, 293, 729, 14893, 40899, 366, 3585, 505, 50667], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 339, "seek": 146864, "start": 1474.68, "end": 1479.5800000000002, "text": " how often any one of these characters is to start a word.", "tokens": [50667, 577, 2049, 604, 472, 295, 613, 4342, 307, 281, 722, 257, 1349, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 340, "seek": 146864, "start": 1479.5800000000002, "end": 1483.98, "text": " So if we take this N and we grab the first row,", "tokens": [50912, 407, 498, 321, 747, 341, 426, 293, 321, 4444, 264, 700, 5386, 11, 51132], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 341, "seek": 146864, "start": 1484.88, "end": 1488.46, "text": " we can do that by using just indexing a zero,", "tokens": [51177, 321, 393, 360, 300, 538, 1228, 445, 8186, 278, 257, 4018, 11, 51356], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 342, "seek": 146864, "start": 1488.46, "end": 1491.0800000000002, "text": " and then using this notation, colon,", "tokens": [51356, 293, 550, 1228, 341, 24657, 11, 8255, 11, 51487], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 343, "seek": 146864, "start": 1491.0800000000002, "end": 1493.7, "text": " for the rest of that row.", "tokens": [51487, 337, 264, 1472, 295, 300, 5386, 13, 51618], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 344, "seek": 146864, "start": 1493.7, "end": 1498.2, "text": " So N zero colon is indexing into the zero,", "tokens": [51618, 407, 426, 4018, 8255, 307, 8186, 278, 666, 264, 4018, 11, 51843], "temperature": 0.0, "avg_logprob": -0.1599348925669259, "compression_ratio": 1.7302325581395348, "no_speech_prob": 0.0010282840812578797}, {"id": 345, "seek": 149820, "start": 1498.2, "end": 1501.96, "text": " and then it's grabbing all the columns.", "tokens": [50365, 293, 550, 309, 311, 23771, 439, 264, 13766, 13, 50553], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 346, "seek": 149820, "start": 1501.96, "end": 1505.24, "text": " And so this will give us a one-dimensional array", "tokens": [50553, 400, 370, 341, 486, 976, 505, 257, 472, 12, 18759, 10225, 50717], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 347, "seek": 149820, "start": 1505.24, "end": 1506.14, "text": " of the first row.", "tokens": [50717, 295, 264, 700, 5386, 13, 50762], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 348, "seek": 149820, "start": 1506.14, "end": 1508.44, "text": " So zero, four, four, 10.", "tokens": [50762, 407, 4018, 11, 1451, 11, 1451, 11, 1266, 13, 50877], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 349, "seek": 149820, "start": 1508.44, "end": 1510.4, "text": " You know, it's zero, four, four, 10,", "tokens": [50877, 509, 458, 11, 309, 311, 4018, 11, 1451, 11, 1451, 11, 1266, 11, 50975], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 350, "seek": 149820, "start": 1510.4, "end": 1512.94, "text": " one, three, oh, six, one, five, four, two, et cetera.", "tokens": [50975, 472, 11, 1045, 11, 1954, 11, 2309, 11, 472, 11, 1732, 11, 1451, 11, 732, 11, 1030, 11458, 13, 51102], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 351, "seek": 149820, "start": 1512.94, "end": 1514.4, "text": " It's just the first row.", "tokens": [51102, 467, 311, 445, 264, 700, 5386, 13, 51175], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 352, "seek": 149820, "start": 1514.4, "end": 1517.14, "text": " The shape of this is 27.", "tokens": [51175, 440, 3909, 295, 341, 307, 7634, 13, 51312], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 353, "seek": 149820, "start": 1517.14, "end": 1519.8400000000001, "text": " It's just the row of 27.", "tokens": [51312, 467, 311, 445, 264, 5386, 295, 7634, 13, 51447], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 354, "seek": 149820, "start": 1519.8400000000001, "end": 1521.94, "text": " And the other way that you can do this also is you just,", "tokens": [51447, 400, 264, 661, 636, 300, 291, 393, 360, 341, 611, 307, 291, 445, 11, 51552], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 355, "seek": 149820, "start": 1521.94, "end": 1523.76, "text": " you don't actually give this,", "tokens": [51552, 291, 500, 380, 767, 976, 341, 11, 51643], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 356, "seek": 149820, "start": 1523.76, "end": 1526.26, "text": " you just grab the zeroth row like this.", "tokens": [51643, 291, 445, 4444, 264, 44746, 900, 5386, 411, 341, 13, 51768], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 357, "seek": 149820, "start": 1526.26, "end": 1527.26, "text": " This is equivalent.", "tokens": [51768, 639, 307, 10344, 13, 51818], "temperature": 0.0, "avg_logprob": -0.2338676961263021, "compression_ratio": 1.7689243027888446, "no_speech_prob": 0.0010747024789452553}, {"id": 358, "seek": 152820, "start": 1528.2, "end": 1530.0, "text": " Now, these are the counts.", "tokens": [50365, 823, 11, 613, 366, 264, 14893, 13, 50455], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 359, "seek": 152820, "start": 1530.0, "end": 1531.64, "text": " And now what we'd like to do", "tokens": [50455, 400, 586, 437, 321, 1116, 411, 281, 360, 50537], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 360, "seek": 152820, "start": 1531.64, "end": 1535.06, "text": " is we'd like to basically sample from this.", "tokens": [50537, 307, 321, 1116, 411, 281, 1936, 6889, 490, 341, 13, 50708], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 361, "seek": 152820, "start": 1535.06, "end": 1536.14, "text": " Since these are the raw counts,", "tokens": [50708, 4162, 613, 366, 264, 8936, 14893, 11, 50762], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 362, "seek": 152820, "start": 1536.14, "end": 1539.16, "text": " we actually have to convert this to probabilities.", "tokens": [50762, 321, 767, 362, 281, 7620, 341, 281, 33783, 13, 50913], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 363, "seek": 152820, "start": 1539.16, "end": 1541.8600000000001, "text": " So we create a probability vector.", "tokens": [50913, 407, 321, 1884, 257, 8482, 8062, 13, 51048], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 364, "seek": 152820, "start": 1542.96, "end": 1545.06, "text": " So we'll take N of zero,", "tokens": [51103, 407, 321, 603, 747, 426, 295, 4018, 11, 51208], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 365, "seek": 152820, "start": 1545.06, "end": 1548.96, "text": " and we'll actually convert this to float first.", "tokens": [51208, 293, 321, 603, 767, 7620, 341, 281, 15706, 700, 13, 51403], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 366, "seek": 152820, "start": 1550.1000000000001, "end": 1552.9, "text": " Okay, so these integers are converted to float,", "tokens": [51460, 1033, 11, 370, 613, 41674, 366, 16424, 281, 15706, 11, 51600], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 367, "seek": 152820, "start": 1552.9, "end": 1554.14, "text": " floating point numbers.", "tokens": [51600, 12607, 935, 3547, 13, 51662], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 368, "seek": 152820, "start": 1554.14, "end": 1555.7, "text": " And the reason we're creating floats", "tokens": [51662, 400, 264, 1778, 321, 434, 4084, 37878, 51740], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 369, "seek": 152820, "start": 1555.7, "end": 1558.1000000000001, "text": " is because we're about to normalize these counts.", "tokens": [51740, 307, 570, 321, 434, 466, 281, 2710, 1125, 613, 14893, 13, 51860], "temperature": 0.0, "avg_logprob": -0.12407668819272422, "compression_ratio": 1.8553719008264462, "no_speech_prob": 6.541908078361303e-05}, {"id": 370, "seek": 155820, "start": 1558.2, "end": 1560.8600000000001, "text": " So to create a probability distribution here,", "tokens": [50365, 407, 281, 1884, 257, 8482, 7316, 510, 11, 50498], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 371, "seek": 155820, "start": 1560.8600000000001, "end": 1562.06, "text": " we want to divide,", "tokens": [50498, 321, 528, 281, 9845, 11, 50558], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 372, "seek": 155820, "start": 1562.06, "end": 1566.06, "text": " we basically want to do p, p divide, p.sum.", "tokens": [50558, 321, 1936, 528, 281, 360, 280, 11, 280, 9845, 11, 280, 13, 82, 449, 13, 50758], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 373, "seek": 155820, "start": 1568.96, "end": 1571.46, "text": " And now we get a vector of smaller numbers,", "tokens": [50903, 400, 586, 321, 483, 257, 8062, 295, 4356, 3547, 11, 51028], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 374, "seek": 155820, "start": 1571.46, "end": 1573.04, "text": " and these are now probabilities.", "tokens": [51028, 293, 613, 366, 586, 33783, 13, 51107], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 375, "seek": 155820, "start": 1573.04, "end": 1575.3, "text": " So of course, because we divided by the sum,", "tokens": [51107, 407, 295, 1164, 11, 570, 321, 6666, 538, 264, 2408, 11, 51220], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 376, "seek": 155820, "start": 1575.3, "end": 1578.2, "text": " the sum of p now is one.", "tokens": [51220, 264, 2408, 295, 280, 586, 307, 472, 13, 51365], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 377, "seek": 155820, "start": 1578.2, "end": 1580.44, "text": " So this is a nice proper probability distribution.", "tokens": [51365, 407, 341, 307, 257, 1481, 2296, 8482, 7316, 13, 51477], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 378, "seek": 155820, "start": 1580.44, "end": 1581.6000000000001, "text": " It sums to one.", "tokens": [51477, 467, 34499, 281, 472, 13, 51535], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 379, "seek": 155820, "start": 1581.6000000000001, "end": 1582.94, "text": " And this is giving us the probability", "tokens": [51535, 400, 341, 307, 2902, 505, 264, 8482, 51602], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 380, "seek": 155820, "start": 1582.94, "end": 1587.14, "text": " for any single character to be the first character of a word.", "tokens": [51602, 337, 604, 2167, 2517, 281, 312, 264, 700, 2517, 295, 257, 1349, 13, 51812], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 381, "seek": 155820, "start": 1587.14, "end": 1588.1000000000001, "text": " So we can do this.", "tokens": [51812, 407, 321, 393, 360, 341, 13, 51860], "temperature": 0.0, "avg_logprob": -0.33625976799070373, "compression_ratio": 1.8148148148148149, "no_speech_prob": 6.97957439115271e-05}, {"id": 382, "seek": 158810, "start": 1588.1, "end": 1590.86, "text": " So now we can try to sample from this distribution.", "tokens": [50365, 407, 586, 321, 393, 853, 281, 6889, 490, 341, 7316, 13, 50503], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 383, "seek": 158810, "start": 1590.86, "end": 1592.26, "text": " To sample from these distributions,", "tokens": [50503, 1407, 6889, 490, 613, 37870, 11, 50573], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 384, "seek": 158810, "start": 1592.26, "end": 1594.26, "text": " we're going to use torch.multinomial,", "tokens": [50573, 321, 434, 516, 281, 764, 27822, 13, 76, 723, 259, 47429, 11, 50673], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 385, "seek": 158810, "start": 1594.26, "end": 1596.3, "text": " which I've pulled up here.", "tokens": [50673, 597, 286, 600, 7373, 493, 510, 13, 50775], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 386, "seek": 158810, "start": 1596.3, "end": 1601.04, "text": " So torch.multinomial returns samples", "tokens": [50775, 407, 27822, 13, 76, 723, 259, 47429, 11247, 10938, 51012], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 387, "seek": 158810, "start": 1601.04, "end": 1603.3999999999999, "text": " from the multinomial probability distribution,", "tokens": [51012, 490, 264, 45872, 47429, 8482, 7316, 11, 51130], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 388, "seek": 158810, "start": 1603.3999999999999, "end": 1605.24, "text": " which is a complicated way of saying,", "tokens": [51130, 597, 307, 257, 6179, 636, 295, 1566, 11, 51222], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 389, "seek": 158810, "start": 1605.24, "end": 1608.1399999999999, "text": " you give me probabilities and I will give you integers,", "tokens": [51222, 291, 976, 385, 33783, 293, 286, 486, 976, 291, 41674, 11, 51367], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 390, "seek": 158810, "start": 1608.1399999999999, "end": 1611.76, "text": " which are sampled according to the probability distribution.", "tokens": [51367, 597, 366, 3247, 15551, 4650, 281, 264, 8482, 7316, 13, 51548], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 391, "seek": 158810, "start": 1611.76, "end": 1613.34, "text": " So this is the signature of the method.", "tokens": [51548, 407, 341, 307, 264, 13397, 295, 264, 3170, 13, 51627], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 392, "seek": 158810, "start": 1613.34, "end": 1614.86, "text": " And to make everything deterministic,", "tokens": [51627, 400, 281, 652, 1203, 15957, 3142, 11, 51703], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 393, "seek": 158810, "start": 1614.86, "end": 1617.9599999999998, "text": " we're going to use a generator object in PyTorch.", "tokens": [51703, 321, 434, 516, 281, 764, 257, 19265, 2657, 294, 9953, 51, 284, 339, 13, 51858], "temperature": 0.0, "avg_logprob": -0.09007672001333798, "compression_ratio": 1.9365671641791045, "no_speech_prob": 0.00015333230840042233}, {"id": 394, "seek": 161810, "start": 1618.1, "end": 1620.9599999999998, "text": " So this makes everything deterministic.", "tokens": [50365, 407, 341, 1669, 1203, 15957, 3142, 13, 50508], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 395, "seek": 161810, "start": 1620.9599999999998, "end": 1622.6, "text": " So when you run this on your computer,", "tokens": [50508, 407, 562, 291, 1190, 341, 322, 428, 3820, 11, 50590], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 396, "seek": 161810, "start": 1622.6, "end": 1624.6599999999999, "text": " you're going to get the exact same results", "tokens": [50590, 291, 434, 516, 281, 483, 264, 1900, 912, 3542, 50693], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 397, "seek": 161810, "start": 1624.6599999999999, "end": 1627.24, "text": " that I'm getting here on my computer.", "tokens": [50693, 300, 286, 478, 1242, 510, 322, 452, 3820, 13, 50822], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 398, "seek": 161810, "start": 1627.24, "end": 1629.04, "text": " So let me show you how this works.", "tokens": [50822, 407, 718, 385, 855, 291, 577, 341, 1985, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 399, "seek": 161810, "start": 1632.76, "end": 1634.3999999999999, "text": " Here's the deterministic way", "tokens": [51098, 1692, 311, 264, 15957, 3142, 636, 51180], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 400, "seek": 161810, "start": 1634.3999999999999, "end": 1638.1, "text": " of creating a torch generator object,", "tokens": [51180, 295, 4084, 257, 27822, 19265, 2657, 11, 51365], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 401, "seek": 161810, "start": 1638.1, "end": 1641.26, "text": " seeding it with some number that we can agree on.", "tokens": [51365, 8871, 278, 309, 365, 512, 1230, 300, 321, 393, 3986, 322, 13, 51523], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 402, "seek": 161810, "start": 1641.26, "end": 1644.9399999999998, "text": " So that seeds a generator, gives us an object g.", "tokens": [51523, 407, 300, 9203, 257, 19265, 11, 2709, 505, 364, 2657, 290, 13, 51707], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 403, "seek": 161810, "start": 1644.9399999999998, "end": 1647.26, "text": " And then we can pass that g to a function,", "tokens": [51707, 400, 550, 321, 393, 1320, 300, 290, 281, 257, 2445, 11, 51823], "temperature": 0.0, "avg_logprob": -0.1655594817305033, "compression_ratio": 1.7004219409282701, "no_speech_prob": 0.00028258172096684575}, {"id": 404, "seek": 164726, "start": 1647.26, "end": 1651.86, "text": " a function that creates here random numbers.", "tokens": [50365, 257, 2445, 300, 7829, 510, 4974, 3547, 13, 50595], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 405, "seek": 164726, "start": 1651.86, "end": 1655.32, "text": " torch.rand creates random numbers, three of them.", "tokens": [50595, 27822, 13, 3699, 7829, 4974, 3547, 11, 1045, 295, 552, 13, 50768], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 406, "seek": 164726, "start": 1655.32, "end": 1657.66, "text": " And it's using this generator object", "tokens": [50768, 400, 309, 311, 1228, 341, 19265, 2657, 50885], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 407, "seek": 164726, "start": 1657.66, "end": 1660.4, "text": " as a source of randomness.", "tokens": [50885, 382, 257, 4009, 295, 4974, 1287, 13, 51022], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 408, "seek": 164726, "start": 1660.4, "end": 1666.6, "text": " So without normalizing it, I can just print.", "tokens": [51022, 407, 1553, 2710, 3319, 309, 11, 286, 393, 445, 4482, 13, 51332], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 409, "seek": 164726, "start": 1666.6, "end": 1669.02, "text": " This is sort of like numbers between 0 and 1", "tokens": [51332, 639, 307, 1333, 295, 411, 3547, 1296, 1958, 293, 502, 51453], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 410, "seek": 164726, "start": 1669.02, "end": 1671.26, "text": " that are random according to this thing.", "tokens": [51453, 300, 366, 4974, 4650, 281, 341, 551, 13, 51565], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 411, "seek": 164726, "start": 1671.26, "end": 1673.52, "text": " And whenever I run it again, I'm always", "tokens": [51565, 400, 5699, 286, 1190, 309, 797, 11, 286, 478, 1009, 51678], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 412, "seek": 164726, "start": 1673.52, "end": 1675.3, "text": " going to get the same result because I keep", "tokens": [51678, 516, 281, 483, 264, 912, 1874, 570, 286, 1066, 51767], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 413, "seek": 164726, "start": 1675.3, "end": 1677.16, "text": " using the same generator object, which I'm", "tokens": [51767, 1228, 264, 912, 19265, 2657, 11, 597, 286, 478, 51860], "temperature": 0.0, "avg_logprob": -0.22377995082310267, "compression_ratio": 1.7049180327868851, "no_speech_prob": 0.0006064744084142148}, {"id": 414, "seek": 167716, "start": 1677.16, "end": 1678.8600000000001, "text": " seeding here.", "tokens": [50365, 8871, 278, 510, 13, 50450], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 415, "seek": 167716, "start": 1678.8600000000001, "end": 1682.92, "text": " And then if I divide to normalize,", "tokens": [50450, 400, 550, 498, 286, 9845, 281, 2710, 1125, 11, 50653], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 416, "seek": 167716, "start": 1682.92, "end": 1685.22, "text": " I'm going to get a nice probability distribution", "tokens": [50653, 286, 478, 516, 281, 483, 257, 1481, 8482, 7316, 50768], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 417, "seek": 167716, "start": 1685.22, "end": 1687.6000000000001, "text": " of just three elements.", "tokens": [50768, 295, 445, 1045, 4959, 13, 50887], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 418, "seek": 167716, "start": 1687.6000000000001, "end": 1689.4, "text": " And then we can use torch.multinomial", "tokens": [50887, 400, 550, 321, 393, 764, 27822, 13, 76, 723, 259, 47429, 50977], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 419, "seek": 167716, "start": 1689.4, "end": 1691.22, "text": " to draw samples from it.", "tokens": [50977, 281, 2642, 10938, 490, 309, 13, 51068], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 420, "seek": 167716, "start": 1691.22, "end": 1693.76, "text": " So this is what that looks like.", "tokens": [51068, 407, 341, 307, 437, 300, 1542, 411, 13, 51195], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 421, "seek": 167716, "start": 1693.76, "end": 1698.42, "text": " torch.multinomial will take the torch tensor", "tokens": [51195, 27822, 13, 76, 723, 259, 47429, 486, 747, 264, 27822, 40863, 51428], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 422, "seek": 167716, "start": 1698.42, "end": 1701.1000000000001, "text": " of probability distributions.", "tokens": [51428, 295, 8482, 37870, 13, 51562], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 423, "seek": 167716, "start": 1701.1000000000001, "end": 1704.6000000000001, "text": " Then we can ask for a number of samples, let's say 20.", "tokens": [51562, 1396, 321, 393, 1029, 337, 257, 1230, 295, 10938, 11, 718, 311, 584, 945, 13, 51737], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 424, "seek": 167716, "start": 1704.6000000000001, "end": 1707.0600000000002, "text": " Replacement equals true means that when", "tokens": [51737, 47762, 7621, 6915, 2074, 1355, 300, 562, 51860], "temperature": 0.0, "avg_logprob": -0.12769607105086336, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.00018331695173401386}, {"id": 425, "seek": 170706, "start": 1707.06, "end": 1710.72, "text": " we draw an element, we can draw it,", "tokens": [50365, 321, 2642, 364, 4478, 11, 321, 393, 2642, 309, 11, 50548], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 426, "seek": 170706, "start": 1710.72, "end": 1714.36, "text": " and then we can put it back into the list of eligible indices", "tokens": [50548, 293, 550, 321, 393, 829, 309, 646, 666, 264, 1329, 295, 14728, 43840, 50730], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 427, "seek": 170706, "start": 1714.36, "end": 1715.96, "text": " to draw again.", "tokens": [50730, 281, 2642, 797, 13, 50810], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 428, "seek": 170706, "start": 1715.96, "end": 1717.82, "text": " And we have to specify replacement as true", "tokens": [50810, 400, 321, 362, 281, 16500, 14419, 382, 2074, 50903], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 429, "seek": 170706, "start": 1717.82, "end": 1721.7, "text": " because by default, for some reason, it's false.", "tokens": [50903, 570, 538, 7576, 11, 337, 512, 1778, 11, 309, 311, 7908, 13, 51097], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 430, "seek": 170706, "start": 1721.7, "end": 1725.8, "text": " And I think it's just something to be careful with.", "tokens": [51097, 400, 286, 519, 309, 311, 445, 746, 281, 312, 5026, 365, 13, 51302], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 431, "seek": 170706, "start": 1725.8, "end": 1727.44, "text": " And the generator is passed in here.", "tokens": [51302, 400, 264, 19265, 307, 4678, 294, 510, 13, 51384], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 432, "seek": 170706, "start": 1727.44, "end": 1730.1799999999998, "text": " So we are going to always get deterministic results,", "tokens": [51384, 407, 321, 366, 516, 281, 1009, 483, 15957, 3142, 3542, 11, 51521], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 433, "seek": 170706, "start": 1730.1799999999998, "end": 1731.46, "text": " the same results.", "tokens": [51521, 264, 912, 3542, 13, 51585], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 434, "seek": 170706, "start": 1731.46, "end": 1734.1799999999998, "text": " So if I run these two, we're going", "tokens": [51585, 407, 498, 286, 1190, 613, 732, 11, 321, 434, 516, 51721], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 435, "seek": 170706, "start": 1734.1799999999998, "end": 1736.86, "text": " to get a bunch of samples from this distribution.", "tokens": [51721, 281, 483, 257, 3840, 295, 10938, 490, 341, 7316, 13, 51855], "temperature": 0.0, "avg_logprob": -0.11584851855323428, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.00011683657066896558}, {"id": 436, "seek": 173686, "start": 1736.86, "end": 1739.6, "text": " Now, you'll notice here that the probability", "tokens": [50365, 823, 11, 291, 603, 3449, 510, 300, 264, 8482, 50502], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 437, "seek": 173686, "start": 1739.6, "end": 1744.6, "text": " for the first element in this tensor is 60%.", "tokens": [50502, 337, 264, 700, 4478, 294, 341, 40863, 307, 4060, 6856, 50752], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 438, "seek": 173686, "start": 1744.6, "end": 1750.8, "text": " So in these 20 samples, we'd expect 60% of them to be 0.", "tokens": [50752, 407, 294, 613, 945, 10938, 11, 321, 1116, 2066, 4060, 4, 295, 552, 281, 312, 1958, 13, 51062], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 439, "seek": 173686, "start": 1750.8, "end": 1754.4199999999998, "text": " We'd expect 30% of them to be 1.", "tokens": [51062, 492, 1116, 2066, 2217, 4, 295, 552, 281, 312, 502, 13, 51243], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 440, "seek": 173686, "start": 1754.4199999999998, "end": 1759.52, "text": " And because the element index 2 has only 10% probability,", "tokens": [51243, 400, 570, 264, 4478, 8186, 568, 575, 787, 1266, 4, 8482, 11, 51498], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 441, "seek": 173686, "start": 1759.52, "end": 1762.32, "text": " very few of these samples should be 2.", "tokens": [51498, 588, 1326, 295, 613, 10938, 820, 312, 568, 13, 51638], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 442, "seek": 173686, "start": 1762.32, "end": 1765.56, "text": " And indeed, we only have a small number of 2s.", "tokens": [51638, 400, 6451, 11, 321, 787, 362, 257, 1359, 1230, 295, 568, 82, 13, 51800], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 443, "seek": 173686, "start": 1765.56, "end": 1766.52, "text": " And we can sample as many as we want.", "tokens": [51800, 400, 321, 393, 6889, 382, 867, 382, 321, 528, 13, 51848], "temperature": 0.0, "avg_logprob": -0.15845559496398365, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0002017256192630157}, {"id": 444, "seek": 176652, "start": 1766.52, "end": 1771.82, "text": " And the more we sample, the more these numbers", "tokens": [50365, 400, 264, 544, 321, 6889, 11, 264, 544, 613, 3547, 50630], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 445, "seek": 176652, "start": 1771.82, "end": 1775.92, "text": " should roughly have the distribution here.", "tokens": [50630, 820, 9810, 362, 264, 7316, 510, 13, 50835], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 446, "seek": 176652, "start": 1775.92, "end": 1782.58, "text": " So we should have lots of 0s, half as many 1s.", "tokens": [50835, 407, 321, 820, 362, 3195, 295, 1958, 82, 11, 1922, 382, 867, 502, 82, 13, 51168], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 447, "seek": 176652, "start": 1782.58, "end": 1788.96, "text": " And we should have three times as few 1s and three times", "tokens": [51168, 400, 321, 820, 362, 1045, 1413, 382, 1326, 502, 82, 293, 1045, 1413, 51487], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 448, "seek": 176652, "start": 1788.96, "end": 1791.84, "text": " as few 2s.", "tokens": [51487, 382, 1326, 568, 82, 13, 51631], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 449, "seek": 176652, "start": 1791.84, "end": 1793.42, "text": " So you see that we have very few 2s.", "tokens": [51631, 407, 291, 536, 300, 321, 362, 588, 1326, 568, 82, 13, 51710], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 450, "seek": 176652, "start": 1793.42, "end": 1795.78, "text": " We have some 1s, and most of them are 0s.", "tokens": [51710, 492, 362, 512, 502, 82, 11, 293, 881, 295, 552, 366, 1958, 82, 13, 51828], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 451, "seek": 176652, "start": 1795.78, "end": 1796.3, "text": " So that's what we're going to do.", "tokens": [51828, 407, 300, 311, 437, 321, 434, 516, 281, 360, 13, 51854], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 452, "seek": 176652, "start": 1796.3, "end": 1796.5, "text": " Thank you.", "tokens": [51854, 1044, 291, 13, 51864], "temperature": 0.0, "avg_logprob": -0.24914003532623577, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.0008078808896243572}, {"id": 453, "seek": 179652, "start": 1796.52, "end": 1798.9, "text": " So that's what Torchlight Multinomial is doing.", "tokens": [50365, 407, 300, 311, 437, 7160, 339, 2764, 14665, 259, 47429, 307, 884, 13, 50484], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 454, "seek": 179652, "start": 1798.9, "end": 1802.46, "text": " For us here, we are interested in this row.", "tokens": [50484, 1171, 505, 510, 11, 321, 366, 3102, 294, 341, 5386, 13, 50662], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 455, "seek": 179652, "start": 1802.46, "end": 1806.94, "text": " We've created this p here.", "tokens": [50662, 492, 600, 2942, 341, 280, 510, 13, 50886], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 456, "seek": 179652, "start": 1806.94, "end": 1809.76, "text": " And now we can sample from it.", "tokens": [50886, 400, 586, 321, 393, 6889, 490, 309, 13, 51027], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 457, "seek": 179652, "start": 1809.76, "end": 1813.8, "text": " So if we use the same seed, and then we", "tokens": [51027, 407, 498, 321, 764, 264, 912, 8871, 11, 293, 550, 321, 51229], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 458, "seek": 179652, "start": 1813.8, "end": 1818.2, "text": " sample from this distribution, and let's just get one sample,", "tokens": [51229, 6889, 490, 341, 7316, 11, 293, 718, 311, 445, 483, 472, 6889, 11, 51449], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 459, "seek": 179652, "start": 1818.2, "end": 1822.72, "text": " then we see that the sample is, say, 13.", "tokens": [51449, 550, 321, 536, 300, 264, 6889, 307, 11, 584, 11, 3705, 13, 51675], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 460, "seek": 179652, "start": 1822.72, "end": 1825.3, "text": " So this will be the index.", "tokens": [51675, 407, 341, 486, 312, 264, 8186, 13, 51804], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 461, "seek": 179652, "start": 1825.3, "end": 1826.3, "text": " And let's see.", "tokens": [51804, 400, 718, 311, 536, 13, 51854], "temperature": 0.0, "avg_logprob": -0.21496280777120144, "compression_ratio": 1.6057692307692308, "no_speech_prob": 0.0013262295396998525}, {"id": 462, "seek": 182630, "start": 1826.3, "end": 1828.86, "text": " See how it's a tensor that wraps 13?", "tokens": [50365, 3008, 577, 309, 311, 257, 40863, 300, 25831, 3705, 30, 50493], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 463, "seek": 182630, "start": 1828.86, "end": 1833.06, "text": " We again have to use .item to pop out that integer.", "tokens": [50493, 492, 797, 362, 281, 764, 2411, 270, 443, 281, 1665, 484, 300, 24922, 13, 50703], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 464, "seek": 182630, "start": 1833.06, "end": 1837.54, "text": " And now index would be just the number 13.", "tokens": [50703, 400, 586, 8186, 576, 312, 445, 264, 1230, 3705, 13, 50927], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 465, "seek": 182630, "start": 1837.54, "end": 1842.96, "text": " And of course, we can map the i2s of ix", "tokens": [50927, 400, 295, 1164, 11, 321, 393, 4471, 264, 741, 17, 82, 295, 741, 87, 51198], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 466, "seek": 182630, "start": 1842.96, "end": 1846.12, "text": " to figure out exactly which character we're sampling here.", "tokens": [51198, 281, 2573, 484, 2293, 597, 2517, 321, 434, 21179, 510, 13, 51356], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 467, "seek": 182630, "start": 1846.12, "end": 1848.12, "text": " We're sampling m.", "tokens": [51356, 492, 434, 21179, 275, 13, 51456], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 468, "seek": 182630, "start": 1848.12, "end": 1851.28, "text": " So we're saying that the first character is m", "tokens": [51456, 407, 321, 434, 1566, 300, 264, 700, 2517, 307, 275, 51614], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 469, "seek": 182630, "start": 1851.28, "end": 1853.2, "text": " in our generation.", "tokens": [51614, 294, 527, 5125, 13, 51710], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 470, "seek": 182630, "start": 1853.2, "end": 1856.08, "text": " And just looking at the row here, m was drawn.", "tokens": [51710, 400, 445, 1237, 412, 264, 5386, 510, 11, 275, 390, 10117, 13, 51854], "temperature": 0.0, "avg_logprob": -0.14694650823419744, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0005300265038385987}, {"id": 471, "seek": 185608, "start": 1856.08, "end": 1860.1799999999998, "text": " And we can see that m actually starts a large number of words.", "tokens": [50365, 400, 321, 393, 536, 300, 275, 767, 3719, 257, 2416, 1230, 295, 2283, 13, 50570], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 472, "seek": 185608, "start": 1860.1799999999998, "end": 1864.78, "text": " m started 2,500 words out of 32,000 words.", "tokens": [50570, 275, 1409, 568, 11, 7526, 2283, 484, 295, 8858, 11, 1360, 2283, 13, 50800], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 473, "seek": 185608, "start": 1864.78, "end": 1869.1999999999998, "text": " So almost a bit less than 10% of the words start with m.", "tokens": [50800, 407, 1920, 257, 857, 1570, 813, 1266, 4, 295, 264, 2283, 722, 365, 275, 13, 51021], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 474, "seek": 185608, "start": 1869.1999999999998, "end": 1871.58, "text": " So this was actually a fairly likely character to draw.", "tokens": [51021, 407, 341, 390, 767, 257, 6457, 3700, 2517, 281, 2642, 13, 51140], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 475, "seek": 185608, "start": 1875.3799999999999, "end": 1877.1599999999999, "text": " So that would be the first character of our word.", "tokens": [51330, 407, 300, 576, 312, 264, 700, 2517, 295, 527, 1349, 13, 51419], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 476, "seek": 185608, "start": 1877.1599999999999, "end": 1879.8, "text": " And now we can continue to sample more characters,", "tokens": [51419, 400, 586, 321, 393, 2354, 281, 6889, 544, 4342, 11, 51551], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 477, "seek": 185608, "start": 1879.8, "end": 1884.84, "text": " because now we know that m is already sampled.", "tokens": [51551, 570, 586, 321, 458, 300, 275, 307, 1217, 3247, 15551, 13, 51803], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 478, "seek": 185608, "start": 1884.84, "end": 1885.8799999999999, "text": " So now to draw the next character, we're going to use m.", "tokens": [51803, 407, 586, 281, 2642, 264, 958, 2517, 11, 321, 434, 516, 281, 764, 275, 13, 51855], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 479, "seek": 185608, "start": 1885.8799999999999, "end": 1885.96, "text": " m is already sampled. So now to draw the next character, we're going to use m.", "tokens": [51855, 275, 307, 1217, 3247, 15551, 13, 407, 586, 281, 2642, 264, 958, 2517, 11, 321, 434, 516, 281, 764, 275, 13, 51859], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 480, "seek": 185608, "start": 1885.96, "end": 1886.04, "text": " m is already sampled. So now to draw the next character, we're going to use m.", "tokens": [51859, 275, 307, 1217, 3247, 15551, 13, 407, 586, 281, 2642, 264, 958, 2517, 11, 321, 434, 516, 281, 764, 275, 13, 51863], "temperature": 0.0, "avg_logprob": -0.23145015693149684, "compression_ratio": 2.3522267206477734, "no_speech_prob": 0.0005544144660234451}, {"id": 481, "seek": 188608, "start": 1886.08, "end": 1892.76, "text": " And we'll come back here, and we will look for the row that starts with m.", "tokens": [50365, 400, 321, 603, 808, 646, 510, 11, 293, 321, 486, 574, 337, 264, 5386, 300, 3719, 365, 275, 13, 50699], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 482, "seek": 188608, "start": 1892.76, "end": 1896.8, "text": " So you see m, and we have a row here.", "tokens": [50699, 407, 291, 536, 275, 11, 293, 321, 362, 257, 5386, 510, 13, 50901], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 483, "seek": 188608, "start": 1896.8, "end": 1900.76, "text": " So we see that m dot is 516,", "tokens": [50901, 407, 321, 536, 300, 275, 5893, 307, 1025, 6866, 11, 51099], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 484, "seek": 188608, "start": 1900.76, "end": 1903.82, "text": " m a is this many, m b is this many, etc.", "tokens": [51099, 275, 257, 307, 341, 867, 11, 275, 272, 307, 341, 867, 11, 5183, 13, 51252], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 485, "seek": 188608, "start": 1903.82, "end": 1905.6599999999999, "text": " So these are the counts for the next row,", "tokens": [51252, 407, 613, 366, 264, 14893, 337, 264, 958, 5386, 11, 51344], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 486, "seek": 188608, "start": 1905.6599999999999, "end": 1908.72, "text": " and that's the next character that we are going to now generate.", "tokens": [51344, 293, 300, 311, 264, 958, 2517, 300, 321, 366, 516, 281, 586, 8460, 13, 51497], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 487, "seek": 188608, "start": 1908.72, "end": 1911.26, "text": " So I think we are ready to actually just write out the loop,", "tokens": [51497, 407, 286, 519, 321, 366, 1919, 281, 767, 445, 2464, 484, 264, 6367, 11, 51624], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 488, "seek": 188608, "start": 1911.26, "end": 1914.56, "text": " because I think you're starting to get a sense of how this is going to go.", "tokens": [51624, 570, 286, 519, 291, 434, 2891, 281, 483, 257, 2020, 295, 577, 341, 307, 516, 281, 352, 13, 51789], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 489, "seek": 188608, "start": 1914.56, "end": 1915.96, "text": " The...", "tokens": [51789, 440, 485, 51859], "temperature": 0.6000000000000001, "avg_logprob": -0.2465005171926398, "compression_ratio": 1.7419354838709677, "no_speech_prob": 0.0012005037860944867}, {"id": 490, "seek": 191596, "start": 1915.96, "end": 1920.78, "text": " We always begin at index zero because that's the start token and", "tokens": [50365, 492, 1009, 1841, 412, 8186, 4018, 570, 300, 311, 264, 722, 14862, 293, 50606], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 491, "seek": 191596, "start": 1922.2, "end": 1924.2, "text": " Then while true", "tokens": [50677, 1396, 1339, 2074, 50777], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 492, "seek": 191596, "start": 1924.64, "end": 1930.4, "text": " We're going to grab the row corresponding to index that we're currently on so that's P", "tokens": [50799, 492, 434, 516, 281, 4444, 264, 5386, 11760, 281, 8186, 300, 321, 434, 4362, 322, 370, 300, 311, 430, 51087], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 493, "seek": 191596, "start": 1930.8400000000001, "end": 1933.44, "text": " So that's n array at IX", "tokens": [51109, 407, 300, 311, 297, 10225, 412, 49497, 51239], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 494, "seek": 191596, "start": 1934.4, "end": 1936.5, "text": " Converted to float is our P", "tokens": [51287, 2656, 18537, 281, 15706, 307, 527, 430, 51392], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 495, "seek": 191596, "start": 1938.82, "end": 1942.58, "text": " Then we normalize the speed to sum to one", "tokens": [51508, 1396, 321, 2710, 1125, 264, 3073, 281, 2408, 281, 472, 51696], "temperature": 0.0, "avg_logprob": -0.29859137861696006, "compression_ratio": 1.5086705202312138, "no_speech_prob": 0.021543247625231743}, {"id": 496, "seek": 194258, "start": 1942.58, "end": 1944.58, "text": " I", "tokens": [50365, 286, 50465], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 497, "seek": 194258, "start": 1945.54, "end": 1952.24, "text": " Accidentally ran the infinite loop we normalize P to sum to one then we need this generator object", "tokens": [50513, 5725, 36578, 5872, 264, 13785, 6367, 321, 2710, 1125, 430, 281, 2408, 281, 472, 550, 321, 643, 341, 19265, 2657, 50848], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 498, "seek": 194258, "start": 1953.6, "end": 1957.6399999999999, "text": " Now we're going to initialize up here and we're going to draw a single sample from this distribution", "tokens": [50916, 823, 321, 434, 516, 281, 5883, 1125, 493, 510, 293, 321, 434, 516, 281, 2642, 257, 2167, 6889, 490, 341, 7316, 51118], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 499, "seek": 194258, "start": 1959.12, "end": 1960.6999999999998, "text": " And", "tokens": [51192, 400, 51271], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 500, "seek": 194258, "start": 1960.6999999999998, "end": 1964.6599999999999, "text": " Then this is going to tell us what index is going to be next", "tokens": [51271, 1396, 341, 307, 516, 281, 980, 505, 437, 8186, 307, 516, 281, 312, 958, 51469], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 501, "seek": 194258, "start": 1966.1999999999998, "end": 1971.4199999999998, "text": " If the index sampled is zero then that's now the end token", "tokens": [51546, 759, 264, 8186, 3247, 15551, 307, 4018, 550, 300, 311, 586, 264, 917, 14862, 51807], "temperature": 0.0, "avg_logprob": -0.23100305738903226, "compression_ratio": 1.6414141414141414, "no_speech_prob": 8.795178291620687e-05}, {"id": 502, "seek": 197258, "start": 1972.58, "end": 1974.58, "text": " So we will break", "tokens": [50365, 407, 321, 486, 1821, 50465], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 503, "seek": 197258, "start": 1975.26, "end": 1979.56, "text": " Otherwise we are going to print s2i of ix", "tokens": [50499, 10328, 321, 366, 516, 281, 4482, 262, 17, 72, 295, 741, 87, 50714], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 504, "seek": 197258, "start": 1982.3, "end": 1984.3, "text": " i2s of ix", "tokens": [50851, 741, 17, 82, 295, 741, 87, 50951], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 505, "seek": 197258, "start": 1985.6999999999998, "end": 1989.1, "text": " That's pretty much it we're just this should work", "tokens": [51021, 663, 311, 1238, 709, 309, 321, 434, 445, 341, 820, 589, 51191], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 506, "seek": 197258, "start": 1990.1399999999999, "end": 1991.84, "text": " Okay more", "tokens": [51243, 1033, 544, 51328], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 507, "seek": 197258, "start": 1991.84, "end": 1999.4399999999998, "text": " So that's the that's the name that we've sampled. We started with M. The next step was O then R and then dot", "tokens": [51328, 407, 300, 311, 264, 300, 311, 264, 1315, 300, 321, 600, 3247, 15551, 13, 492, 1409, 365, 376, 13, 440, 958, 1823, 390, 422, 550, 497, 293, 550, 5893, 51708], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 508, "seek": 197258, "start": 2001.34, "end": 2002.3999999999999, "text": " And this dot is", "tokens": [51803, 400, 341, 5893, 307, 51856], "temperature": 0.0, "avg_logprob": -0.4009596960885184, "compression_ratio": 1.488235294117647, "no_speech_prob": 0.00021680058853235096}, {"id": 509, "seek": 200240, "start": 2002.4, "end": 2004.4, "text": " We printed here as well, so", "tokens": [50365, 492, 13567, 510, 382, 731, 11, 370, 50465], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 510, "seek": 200240, "start": 2006.22, "end": 2008.22, "text": " Let's not do this a few times", "tokens": [50556, 961, 311, 406, 360, 341, 257, 1326, 1413, 50656], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 511, "seek": 200240, "start": 2009.72, "end": 2014.64, "text": " So let's actually create an out list here", "tokens": [50731, 407, 718, 311, 767, 1884, 364, 484, 1329, 510, 50977], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 512, "seek": 200240, "start": 2016.14, "end": 2021.74, "text": " And instead of printing we're going to append so out dot append this character", "tokens": [51052, 400, 2602, 295, 14699, 321, 434, 516, 281, 34116, 370, 484, 5893, 34116, 341, 2517, 51332], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 513, "seek": 200240, "start": 2022.9, "end": 2024.18, "text": " and", "tokens": [51390, 293, 51454], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 514, "seek": 200240, "start": 2024.18, "end": 2026.64, "text": " Then here let's just print it at the end", "tokens": [51454, 1396, 510, 718, 311, 445, 4482, 309, 412, 264, 917, 51577], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 515, "seek": 200240, "start": 2026.64, "end": 2032.24, "text": " So let's just join up all the outs, and we're just going to print more okay now", "tokens": [51577, 407, 718, 311, 445, 3917, 493, 439, 264, 14758, 11, 293, 321, 434, 445, 516, 281, 4482, 544, 1392, 586, 51857], "temperature": 0.8, "avg_logprob": -0.3820209503173828, "compression_ratio": 1.664835164835165, "no_speech_prob": 0.0008734322618693113}, {"id": 516, "seek": 203224, "start": 2032.24, "end": 2036.8, "text": " always getting the same result because of the generator so if we want to do this a few times", "tokens": [50365, 1009, 1242, 264, 912, 1874, 570, 295, 264, 19265, 370, 498, 321, 528, 281, 360, 341, 257, 1326, 1413, 50593], "temperature": 0.0, "avg_logprob": -0.09892786811379825, "compression_ratio": 1.6733668341708543, "no_speech_prob": 0.0376582145690918}, {"id": 517, "seek": 203224, "start": 2036.8, "end": 2043.76, "text": " we can go for high in range 10 we can sample 10 names and we can just do that 10 times", "tokens": [50593, 321, 393, 352, 337, 1090, 294, 3613, 1266, 321, 393, 6889, 1266, 5288, 293, 321, 393, 445, 360, 300, 1266, 1413, 50941], "temperature": 0.0, "avg_logprob": -0.09892786811379825, "compression_ratio": 1.6733668341708543, "no_speech_prob": 0.0376582145690918}, {"id": 518, "seek": 203224, "start": 2045.6, "end": 2049.2, "text": " and these are the names that we're getting out let's do 20.", "tokens": [51033, 293, 613, 366, 264, 5288, 300, 321, 434, 1242, 484, 718, 311, 360, 945, 13, 51213], "temperature": 0.0, "avg_logprob": -0.09892786811379825, "compression_ratio": 1.6733668341708543, "no_speech_prob": 0.0376582145690918}, {"id": 519, "seek": 203224, "start": 2054.16, "end": 2058.48, "text": " i'll be honest with you this doesn't look right so i started a few minutes to convince myself", "tokens": [51461, 741, 603, 312, 3245, 365, 291, 341, 1177, 380, 574, 558, 370, 741, 1409, 257, 1326, 2077, 281, 13447, 2059, 51677], "temperature": 0.0, "avg_logprob": -0.09892786811379825, "compression_ratio": 1.6733668341708543, "no_speech_prob": 0.0376582145690918}, {"id": 520, "seek": 205848, "start": 2058.48, "end": 2064.16, "text": " that it actually is right the reason these samples are so terrible is that bigram language model", "tokens": [50365, 300, 309, 767, 307, 558, 264, 1778, 613, 10938, 366, 370, 6237, 307, 300, 955, 2356, 2856, 2316, 50649], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 521, "seek": 205848, "start": 2064.8, "end": 2069.04, "text": " is actually just like really terrible we can generate a few more here", "tokens": [50681, 307, 767, 445, 411, 534, 6237, 321, 393, 8460, 257, 1326, 544, 510, 50893], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 522, "seek": 205848, "start": 2070.0, "end": 2073.84, "text": " and you can see that they're kind of like their name like a little bit like yanu", "tokens": [50941, 293, 291, 393, 536, 300, 436, 434, 733, 295, 411, 641, 1315, 411, 257, 707, 857, 411, 17700, 84, 51133], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 523, "seek": 205848, "start": 2073.84, "end": 2080.88, "text": " riley etc but they're just like totally messed up and i mean the reason that this is so bad like", "tokens": [51133, 367, 12062, 5183, 457, 436, 434, 445, 411, 3879, 16507, 493, 293, 741, 914, 264, 1778, 300, 341, 307, 370, 1578, 411, 51485], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 524, "seek": 205848, "start": 2080.88, "end": 2086.4, "text": " we're generating h as a name but you have to think through it from the model's eyes", "tokens": [51485, 321, 434, 17746, 276, 382, 257, 1315, 457, 291, 362, 281, 519, 807, 309, 490, 264, 2316, 311, 2575, 51761], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 525, "seek": 205848, "start": 2086.4, "end": 2088.4, "text": " it doesn't know that this h is different", "tokens": [51761, 309, 1177, 380, 458, 300, 341, 276, 307, 819, 51861], "temperature": 0.6000000000000001, "avg_logprob": -0.12203782849607214, "compression_ratio": 1.8611111111111112, "no_speech_prob": 4.5870830945204943e-05}, {"id": 526, "seek": 208848, "start": 2088.48, "end": 2095.94, "text": " very first h all it knows is that h was previously and now how likely is h the last character well", "tokens": [50365, 588, 700, 276, 439, 309, 3255, 307, 300, 276, 390, 8046, 293, 586, 577, 3700, 307, 276, 264, 1036, 2517, 731, 50738], "temperature": 0.0, "avg_logprob": -0.057869750462221294, "compression_ratio": 1.8701923076923077, "no_speech_prob": 0.27564433217048645}, {"id": 527, "seek": 208848, "start": 2095.94, "end": 2100.54, "text": " it's somewhat likely and so it just makes it last character it doesn't know that there were other", "tokens": [50738, 309, 311, 8344, 3700, 293, 370, 309, 445, 1669, 309, 1036, 2517, 309, 1177, 380, 458, 300, 456, 645, 661, 50968], "temperature": 0.0, "avg_logprob": -0.057869750462221294, "compression_ratio": 1.8701923076923077, "no_speech_prob": 0.27564433217048645}, {"id": 528, "seek": 208848, "start": 2100.54, "end": 2105.5, "text": " things before it or there were not other things before it and so that's why it's generating all", "tokens": [50968, 721, 949, 309, 420, 456, 645, 406, 661, 721, 949, 309, 293, 370, 300, 311, 983, 309, 311, 17746, 439, 51216], "temperature": 0.0, "avg_logprob": -0.057869750462221294, "compression_ratio": 1.8701923076923077, "no_speech_prob": 0.27564433217048645}, {"id": 529, "seek": 208848, "start": 2105.5, "end": 2113.26, "text": " these like some nonsense names another way to do this is to convince yourself that it's actually", "tokens": [51216, 613, 411, 512, 14925, 5288, 1071, 636, 281, 360, 341, 307, 281, 13447, 1803, 300, 309, 311, 767, 51604], "temperature": 0.0, "avg_logprob": -0.057869750462221294, "compression_ratio": 1.8701923076923077, "no_speech_prob": 0.27564433217048645}, {"id": 530, "seek": 211326, "start": 2113.26, "end": 2120.2200000000003, "text": " doing something reasonable even though it's so terrible is these little piece here are 27 right", "tokens": [50365, 884, 746, 10585, 754, 1673, 309, 311, 370, 6237, 307, 613, 707, 2522, 510, 366, 7634, 558, 50713], "temperature": 1.0, "avg_logprob": -0.1997415439502613, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00040241252281703055}, {"id": 531, "seek": 211326, "start": 2120.2200000000003, "end": 2128.2000000000003, "text": " like 27 so how about if we did something like this instead of p having any structure whatsoever", "tokens": [50713, 411, 7634, 370, 577, 466, 498, 321, 630, 746, 411, 341, 2602, 295, 280, 1419, 604, 3877, 17076, 51112], "temperature": 1.0, "avg_logprob": -0.1997415439502613, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00040241252281703055}, {"id": 532, "seek": 211326, "start": 2128.7200000000003, "end": 2132.44, "text": " how about if p was just torch dot ones", "tokens": [51138, 577, 466, 498, 280, 390, 445, 27822, 5893, 2306, 51324], "temperature": 1.0, "avg_logprob": -0.1997415439502613, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00040241252281703055}, {"id": 533, "seek": 211326, "start": 2132.44, "end": 2140.94, "text": " of 27 by default this is a float 32 so this is fine divide 27", "tokens": [51324, 295, 7634, 538, 7576, 341, 307, 257, 15706, 8858, 370, 341, 307, 2489, 9845, 7634, 51749], "temperature": 1.0, "avg_logprob": -0.1997415439502613, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00040241252281703055}, {"id": 534, "seek": 211326, "start": 2140.94, "end": 2143.26, "text": " so what i'm", "tokens": [51749, 370, 437, 741, 478, 51865], "temperature": 1.0, "avg_logprob": -0.1997415439502613, "compression_ratio": 1.6344086021505377, "no_speech_prob": 0.00040241252281703055}, {"id": 535, "seek": 214326, "start": 2143.26, "end": 2148.5600000000004, "text": " doing here is this is the uniform distribution which will make everything equally likely", "tokens": [50365, 884, 510, 307, 341, 307, 264, 9452, 7316, 597, 486, 652, 1203, 12309, 3700, 50630], "temperature": 0.0, "avg_logprob": -0.07135787464323498, "compression_ratio": 1.7951219512195122, "no_speech_prob": 0.039961934089660645}, {"id": 536, "seek": 214326, "start": 2148.5600000000004, "end": 2156.5800000000004, "text": " and we can sample from that so let's see if that does any better okay so it's this is what you", "tokens": [50630, 293, 321, 393, 6889, 490, 300, 370, 718, 311, 536, 498, 300, 775, 604, 1101, 1392, 370, 309, 311, 341, 307, 437, 291, 51031], "temperature": 0.0, "avg_logprob": -0.07135787464323498, "compression_ratio": 1.7951219512195122, "no_speech_prob": 0.039961934089660645}, {"id": 537, "seek": 214326, "start": 2156.5800000000004, "end": 2161.1000000000004, "text": " have from a model that is completely untrained where everything is equally likely so it's", "tokens": [51031, 362, 490, 257, 2316, 300, 307, 2584, 1701, 31774, 689, 1203, 307, 12309, 3700, 370, 309, 311, 51257], "temperature": 0.0, "avg_logprob": -0.07135787464323498, "compression_ratio": 1.7951219512195122, "no_speech_prob": 0.039961934089660645}, {"id": 538, "seek": 214326, "start": 2161.1000000000004, "end": 2167.5, "text": " obviously garbage and then if we have a trained model which is trained on just bigrams this is", "tokens": [51257, 2745, 14150, 293, 550, 498, 321, 362, 257, 8895, 2316, 597, 307, 8895, 322, 445, 955, 2356, 82, 341, 307, 51577], "temperature": 0.0, "avg_logprob": -0.07135787464323498, "compression_ratio": 1.7951219512195122, "no_speech_prob": 0.039961934089660645}, {"id": 539, "seek": 216750, "start": 2167.5, "end": 2172.56, "text": " what we get so you can see that it is more name like it is actually working it's just", "tokens": [50365, 437, 321, 483, 370, 291, 393, 536, 300, 309, 307, 544, 1315, 411, 309, 307, 767, 1364, 309, 311, 445, 50618], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 540, "seek": 216750, "start": 2172.56, "end": 2178.62, "text": " bigram is so terrible and we have to do better now next i would like to fix an inefficiency that", "tokens": [50618, 955, 2356, 307, 370, 6237, 293, 321, 362, 281, 360, 1101, 586, 958, 741, 576, 411, 281, 3191, 364, 7167, 49086, 300, 50921], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 541, "seek": 216750, "start": 2178.62, "end": 2184.22, "text": " we have going on here because what we're doing here is we're always fetching a row of n from", "tokens": [50921, 321, 362, 516, 322, 510, 570, 437, 321, 434, 884, 510, 307, 321, 434, 1009, 23673, 278, 257, 5386, 295, 297, 490, 51201], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 542, "seek": 216750, "start": 2184.22, "end": 2188.98, "text": " the counts matrix up ahead and then we're always doing the same things we're converting to float", "tokens": [51201, 264, 14893, 8141, 493, 2286, 293, 550, 321, 434, 1009, 884, 264, 912, 721, 321, 434, 29942, 281, 15706, 51439], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 543, "seek": 216750, "start": 2188.98, "end": 2193.42, "text": " and we're dividing and we're doing this every single iteration of this loop and we just keep", "tokens": [51439, 293, 321, 434, 26764, 293, 321, 434, 884, 341, 633, 2167, 24784, 295, 341, 6367, 293, 321, 445, 1066, 51661], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 544, "seek": 216750, "start": 2193.42, "end": 2196.78, "text": " renormalizing these rows over and over again and it's extremely inefficient and wasteful", "tokens": [51661, 8124, 24440, 3319, 613, 13241, 670, 293, 670, 797, 293, 309, 311, 4664, 43495, 293, 5964, 906, 51829], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 545, "seek": 216750, "start": 2196.78, "end": 2197.48, "text": " so we're doing this every single iteration of this loop and we just keep renormalizing these rows over", "tokens": [51829, 370, 321, 434, 884, 341, 633, 2167, 24784, 295, 341, 6367, 293, 321, 445, 1066, 8124, 24440, 3319, 613, 13241, 670, 51864], "temperature": 0.4, "avg_logprob": -0.06363386985583183, "compression_ratio": 2.1754966887417218, "no_speech_prob": 0.00010001698683481663}, {"id": 546, "seek": 219748, "start": 2197.48, "end": 2202.36, "text": " so what i'd like to do is i'd like to actually prepare a matrix capital p that will just have", "tokens": [50365, 370, 437, 741, 1116, 411, 281, 360, 307, 741, 1116, 411, 281, 767, 5940, 257, 8141, 4238, 280, 300, 486, 445, 362, 50609], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 547, "seek": 219748, "start": 2202.36, "end": 2207.1, "text": " the probabilities in it so in other words it's going to be the same as the capital n matrix here", "tokens": [50609, 264, 33783, 294, 309, 370, 294, 661, 2283, 309, 311, 516, 281, 312, 264, 912, 382, 264, 4238, 297, 8141, 510, 50846], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 548, "seek": 219748, "start": 2207.1, "end": 2212.7, "text": " of counts but every single row will have the row of probabilities that is normalized to one", "tokens": [50846, 295, 14893, 457, 633, 2167, 5386, 486, 362, 264, 5386, 295, 33783, 300, 307, 48704, 281, 472, 51126], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 549, "seek": 219748, "start": 2212.7, "end": 2217.5, "text": " indicating the probability distribution for the next character given the character before it", "tokens": [51126, 25604, 264, 8482, 7316, 337, 264, 958, 2517, 2212, 264, 2517, 949, 309, 51366], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 550, "seek": 219748, "start": 2217.5, "end": 2223.92, "text": " as defined by which row we're in so basically what we'd like to do is we'd like to just do", "tokens": [51366, 382, 7642, 538, 597, 5386, 321, 434, 294, 370, 1936, 437, 321, 1116, 411, 281, 360, 307, 321, 1116, 411, 281, 445, 360, 51687], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 551, "seek": 219748, "start": 2223.92, "end": 2227.22, "text": " it up front here and then we would like to just use that row here", "tokens": [51687, 309, 493, 1868, 510, 293, 550, 321, 576, 411, 281, 445, 764, 300, 5386, 510, 51852], "temperature": 0.0, "avg_logprob": -0.05824863141582858, "compression_ratio": 1.9703703703703703, "no_speech_prob": 0.0007070866413414478}, {"id": 552, "seek": 222748, "start": 2227.48, "end": 2236.02, "text": " so here we would like to just do p equals p of i x instead okay the other reason i want to do this", "tokens": [50365, 370, 510, 321, 576, 411, 281, 445, 360, 280, 6915, 280, 295, 741, 2031, 2602, 1392, 264, 661, 1778, 741, 528, 281, 360, 341, 50792], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 553, "seek": 222748, "start": 2236.02, "end": 2241.36, "text": " is not just for efficiency but also i would like us to practice these n-dimensional tensors and", "tokens": [50792, 307, 406, 445, 337, 10493, 457, 611, 741, 576, 411, 505, 281, 3124, 613, 297, 12, 18759, 10688, 830, 293, 51059], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 554, "seek": 222748, "start": 2241.36, "end": 2245.18, "text": " i'd like us to practice their manipulation and especially something that's called broadcasting", "tokens": [51059, 741, 1116, 411, 505, 281, 3124, 641, 26475, 293, 2318, 746, 300, 311, 1219, 30024, 51250], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 555, "seek": 222748, "start": 2245.18, "end": 2249.22, "text": " that we'll go into in a second we're actually going to have to become very good at these", "tokens": [51250, 300, 321, 603, 352, 666, 294, 257, 1150, 321, 434, 767, 516, 281, 362, 281, 1813, 588, 665, 412, 613, 51452], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 556, "seek": 222748, "start": 2249.22, "end": 2253.52, "text": " tensor manipulations because if we're going to build out all the way to transformers we're going", "tokens": [51452, 40863, 9258, 4136, 570, 498, 321, 434, 516, 281, 1322, 484, 439, 264, 636, 281, 4088, 433, 321, 434, 516, 51667], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 557, "seek": 222748, "start": 2253.52, "end": 2257.46, "text": " to be doing some pretty complicated array operations for efficiency and we're going to have to do some", "tokens": [51667, 281, 312, 884, 512, 1238, 6179, 10225, 7705, 337, 10493, 293, 321, 434, 516, 281, 362, 281, 360, 512, 51864], "temperature": 0.0, "avg_logprob": -0.06068905255266728, "compression_ratio": 1.9527027027027026, "no_speech_prob": 0.001309188432060182}, {"id": 558, "seek": 225748, "start": 2257.48, "end": 2259.72, "text": " pretty complicated array operations for efficiency and we need to really understand that and be very", "tokens": [50365, 1238, 6179, 10225, 7705, 337, 10493, 293, 321, 643, 281, 534, 1223, 300, 293, 312, 588, 50477], "temperature": 0.0, "avg_logprob": -0.15659238777908624, "compression_ratio": 1.7827868852459017, "no_speech_prob": 0.0005446210270747542}, {"id": 559, "seek": 225748, "start": 2259.72, "end": 2265.46, "text": " good at it so intuitively what we want to do is we first want to grab the floating point", "tokens": [50477, 665, 412, 309, 370, 46506, 437, 321, 528, 281, 360, 307, 321, 700, 528, 281, 4444, 264, 12607, 935, 50764], "temperature": 0.0, "avg_logprob": -0.15659238777908624, "compression_ratio": 1.7827868852459017, "no_speech_prob": 0.0005446210270747542}, {"id": 560, "seek": 225748, "start": 2265.46, "end": 2272.8, "text": " copy of n and i'm mimicking the line here basically and then we want to divide all the rows", "tokens": [50764, 5055, 295, 297, 293, 741, 478, 12247, 10401, 264, 1622, 510, 1936, 293, 550, 321, 528, 281, 9845, 439, 264, 13241, 51131], "temperature": 0.0, "avg_logprob": -0.15659238777908624, "compression_ratio": 1.7827868852459017, "no_speech_prob": 0.0005446210270747542}, {"id": 561, "seek": 225748, "start": 2272.8, "end": 2278.82, "text": " so that they sum to one so we'd like to do something like this p divide p dot sum", "tokens": [51131, 370, 300, 436, 2408, 281, 472, 370, 321, 1116, 411, 281, 360, 746, 411, 341, 280, 9845, 280, 5893, 2408, 51432], "temperature": 0.0, "avg_logprob": -0.15659238777908624, "compression_ratio": 1.7827868852459017, "no_speech_prob": 0.0005446210270747542}, {"id": 562, "seek": 225748, "start": 2278.82, "end": 2286.44, "text": " but now we have to be careful because p dot sum actually produces a sum", "tokens": [51432, 457, 586, 321, 362, 281, 312, 5026, 570, 280, 5893, 2408, 767, 14725, 257, 2408, 51813], "temperature": 0.0, "avg_logprob": -0.15659238777908624, "compression_ratio": 1.7827868852459017, "no_speech_prob": 0.0005446210270747542}, {"id": 563, "seek": 228748, "start": 2287.48, "end": 2297.04, "text": " sorry p equals n dot float copy p dot sum produces a um sums up all of the counts of this entire", "tokens": [50365, 2597, 280, 6915, 297, 5893, 15706, 5055, 280, 5893, 2408, 14725, 257, 1105, 34499, 493, 439, 295, 264, 14893, 295, 341, 2302, 50843], "temperature": 0.0, "avg_logprob": -0.1089575035231454, "compression_ratio": 1.8346456692913387, "no_speech_prob": 0.003312125336378813}, {"id": 564, "seek": 228748, "start": 2297.04, "end": 2302.28, "text": " matrix n and gives us a single number of just the summation of everything so that's not the way we", "tokens": [50843, 8141, 297, 293, 2709, 505, 257, 2167, 1230, 295, 445, 264, 28811, 295, 1203, 370, 300, 311, 406, 264, 636, 321, 51105], "temperature": 0.0, "avg_logprob": -0.1089575035231454, "compression_ratio": 1.8346456692913387, "no_speech_prob": 0.003312125336378813}, {"id": 565, "seek": 228748, "start": 2302.28, "end": 2308.2400000000002, "text": " want to define divide we want to simultaneously and in parallel divide all the rows by their", "tokens": [51105, 528, 281, 6964, 9845, 321, 528, 281, 16561, 293, 294, 8952, 9845, 439, 264, 13241, 538, 641, 51403], "temperature": 0.0, "avg_logprob": -0.1089575035231454, "compression_ratio": 1.8346456692913387, "no_speech_prob": 0.003312125336378813}, {"id": 566, "seek": 228748, "start": 2308.2400000000002, "end": 2314.76, "text": " respective sums so what we have to do now is we have to go into documentation for torch.sum", "tokens": [51403, 23649, 34499, 370, 437, 321, 362, 281, 360, 586, 307, 321, 362, 281, 352, 666, 14333, 337, 27822, 13, 82, 449, 51729], "temperature": 0.0, "avg_logprob": -0.1089575035231454, "compression_ratio": 1.8346456692913387, "no_speech_prob": 0.003312125336378813}, {"id": 567, "seek": 228748, "start": 2314.76, "end": 2317.46, "text": " and we can scroll down here to a definition of the sum and we can see that the sum is", "tokens": [51729, 293, 321, 393, 11369, 760, 510, 281, 257, 7123, 295, 264, 2408, 293, 321, 393, 536, 300, 264, 2408, 307, 51864], "temperature": 0.0, "avg_logprob": -0.1089575035231454, "compression_ratio": 1.8346456692913387, "no_speech_prob": 0.003312125336378813}, {"id": 568, "seek": 231748, "start": 2317.48, "end": 2322.2400000000002, "text": " a definition that is relevant to us which is where we don't only provide an input array", "tokens": [50365, 257, 7123, 300, 307, 7340, 281, 505, 597, 307, 689, 321, 500, 380, 787, 2893, 364, 4846, 10225, 50603], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 569, "seek": 231748, "start": 2322.2400000000002, "end": 2327.54, "text": " that we want to sum but we also provide the dimension along which we want to sum and in", "tokens": [50603, 300, 321, 528, 281, 2408, 457, 321, 611, 2893, 264, 10139, 2051, 597, 321, 528, 281, 2408, 293, 294, 50868], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 570, "seek": 231748, "start": 2327.54, "end": 2333.94, "text": " particular we want to sum up over rows right now one more argument that i want you to pay", "tokens": [50868, 1729, 321, 528, 281, 2408, 493, 670, 13241, 558, 586, 472, 544, 6770, 300, 741, 528, 291, 281, 1689, 51188], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 571, "seek": 231748, "start": 2333.94, "end": 2340.98, "text": " attention to here is the keep them is false if keep them is true then the output tensor", "tokens": [51188, 3202, 281, 510, 307, 264, 1066, 552, 307, 7908, 498, 1066, 552, 307, 2074, 550, 264, 5598, 40863, 51540], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 572, "seek": 231748, "start": 2340.98, "end": 2345.02, "text": " is of the same size as input except of course the dimension along which you summed which", "tokens": [51540, 307, 295, 264, 912, 2744, 382, 4846, 3993, 295, 1164, 264, 10139, 2051, 597, 291, 2408, 1912, 597, 51742], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 573, "seek": 231748, "start": 2345.02, "end": 2347.4, "text": " will become just one", "tokens": [51742, 486, 1813, 445, 472, 51861], "temperature": 0.0, "avg_logprob": -0.1341443630533481, "compression_ratio": 1.9291666666666667, "no_speech_prob": 0.0004663536965381354}, {"id": 574, "seek": 234748, "start": 2347.48, "end": 2355.7, "text": " but if you pass in uh keep them as false then this dimension is squeezed out and so torch.sum", "tokens": [50365, 457, 498, 291, 1320, 294, 2232, 1066, 552, 382, 7908, 550, 341, 10139, 307, 39470, 484, 293, 370, 27822, 13, 82, 449, 50776], "temperature": 0.8, "avg_logprob": -0.19243715359614447, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.00016780896112322807}, {"id": 575, "seek": 234748, "start": 2355.7, "end": 2360.14, "text": " not only does the sum and collapses dimension to be of size one but in addition it does", "tokens": [50776, 406, 787, 775, 264, 2408, 293, 48765, 10139, 281, 312, 295, 2744, 472, 457, 294, 4500, 309, 775, 50998], "temperature": 0.8, "avg_logprob": -0.19243715359614447, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.00016780896112322807}, {"id": 576, "seek": 234748, "start": 2360.14, "end": 2366.36, "text": " what's called a squeeze where it squeeze out it squeezes out that dimension so basically", "tokens": [50998, 437, 311, 1219, 257, 13578, 689, 309, 13578, 484, 309, 22390, 279, 484, 300, 10139, 370, 1936, 51309], "temperature": 0.8, "avg_logprob": -0.19243715359614447, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.00016780896112322807}, {"id": 577, "seek": 234748, "start": 2366.36, "end": 2372.14, "text": " what we want here is we instead want to do p dot sum of sum axis and in particular notice", "tokens": [51309, 437, 321, 528, 510, 307, 321, 2602, 528, 281, 360, 280, 5893, 2408, 295, 2408, 10298, 293, 294, 1729, 3449, 51598], "temperature": 0.8, "avg_logprob": -0.19243715359614447, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.00016780896112322807}, {"id": 578, "seek": 234748, "start": 2372.14, "end": 2377.42, "text": " that p dot shape is 27 by 27 so when we sum up across axis 0", "tokens": [51598, 300, 280, 5893, 3909, 307, 7634, 538, 7634, 370, 562, 321, 2408, 493, 2108, 10298, 1958, 51862], "temperature": 0.8, "avg_logprob": -0.19243715359614447, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.00016780896112322807}, {"id": 579, "seek": 237748, "start": 2377.48, "end": 2379.78, "text": " then we would be taking the 0th dimension", "tokens": [50365, 550, 321, 576, 312, 1940, 264, 1958, 392, 10139, 50480], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 580, "seek": 237748, "start": 2379.78, "end": 2381.48, "text": " and we would be summing across it", "tokens": [50480, 293, 321, 576, 312, 2408, 2810, 2108, 309, 50565], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 581, "seek": 237748, "start": 2381.48, "end": 2383.9, "text": " so when keep dim is true", "tokens": [50565, 370, 562, 1066, 5013, 307, 2074, 50686], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 582, "seek": 237748, "start": 2383.9, "end": 2385.9, "text": " then this thing", "tokens": [50686, 550, 341, 551, 50786], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 583, "seek": 237748, "start": 2385.9, "end": 2388.0, "text": " will not only give us the counts", "tokens": [50786, 486, 406, 787, 976, 505, 264, 14893, 50891], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 584, "seek": 237748, "start": 2388.0, "end": 2388.56, "text": " across", "tokens": [50891, 2108, 50919], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 585, "seek": 237748, "start": 2388.56, "end": 2390.94, "text": " along the columns", "tokens": [50919, 2051, 264, 13766, 51038], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 586, "seek": 237748, "start": 2390.94, "end": 2393.98, "text": " but notice that basically the shape of this", "tokens": [51038, 457, 3449, 300, 1936, 264, 3909, 295, 341, 51190], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 587, "seek": 237748, "start": 2393.98, "end": 2395.22, "text": " is 1 by 27", "tokens": [51190, 307, 502, 538, 7634, 51252], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 588, "seek": 237748, "start": 2395.22, "end": 2396.46, "text": " we just get a row vector", "tokens": [51252, 321, 445, 483, 257, 5386, 8062, 51314], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 589, "seek": 237748, "start": 2396.46, "end": 2399.32, "text": " and the reason we get a row vector here again", "tokens": [51314, 293, 264, 1778, 321, 483, 257, 5386, 8062, 510, 797, 51457], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 590, "seek": 237748, "start": 2399.32, "end": 2400.6, "text": " is because we passed in 0 dimension", "tokens": [51457, 307, 570, 321, 4678, 294, 1958, 10139, 51521], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 591, "seek": 237748, "start": 2400.6, "end": 2402.7400000000002, "text": " so this 0th dimension becomes 1", "tokens": [51521, 370, 341, 1958, 392, 10139, 3643, 502, 51628], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 592, "seek": 237748, "start": 2402.7400000000002, "end": 2404.0, "text": " and we've done a sum", "tokens": [51628, 293, 321, 600, 1096, 257, 2408, 51691], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 593, "seek": 237748, "start": 2404.0, "end": 2405.52, "text": " and we get a row", "tokens": [51691, 293, 321, 483, 257, 5386, 51767], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 594, "seek": 237748, "start": 2405.52, "end": 2407.36, "text": " and so basically we've done the sum", "tokens": [51767, 293, 370, 1936, 321, 600, 1096, 264, 2408, 51859], "temperature": 0.0, "avg_logprob": -0.11663702762488162, "compression_ratio": 1.8808510638297873, "no_speech_prob": 0.028200406581163406}, {"id": 595, "seek": 240736, "start": 2407.36, "end": 2409.7400000000002, "text": " this way, vertically", "tokens": [50365, 341, 636, 11, 28450, 50484], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 596, "seek": 240736, "start": 2409.7400000000002, "end": 2412.1800000000003, "text": " and arrived at just a single 1 by 27", "tokens": [50484, 293, 6678, 412, 445, 257, 2167, 502, 538, 7634, 50606], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 597, "seek": 240736, "start": 2412.1800000000003, "end": 2413.76, "text": " vector of counts", "tokens": [50606, 8062, 295, 14893, 50685], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 598, "seek": 240736, "start": 2413.76, "end": 2416.8, "text": " what happens when you take out keep dim", "tokens": [50685, 437, 2314, 562, 291, 747, 484, 1066, 5013, 50837], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 599, "seek": 240736, "start": 2416.8, "end": 2419.06, "text": " is that we just get 27", "tokens": [50837, 307, 300, 321, 445, 483, 7634, 50950], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 600, "seek": 240736, "start": 2419.06, "end": 2420.5, "text": " so it squeezes out", "tokens": [50950, 370, 309, 22390, 279, 484, 51022], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 601, "seek": 240736, "start": 2420.5, "end": 2421.3, "text": " that dimension", "tokens": [51022, 300, 10139, 51062], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 602, "seek": 240736, "start": 2421.3, "end": 2424.6800000000003, "text": " and we just get a 1 dimensional vector", "tokens": [51062, 293, 321, 445, 483, 257, 502, 18795, 8062, 51231], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 603, "seek": 240736, "start": 2424.6800000000003, "end": 2425.76, "text": " of size 27", "tokens": [51231, 295, 2744, 7634, 51285], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 604, "seek": 240736, "start": 2425.76, "end": 2429.96, "text": " now we don't actually want", "tokens": [51285, 586, 321, 500, 380, 767, 528, 51495], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 605, "seek": 240736, "start": 2429.96, "end": 2432.6400000000003, "text": " 1 by 27 row vector", "tokens": [51495, 502, 538, 7634, 5386, 8062, 51629], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 606, "seek": 240736, "start": 2432.6400000000003, "end": 2434.1800000000003, "text": " because that gives us the", "tokens": [51629, 570, 300, 2709, 505, 264, 51706], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 607, "seek": 240736, "start": 2434.1800000000003, "end": 2435.6600000000003, "text": " counts or the sums", "tokens": [51706, 14893, 420, 264, 34499, 51780], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 608, "seek": 240736, "start": 2435.6600000000003, "end": 2436.34, "text": " across", "tokens": [51780, 2108, 51814], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 609, "seek": 240736, "start": 2436.34, "end": 2437.34, "text": " 0th", "tokens": [51814, 1958, 392, 51864], "temperature": 0.0, "avg_logprob": -0.17049961464077817, "compression_ratio": 1.6735751295336787, "no_speech_prob": 0.0002554576494731009}, {"id": 610, "seek": 243736, "start": 2437.36, "end": 2439.6, "text": " the columns", "tokens": [50365, 264, 13766, 50477], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 611, "seek": 243736, "start": 2439.6, "end": 2441.34, "text": " we actually want to sum the other way", "tokens": [50477, 321, 767, 528, 281, 2408, 264, 661, 636, 50564], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 612, "seek": 243736, "start": 2441.34, "end": 2442.86, "text": " along dimension 1", "tokens": [50564, 2051, 10139, 502, 50640], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 613, "seek": 243736, "start": 2442.86, "end": 2445.8, "text": " and you'll see that the shape of this is 27 by 1", "tokens": [50640, 293, 291, 603, 536, 300, 264, 3909, 295, 341, 307, 7634, 538, 502, 50787], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 614, "seek": 243736, "start": 2445.8, "end": 2447.5, "text": " so it's a column vector", "tokens": [50787, 370, 309, 311, 257, 7738, 8062, 50872], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 615, "seek": 243736, "start": 2447.5, "end": 2450.02, "text": " it's a 27 by 1", "tokens": [50872, 309, 311, 257, 7634, 538, 502, 50998], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 616, "seek": 243736, "start": 2450.02, "end": 2453.98, "text": " vector of counts", "tokens": [50998, 8062, 295, 14893, 51196], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 617, "seek": 243736, "start": 2453.98, "end": 2456.98, "text": " and that's because what's happened here is that we're going horizontally", "tokens": [51196, 293, 300, 311, 570, 437, 311, 2011, 510, 307, 300, 321, 434, 516, 33796, 51346], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 618, "seek": 243736, "start": 2456.98, "end": 2459.96, "text": " and this 27 by 27 matrix becomes a", "tokens": [51346, 293, 341, 7634, 538, 7634, 8141, 3643, 257, 51495], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 619, "seek": 243736, "start": 2459.96, "end": 2463.6800000000003, "text": " 27 by 1 array", "tokens": [51495, 7634, 538, 502, 10225, 51681], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 620, "seek": 243736, "start": 2463.6800000000003, "end": 2466.36, "text": " now you'll notice by the way that", "tokens": [51681, 586, 291, 603, 3449, 538, 264, 636, 300, 51815], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 621, "seek": 243736, "start": 2466.36, "end": 2467.34, "text": " the actual numbers", "tokens": [51815, 264, 3539, 3547, 51864], "temperature": 0.0, "avg_logprob": -0.2600162283888141, "compression_ratio": 1.735, "no_speech_prob": 0.001232702867127955}, {"id": 622, "seek": 246736, "start": 2467.36, "end": 2469.6, "text": " of these counts are identical", "tokens": [50365, 295, 613, 14893, 366, 14800, 50477], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 623, "seek": 246736, "start": 2469.6, "end": 2473.1400000000003, "text": " and that's because this special array of counts here", "tokens": [50477, 293, 300, 311, 570, 341, 2121, 10225, 295, 14893, 510, 50654], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 624, "seek": 246736, "start": 2473.1400000000003, "end": 2474.42, "text": " comes from bigram statistics", "tokens": [50654, 1487, 490, 955, 2356, 12523, 50718], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 625, "seek": 246736, "start": 2474.42, "end": 2476.1800000000003, "text": " and actually it just so happens", "tokens": [50718, 293, 767, 309, 445, 370, 2314, 50806], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 626, "seek": 246736, "start": 2476.1800000000003, "end": 2477.1800000000003, "text": " by chance", "tokens": [50806, 538, 2931, 50856], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 627, "seek": 246736, "start": 2477.1800000000003, "end": 2479.7200000000003, "text": " or because of the way this array is constructed", "tokens": [50856, 420, 570, 295, 264, 636, 341, 10225, 307, 17083, 50983], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 628, "seek": 246736, "start": 2479.7200000000003, "end": 2481.48, "text": " that the sums along the columns", "tokens": [50983, 300, 264, 34499, 2051, 264, 13766, 51071], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 629, "seek": 246736, "start": 2481.48, "end": 2482.5, "text": " or along the rows", "tokens": [51071, 420, 2051, 264, 13241, 51122], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 630, "seek": 246736, "start": 2482.5, "end": 2483.9, "text": " horizontally or vertically", "tokens": [51122, 33796, 420, 28450, 51192], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 631, "seek": 246736, "start": 2483.9, "end": 2484.94, "text": " is identical", "tokens": [51192, 307, 14800, 51244], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 632, "seek": 246736, "start": 2484.94, "end": 2487.7000000000003, "text": " but actually what we want to do in this case", "tokens": [51244, 457, 767, 437, 321, 528, 281, 360, 294, 341, 1389, 51382], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 633, "seek": 246736, "start": 2487.7000000000003, "end": 2489.48, "text": " is we want to sum across the", "tokens": [51382, 307, 321, 528, 281, 2408, 2108, 264, 51471], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 634, "seek": 246736, "start": 2489.48, "end": 2490.5, "text": " rows", "tokens": [51471, 13241, 51522], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 635, "seek": 246736, "start": 2490.5, "end": 2491.7200000000003, "text": " horizontally", "tokens": [51522, 33796, 51583], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 636, "seek": 246736, "start": 2491.7200000000003, "end": 2493.54, "text": " so what we want here", "tokens": [51583, 370, 437, 321, 528, 510, 51674], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 637, "seek": 246736, "start": 2493.54, "end": 2494.56, "text": " is p.sum of 1", "tokens": [51674, 307, 280, 13, 82, 449, 295, 502, 51725], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 638, "seek": 246736, "start": 2494.56, "end": 2495.76, "text": " with keep dim true", "tokens": [51725, 365, 1066, 5013, 2074, 51785], "temperature": 0.0, "avg_logprob": -0.16281224860519658, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.0011331314453855157}, {"id": 639, "seek": 249736, "start": 2497.36, "end": 2499.6, "text": " 27 by 1 column vector", "tokens": [50365, 7634, 538, 502, 7738, 8062, 50477], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 640, "seek": 249736, "start": 2499.6, "end": 2502.0, "text": " and now what we want to do is we want to divide by that", "tokens": [50477, 293, 586, 437, 321, 528, 281, 360, 307, 321, 528, 281, 9845, 538, 300, 50597], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 641, "seek": 249736, "start": 2502.0, "end": 2506.3, "text": " now we have to be careful here again", "tokens": [50597, 586, 321, 362, 281, 312, 5026, 510, 797, 50812], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 642, "seek": 249736, "start": 2506.3, "end": 2508.84, "text": " is it possible to take", "tokens": [50812, 307, 309, 1944, 281, 747, 50939], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 643, "seek": 249736, "start": 2508.84, "end": 2511.42, "text": " what's a p.shape you see here", "tokens": [50939, 437, 311, 257, 280, 13, 82, 42406, 291, 536, 510, 51068], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 644, "seek": 249736, "start": 2511.42, "end": 2512.8, "text": " is 27 by 27", "tokens": [51068, 307, 7634, 538, 7634, 51137], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 645, "seek": 249736, "start": 2512.8, "end": 2516.26, "text": " is it possible to take a 27 by 27 array", "tokens": [51137, 307, 309, 1944, 281, 747, 257, 7634, 538, 7634, 10225, 51310], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 646, "seek": 249736, "start": 2516.26, "end": 2521.4, "text": " and divide it by what is a 27 by 1 array", "tokens": [51310, 293, 9845, 309, 538, 437, 307, 257, 7634, 538, 502, 10225, 51567], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 647, "seek": 249736, "start": 2521.4, "end": 2523.92, "text": " is that an operation that you can do", "tokens": [51567, 307, 300, 364, 6916, 300, 291, 393, 360, 51693], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 648, "seek": 249736, "start": 2523.92, "end": 2527.2000000000003, "text": " and whether or not you can perform this operation is determined by what's called broadcasting", "tokens": [51693, 293, 1968, 420, 406, 291, 393, 2042, 341, 6916, 307, 9540, 538, 437, 311, 1219, 30024, 51857], "temperature": 0.0, "avg_logprob": -0.2815428539714982, "compression_ratio": 1.853080568720379, "no_speech_prob": 0.0002866856812033802}, {"id": 649, "seek": 252720, "start": 2527.2, "end": 2528.04, "text": " rules", "tokens": [50365, 4474, 50407], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 650, "seek": 252720, "start": 2528.04, "end": 2531.7999999999997, "text": " so if you just search broadcasting semantics in torch", "tokens": [50407, 370, 498, 291, 445, 3164, 30024, 4361, 45298, 294, 27822, 50595], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 651, "seek": 252720, "start": 2531.7999999999997, "end": 2534.16, "text": " you'll notice that there's a special definition for", "tokens": [50595, 291, 603, 3449, 300, 456, 311, 257, 2121, 7123, 337, 50713], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 652, "seek": 252720, "start": 2534.16, "end": 2535.66, "text": " what's called broadcasting", "tokens": [50713, 437, 311, 1219, 30024, 50788], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 653, "seek": 252720, "start": 2535.66, "end": 2538.0, "text": " that for whether or not", "tokens": [50788, 300, 337, 1968, 420, 406, 50905], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 654, "seek": 252720, "start": 2538.0, "end": 2543.66, "text": " these two arrays can be combined in a binary operation like division", "tokens": [50905, 613, 732, 41011, 393, 312, 9354, 294, 257, 17434, 6916, 411, 10044, 51188], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 655, "seek": 252720, "start": 2543.66, "end": 2546.5, "text": " so the first condition is each tensor has at least one dimension", "tokens": [51188, 370, 264, 700, 4188, 307, 1184, 40863, 575, 412, 1935, 472, 10139, 51330], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 656, "seek": 252720, "start": 2546.5, "end": 2548.2999999999997, "text": " which is the case for us", "tokens": [51330, 597, 307, 264, 1389, 337, 505, 51420], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 657, "seek": 252720, "start": 2548.2999999999997, "end": 2550.24, "text": " and then when iterating over the dimension sizes", "tokens": [51420, 293, 550, 562, 17138, 990, 670, 264, 10139, 11602, 51517], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 658, "seek": 252720, "start": 2550.24, "end": 2552.2, "text": " starting at the trailing dimension", "tokens": [51517, 2891, 412, 264, 944, 4883, 10139, 51615], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 659, "seek": 252720, "start": 2552.2, "end": 2554.3999999999996, "text": " the dimension sizes must either be equal", "tokens": [51615, 264, 10139, 11602, 1633, 2139, 312, 2681, 51725], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 660, "seek": 252720, "start": 2554.3999999999996, "end": 2555.3999999999996, "text": " one of them is 1", "tokens": [51725, 472, 295, 552, 307, 502, 51775], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 661, "seek": 252720, "start": 2555.3999999999996, "end": 2557.2, "text": " or one of them does not exist", "tokens": [51775, 420, 472, 295, 552, 775, 406, 2514, 51865], "temperature": 0.0, "avg_logprob": -0.2191462398560579, "compression_ratio": 1.8674242424242424, "no_speech_prob": 0.01892094686627388}, {"id": 662, "seek": 255720, "start": 2557.2, "end": 2558.7599999999998, "text": " okay", "tokens": [50365, 1392, 50443], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 663, "seek": 255720, "start": 2558.7599999999998, "end": 2560.3399999999997, "text": " so let's do that", "tokens": [50443, 370, 718, 311, 360, 300, 50522], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 664, "seek": 255720, "start": 2560.3399999999997, "end": 2563.0, "text": " we need to align the two arrays", "tokens": [50522, 321, 643, 281, 7975, 264, 732, 41011, 50655], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 665, "seek": 255720, "start": 2563.0, "end": 2564.1, "text": " and their shapes", "tokens": [50655, 293, 641, 10854, 50710], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 666, "seek": 255720, "start": 2564.1, "end": 2566.64, "text": " which is very easy because both of these shapes have two elements", "tokens": [50710, 597, 307, 588, 1858, 570, 1293, 295, 613, 10854, 362, 732, 4959, 50837], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 667, "seek": 255720, "start": 2566.64, "end": 2568.0, "text": " so they're aligned", "tokens": [50837, 370, 436, 434, 17962, 50905], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 668, "seek": 255720, "start": 2568.0, "end": 2569.5, "text": " then we iterate over", "tokens": [50905, 550, 321, 44497, 670, 50980], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 669, "seek": 255720, "start": 2569.5, "end": 2570.66, "text": " from the right", "tokens": [50980, 490, 264, 558, 51038], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 670, "seek": 255720, "start": 2570.66, "end": 2572.1, "text": " and going to the left", "tokens": [51038, 293, 516, 281, 264, 1411, 51110], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 671, "seek": 255720, "start": 2572.1, "end": 2575.2, "text": " each dimension must be either equal", "tokens": [51110, 1184, 10139, 1633, 312, 2139, 2681, 51265], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 672, "seek": 255720, "start": 2575.2, "end": 2576.3399999999997, "text": " one of them is a 1", "tokens": [51265, 472, 295, 552, 307, 257, 502, 51322], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 673, "seek": 255720, "start": 2576.3399999999997, "end": 2577.66, "text": " or one of them does not exist", "tokens": [51322, 420, 472, 295, 552, 775, 406, 2514, 51388], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 674, "seek": 255720, "start": 2577.66, "end": 2579.3399999999997, "text": " so in this case they're not equal", "tokens": [51388, 370, 294, 341, 1389, 436, 434, 406, 2681, 51472], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 675, "seek": 255720, "start": 2579.3399999999997, "end": 2580.5, "text": " but one of them is a 1", "tokens": [51472, 457, 472, 295, 552, 307, 257, 502, 51530], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 676, "seek": 255720, "start": 2580.5, "end": 2581.7, "text": " so this is fine", "tokens": [51530, 370, 341, 307, 2489, 51590], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 677, "seek": 255720, "start": 2581.7, "end": 2583.7, "text": " and then this dimension they're both equal", "tokens": [51590, 293, 550, 341, 10139, 436, 434, 1293, 2681, 51690], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 678, "seek": 255720, "start": 2583.7, "end": 2585.56, "text": " so this is fine", "tokens": [51690, 370, 341, 307, 2489, 51783], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 679, "seek": 255720, "start": 2585.56, "end": 2587.04, "text": " so all the dimensions", "tokens": [51783, 370, 439, 264, 12819, 51857], "temperature": 0.6000000000000001, "avg_logprob": -0.3686982323141659, "compression_ratio": 1.9316239316239316, "no_speech_prob": 0.0031567024998366833}, {"id": 680, "seek": 258704, "start": 2587.04, "end": 2593.2, "text": " are fine and therefore this operation is broadcastable. So that means that this operation", "tokens": [50365, 366, 2489, 293, 4412, 341, 6916, 307, 9975, 712, 13, 407, 300, 1355, 300, 341, 6916, 50673], "temperature": 0.0, "avg_logprob": -0.07746957759467923, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.09493865072727203}, {"id": 681, "seek": 258704, "start": 2593.2, "end": 2600.38, "text": " is allowed. And what is it that these arrays do when you divide 27 by 27 by 27 by 1? What it does", "tokens": [50673, 307, 4350, 13, 400, 437, 307, 309, 300, 613, 41011, 360, 562, 291, 9845, 7634, 538, 7634, 538, 7634, 538, 502, 30, 708, 309, 775, 51032], "temperature": 0.0, "avg_logprob": -0.07746957759467923, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.09493865072727203}, {"id": 682, "seek": 258704, "start": 2600.38, "end": 2608.36, "text": " is that it takes this dimension 1 and it stretches it out. It copies it to match 27 here in this case.", "tokens": [51032, 307, 300, 309, 2516, 341, 10139, 502, 293, 309, 29058, 309, 484, 13, 467, 14341, 309, 281, 2995, 7634, 510, 294, 341, 1389, 13, 51431], "temperature": 0.0, "avg_logprob": -0.07746957759467923, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.09493865072727203}, {"id": 683, "seek": 258704, "start": 2608.7599999999998, "end": 2615.66, "text": " So in our case, it takes this column vector, which is 27 by 1, and it copies it 27 times", "tokens": [51451, 407, 294, 527, 1389, 11, 309, 2516, 341, 7738, 8062, 11, 597, 307, 7634, 538, 502, 11, 293, 309, 14341, 309, 7634, 1413, 51796], "temperature": 0.0, "avg_logprob": -0.07746957759467923, "compression_ratio": 1.7710280373831775, "no_speech_prob": 0.09493865072727203}, {"id": 684, "seek": 261566, "start": 2615.66, "end": 2623.0, "text": " to make these both be 27 by 27 internally. You can think of it that way. And so it copies those", "tokens": [50365, 281, 652, 613, 1293, 312, 7634, 538, 7634, 19501, 13, 509, 393, 519, 295, 309, 300, 636, 13, 400, 370, 309, 14341, 729, 50732], "temperature": 0.0, "avg_logprob": -0.08163143339611235, "compression_ratio": 1.68, "no_speech_prob": 3.148117457385524e-06}, {"id": 685, "seek": 261566, "start": 2623.0, "end": 2629.48, "text": " counts and then it does an element-wise division, which is what we want because these counts we", "tokens": [50732, 14893, 293, 550, 309, 775, 364, 4478, 12, 3711, 10044, 11, 597, 307, 437, 321, 528, 570, 613, 14893, 321, 51056], "temperature": 0.0, "avg_logprob": -0.08163143339611235, "compression_ratio": 1.68, "no_speech_prob": 3.148117457385524e-06}, {"id": 686, "seek": 261566, "start": 2629.48, "end": 2635.52, "text": " want to divide by them on every single one of these columns in this matrix. So this actually", "tokens": [51056, 528, 281, 9845, 538, 552, 322, 633, 2167, 472, 295, 613, 13766, 294, 341, 8141, 13, 407, 341, 767, 51358], "temperature": 0.0, "avg_logprob": -0.08163143339611235, "compression_ratio": 1.68, "no_speech_prob": 3.148117457385524e-06}, {"id": 687, "seek": 261566, "start": 2635.52, "end": 2642.24, "text": " we expect will normalize every single row. And we can check that this is true by taking the first", "tokens": [51358, 321, 2066, 486, 2710, 1125, 633, 2167, 5386, 13, 400, 321, 393, 1520, 300, 341, 307, 2074, 538, 1940, 264, 700, 51694], "temperature": 0.0, "avg_logprob": -0.08163143339611235, "compression_ratio": 1.68, "no_speech_prob": 3.148117457385524e-06}, {"id": 688, "seek": 261566, "start": 2642.24, "end": 2644.8199999999997, "text": " row, for example, and taking its sum.", "tokens": [51694, 5386, 11, 337, 1365, 11, 293, 1940, 1080, 2408, 13, 51823], "temperature": 0.0, "avg_logprob": -0.08163143339611235, "compression_ratio": 1.68, "no_speech_prob": 3.148117457385524e-06}, {"id": 689, "seek": 264482, "start": 2644.82, "end": 2653.0, "text": " We expect this to be 1 because it's now normalized. And then we expect this now because", "tokens": [50365, 492, 2066, 341, 281, 312, 502, 570, 309, 311, 586, 48704, 13, 400, 550, 321, 2066, 341, 586, 570, 50774], "temperature": 0.0, "avg_logprob": -0.07459437952632397, "compression_ratio": 1.8373015873015872, "no_speech_prob": 1.6799971490399912e-05}, {"id": 690, "seek": 264482, "start": 2653.0, "end": 2657.4, "text": " if we actually correctly normalize all the rows, we expect to get the exact same result here.", "tokens": [50774, 498, 321, 767, 8944, 2710, 1125, 439, 264, 13241, 11, 321, 2066, 281, 483, 264, 1900, 912, 1874, 510, 13, 50994], "temperature": 0.0, "avg_logprob": -0.07459437952632397, "compression_ratio": 1.8373015873015872, "no_speech_prob": 1.6799971490399912e-05}, {"id": 691, "seek": 264482, "start": 2657.8, "end": 2664.06, "text": " So let's run this. It's the exact same result. So this is correct. So now I would like to scare", "tokens": [51014, 407, 718, 311, 1190, 341, 13, 467, 311, 264, 1900, 912, 1874, 13, 407, 341, 307, 3006, 13, 407, 586, 286, 576, 411, 281, 17185, 51327], "temperature": 0.0, "avg_logprob": -0.07459437952632397, "compression_ratio": 1.8373015873015872, "no_speech_prob": 1.6799971490399912e-05}, {"id": 692, "seek": 264482, "start": 2664.06, "end": 2668.6600000000003, "text": " you a little bit. You actually have to like, I basically encourage you very strongly to read", "tokens": [51327, 291, 257, 707, 857, 13, 509, 767, 362, 281, 411, 11, 286, 1936, 5373, 291, 588, 10613, 281, 1401, 51557], "temperature": 0.0, "avg_logprob": -0.07459437952632397, "compression_ratio": 1.8373015873015872, "no_speech_prob": 1.6799971490399912e-05}, {"id": 693, "seek": 264482, "start": 2668.6600000000003, "end": 2673.2200000000003, "text": " through broadcasting semantics. And I encourage you to treat this with respect. And it's not", "tokens": [51557, 807, 30024, 4361, 45298, 13, 400, 286, 5373, 291, 281, 2387, 341, 365, 3104, 13, 400, 309, 311, 406, 51785], "temperature": 0.0, "avg_logprob": -0.07459437952632397, "compression_ratio": 1.8373015873015872, "no_speech_prob": 1.6799971490399912e-05}, {"id": 694, "seek": 267482, "start": 2674.82, "end": 2678.2000000000003, "text": " something you should do with it. It's something to really respect, really understand and look up", "tokens": [50365, 746, 291, 820, 360, 365, 309, 13, 467, 311, 746, 281, 534, 3104, 11, 534, 1223, 293, 574, 493, 50534], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 695, "seek": 267482, "start": 2678.2000000000003, "end": 2682.6000000000004, "text": " maybe some tutorials for broadcasting and practice it and be careful with it because you can very", "tokens": [50534, 1310, 512, 17616, 337, 30024, 293, 3124, 309, 293, 312, 5026, 365, 309, 570, 291, 393, 588, 50754], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 696, "seek": 267482, "start": 2682.6000000000004, "end": 2689.2400000000002, "text": " quickly run into bugs. Let me show you what I mean. You see how here we have p dot sum of 1,", "tokens": [50754, 2661, 1190, 666, 15120, 13, 961, 385, 855, 291, 437, 286, 914, 13, 509, 536, 577, 510, 321, 362, 280, 5893, 2408, 295, 502, 11, 51086], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 697, "seek": 267482, "start": 2689.2400000000002, "end": 2695.82, "text": " keep them as true. The shape of this is 27 by 1. Let me take out this line just so we have the n,", "tokens": [51086, 1066, 552, 382, 2074, 13, 440, 3909, 295, 341, 307, 7634, 538, 502, 13, 961, 385, 747, 484, 341, 1622, 445, 370, 321, 362, 264, 297, 11, 51415], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 698, "seek": 267482, "start": 2695.82, "end": 2703.8, "text": " and then we can see the counts. We can see that this is all the counts across all the rows. And", "tokens": [51415, 293, 550, 321, 393, 536, 264, 14893, 13, 492, 393, 536, 300, 341, 307, 439, 264, 14893, 2108, 439, 264, 13241, 13, 400, 51814], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 699, "seek": 267482, "start": 2703.8, "end": 2704.76, "text": " it's 27 by 1.", "tokens": [51814, 309, 311, 7634, 538, 502, 13, 51862], "temperature": 0.6000000000000001, "avg_logprob": -0.3219908787653996, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0007976994384080172}, {"id": 700, "seek": 270482, "start": 2704.82, "end": 2711.6400000000003, "text": " vector right now suppose that I tried to do the following but I erase keep them", "tokens": [50365, 8062, 558, 586, 7297, 300, 286, 3031, 281, 360, 264, 3480, 457, 286, 23525, 1066, 552, 50706], "temperature": 0.0, "avg_logprob": -0.11881334885306981, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0523437075316906}, {"id": 701, "seek": 270482, "start": 2711.6400000000003, "end": 2717.36, "text": " just true here what does that do if keep them is not true it's false then", "tokens": [50706, 445, 2074, 510, 437, 775, 300, 360, 498, 1066, 552, 307, 406, 2074, 309, 311, 7908, 550, 50992], "temperature": 0.0, "avg_logprob": -0.11881334885306981, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0523437075316906}, {"id": 702, "seek": 270482, "start": 2717.36, "end": 2721.44, "text": " remember according to documentation it gets rid of this dimension one it", "tokens": [50992, 1604, 4650, 281, 14333, 309, 2170, 3973, 295, 341, 10139, 472, 309, 51196], "temperature": 0.0, "avg_logprob": -0.11881334885306981, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0523437075316906}, {"id": 703, "seek": 270482, "start": 2721.44, "end": 2726.0, "text": " squeezes it out so basically we just get all the same counts the same result", "tokens": [51196, 22390, 279, 309, 484, 370, 1936, 321, 445, 483, 439, 264, 912, 14893, 264, 912, 1874, 51424], "temperature": 0.0, "avg_logprob": -0.11881334885306981, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0523437075316906}, {"id": 704, "seek": 270482, "start": 2726.0, "end": 2732.06, "text": " except the shape of it is not 27 by 1 it's just 27 the one disappears but all", "tokens": [51424, 3993, 264, 3909, 295, 309, 307, 406, 7634, 538, 502, 309, 311, 445, 7634, 264, 472, 25527, 457, 439, 51727], "temperature": 0.0, "avg_logprob": -0.11881334885306981, "compression_ratio": 1.6784140969162995, "no_speech_prob": 0.0523437075316906}, {"id": 705, "seek": 273206, "start": 2732.06, "end": 2739.2999999999997, "text": " the counts are the same so you'd think that this divide that would would work", "tokens": [50365, 264, 14893, 366, 264, 912, 370, 291, 1116, 519, 300, 341, 9845, 300, 576, 576, 589, 50727], "temperature": 0.0, "avg_logprob": -0.20248974453319202, "compression_ratio": 1.7967032967032968, "no_speech_prob": 8.401804370805621e-05}, {"id": 706, "seek": 273206, "start": 2739.2999999999997, "end": 2744.2999999999997, "text": " first of all can we even write this and will it even is it even is it even", "tokens": [50727, 700, 295, 439, 393, 321, 754, 2464, 341, 293, 486, 309, 754, 307, 309, 754, 307, 309, 754, 50977], "temperature": 0.0, "avg_logprob": -0.20248974453319202, "compression_ratio": 1.7967032967032968, "no_speech_prob": 8.401804370805621e-05}, {"id": 707, "seek": 273206, "start": 2744.2999999999997, "end": 2747.72, "text": " expected to run is it broadcastable let's determine if this result is", "tokens": [50977, 5176, 281, 1190, 307, 309, 9975, 712, 718, 311, 6997, 498, 341, 1874, 307, 51148], "temperature": 0.0, "avg_logprob": -0.20248974453319202, "compression_ratio": 1.7967032967032968, "no_speech_prob": 8.401804370805621e-05}, {"id": 708, "seek": 273206, "start": 2747.72, "end": 2757.34, "text": " broadcastable p.summit1 is shape is 27 this is 27 by 27 so 27 by 27", "tokens": [51148, 9975, 712, 280, 13, 82, 449, 3508, 16, 307, 3909, 307, 7634, 341, 307, 7634, 538, 7634, 370, 7634, 538, 7634, 51629], "temperature": 0.0, "avg_logprob": -0.20248974453319202, "compression_ratio": 1.7967032967032968, "no_speech_prob": 8.401804370805621e-05}, {"id": 709, "seek": 273206, "start": 2757.34, "end": 2762.04, "text": " broadcasting into 27 so now rules of", "tokens": [51629, 30024, 666, 7634, 370, 586, 4474, 295, 51864], "temperature": 0.0, "avg_logprob": -0.20248974453319202, "compression_ratio": 1.7967032967032968, "no_speech_prob": 8.401804370805621e-05}, {"id": 710, "seek": 276204, "start": 2762.04, "end": 2766.48, "text": " broadcasting number one align all the dimensions on the right done now", "tokens": [50365, 30024, 1230, 472, 7975, 439, 264, 12819, 322, 264, 558, 1096, 586, 50587], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 711, "seek": 276204, "start": 2766.48, "end": 2769.18, "text": " iteration over all the dimensions starting from the right going to the", "tokens": [50587, 24784, 670, 439, 264, 12819, 2891, 490, 264, 558, 516, 281, 264, 50722], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 712, "seek": 276204, "start": 2769.18, "end": 2774.92, "text": " left all the dimensions must either be equal one of them must be one or one then", "tokens": [50722, 1411, 439, 264, 12819, 1633, 2139, 312, 2681, 472, 295, 552, 1633, 312, 472, 420, 472, 550, 51009], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 713, "seek": 276204, "start": 2774.92, "end": 2779.2, "text": " does not exist so here they are all equal here the dimension does not exist", "tokens": [51009, 775, 406, 2514, 370, 510, 436, 366, 439, 2681, 510, 264, 10139, 775, 406, 2514, 51223], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 714, "seek": 276204, "start": 2779.2, "end": 2786.1, "text": " so internally what broadcasting will do is it will create a one here and then we", "tokens": [51223, 370, 19501, 437, 30024, 486, 360, 307, 309, 486, 1884, 257, 472, 510, 293, 550, 321, 51568], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 715, "seek": 276204, "start": 2786.1, "end": 2790.48, "text": " see that one of them is a one and this will get copied and this will run this", "tokens": [51568, 536, 300, 472, 295, 552, 307, 257, 472, 293, 341, 486, 483, 25365, 293, 341, 486, 1190, 341, 51787], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 716, "seek": 276204, "start": 2790.48, "end": 2790.98, "text": " will broadcast", "tokens": [51787, 486, 9975, 51812], "temperature": 0.0, "avg_logprob": -0.12640174081392377, "compression_ratio": 2.2369668246445498, "no_speech_prob": 0.0014658099971711636}, {"id": 717, "seek": 279204, "start": 2792.04, "end": 2802.1, "text": " okay so you'd expect this to work because we we are this broadcast and", "tokens": [50365, 1392, 370, 291, 1116, 2066, 341, 281, 589, 570, 321, 321, 366, 341, 9975, 293, 50868], "temperature": 0.0, "avg_logprob": -0.2045957135482573, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0007187133305706084}, {"id": 718, "seek": 279204, "start": 2802.1, "end": 2806.8, "text": " this we can divide this now if I run this you'd expect it to work but it", "tokens": [50868, 341, 321, 393, 9845, 341, 586, 498, 286, 1190, 341, 291, 1116, 2066, 309, 281, 589, 457, 309, 51103], "temperature": 0.0, "avg_logprob": -0.2045957135482573, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0007187133305706084}, {"id": 719, "seek": 279204, "start": 2806.8, "end": 2811.22, "text": " doesn't you actually get garbage you get a wrong result because this is actually", "tokens": [51103, 1177, 380, 291, 767, 483, 14150, 291, 483, 257, 2085, 1874, 570, 341, 307, 767, 51324], "temperature": 0.0, "avg_logprob": -0.2045957135482573, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0007187133305706084}, {"id": 720, "seek": 279204, "start": 2811.22, "end": 2821.38, "text": " a bug this keep them equals true makes it work this is a bug", "tokens": [51324, 257, 7426, 341, 1066, 552, 6915, 2074, 1669, 309, 589, 341, 307, 257, 7426, 51832], "temperature": 0.0, "avg_logprob": -0.2045957135482573, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0007187133305706084}, {"id": 721, "seek": 282204, "start": 2822.04, "end": 2826.48, "text": " but it's actually we are this in both cases we are doing the correct counts we", "tokens": [50365, 457, 309, 311, 767, 321, 366, 341, 294, 1293, 3331, 321, 366, 884, 264, 3006, 14893, 321, 50587], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 722, "seek": 282204, "start": 2826.48, "end": 2831.7599999999998, "text": " are summing up across the rows but keep them is saving us and making it work so", "tokens": [50587, 366, 2408, 2810, 493, 2108, 264, 13241, 457, 1066, 552, 307, 6816, 505, 293, 1455, 309, 589, 370, 50851], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 723, "seek": 282204, "start": 2831.7599999999998, "end": 2835.04, "text": " in this case I'd like you to encourage you to potentially like pause this video", "tokens": [50851, 294, 341, 1389, 286, 1116, 411, 291, 281, 5373, 291, 281, 7263, 411, 10465, 341, 960, 51015], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 724, "seek": 282204, "start": 2835.04, "end": 2839.36, "text": " at this point and try to think about why this is buggy and why the keep dem was", "tokens": [51015, 412, 341, 935, 293, 853, 281, 519, 466, 983, 341, 307, 7426, 1480, 293, 983, 264, 1066, 1371, 390, 51231], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 725, "seek": 282204, "start": 2839.36, "end": 2846.54, "text": " necessary here okay so the reason to do for this is I'm trying to hint at here", "tokens": [51231, 4818, 510, 1392, 370, 264, 1778, 281, 360, 337, 341, 307, 286, 478, 1382, 281, 12075, 412, 510, 51590], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 726, "seek": 282204, "start": 2846.54, "end": 2851.98, "text": " when I was sort of giving you a bit of a hint on how this works this 27 factor is", "tokens": [51590, 562, 286, 390, 1333, 295, 2902, 291, 257, 857, 295, 257, 12075, 322, 577, 341, 1985, 341, 7634, 5952, 307, 51862], "temperature": 0.8, "avg_logprob": -0.46731148081377516, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.001715704333037138}, {"id": 727, "seek": 285204, "start": 2852.04, "end": 2859.8, "text": " internally inside the broadcasting this becomes a 1 by 27 and 1 by 27 is a row vector right and", "tokens": [50365, 19501, 1854, 264, 30024, 341, 3643, 257, 502, 538, 7634, 293, 502, 538, 7634, 307, 257, 5386, 8062, 558, 293, 50753], "temperature": 0.0, "avg_logprob": -0.11122434726659802, "compression_ratio": 1.7607361963190185, "no_speech_prob": 0.02388552390038967}, {"id": 728, "seek": 285204, "start": 2859.8, "end": 2866.98, "text": " now we are dividing 27 by 27 by 1 by 27 and torch will replicate this dimension so basically", "tokens": [50753, 586, 321, 366, 26764, 7634, 538, 7634, 538, 502, 538, 7634, 293, 27822, 486, 25356, 341, 10139, 370, 1936, 51112], "temperature": 0.0, "avg_logprob": -0.11122434726659802, "compression_ratio": 1.7607361963190185, "no_speech_prob": 0.02388552390038967}, {"id": 729, "seek": 285204, "start": 2866.98, "end": 2876.94, "text": " it will take it will take this row vector and it will copy it vertically now 27 times so the 27 by", "tokens": [51112, 309, 486, 747, 309, 486, 747, 341, 5386, 8062, 293, 309, 486, 5055, 309, 28450, 586, 7634, 1413, 370, 264, 7634, 538, 51610], "temperature": 0.0, "avg_logprob": -0.11122434726659802, "compression_ratio": 1.7607361963190185, "no_speech_prob": 0.02388552390038967}, {"id": 730, "seek": 287694, "start": 2876.94, "end": 2884.76, "text": " 27 lines exactly and element wise divides and so basically what's happening here is we're actually", "tokens": [50365, 7634, 3876, 2293, 293, 4478, 10829, 41347, 293, 370, 1936, 437, 311, 2737, 510, 307, 321, 434, 767, 50756], "temperature": 0.0, "avg_logprob": -0.11054580476548936, "compression_ratio": 1.7894736842105263, "no_speech_prob": 7.976629422046244e-05}, {"id": 731, "seek": 287694, "start": 2884.76, "end": 2891.44, "text": " normalizing the columns instead of normalizing the rows so you can check that what's happening", "tokens": [50756, 2710, 3319, 264, 13766, 2602, 295, 2710, 3319, 264, 13241, 370, 291, 393, 1520, 300, 437, 311, 2737, 51090], "temperature": 0.0, "avg_logprob": -0.11054580476548936, "compression_ratio": 1.7894736842105263, "no_speech_prob": 7.976629422046244e-05}, {"id": 732, "seek": 287694, "start": 2891.44, "end": 2899.92, "text": " here is that P at 0 which is the first row of P dot sum is not 1 it's 7 it is the first column", "tokens": [51090, 510, 307, 300, 430, 412, 1958, 597, 307, 264, 700, 5386, 295, 430, 5893, 2408, 307, 406, 502, 309, 311, 1614, 309, 307, 264, 700, 7738, 51514], "temperature": 0.0, "avg_logprob": -0.11054580476548936, "compression_ratio": 1.7894736842105263, "no_speech_prob": 7.976629422046244e-05}, {"id": 733, "seek": 287694, "start": 2899.92, "end": 2906.92, "text": " as an example that sums to 1 so to summarize where does the issue come from the issue", "tokens": [51514, 382, 364, 1365, 300, 34499, 281, 502, 370, 281, 20858, 689, 775, 264, 2734, 808, 490, 264, 2734, 51864], "temperature": 0.0, "avg_logprob": -0.11054580476548936, "compression_ratio": 1.7894736842105263, "no_speech_prob": 7.976629422046244e-05}, {"id": 734, "seek": 290692, "start": 2906.92, "end": 2911.96, "text": " comes from the silent adding of a dimension here because in broadcasting rules you align on the", "tokens": [50365, 1487, 490, 264, 12784, 5127, 295, 257, 10139, 510, 570, 294, 30024, 4474, 291, 7975, 322, 264, 50617], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 735, "seek": 290692, "start": 2911.96, "end": 2916.82, "text": " right and go from right to left and if dimension doesn't exist you create it so that's where the", "tokens": [50617, 558, 293, 352, 490, 558, 281, 1411, 293, 498, 10139, 1177, 380, 2514, 291, 1884, 309, 370, 300, 311, 689, 264, 50860], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 736, "seek": 290692, "start": 2916.82, "end": 2921.9, "text": " problem happens we still did the counts correctly we did the counts across the rows and we got the", "tokens": [50860, 1154, 2314, 321, 920, 630, 264, 14893, 8944, 321, 630, 264, 14893, 2108, 264, 13241, 293, 321, 658, 264, 51114], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 737, "seek": 290692, "start": 2921.9, "end": 2928.46, "text": " counts on the right here as a column vector but because the keep dims was true this this this", "tokens": [51114, 14893, 322, 264, 558, 510, 382, 257, 7738, 8062, 457, 570, 264, 1066, 5013, 82, 390, 2074, 341, 341, 341, 51442], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 738, "seek": 290692, "start": 2928.46, "end": 2933.2000000000003, "text": " dimension was discarded and now we just have a vector 27 and because of broadcasting the way", "tokens": [51442, 10139, 390, 45469, 293, 586, 321, 445, 362, 257, 8062, 7634, 293, 570, 295, 30024, 264, 636, 51679], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 739, "seek": 290692, "start": 2933.2000000000003, "end": 2936.38, "text": " it works this vector of 27 suddenly becomes a row vector", "tokens": [51679, 309, 1985, 341, 8062, 295, 7634, 5800, 3643, 257, 5386, 8062, 51838], "temperature": 0.0, "avg_logprob": -0.09709052716271352, "compression_ratio": 1.9384057971014492, "no_speech_prob": 0.0004819005844183266}, {"id": 740, "seek": 293692, "start": 2936.92, "end": 2941.08, "text": " and then this row vector gets replicated vertically and at every single point we", "tokens": [50365, 293, 550, 341, 5386, 8062, 2170, 46365, 28450, 293, 412, 633, 2167, 935, 321, 50573], "temperature": 0.0, "avg_logprob": -0.11950315128673207, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.00026505879941396415}, {"id": 741, "seek": 293692, "start": 2941.08, "end": 2951.4, "text": " are dividing by the by the count in the opposite direction so so this thing just doesn't work", "tokens": [50573, 366, 26764, 538, 264, 538, 264, 1207, 294, 264, 6182, 3513, 370, 370, 341, 551, 445, 1177, 380, 589, 51089], "temperature": 0.0, "avg_logprob": -0.11950315128673207, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.00026505879941396415}, {"id": 742, "seek": 293692, "start": 2951.4, "end": 2958.36, "text": " this needs to be keep dims equals true in this case so then then we have that P at 0 is normalized", "tokens": [51089, 341, 2203, 281, 312, 1066, 5013, 82, 6915, 2074, 294, 341, 1389, 370, 550, 550, 321, 362, 300, 430, 412, 1958, 307, 48704, 51437], "temperature": 0.0, "avg_logprob": -0.11950315128673207, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.00026505879941396415}, {"id": 743, "seek": 293692, "start": 2959.8, "end": 2963.16, "text": " and conversely the first column you'd expect to potentially not be normalized", "tokens": [51509, 293, 2615, 736, 264, 700, 7738, 291, 1116, 2066, 281, 7263, 406, 312, 48704, 51677], "temperature": 0.0, "avg_logprob": -0.11950315128673207, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.00026505879941396415}, {"id": 744, "seek": 293692, "start": 2964.52, "end": 2965.96, "text": " and this is what makes it work", "tokens": [51745, 293, 341, 307, 437, 1669, 309, 589, 51817], "temperature": 0.0, "avg_logprob": -0.11950315128673207, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.00026505879941396415}, {"id": 745, "seek": 296692, "start": 2967.56, "end": 2973.56, "text": " so pretty subtle and hopefully this helps to scare you that you should have respect for", "tokens": [50397, 370, 1238, 13743, 293, 4696, 341, 3665, 281, 17185, 291, 300, 291, 820, 362, 3104, 337, 50697], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 746, "seek": 296692, "start": 2973.56, "end": 2978.84, "text": " broadcasting be careful check your work and understand how it works under the hood and make", "tokens": [50697, 30024, 312, 5026, 1520, 428, 589, 293, 1223, 577, 309, 1985, 833, 264, 13376, 293, 652, 50961], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 747, "seek": 296692, "start": 2978.84, "end": 2982.36, "text": " sure that it's broadcasting in the direction that you like otherwise you're going to introduce very", "tokens": [50961, 988, 300, 309, 311, 30024, 294, 264, 3513, 300, 291, 411, 5911, 291, 434, 516, 281, 5366, 588, 51137], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 748, "seek": 296692, "start": 2982.36, "end": 2988.6, "text": " subtle bugs very hard to find bugs and just be careful one more note on efficiency we don't want", "tokens": [51137, 13743, 15120, 588, 1152, 281, 915, 15120, 293, 445, 312, 5026, 472, 544, 3637, 322, 10493, 321, 500, 380, 528, 51449], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 749, "seek": 296692, "start": 2988.6, "end": 2993.64, "text": " to be doing this here because this creates a completely new tensor that we store into p", "tokens": [51449, 281, 312, 884, 341, 510, 570, 341, 7829, 257, 2584, 777, 40863, 300, 321, 3531, 666, 280, 51701], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 750, "seek": 296692, "start": 2994.28, "end": 2996.84, "text": " we prefer to use in place operations if possible", "tokens": [51733, 321, 4382, 281, 764, 294, 1081, 7705, 498, 1944, 51861], "temperature": 0.0, "avg_logprob": -0.06773292034044179, "compression_ratio": 1.8256227758007118, "no_speech_prob": 0.0035622597206383944}, {"id": 751, "seek": 299692, "start": 2997.56, "end": 3002.52, "text": " uh so this would be an in-place operation it has the potential to be faster it doesn't create new", "tokens": [50397, 2232, 370, 341, 576, 312, 364, 294, 12, 6742, 6916, 309, 575, 264, 3995, 281, 312, 4663, 309, 1177, 380, 1884, 777, 50645], "temperature": 0.0, "avg_logprob": -0.06498287342212818, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.012024708092212677}, {"id": 752, "seek": 299692, "start": 3002.52, "end": 3012.6800000000003, "text": " memory under the hood and then let's erase this we don't need it and let's also um just do fewer", "tokens": [50645, 4675, 833, 264, 13376, 293, 550, 718, 311, 23525, 341, 321, 500, 380, 643, 309, 293, 718, 311, 611, 1105, 445, 360, 13366, 51153], "temperature": 0.0, "avg_logprob": -0.06498287342212818, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.012024708092212677}, {"id": 753, "seek": 299692, "start": 3012.6800000000003, "end": 3017.64, "text": " just so i'm not wasting space okay so we're actually in a pretty good spot now we trained", "tokens": [51153, 445, 370, 741, 478, 406, 20457, 1901, 1392, 370, 321, 434, 767, 294, 257, 1238, 665, 4008, 586, 321, 8895, 51401], "temperature": 0.0, "avg_logprob": -0.06498287342212818, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.012024708092212677}, {"id": 754, "seek": 299692, "start": 3017.64, "end": 3023.7200000000003, "text": " a bigram language model and we trained it really just by counting uh how frequently any pairing", "tokens": [51401, 257, 955, 2356, 2856, 2316, 293, 321, 8895, 309, 534, 445, 538, 13251, 2232, 577, 10374, 604, 32735, 51705], "temperature": 0.0, "avg_logprob": -0.06498287342212818, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.012024708092212677}, {"id": 755, "seek": 299692, "start": 3023.7200000000003, "end": 3026.84, "text": " occurs and then normalizing so that we get a nice property distribution", "tokens": [51705, 11843, 293, 550, 2710, 3319, 370, 300, 321, 483, 257, 1481, 4707, 7316, 51861], "temperature": 0.0, "avg_logprob": -0.06498287342212818, "compression_ratio": 1.7056603773584906, "no_speech_prob": 0.012024708092212677}, {"id": 756, "seek": 302684, "start": 3027.3, "end": 3031.6000000000004, "text": " so really these elements of this array p are really the", "tokens": [50388, 370, 534, 613, 4959, 295, 341, 10225, 280, 366, 534, 264, 50603], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 757, "seek": 302684, "start": 3031.6000000000004, "end": 3036.1600000000003, "text": " parameters of our bigram language model giving us in summarizing the statistics of these bigrams", "tokens": [50603, 9834, 295, 527, 955, 2356, 2856, 2316, 2902, 505, 294, 14611, 3319, 264, 12523, 295, 613, 955, 2356, 82, 50831], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 758, "seek": 302684, "start": 3036.1600000000003, "end": 3040.08, "text": " so we train the model and then we know how to sample from the model", "tokens": [50831, 370, 321, 3847, 264, 2316, 293, 550, 321, 458, 577, 281, 6889, 490, 264, 2316, 51027], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 759, "seek": 302684, "start": 3040.08, "end": 3046.0, "text": " we just iteratively uh sample the next character and feed it in each time and get the next character", "tokens": [51027, 321, 445, 17138, 19020, 2232, 6889, 264, 958, 2517, 293, 3154, 309, 294, 1184, 565, 293, 483, 264, 958, 2517, 51323], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 760, "seek": 302684, "start": 3046.96, "end": 3051.04, "text": " now what i'd like to do is i'd like to somehow evaluate the quality of this model", "tokens": [51371, 586, 437, 741, 1116, 411, 281, 360, 307, 741, 1116, 411, 281, 6063, 13059, 264, 3125, 295, 341, 2316, 51575], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 761, "seek": 302684, "start": 3051.04, "end": 3051.82, "text": " we'd like to somehow summarize the quality of this model into a single number how good is it at predicting the quality of the data and we can use that here to kind of write out which is not what we want to use here but like to do keep in front of a table for FARM", "tokens": [51575, 321, 1116, 411, 281, 6063, 20858, 264, 3125, 295, 341, 2316, 666, 257, 2167, 1230, 577, 665, 307, 309, 412, 32884, 264, 3125, 295, 264, 1412, 293, 321, 393, 764, 300, 510, 281, 733, 295, 2464, 484, 597, 307, 406, 437, 321, 528, 281, 764, 510, 457, 411, 281, 360, 1066, 294, 1868, 295, 257, 3199, 337, 27235, 44, 51614], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 762, "seek": 302684, "start": 3051.82, "end": 3052.1400000000003, "text": " summarize the quality of this model into a single number how good is it at predicting the number of Bana", "tokens": [51614, 20858, 264, 3125, 295, 341, 2316, 666, 257, 2167, 1230, 577, 665, 307, 309, 412, 32884, 264, 1230, 295, 33942, 51630], "temperature": 1.0, "avg_logprob": -1.720456657922856, "compression_ratio": 2.273381294964029, "no_speech_prob": 0.00011657169670797884}, {"id": 763, "seek": 305214, "start": 3052.14, "end": 3056.58, "text": " summarize the quality of this model into a single number. How good is it at predicting", "tokens": [50365, 20858, 264, 3125, 295, 341, 2316, 666, 257, 2167, 1230, 13, 1012, 665, 307, 309, 412, 32884, 50587], "temperature": 0.0, "avg_logprob": -0.056913497155172785, "compression_ratio": 1.8857142857142857, "no_speech_prob": 0.03376741707324982}, {"id": 764, "seek": 305214, "start": 3056.58, "end": 3062.92, "text": " the training set? And as an example, so in the training set, we can evaluate now the training", "tokens": [50587, 264, 3097, 992, 30, 400, 382, 364, 1365, 11, 370, 294, 264, 3097, 992, 11, 321, 393, 13059, 586, 264, 3097, 50904], "temperature": 0.0, "avg_logprob": -0.056913497155172785, "compression_ratio": 1.8857142857142857, "no_speech_prob": 0.03376741707324982}, {"id": 765, "seek": 305214, "start": 3062.92, "end": 3068.5, "text": " loss. And this training loss is telling us about sort of the quality of this model in a single", "tokens": [50904, 4470, 13, 400, 341, 3097, 4470, 307, 3585, 505, 466, 1333, 295, 264, 3125, 295, 341, 2316, 294, 257, 2167, 51183], "temperature": 0.0, "avg_logprob": -0.056913497155172785, "compression_ratio": 1.8857142857142857, "no_speech_prob": 0.03376741707324982}, {"id": 766, "seek": 305214, "start": 3068.5, "end": 3074.08, "text": " number, just like we saw in micrograd. So let's try to think through the quality of the model", "tokens": [51183, 1230, 11, 445, 411, 321, 1866, 294, 4532, 7165, 13, 407, 718, 311, 853, 281, 519, 807, 264, 3125, 295, 264, 2316, 51462], "temperature": 0.0, "avg_logprob": -0.056913497155172785, "compression_ratio": 1.8857142857142857, "no_speech_prob": 0.03376741707324982}, {"id": 767, "seek": 305214, "start": 3074.08, "end": 3079.44, "text": " and how we would evaluate it. Basically, what we're going to do is we're going to copy paste", "tokens": [51462, 293, 577, 321, 576, 13059, 309, 13, 8537, 11, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 5055, 9163, 51730], "temperature": 0.0, "avg_logprob": -0.056913497155172785, "compression_ratio": 1.8857142857142857, "no_speech_prob": 0.03376741707324982}, {"id": 768, "seek": 307944, "start": 3079.44, "end": 3086.2200000000003, "text": " this code that we previously used for counting. And let me just print these bigrams first. We're", "tokens": [50365, 341, 3089, 300, 321, 8046, 1143, 337, 13251, 13, 400, 718, 385, 445, 4482, 613, 955, 2356, 82, 700, 13, 492, 434, 50704], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 769, "seek": 307944, "start": 3086.2200000000003, "end": 3090.86, "text": " going to use fstrings, and I'm going to print character one followed by character two. These", "tokens": [50704, 516, 281, 764, 283, 50035, 11, 293, 286, 478, 516, 281, 4482, 2517, 472, 6263, 538, 2517, 732, 13, 1981, 50936], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 770, "seek": 307944, "start": 3090.86, "end": 3094.68, "text": " are the bigrams. And then I don't want to do it for all the words, just do the first three words.", "tokens": [50936, 366, 264, 955, 2356, 82, 13, 400, 550, 286, 500, 380, 528, 281, 360, 309, 337, 439, 264, 2283, 11, 445, 360, 264, 700, 1045, 2283, 13, 51127], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 771, "seek": 307944, "start": 3095.86, "end": 3102.26, "text": " So here we have Emma, Olivia, and Ava bigrams. Now what we'd like to do is we'd like to basically", "tokens": [51186, 407, 510, 321, 362, 17124, 11, 26023, 11, 293, 316, 2757, 955, 2356, 82, 13, 823, 437, 321, 1116, 411, 281, 360, 307, 321, 1116, 411, 281, 1936, 51506], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 772, "seek": 307944, "start": 3102.26, "end": 3108.8, "text": " look at the probability that the model assigns to every one of these bigrams. So in other words,", "tokens": [51506, 574, 412, 264, 8482, 300, 264, 2316, 6269, 82, 281, 633, 472, 295, 613, 955, 2356, 82, 13, 407, 294, 661, 2283, 11, 51833], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 773, "seek": 307944, "start": 3108.84, "end": 3109.42, "text": " we can look at the probability of the model, and we can look at the probability of the model,", "tokens": [51835, 321, 393, 574, 412, 264, 8482, 295, 264, 2316, 11, 293, 321, 393, 574, 412, 264, 8482, 295, 264, 2316, 11, 51864], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 774, "seek": 307944, "start": 3109.42, "end": 3109.44, "text": " and we can look at the probability of the model, and we can look at the probability of the model,", "tokens": [51864, 293, 321, 393, 574, 412, 264, 8482, 295, 264, 2316, 11, 293, 321, 393, 574, 412, 264, 8482, 295, 264, 2316, 11, 51865], "temperature": 0.2, "avg_logprob": -0.08415619710857948, "compression_ratio": 2.3241379310344827, "no_speech_prob": 2.4264467356260866e-05}, {"id": 775, "seek": 310944, "start": 3109.44, "end": 3118.86, "text": " which is summarized in the matrix B of Ix1, Ix2. And then we can print it here as probability.", "tokens": [50365, 597, 307, 14611, 1602, 294, 264, 8141, 363, 295, 286, 87, 16, 11, 286, 87, 17, 13, 400, 550, 321, 393, 4482, 309, 510, 382, 8482, 13, 50836], "temperature": 0.0, "avg_logprob": -0.10393458081964861, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.0003732678305823356}, {"id": 776, "seek": 310944, "start": 3120.52, "end": 3127.86, "text": " And because these probabilities are way too large, let me percent or colon .4f to truncate it a bit.", "tokens": [50919, 400, 570, 613, 33783, 366, 636, 886, 2416, 11, 718, 385, 3043, 420, 8255, 2411, 19, 69, 281, 504, 409, 66, 473, 309, 257, 857, 13, 51286], "temperature": 0.0, "avg_logprob": -0.10393458081964861, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.0003732678305823356}, {"id": 777, "seek": 310944, "start": 3129.0, "end": 3132.84, "text": " So what do we have here, right? We're looking at the probabilities that the model assigns to every", "tokens": [51343, 407, 437, 360, 321, 362, 510, 11, 558, 30, 492, 434, 1237, 412, 264, 33783, 300, 264, 2316, 6269, 82, 281, 633, 51535], "temperature": 0.0, "avg_logprob": -0.10393458081964861, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.0003732678305823356}, {"id": 778, "seek": 310944, "start": 3132.84, "end": 3139.2000000000003, "text": " one of these bigrams in the dataset. And so we can see some of them are 4%, 3%, etc. Just to have a", "tokens": [51535, 472, 295, 613, 955, 2356, 82, 294, 264, 28872, 13, 400, 370, 321, 393, 536, 512, 295, 552, 366, 1017, 8923, 805, 8923, 5183, 13, 1449, 281, 362, 257, 51853], "temperature": 0.0, "avg_logprob": -0.10393458081964861, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.0003732678305823356}, {"id": 779, "seek": 313920, "start": 3139.2, "end": 3145.4199999999996, "text": " measuring stick in our mind, by the way. We have 27 possible characters or tokens. And if everything", "tokens": [50365, 13389, 2897, 294, 527, 1575, 11, 538, 264, 636, 13, 492, 362, 7634, 1944, 4342, 420, 22667, 13, 400, 498, 1203, 50676], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 780, "seek": 313920, "start": 3145.4199999999996, "end": 3153.3199999999997, "text": " was equally likely, then you'd expect all these probabilities to be 4% roughly. So anything above", "tokens": [50676, 390, 12309, 3700, 11, 550, 291, 1116, 2066, 439, 613, 33783, 281, 312, 1017, 4, 9810, 13, 407, 1340, 3673, 51071], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 781, "seek": 313920, "start": 3153.3199999999997, "end": 3158.46, "text": " 4% means that we've learned something useful from these bigram statistics. And you see that roughly", "tokens": [51071, 1017, 4, 1355, 300, 321, 600, 3264, 746, 4420, 490, 613, 955, 2356, 12523, 13, 400, 291, 536, 300, 9810, 51328], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 782, "seek": 313920, "start": 3158.46, "end": 3164.7, "text": " some of these are 4%, but some of them are as high as 40%, 35%, and so on. So you see that the model", "tokens": [51328, 512, 295, 613, 366, 1017, 8923, 457, 512, 295, 552, 366, 382, 1090, 382, 3356, 8923, 6976, 8923, 293, 370, 322, 13, 407, 291, 536, 300, 264, 2316, 51640], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 783, "seek": 313920, "start": 3164.7, "end": 3169.06, "text": " actually assigned a pretty high probability to whatever's in the training set. And so that's a", "tokens": [51640, 767, 13279, 257, 1238, 1090, 8482, 281, 2035, 311, 294, 264, 3097, 992, 13, 400, 370, 300, 311, 257, 51858], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 784, "seek": 313920, "start": 3169.06, "end": 3169.18, "text": " good thing. And so we can look at the probability of the model, and we can look at the probability", "tokens": [51858, 665, 551, 13, 400, 370, 321, 393, 574, 412, 264, 8482, 295, 264, 2316, 11, 293, 321, 393, 574, 412, 264, 8482, 51864], "temperature": 0.0, "avg_logprob": -0.06150182088216146, "compression_ratio": 1.8647798742138364, "no_speech_prob": 0.00720406137406826}, {"id": 785, "seek": 316918, "start": 3169.18, "end": 3173.58, "text": " of the model. Basically, if you have a very good model, you'd expect that these probabilities", "tokens": [50365, 295, 264, 2316, 13, 8537, 11, 498, 291, 362, 257, 588, 665, 2316, 11, 291, 1116, 2066, 300, 613, 33783, 50585], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 786, "seek": 316918, "start": 3173.58, "end": 3178.14, "text": " should be near one, because that means that your model is correctly predicting what's going to come", "tokens": [50585, 820, 312, 2651, 472, 11, 570, 300, 1355, 300, 428, 2316, 307, 8944, 32884, 437, 311, 516, 281, 808, 50813], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 787, "seek": 316918, "start": 3178.14, "end": 3184.58, "text": " next, especially on the training set where you trained your model. So now we'd like to think", "tokens": [50813, 958, 11, 2318, 322, 264, 3097, 992, 689, 291, 8895, 428, 2316, 13, 407, 586, 321, 1116, 411, 281, 519, 51135], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 788, "seek": 316918, "start": 3184.58, "end": 3189.44, "text": " about how can we summarize these probabilities into a single number that measures the quality", "tokens": [51135, 466, 577, 393, 321, 20858, 613, 33783, 666, 257, 2167, 1230, 300, 8000, 264, 3125, 51378], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 789, "seek": 316918, "start": 3189.44, "end": 3194.3799999999997, "text": " of this model. Now, when you look at the literature into maximum likelihood estimation", "tokens": [51378, 295, 341, 2316, 13, 823, 11, 562, 291, 574, 412, 264, 10394, 666, 6674, 22119, 35701, 51625], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 790, "seek": 316918, "start": 3194.3799999999997, "end": 3199.04, "text": " and statistical modeling and so on, you'll see that what's typically used here", "tokens": [51625, 293, 22820, 15983, 293, 370, 322, 11, 291, 603, 536, 300, 437, 311, 5850, 1143, 510, 51858], "temperature": 0.0, "avg_logprob": -0.10800445079803467, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.00024139290326274931}, {"id": 791, "seek": 319904, "start": 3199.04, "end": 3203.98, "text": " is something called the likelihood. And the likelihood is the product of all of these", "tokens": [50365, 307, 746, 1219, 264, 22119, 13, 400, 264, 22119, 307, 264, 1674, 295, 439, 295, 613, 50612], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 792, "seek": 319904, "start": 3203.98, "end": 3209.7599999999998, "text": " probabilities. And so the product of all of these probabilities is the likelihood. And it's really", "tokens": [50612, 33783, 13, 400, 370, 264, 1674, 295, 439, 295, 613, 33783, 307, 264, 22119, 13, 400, 309, 311, 534, 50901], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 793, "seek": 319904, "start": 3209.7599999999998, "end": 3217.14, "text": " telling us about the probability of the entire data set assigned by the model that we've trained.", "tokens": [50901, 3585, 505, 466, 264, 8482, 295, 264, 2302, 1412, 992, 13279, 538, 264, 2316, 300, 321, 600, 8895, 13, 51270], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 794, "seek": 319904, "start": 3217.6, "end": 3223.6, "text": " And that is a measure of quality. So the product of these should be as high as possible when you", "tokens": [51293, 400, 300, 307, 257, 3481, 295, 3125, 13, 407, 264, 1674, 295, 613, 820, 312, 382, 1090, 382, 1944, 562, 291, 51593], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 795, "seek": 319904, "start": 3223.6, "end": 3227.68, "text": " are training the model and when you have a good model. Your product of these probabilities should", "tokens": [51593, 366, 3097, 264, 2316, 293, 562, 291, 362, 257, 665, 2316, 13, 2260, 1674, 295, 613, 33783, 820, 51797], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 796, "seek": 319904, "start": 3227.68, "end": 3228.3, "text": " be very high.", "tokens": [51797, 312, 588, 1090, 13, 51828], "temperature": 0.0, "avg_logprob": -0.08633707219904119, "compression_ratio": 2.1441048034934496, "no_speech_prob": 0.002135306363925338}, {"id": 797, "seek": 322904, "start": 3229.04, "end": 3234.7, "text": " Now, because the product of these probabilities is an unwieldy thing to work with, you can see", "tokens": [50365, 823, 11, 570, 264, 1674, 295, 613, 33783, 307, 364, 14853, 1789, 88, 551, 281, 589, 365, 11, 291, 393, 536, 50648], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 798, "seek": 322904, "start": 3234.7, "end": 3238.7599999999998, "text": " that all of them are between zero and one. So your product of these probabilities will be a very tiny", "tokens": [50648, 300, 439, 295, 552, 366, 1296, 4018, 293, 472, 13, 407, 428, 1674, 295, 613, 33783, 486, 312, 257, 588, 5870, 50851], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 799, "seek": 322904, "start": 3238.7599999999998, "end": 3245.44, "text": " number. So for convenience, what people work with usually is not the likelihood, but they work with", "tokens": [50851, 1230, 13, 407, 337, 19283, 11, 437, 561, 589, 365, 2673, 307, 406, 264, 22119, 11, 457, 436, 589, 365, 51185], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 800, "seek": 322904, "start": 3245.44, "end": 3251.58, "text": " what's called the log likelihood. So the product of these is the likelihood. To get the log", "tokens": [51185, 437, 311, 1219, 264, 3565, 22119, 13, 407, 264, 1674, 295, 613, 307, 264, 22119, 13, 1407, 483, 264, 3565, 51492], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 801, "seek": 322904, "start": 3251.58, "end": 3256.42, "text": " likelihood, we just have to take the log of the probability. And so the log of the probability", "tokens": [51492, 22119, 11, 321, 445, 362, 281, 747, 264, 3565, 295, 264, 8482, 13, 400, 370, 264, 3565, 295, 264, 8482, 51734], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 802, "seek": 322904, "start": 3256.42, "end": 3258.62, "text": " here, I have the log of x from zero to one.", "tokens": [51734, 510, 11, 286, 362, 264, 3565, 295, 2031, 490, 4018, 281, 472, 13, 51844], "temperature": 0.0, "avg_logprob": -0.08283393830060959, "compression_ratio": 2.034749034749035, "no_speech_prob": 0.0002226210490334779}, {"id": 803, "seek": 325904, "start": 3259.72, "end": 3267.32, "text": " The log is a, you see here, monotonic transformation of the probability, where if you pass in one, you", "tokens": [50399, 440, 3565, 307, 257, 11, 291, 536, 510, 11, 1108, 310, 11630, 9887, 295, 264, 8482, 11, 689, 498, 291, 1320, 294, 472, 11, 291, 50779], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 804, "seek": 325904, "start": 3267.32, "end": 3273.32, "text": " get zero. So probability one gets you log probability of zero. And then as you go lower and", "tokens": [50779, 483, 4018, 13, 407, 8482, 472, 2170, 291, 3565, 8482, 295, 4018, 13, 400, 550, 382, 291, 352, 3126, 293, 51079], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 805, "seek": 325904, "start": 3273.32, "end": 3278.92, "text": " lower probability, the log will grow more and more negative until all the way to negative infinity at", "tokens": [51079, 3126, 8482, 11, 264, 3565, 486, 1852, 544, 293, 544, 3671, 1826, 439, 264, 636, 281, 3671, 13202, 412, 51359], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 806, "seek": 325904, "start": 3278.92, "end": 3279.42, "text": " zero.", "tokens": [51359, 4018, 13, 51384], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 807, "seek": 325904, "start": 3281.8, "end": 3287.56, "text": " So here we have a log prob, which is really just a torch.log of probability. Let's print it out to get a sense of what that looks like.", "tokens": [51503, 407, 510, 321, 362, 257, 3565, 1239, 11, 597, 307, 534, 445, 257, 27822, 13, 4987, 295, 8482, 13, 961, 311, 4482, 309, 484, 281, 483, 257, 2020, 295, 437, 300, 1542, 411, 13, 51791], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 808, "seek": 325904, "start": 3287.56, "end": 3288.16, "text": " Let's print it out to get a sense of what that looks like.", "tokens": [51791, 961, 311, 4482, 309, 484, 281, 483, 257, 2020, 295, 437, 300, 1542, 411, 13, 51821], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 809, "seek": 325904, "start": 3288.16, "end": 3288.66, "text": " Let's print it out to get a sense of what that looks like.", "tokens": [51821, 961, 311, 4482, 309, 484, 281, 483, 257, 2020, 295, 437, 300, 1542, 411, 13, 51846], "temperature": 0.0, "avg_logprob": -0.17962992437954606, "compression_ratio": 2.269387755102041, "no_speech_prob": 0.0002974797389470041}, {"id": 810, "seek": 328904, "start": 3290.0, "end": 3292.04, "text": " Log prob, also, 0.4f.", "tokens": [50413, 10824, 1239, 11, 611, 11, 1958, 13, 19, 69, 13, 50515], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 811, "seek": 328904, "start": 3296.6, "end": 3302.88, "text": " So as you can see, when we plug in numbers that are very close to some of our higher numbers, we get closer and closer to zero.", "tokens": [50743, 407, 382, 291, 393, 536, 11, 562, 321, 5452, 294, 3547, 300, 366, 588, 1998, 281, 512, 295, 527, 2946, 3547, 11, 321, 483, 4966, 293, 4966, 281, 4018, 13, 51057], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 812, "seek": 328904, "start": 3303.52, "end": 3308.1, "text": " And then if we plug in very bad probabilities, we get more and more negative number that's bad.", "tokens": [51089, 400, 550, 498, 321, 5452, 294, 588, 1578, 33783, 11, 321, 483, 544, 293, 544, 3671, 1230, 300, 311, 1578, 13, 51318], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 813, "seek": 328904, "start": 3309.54, "end": 3316.94, "text": " So, and the reason we work with this is for a large extent, convenience, because we have, mathematically, that if", "tokens": [51390, 407, 11, 293, 264, 1778, 321, 589, 365, 341, 307, 337, 257, 2416, 8396, 11, 19283, 11, 570, 321, 362, 11, 44003, 11, 300, 498, 51760], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 814, "seek": 328904, "start": 3316.94, "end": 3318.38, "text": " you have some product A x B x C analyze a function and add some product, you've got a set method.", "tokens": [51760, 291, 362, 512, 1674, 316, 2031, 363, 2031, 383, 12477, 257, 2445, 293, 909, 512, 1674, 11, 291, 600, 658, 257, 992, 3170, 13, 51832], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 815, "seek": 328904, "start": 3318.38, "end": 3318.96, "text": " Yes.", "tokens": [51832, 1079, 13, 51861], "temperature": 1.0, "avg_logprob": -1.065232655358693, "compression_ratio": 1.6559139784946237, "no_speech_prob": 0.0005410686135292053}, {"id": 816, "seek": 331896, "start": 3318.96, "end": 3324.56, "text": " all these probabilities right the likelihood is the product of all these probabilities", "tokens": [50365, 439, 613, 33783, 558, 264, 22119, 307, 264, 1674, 295, 439, 613, 33783, 50645], "temperature": 0.0, "avg_logprob": -0.10251854507016464, "compression_ratio": 2.018867924528302, "no_speech_prob": 0.01943468116223812}, {"id": 817, "seek": 331896, "start": 3325.36, "end": 3331.28, "text": " then the log of these is just log of a plus log of b", "tokens": [50685, 550, 264, 3565, 295, 613, 307, 445, 3565, 295, 257, 1804, 3565, 295, 272, 50981], "temperature": 0.0, "avg_logprob": -0.10251854507016464, "compression_ratio": 2.018867924528302, "no_speech_prob": 0.01943468116223812}, {"id": 818, "seek": 331896, "start": 3333.76, "end": 3340.32, "text": " plus log of c if you remember your logs from your high school or undergrad and so on so we have that", "tokens": [51105, 1804, 3565, 295, 269, 498, 291, 1604, 428, 20820, 490, 428, 1090, 1395, 420, 14295, 293, 370, 322, 370, 321, 362, 300, 51433], "temperature": 0.0, "avg_logprob": -0.10251854507016464, "compression_ratio": 2.018867924528302, "no_speech_prob": 0.01943468116223812}, {"id": 819, "seek": 331896, "start": 3340.32, "end": 3344.64, "text": " basically the likelihood of the product probabilities the log likelihood is just", "tokens": [51433, 1936, 264, 22119, 295, 264, 1674, 33783, 264, 3565, 22119, 307, 445, 51649], "temperature": 0.0, "avg_logprob": -0.10251854507016464, "compression_ratio": 2.018867924528302, "no_speech_prob": 0.01943468116223812}, {"id": 820, "seek": 334464, "start": 3344.64, "end": 3353.44, "text": " the sum of the logs of the individual probabilities so log likelihood starts at zero", "tokens": [50365, 264, 2408, 295, 264, 20820, 295, 264, 2609, 33783, 370, 3565, 22119, 3719, 412, 4018, 50805], "temperature": 0.0, "avg_logprob": -0.07736584291619769, "compression_ratio": 1.777027027027027, "no_speech_prob": 9.963970660464838e-05}, {"id": 821, "seek": 334464, "start": 3354.56, "end": 3361.68, "text": " and then log likelihood here we can just accumulate simply and then the end we can print this", "tokens": [50861, 293, 550, 3565, 22119, 510, 321, 393, 445, 33384, 2935, 293, 550, 264, 917, 321, 393, 4482, 341, 51217], "temperature": 0.0, "avg_logprob": -0.07736584291619769, "compression_ratio": 1.777027027027027, "no_speech_prob": 9.963970660464838e-05}, {"id": 822, "seek": 334464, "start": 3365.3599999999997, "end": 3366.56, "text": " print the log likelihood", "tokens": [51401, 4482, 264, 3565, 22119, 51461], "temperature": 0.0, "avg_logprob": -0.07736584291619769, "compression_ratio": 1.777027027027027, "no_speech_prob": 9.963970660464838e-05}, {"id": 823, "seek": 334464, "start": 3369.52, "end": 3372.72, "text": " f strings maybe you're familiar with this", "tokens": [51609, 283, 13985, 1310, 291, 434, 4963, 365, 341, 51769], "temperature": 0.0, "avg_logprob": -0.07736584291619769, "compression_ratio": 1.777027027027027, "no_speech_prob": 9.963970660464838e-05}, {"id": 824, "seek": 334464, "start": 3373.8399999999997, "end": 3374.64, "text": " so log likelihood", "tokens": [51825, 370, 3565, 22119, 51865], "temperature": 0.0, "avg_logprob": -0.07736584291619769, "compression_ratio": 1.777027027027027, "no_speech_prob": 9.963970660464838e-05}, {"id": 825, "seek": 337464, "start": 3374.64, "end": 3376.24, "text": " is negative 38", "tokens": [50365, 307, 3671, 12843, 50445], "temperature": 0.0, "avg_logprob": -0.10208790801292242, "compression_ratio": 1.8724489795918366, "no_speech_prob": 0.000405108934501186}, {"id": 826, "seek": 337464, "start": 3379.8399999999997, "end": 3390.08, "text": " okay now we actually want um so how high can log likelihood get it can go to zero so when", "tokens": [50625, 1392, 586, 321, 767, 528, 1105, 370, 577, 1090, 393, 3565, 22119, 483, 309, 393, 352, 281, 4018, 370, 562, 51137], "temperature": 0.0, "avg_logprob": -0.10208790801292242, "compression_ratio": 1.8724489795918366, "no_speech_prob": 0.000405108934501186}, {"id": 827, "seek": 337464, "start": 3390.08, "end": 3394.16, "text": " all the probabilities are one log likelihood will be zero and then when all the probabilities", "tokens": [51137, 439, 264, 33783, 366, 472, 3565, 22119, 486, 312, 4018, 293, 550, 562, 439, 264, 33783, 51341], "temperature": 0.0, "avg_logprob": -0.10208790801292242, "compression_ratio": 1.8724489795918366, "no_speech_prob": 0.000405108934501186}, {"id": 828, "seek": 337464, "start": 3394.16, "end": 3400.08, "text": " are lower this will grow more and more negative now we don't actually like this because what we'd", "tokens": [51341, 366, 3126, 341, 486, 1852, 544, 293, 544, 3671, 586, 321, 500, 380, 767, 411, 341, 570, 437, 321, 1116, 51637], "temperature": 0.0, "avg_logprob": -0.10208790801292242, "compression_ratio": 1.8724489795918366, "no_speech_prob": 0.000405108934501186}, {"id": 829, "seek": 337464, "start": 3400.08, "end": 3403.8399999999997, "text": " like is a loss function and a loss function has the semantics that low", "tokens": [51637, 411, 307, 257, 4470, 2445, 293, 257, 4470, 2445, 575, 264, 4361, 45298, 300, 2295, 51825], "temperature": 0.0, "avg_logprob": -0.10208790801292242, "compression_ratio": 1.8724489795918366, "no_speech_prob": 0.000405108934501186}, {"id": 830, "seek": 340384, "start": 3403.84, "end": 3409.04, "text": " is good because we're trying to minimize the loss so we actually need to invert this", "tokens": [50365, 307, 665, 570, 321, 434, 1382, 281, 17522, 264, 4470, 370, 321, 767, 643, 281, 33966, 341, 50625], "temperature": 0.8, "avg_logprob": -0.28355855620309206, "compression_ratio": 2.157068062827225, "no_speech_prob": 0.00012368534225970507}, {"id": 831, "seek": 340384, "start": 3409.04, "end": 3412.88, "text": " and that's what gives us something called the negative log likelihood", "tokens": [50625, 293, 300, 311, 437, 2709, 505, 746, 1219, 264, 3671, 3565, 22119, 50817], "temperature": 0.8, "avg_logprob": -0.28355855620309206, "compression_ratio": 2.157068062827225, "no_speech_prob": 0.00012368534225970507}, {"id": 832, "seek": 340384, "start": 3414.88, "end": 3418.8, "text": " negative log likelihood is just negative of the log likelihood", "tokens": [50917, 3671, 3565, 22119, 307, 445, 3671, 295, 264, 3565, 22119, 51113], "temperature": 0.8, "avg_logprob": -0.28355855620309206, "compression_ratio": 2.157068062827225, "no_speech_prob": 0.00012368534225970507}, {"id": 833, "seek": 340384, "start": 3422.7200000000003, "end": 3427.04, "text": " these are f strings by the way if you'd like to look this up negative log likelihood equals", "tokens": [51309, 613, 366, 283, 13985, 538, 264, 636, 498, 291, 1116, 411, 281, 574, 341, 493, 3671, 3565, 22119, 6915, 51525], "temperature": 0.8, "avg_logprob": -0.28355855620309206, "compression_ratio": 2.157068062827225, "no_speech_prob": 0.00012368534225970507}, {"id": 834, "seek": 340384, "start": 3428.32, "end": 3433.04, "text": " so negative log likelihood now is just negative of it and so the negative log likelihood is a negative", "tokens": [51589, 370, 3671, 3565, 22119, 586, 307, 445, 3671, 295, 309, 293, 370, 264, 3671, 3565, 22119, 307, 257, 3671, 51825], "temperature": 0.8, "avg_logprob": -0.28355855620309206, "compression_ratio": 2.157068062827225, "no_speech_prob": 0.00012368534225970507}, {"id": 835, "seek": 343304, "start": 3433.04, "end": 3440.66, "text": " likelihood, is a very nice loss function because the lowest it can get is zero. And the higher it", "tokens": [50365, 22119, 11, 307, 257, 588, 1481, 4470, 2445, 570, 264, 12437, 309, 393, 483, 307, 4018, 13, 400, 264, 2946, 309, 50746], "temperature": 0.0, "avg_logprob": -0.05621312061945597, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.042660903185606}, {"id": 836, "seek": 343304, "start": 3440.66, "end": 3446.16, "text": " is, the worse off the predictions are that you're making. And then one more modification to this", "tokens": [50746, 307, 11, 264, 5324, 766, 264, 21264, 366, 300, 291, 434, 1455, 13, 400, 550, 472, 544, 26747, 281, 341, 51021], "temperature": 0.0, "avg_logprob": -0.05621312061945597, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.042660903185606}, {"id": 837, "seek": 343304, "start": 3446.16, "end": 3451.74, "text": " that sometimes people do is that for convenience, they actually like to normalize by, they like to", "tokens": [51021, 300, 2171, 561, 360, 307, 300, 337, 19283, 11, 436, 767, 411, 281, 2710, 1125, 538, 11, 436, 411, 281, 51300], "temperature": 0.0, "avg_logprob": -0.05621312061945597, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.042660903185606}, {"id": 838, "seek": 343304, "start": 3451.74, "end": 3460.4, "text": " make it an average instead of a sum. And so here, let's just keep some counts as well. So n plus", "tokens": [51300, 652, 309, 364, 4274, 2602, 295, 257, 2408, 13, 400, 370, 510, 11, 718, 311, 445, 1066, 512, 14893, 382, 731, 13, 407, 297, 1804, 51733], "temperature": 0.0, "avg_logprob": -0.05621312061945597, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.042660903185606}, {"id": 839, "seek": 346040, "start": 3460.4, "end": 3466.8, "text": " equals one starts at zero. And then here, we can have sort of like a normalized log likelihood.", "tokens": [50365, 6915, 472, 3719, 412, 4018, 13, 400, 550, 510, 11, 321, 393, 362, 1333, 295, 411, 257, 48704, 3565, 22119, 13, 50685], "temperature": 0.0, "avg_logprob": -0.07211502467360452, "compression_ratio": 1.7682403433476395, "no_speech_prob": 5.6438526371493936e-05}, {"id": 840, "seek": 346040, "start": 3470.2400000000002, "end": 3476.12, "text": " If we just normalize it by the count, then we will sort of get the average log likelihood. So this", "tokens": [50857, 759, 321, 445, 2710, 1125, 309, 538, 264, 1207, 11, 550, 321, 486, 1333, 295, 483, 264, 4274, 3565, 22119, 13, 407, 341, 51151], "temperature": 0.0, "avg_logprob": -0.07211502467360452, "compression_ratio": 1.7682403433476395, "no_speech_prob": 5.6438526371493936e-05}, {"id": 841, "seek": 346040, "start": 3476.12, "end": 3483.6600000000003, "text": " would be usually our loss function here. This is what we would use. So our loss function for the", "tokens": [51151, 576, 312, 2673, 527, 4470, 2445, 510, 13, 639, 307, 437, 321, 576, 764, 13, 407, 527, 4470, 2445, 337, 264, 51528], "temperature": 0.0, "avg_logprob": -0.07211502467360452, "compression_ratio": 1.7682403433476395, "no_speech_prob": 5.6438526371493936e-05}, {"id": 842, "seek": 346040, "start": 3483.6600000000003, "end": 3489.56, "text": " training set assigned by the model is 2.4. That's the quality of this model. And the lower it is,", "tokens": [51528, 3097, 992, 13279, 538, 264, 2316, 307, 568, 13, 19, 13, 663, 311, 264, 3125, 295, 341, 2316, 13, 400, 264, 3126, 309, 307, 11, 51823], "temperature": 0.0, "avg_logprob": -0.07211502467360452, "compression_ratio": 1.7682403433476395, "no_speech_prob": 5.6438526371493936e-05}, {"id": 843, "seek": 346040, "start": 3489.56, "end": 3490.38, "text": " the better off we are.", "tokens": [51823, 264, 1101, 766, 321, 366, 13, 51864], "temperature": 0.0, "avg_logprob": -0.07211502467360452, "compression_ratio": 1.7682403433476395, "no_speech_prob": 5.6438526371493936e-05}, {"id": 844, "seek": 349040, "start": 3490.42, "end": 3497.46, "text": " And the higher it is, the worse off we are. And the job of our, you know, training is to find the", "tokens": [50366, 400, 264, 2946, 309, 307, 11, 264, 5324, 766, 321, 366, 13, 400, 264, 1691, 295, 527, 11, 291, 458, 11, 3097, 307, 281, 915, 264, 50718], "temperature": 0.0, "avg_logprob": -0.07920255914198614, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005713462014682591}, {"id": 845, "seek": 349040, "start": 3497.46, "end": 3504.3, "text": " parameters that minimize the negative log likelihood loss. And that would be like a high", "tokens": [50718, 9834, 300, 17522, 264, 3671, 3565, 22119, 4470, 13, 400, 300, 576, 312, 411, 257, 1090, 51060], "temperature": 0.0, "avg_logprob": -0.07920255914198614, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005713462014682591}, {"id": 846, "seek": 349040, "start": 3504.3, "end": 3509.8, "text": " quality model. Okay, so to summarize, I actually wrote it out here. So our goal is to maximize", "tokens": [51060, 3125, 2316, 13, 1033, 11, 370, 281, 20858, 11, 286, 767, 4114, 309, 484, 510, 13, 407, 527, 3387, 307, 281, 19874, 51335], "temperature": 0.0, "avg_logprob": -0.07920255914198614, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005713462014682591}, {"id": 847, "seek": 349040, "start": 3509.8, "end": 3516.08, "text": " likelihood, which is the product of all the probabilities assigned by the model. And we want", "tokens": [51335, 22119, 11, 597, 307, 264, 1674, 295, 439, 264, 33783, 13279, 538, 264, 2316, 13, 400, 321, 528, 51649], "temperature": 0.0, "avg_logprob": -0.07920255914198614, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005713462014682591}, {"id": 848, "seek": 349040, "start": 3516.08, "end": 3520.2400000000002, "text": " to maximize this likelihood with respect to the model parameters. And in our case, we want to", "tokens": [51649, 281, 19874, 341, 22119, 365, 3104, 281, 264, 2316, 9834, 13, 400, 294, 527, 1389, 11, 321, 528, 281, 51857], "temperature": 0.0, "avg_logprob": -0.07920255914198614, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005713462014682591}, {"id": 849, "seek": 352024, "start": 3520.24, "end": 3521.1, "text": " maximize the likelihood of all the probabilities assigned by the model. And in our case, the model", "tokens": [50365, 19874, 264, 22119, 295, 439, 264, 33783, 13279, 538, 264, 2316, 13, 400, 294, 527, 1389, 11, 264, 2316, 50408], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 850, "seek": 352024, "start": 3521.1, "end": 3527.3799999999997, "text": " parameters here are defined in the table. These numbers, the probabilities are the model parameters", "tokens": [50408, 9834, 510, 366, 7642, 294, 264, 3199, 13, 1981, 3547, 11, 264, 33783, 366, 264, 2316, 9834, 50722], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 851, "seek": 352024, "start": 3527.3799999999997, "end": 3532.3399999999997, "text": " sort of in our diagram language model so far. But you have to keep in mind that here we are storing", "tokens": [50722, 1333, 295, 294, 527, 10686, 2856, 2316, 370, 1400, 13, 583, 291, 362, 281, 1066, 294, 1575, 300, 510, 321, 366, 26085, 50970], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 852, "seek": 352024, "start": 3532.3399999999997, "end": 3537.4599999999996, "text": " everything in a table format, the probabilities. But what's coming up as a brief preview is that", "tokens": [50970, 1203, 294, 257, 3199, 7877, 11, 264, 33783, 13, 583, 437, 311, 1348, 493, 382, 257, 5353, 14281, 307, 300, 51226], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 853, "seek": 352024, "start": 3537.4599999999996, "end": 3542.1, "text": " these numbers will not be kept explicitly, but these numbers will be calculated by a neural", "tokens": [51226, 613, 3547, 486, 406, 312, 4305, 20803, 11, 457, 613, 3547, 486, 312, 15598, 538, 257, 18161, 51458], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 854, "seek": 352024, "start": 3542.1, "end": 3547.2799999999997, "text": " network. So that's coming up. And we want to change and tune the parameters of these neural", "tokens": [51458, 3209, 13, 407, 300, 311, 1348, 493, 13, 400, 321, 528, 281, 1319, 293, 10864, 264, 9834, 295, 613, 18161, 51717], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 855, "seek": 352024, "start": 3547.2799999999997, "end": 3550.22, "text": " networks. We want to change these parameters to maximize the likelihood of all the probabilities", "tokens": [51717, 9590, 13, 492, 528, 281, 1319, 613, 9834, 281, 19874, 264, 22119, 295, 439, 264, 33783, 51864], "temperature": 0.0, "avg_logprob": -0.1264090603345061, "compression_ratio": 2.1528662420382165, "no_speech_prob": 0.0005342477816157043}, {"id": 856, "seek": 355024, "start": 3550.24, "end": 3555.7, "text": " the likelihood, the product of the probabilities. Now, maximizing the likelihood is equivalent to", "tokens": [50365, 264, 22119, 11, 264, 1674, 295, 264, 33783, 13, 823, 11, 5138, 3319, 264, 22119, 307, 10344, 281, 50638], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 857, "seek": 355024, "start": 3555.7, "end": 3562.2599999999998, "text": " maximizing the log likelihood, because log is a monotonic function. Here's the graph of log. And", "tokens": [50638, 5138, 3319, 264, 3565, 22119, 11, 570, 3565, 307, 257, 1108, 310, 11630, 2445, 13, 1692, 311, 264, 4295, 295, 3565, 13, 400, 50966], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 858, "seek": 355024, "start": 3562.2599999999998, "end": 3568.2599999999998, "text": " basically, all it is doing is it's just scaling your, you can look at it as just a scaling of the", "tokens": [50966, 1936, 11, 439, 309, 307, 884, 307, 309, 311, 445, 21589, 428, 11, 291, 393, 574, 412, 309, 382, 445, 257, 21589, 295, 264, 51266], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 859, "seek": 355024, "start": 3568.2599999999998, "end": 3574.5, "text": " loss function. And so the optimization problem here, and here are actually equivalent, because", "tokens": [51266, 4470, 2445, 13, 400, 370, 264, 19618, 1154, 510, 11, 293, 510, 366, 767, 10344, 11, 570, 51578], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 860, "seek": 355024, "start": 3574.5, "end": 3579.16, "text": " this is just scaling, you can look at it that way. And so these are two identical optimization", "tokens": [51578, 341, 307, 445, 21589, 11, 291, 393, 574, 412, 309, 300, 636, 13, 400, 370, 613, 366, 732, 14800, 19618, 51811], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 861, "seek": 355024, "start": 3579.16, "end": 3579.72, "text": " problems.", "tokens": [51811, 2740, 13, 51839], "temperature": 0.0, "avg_logprob": -0.11697818886520517, "compression_ratio": 2.0246913580246915, "no_speech_prob": 0.00014053597988095134}, {"id": 862, "seek": 358024, "start": 3580.24, "end": 3586.4199999999996, "text": " Maximizing the log likelihood is equivalent to minimizing the negative log likelihood.", "tokens": [50365, 29076, 3319, 264, 3565, 22119, 307, 10344, 281, 46608, 264, 3671, 3565, 22119, 13, 50674], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 863, "seek": 358024, "start": 3586.4199999999996, "end": 3590.54, "text": " And then in practice, people actually minimize the average negative log likelihood to get", "tokens": [50674, 400, 550, 294, 3124, 11, 561, 767, 17522, 264, 4274, 3671, 3565, 22119, 281, 483, 50880], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 864, "seek": 358024, "start": 3590.54, "end": 3596.8599999999997, "text": " numbers like 2.4. And then this summarizes the quality of your model. And we'd like to", "tokens": [50880, 3547, 411, 568, 13, 19, 13, 400, 550, 341, 14611, 5660, 264, 3125, 295, 428, 2316, 13, 400, 321, 1116, 411, 281, 51196], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 865, "seek": 358024, "start": 3596.8599999999997, "end": 3602.68, "text": " minimize it and make it as small as possible. And the lowest it can get is zero. And the", "tokens": [51196, 17522, 309, 293, 652, 309, 382, 1359, 382, 1944, 13, 400, 264, 12437, 309, 393, 483, 307, 4018, 13, 400, 264, 51487], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 866, "seek": 358024, "start": 3602.68, "end": 3607.4399999999996, "text": " lower it is, the better off your model is because it's assigning it's assigning high", "tokens": [51487, 3126, 309, 307, 11, 264, 1101, 766, 428, 2316, 307, 570, 309, 311, 49602, 309, 311, 49602, 1090, 51725], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 867, "seek": 358024, "start": 3607.4399999999996, "end": 3609.72, "text": " probabilities to your data.", "tokens": [51725, 33783, 281, 428, 1412, 13, 51839], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 868, "seek": 358024, "start": 3609.72, "end": 3610.24, "text": " Now let's estimate.", "tokens": [51839, 823, 718, 311, 12539, 13, 51865], "temperature": 0.0, "avg_logprob": -0.15336572398310122, "compression_ratio": 1.9019607843137254, "no_speech_prob": 0.0007732867379672825}, {"id": 869, "seek": 361024, "start": 3610.24, "end": 3614.24, "text": " The probability over the entire training set just to make sure that we get something around 2.4.", "tokens": [50365, 440, 8482, 670, 264, 2302, 3097, 992, 445, 281, 652, 988, 300, 321, 483, 746, 926, 568, 13, 19, 13, 50565], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 870, "seek": 361024, "start": 3614.7999999999997, "end": 3618.72, "text": " Let's run this over the entire oops, let's take out the print statement as well.", "tokens": [50593, 961, 311, 1190, 341, 670, 264, 2302, 34166, 11, 718, 311, 747, 484, 264, 4482, 5629, 382, 731, 13, 50789], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 871, "seek": 361024, "start": 3620.64, "end": 3622.8799999999997, "text": " Okay, 2.45 for the entire training set.", "tokens": [50885, 1033, 11, 568, 13, 8465, 337, 264, 2302, 3097, 992, 13, 50997], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 872, "seek": 361024, "start": 3624.3999999999996, "end": 3627.6, "text": " Now what I'd like to show you is that you can actually evaluate the probability for any word", "tokens": [51073, 823, 437, 286, 1116, 411, 281, 855, 291, 307, 300, 291, 393, 767, 13059, 264, 8482, 337, 604, 1349, 51233], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 873, "seek": 361024, "start": 3627.6, "end": 3633.52, "text": " that you want. Like for example, if we just test a single word Andre, and bring back the print", "tokens": [51233, 300, 291, 528, 13, 1743, 337, 1365, 11, 498, 321, 445, 1500, 257, 2167, 1349, 20667, 11, 293, 1565, 646, 264, 4482, 51529], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 874, "seek": 361024, "start": 3633.52, "end": 3639.52, "text": " statement, then you see that Andre is actually kind of like an unlikely word or like on average,", "tokens": [51529, 5629, 11, 550, 291, 536, 300, 20667, 307, 767, 733, 295, 411, 364, 17518, 1349, 420, 411, 322, 4274, 11, 51829], "temperature": 0.0, "avg_logprob": -0.14510826910695723, "compression_ratio": 1.8057553956834533, "no_speech_prob": 0.015389344654977322}, {"id": 875, "seek": 364024, "start": 3640.24, "end": 3647.2799999999997, "text": " we take three log probability to represent it. And roughly, that's because EJ apparently is very", "tokens": [50365, 321, 747, 1045, 3565, 8482, 281, 2906, 309, 13, 400, 9810, 11, 300, 311, 570, 462, 41, 7970, 307, 588, 50717], "temperature": 1.0, "avg_logprob": -1.5581332493256026, "compression_ratio": 2.1403940886699506, "no_speech_prob": 0.00035706860944628716}, {"id": 876, "seek": 364024, "start": 3647.2799999999997, "end": 3656.16, "text": " uncommon as an example. Now, think through this. When I take Andre and I append Q, and I test the", "tokens": [50717, 29289, 382, 364, 1365, 13, 823, 11, 519, 807, 341, 13, 1133, 286, 747, 20667, 293, 286, 34116, 1249, 11, 293, 286, 1500, 264, 51161], "temperature": 1.0, "avg_logprob": -1.5581332493256026, "compression_ratio": 2.1403940886699506, "no_speech_prob": 0.00035706860944628716}, {"id": 877, "seek": 364024, "start": 3656.16, "end": 3664.7999999999997, "text": " probability of it Andre q, we actually get infinity. And that's because J Q has a 0%", "tokens": [51161, 8482, 295, 309, 20667, 9505, 11, 321, 767, 483, 13202, 13, 400, 300, 311, 570, 508, 1249, 575, 257, 1958, 4, 51593], "temperature": 1.0, "avg_logprob": -1.5581332493256026, "compression_ratio": 2.1403940886699506, "no_speech_prob": 0.00035706860944628716}, {"id": 878, "seek": 364024, "start": 3664.7999999999997, "end": 3665.2, "text": " probability according to our model. So the log likelihood, so the log of 0% is 0% which is the", "tokens": [51593, 8482, 4650, 281, 527, 2316, 13, 407, 264, 3565, 22119, 11, 370, 264, 3565, 295, 1958, 4, 307, 1958, 4, 597, 307, 264, 51613], "temperature": 1.0, "avg_logprob": -1.5581332493256026, "compression_ratio": 2.1403940886699506, "no_speech_prob": 0.00035706860944628716}, {"id": 879, "seek": 364024, "start": 3665.2, "end": 3669.3599999999997, "text": " probability of actually dancing. And then what happens when I take Andre, I take Andre q, and I test the", "tokens": [51613, 8482, 295, 767, 8898, 13, 400, 550, 437, 2314, 562, 286, 747, 20667, 11, 286, 747, 20667, 9505, 11, 293, 286, 1500, 264, 51821], "temperature": 1.0, "avg_logprob": -1.5581332493256026, "compression_ratio": 2.1403940886699506, "no_speech_prob": 0.00035706860944628716}, {"id": 880, "seek": 366936, "start": 3669.36, "end": 3671.6800000000003, "text": " So the log of 0 will be negative infinity.", "tokens": [50365, 407, 264, 3565, 295, 1958, 486, 312, 3671, 13202, 13, 50481], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 881, "seek": 366936, "start": 3672.04, "end": 3673.78, "text": " We get infinite loss.", "tokens": [50499, 492, 483, 13785, 4470, 13, 50586], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 882, "seek": 366936, "start": 3674.34, "end": 3675.78, "text": " So this is kind of undesirable, right?", "tokens": [50614, 407, 341, 307, 733, 295, 45667, 21493, 11, 558, 30, 50686], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 883, "seek": 366936, "start": 3675.78, "end": 3678.84, "text": " Because we plugged in a string that could be like a somewhat reasonable name.", "tokens": [50686, 1436, 321, 25679, 294, 257, 6798, 300, 727, 312, 411, 257, 8344, 10585, 1315, 13, 50839], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 884, "seek": 366936, "start": 3678.84, "end": 3685.76, "text": " But basically what this is saying is that this model is exactly 0% likely to predict this name.", "tokens": [50839, 583, 1936, 437, 341, 307, 1566, 307, 300, 341, 2316, 307, 2293, 1958, 4, 3700, 281, 6069, 341, 1315, 13, 51185], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 885, "seek": 366936, "start": 3686.6200000000003, "end": 3689.08, "text": " And our loss is infinity on this example.", "tokens": [51228, 400, 527, 4470, 307, 13202, 322, 341, 1365, 13, 51351], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 886, "seek": 366936, "start": 3689.84, "end": 3696.36, "text": " And really the reason for that is that j is followed by q 0 times.", "tokens": [51389, 400, 534, 264, 1778, 337, 300, 307, 300, 361, 307, 6263, 538, 9505, 1958, 1413, 13, 51715], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 887, "seek": 366936, "start": 3697.0, "end": 3697.6, "text": " Where is q?", "tokens": [51747, 2305, 307, 9505, 30, 51777], "temperature": 0.0, "avg_logprob": -0.1912141247330425, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.03704633191227913}, {"id": 888, "seek": 369760, "start": 3697.6, "end": 3698.7799999999997, "text": " jq is 0.", "tokens": [50365, 361, 80, 307, 1958, 13, 50424], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 889, "seek": 369760, "start": 3699.18, "end": 3701.44, "text": " And so jq is 0% likely.", "tokens": [50444, 400, 370, 361, 80, 307, 1958, 4, 3700, 13, 50557], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 890, "seek": 369760, "start": 3702.1, "end": 3704.8399999999997, "text": " So it's actually kind of gross and people don't like this too much.", "tokens": [50590, 407, 309, 311, 767, 733, 295, 11367, 293, 561, 500, 380, 411, 341, 886, 709, 13, 50727], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 891, "seek": 369760, "start": 3704.96, "end": 3710.3199999999997, "text": " To fix this, there's a very simple fix that people like to do to sort of like smooth out your model a little bit.", "tokens": [50733, 1407, 3191, 341, 11, 456, 311, 257, 588, 2199, 3191, 300, 561, 411, 281, 360, 281, 1333, 295, 411, 5508, 484, 428, 2316, 257, 707, 857, 13, 51001], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 892, "seek": 369760, "start": 3710.36, "end": 3711.2999999999997, "text": " And it's called model smoothing.", "tokens": [51003, 400, 309, 311, 1219, 2316, 899, 6259, 571, 13, 51050], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 893, "seek": 369760, "start": 3711.9, "end": 3715.5, "text": " And roughly what's happening is that we will add some fake counts.", "tokens": [51080, 400, 9810, 437, 311, 2737, 307, 300, 321, 486, 909, 512, 7592, 14893, 13, 51260], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 894, "seek": 369760, "start": 3716.14, "end": 3719.7, "text": " So imagine adding a count of 1 to everything.", "tokens": [51292, 407, 3811, 5127, 257, 1207, 295, 502, 281, 1203, 13, 51470], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 895, "seek": 369760, "start": 3720.7799999999997, "end": 3724.02, "text": " So we add a count of 1 like this.", "tokens": [51524, 407, 321, 909, 257, 1207, 295, 502, 411, 341, 13, 51686], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 896, "seek": 369760, "start": 3724.36, "end": 3725.96, "text": " And then we recalculate the probabilities.", "tokens": [51703, 400, 550, 321, 850, 304, 2444, 473, 264, 33783, 13, 51783], "temperature": 0.0, "avg_logprob": -0.14273180702860042, "compression_ratio": 1.7410358565737052, "no_speech_prob": 3.4968174986715894e-06}, {"id": 897, "seek": 372760, "start": 3727.6, "end": 3728.8199999999997, "text": " And that's model smoothing.", "tokens": [50365, 400, 300, 311, 2316, 899, 6259, 571, 13, 50426], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 898, "seek": 372760, "start": 3728.96, "end": 3730.16, "text": " And you can add as much as you like.", "tokens": [50433, 400, 291, 393, 909, 382, 709, 382, 291, 411, 13, 50493], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 899, "seek": 372760, "start": 3730.22, "end": 3732.22, "text": " You can add 5 and that will give you a smoother model.", "tokens": [50496, 509, 393, 909, 1025, 293, 300, 486, 976, 291, 257, 28640, 2316, 13, 50596], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 900, "seek": 372760, "start": 3732.7, "end": 3737.2599999999998, "text": " And the more you add here, the more uniform model you're going to have.", "tokens": [50620, 400, 264, 544, 291, 909, 510, 11, 264, 544, 9452, 2316, 291, 434, 516, 281, 362, 13, 50848], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 901, "seek": 372760, "start": 3737.8399999999997, "end": 3741.74, "text": " And the less you add, the more peaked model you are going to have, of course.", "tokens": [50877, 400, 264, 1570, 291, 909, 11, 264, 544, 520, 7301, 2316, 291, 366, 516, 281, 362, 11, 295, 1164, 13, 51072], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 902, "seek": 372760, "start": 3742.2999999999997, "end": 3745.24, "text": " So 1 is like a pretty decent count to add.", "tokens": [51100, 407, 502, 307, 411, 257, 1238, 8681, 1207, 281, 909, 13, 51247], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 903, "seek": 372760, "start": 3745.6, "end": 3749.7, "text": " And that will ensure that there will be no zeros in our probability matrix P.", "tokens": [51265, 400, 300, 486, 5586, 300, 456, 486, 312, 572, 35193, 294, 527, 8482, 8141, 430, 13, 51470], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 904, "seek": 372760, "start": 3750.7799999999997, "end": 3753.14, "text": " And so this will, of course, change the generations a little bit.", "tokens": [51524, 400, 370, 341, 486, 11, 295, 1164, 11, 1319, 264, 10593, 257, 707, 857, 13, 51642], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 905, "seek": 372760, "start": 3753.64, "end": 3754.5, "text": " In this case, it didn't.", "tokens": [51667, 682, 341, 1389, 11, 309, 994, 380, 13, 51710], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 906, "seek": 372760, "start": 3754.6, "end": 3755.88, "text": " But in principle, it could.", "tokens": [51715, 583, 294, 8665, 11, 309, 727, 13, 51779], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 907, "seek": 372760, "start": 3756.54, "end": 3757.58, "text": " But what that's going to do...", "tokens": [51812, 583, 437, 300, 311, 516, 281, 360, 485, 51864], "temperature": 0.0, "avg_logprob": -0.12483106515346429, "compression_ratio": 1.8815331010452963, "no_speech_prob": 7.117391214706004e-05}, {"id": 908, "seek": 375760, "start": 3757.6, "end": 3760.3399999999997, "text": " What it's going to do now is that nothing will be infinity unlikely.", "tokens": [50365, 708, 309, 311, 516, 281, 360, 586, 307, 300, 1825, 486, 312, 13202, 17518, 13, 50502], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 909, "seek": 375760, "start": 3761.2599999999998, "end": 3764.5, "text": " So now our model will predict some other probability.", "tokens": [50548, 407, 586, 527, 2316, 486, 6069, 512, 661, 8482, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 910, "seek": 375760, "start": 3764.88, "end": 3767.16, "text": " And we see that jq now has a very small probability.", "tokens": [50729, 400, 321, 536, 300, 361, 80, 586, 575, 257, 588, 1359, 8482, 13, 50843], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 911, "seek": 375760, "start": 3767.58, "end": 3771.22, "text": " So the model still finds it very surprising that this was a word or a bigram.", "tokens": [50864, 407, 264, 2316, 920, 10704, 309, 588, 8830, 300, 341, 390, 257, 1349, 420, 257, 955, 2356, 13, 51046], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 912, "seek": 375760, "start": 3771.44, "end": 3772.72, "text": " But we don't get negative infinity.", "tokens": [51057, 583, 321, 500, 380, 483, 3671, 13202, 13, 51121], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 913, "seek": 375760, "start": 3773.3199999999997, "end": 3775.7599999999998, "text": " So it's kind of like a nice fix that people like to apply sometimes.", "tokens": [51151, 407, 309, 311, 733, 295, 411, 257, 1481, 3191, 300, 561, 411, 281, 3079, 2171, 13, 51273], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 914, "seek": 375760, "start": 3775.7999999999997, "end": 3776.66, "text": " And it's called model smoothing.", "tokens": [51275, 400, 309, 311, 1219, 2316, 899, 6259, 571, 13, 51318], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 915, "seek": 375760, "start": 3777.1, "end": 3781.06, "text": " Okay, so we've now trained a respectable bigram character-level language model.", "tokens": [51340, 1033, 11, 370, 321, 600, 586, 8895, 257, 44279, 955, 2356, 2517, 12, 12418, 2856, 2316, 13, 51538], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 916, "seek": 375760, "start": 3781.3199999999997, "end": 3787.38, "text": " And we saw that we both sort of trained the model by looking at the counts of all the bigrams.", "tokens": [51551, 400, 321, 1866, 300, 321, 1293, 1333, 295, 8895, 264, 2316, 538, 1237, 412, 264, 14893, 295, 439, 264, 955, 2356, 82, 13, 51854], "temperature": 0.0, "avg_logprob": -0.1801084956607303, "compression_ratio": 1.802547770700637, "no_speech_prob": 0.00021983959595672786}, {"id": 917, "seek": 378760, "start": 3787.6, "end": 3790.48, "text": " And normalizing the rows to get probability distributions.", "tokens": [50365, 400, 2710, 3319, 264, 13241, 281, 483, 8482, 37870, 13, 50509], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 918, "seek": 378760, "start": 3791.2, "end": 3797.92, "text": " We saw that we can also then use those parameters of this model to perform sampling of new words.", "tokens": [50545, 492, 1866, 300, 321, 393, 611, 550, 764, 729, 9834, 295, 341, 2316, 281, 2042, 21179, 295, 777, 2283, 13, 50881], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 919, "seek": 378760, "start": 3799.2599999999998, "end": 3801.68, "text": " So we sample new names according to those distributions.", "tokens": [50948, 407, 321, 6889, 777, 5288, 4650, 281, 729, 37870, 13, 51069], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 920, "seek": 378760, "start": 3802.1, "end": 3804.86, "text": " And we also saw that we can evaluate the quality of this model.", "tokens": [51090, 400, 321, 611, 1866, 300, 321, 393, 13059, 264, 3125, 295, 341, 2316, 13, 51228], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 921, "seek": 378760, "start": 3805.3199999999997, "end": 3809.4, "text": " And the quality of this model is summarized in a single number, which is the negative log likelihood.", "tokens": [51251, 400, 264, 3125, 295, 341, 2316, 307, 14611, 1602, 294, 257, 2167, 1230, 11, 597, 307, 264, 3671, 3565, 22119, 13, 51455], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 922, "seek": 378760, "start": 3809.88, "end": 3812.7, "text": " And the lower this number is, the better the model is.", "tokens": [51479, 400, 264, 3126, 341, 1230, 307, 11, 264, 1101, 264, 2316, 307, 13, 51620], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 923, "seek": 378760, "start": 3813.14, "end": 3817.06, "text": " Because it is giving high probabilities to the actual next characters.", "tokens": [51642, 1436, 309, 307, 2902, 1090, 33783, 281, 264, 3539, 958, 4342, 13, 51838], "temperature": 0.0, "avg_logprob": -0.15086068778202452, "compression_ratio": 1.863468634686347, "no_speech_prob": 0.0021720933727920055}, {"id": 924, "seek": 381706, "start": 3817.06, "end": 3818.9, "text": " And all the bigrams in our training set.", "tokens": [50365, 400, 439, 264, 955, 2356, 82, 294, 527, 3097, 992, 13, 50457], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 925, "seek": 381706, "start": 3819.96, "end": 3821.6, "text": " So that's all well and good.", "tokens": [50510, 407, 300, 311, 439, 731, 293, 665, 13, 50592], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 926, "seek": 381706, "start": 3821.86, "end": 3825.98, "text": " But we've arrived at this model explicitly by doing something that felt sensible.", "tokens": [50605, 583, 321, 600, 6678, 412, 341, 2316, 20803, 538, 884, 746, 300, 2762, 25380, 13, 50811], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 927, "seek": 381706, "start": 3826.22, "end": 3827.62, "text": " We were just performing counts.", "tokens": [50823, 492, 645, 445, 10205, 14893, 13, 50893], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 928, "seek": 381706, "start": 3827.86, "end": 3830.08, "text": " And then we were normalizing those counts.", "tokens": [50905, 400, 550, 321, 645, 2710, 3319, 729, 14893, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 929, "seek": 381706, "start": 3830.86, "end": 3833.7599999999998, "text": " Now what I would like to do is I would like to take an alternative approach.", "tokens": [51055, 823, 437, 286, 576, 411, 281, 360, 307, 286, 576, 411, 281, 747, 364, 8535, 3109, 13, 51200], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 930, "seek": 381706, "start": 3834.0, "end": 3836.2, "text": " We will end up in a very, very similar position.", "tokens": [51212, 492, 486, 917, 493, 294, 257, 588, 11, 588, 2531, 2535, 13, 51322], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 931, "seek": 381706, "start": 3836.44, "end": 3837.84, "text": " But the approach will look very different.", "tokens": [51334, 583, 264, 3109, 486, 574, 588, 819, 13, 51404], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 932, "seek": 381706, "start": 3838.18, "end": 3843.36, "text": " Because I would like to cast the problem of bigram character-level language modeling into the neural network framework.", "tokens": [51421, 1436, 286, 576, 411, 281, 4193, 264, 1154, 295, 955, 2356, 2517, 12, 12418, 2856, 15983, 666, 264, 18161, 3209, 8388, 13, 51680], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 933, "seek": 381706, "start": 3844.02, "end": 3847.04, "text": " And in the neural network framework, we're going to approach things.", "tokens": [51713, 400, 294, 264, 18161, 3209, 8388, 11, 321, 434, 516, 281, 3109, 721, 13, 51864], "temperature": 0.0, "avg_logprob": -0.19051210363428076, "compression_ratio": 1.8193146417445483, "no_speech_prob": 0.000939207908231765}, {"id": 934, "seek": 384706, "start": 3847.2799999999997, "end": 3850.16, "text": " Slightly differently, but again, end up in a very similar spot.", "tokens": [50376, 318, 44872, 7614, 11, 457, 797, 11, 917, 493, 294, 257, 588, 2531, 4008, 13, 50520], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 935, "seek": 384706, "start": 3850.36, "end": 3851.2599999999998, "text": " I'll go into that later.", "tokens": [50530, 286, 603, 352, 666, 300, 1780, 13, 50575], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 936, "seek": 384706, "start": 3852.06, "end": 3856.96, "text": " Now, our neural network is going to be a still a bigram character-level language model.", "tokens": [50615, 823, 11, 527, 18161, 3209, 307, 516, 281, 312, 257, 920, 257, 955, 2356, 2517, 12, 12418, 2856, 2316, 13, 50860], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 937, "seek": 384706, "start": 3857.36, "end": 3859.86, "text": " So it receives a single character as an input.", "tokens": [50880, 407, 309, 20717, 257, 2167, 2517, 382, 364, 4846, 13, 51005], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 938, "seek": 384706, "start": 3860.46, "end": 3863.46, "text": " Then there's neural network with some weights or some parameters w.", "tokens": [51035, 1396, 456, 311, 18161, 3209, 365, 512, 17443, 420, 512, 9834, 261, 13, 51185], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 939, "seek": 384706, "start": 3864.2599999999998, "end": 3869.06, "text": " And it's going to output the probability distribution over the next character in a sequence.", "tokens": [51225, 400, 309, 311, 516, 281, 5598, 264, 8482, 7316, 670, 264, 958, 2517, 294, 257, 8310, 13, 51465], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 940, "seek": 384706, "start": 3869.2599999999998, "end": 3874.66, "text": " It's going to make guesses as to what is likely to follow this character that was input to the model.", "tokens": [51475, 467, 311, 516, 281, 652, 42703, 382, 281, 437, 307, 3700, 281, 1524, 341, 2517, 300, 390, 4846, 281, 264, 2316, 13, 51745], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 941, "seek": 384706, "start": 3876.06, "end": 3876.96, "text": " And then in addition to that,", "tokens": [51815, 400, 550, 294, 4500, 281, 300, 11, 51860], "temperature": 0.0, "avg_logprob": -0.19397692382335663, "compression_ratio": 1.7315436241610738, "no_speech_prob": 0.0010903766378760338}, {"id": 942, "seek": 387706, "start": 3877.2599999999998, "end": 3881.06, "text": " we're going to be able to evaluate any setting of the parameters of the neural net.", "tokens": [50375, 321, 434, 516, 281, 312, 1075, 281, 13059, 604, 3287, 295, 264, 9834, 295, 264, 18161, 2533, 13, 50565], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 943, "seek": 387706, "start": 3881.2599999999998, "end": 3884.86, "text": " Because we have the loss function, the negative log likelihood.", "tokens": [50575, 1436, 321, 362, 264, 4470, 2445, 11, 264, 3671, 3565, 22119, 13, 50755], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 944, "seek": 387706, "start": 3885.06, "end": 3887.16, "text": " So we're going to take a look at its probability distributions.", "tokens": [50765, 407, 321, 434, 516, 281, 747, 257, 574, 412, 1080, 8482, 37870, 13, 50870], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 945, "seek": 387706, "start": 3887.36, "end": 3888.96, "text": " And we're going to use the labels,", "tokens": [50880, 400, 321, 434, 516, 281, 764, 264, 16949, 11, 50960], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 946, "seek": 387706, "start": 3889.16, "end": 3894.16, "text": " which are basically just the identity of the next character in that bigram, the second character.", "tokens": [50970, 597, 366, 1936, 445, 264, 6575, 295, 264, 958, 2517, 294, 300, 955, 2356, 11, 264, 1150, 2517, 13, 51220], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 947, "seek": 387706, "start": 3894.36, "end": 3899.36, "text": " So knowing what the second character actually comes next in the bigram allows us to then look at", "tokens": [51230, 407, 5276, 437, 264, 1150, 2517, 767, 1487, 958, 294, 264, 955, 2356, 4045, 505, 281, 550, 574, 412, 51480], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 948, "seek": 387706, "start": 3899.56, "end": 3903.2599999999998, "text": " how high of probability the model assigns to that character.", "tokens": [51490, 577, 1090, 295, 8482, 264, 2316, 6269, 82, 281, 300, 2517, 13, 51675], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 949, "seek": 387706, "start": 3903.46, "end": 3906.16, "text": " And then we, of course, want the probability to be very high.", "tokens": [51685, 400, 550, 321, 11, 295, 1164, 11, 528, 264, 8482, 281, 312, 588, 1090, 13, 51820], "temperature": 0.0, "avg_logprob": -0.18407985345641178, "compression_ratio": 1.924914675767918, "no_speech_prob": 0.04504614695906639}, {"id": 950, "seek": 390706, "start": 3907.06, "end": 3909.86, "text": " And that is another way of saying that the loss is low.", "tokens": [50365, 400, 300, 307, 1071, 636, 295, 1566, 300, 264, 4470, 307, 2295, 13, 50505], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 951, "seek": 390706, "start": 3910.86, "end": 3915.06, "text": " So we're going to use gradient-based optimization then to tune the parameters of this network.", "tokens": [50555, 407, 321, 434, 516, 281, 764, 16235, 12, 6032, 19618, 550, 281, 10864, 264, 9834, 295, 341, 3209, 13, 50765], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 952, "seek": 390706, "start": 3915.46, "end": 3918.2599999999998, "text": " Because we have the loss function and we're going to minimize it.", "tokens": [50785, 1436, 321, 362, 264, 4470, 2445, 293, 321, 434, 516, 281, 17522, 309, 13, 50925], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 953, "seek": 390706, "start": 3918.46, "end": 3923.66, "text": " So we're going to tune the weights so that the neural net is correctly predicting the probabilities for the next character.", "tokens": [50935, 407, 321, 434, 516, 281, 10864, 264, 17443, 370, 300, 264, 18161, 2533, 307, 8944, 32884, 264, 33783, 337, 264, 958, 2517, 13, 51195], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 954, "seek": 390706, "start": 3924.46, "end": 3925.46, "text": " So let's get started.", "tokens": [51235, 407, 718, 311, 483, 1409, 13, 51285], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 955, "seek": 390706, "start": 3925.66, "end": 3929.46, "text": " The first thing I want to do is I want to compile the training set of this neural network, right?", "tokens": [51295, 440, 700, 551, 286, 528, 281, 360, 307, 286, 528, 281, 31413, 264, 3097, 992, 295, 341, 18161, 3209, 11, 558, 30, 51485], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 956, "seek": 390706, "start": 3929.66, "end": 3934.2599999999998, "text": " So create the training set of all the bigrams.", "tokens": [51495, 407, 1884, 264, 3097, 992, 295, 439, 264, 955, 2356, 82, 13, 51725], "temperature": 0.0, "avg_logprob": -0.12171150207519531, "compression_ratio": 1.8639705882352942, "no_speech_prob": 0.00032552334596402943}, {"id": 957, "seek": 393426, "start": 3934.26, "end": 3945.86, "text": " Okay, and here I'm going to copy-paste this code because this code iterates over all the bigrams.", "tokens": [50365, 1033, 11, 293, 510, 286, 478, 516, 281, 5055, 12, 79, 9079, 341, 3089, 570, 341, 3089, 17138, 1024, 670, 439, 264, 955, 2356, 82, 13, 50945], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 958, "seek": 393426, "start": 3946.0600000000004, "end": 3950.26, "text": " So here we start with the words, we iterate over all the bigrams.", "tokens": [50955, 407, 510, 321, 722, 365, 264, 2283, 11, 321, 44497, 670, 439, 264, 955, 2356, 82, 13, 51165], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 959, "seek": 393426, "start": 3950.46, "end": 3952.86, "text": " And previously, as you recall, we did the counts.", "tokens": [51175, 400, 8046, 11, 382, 291, 9901, 11, 321, 630, 264, 14893, 13, 51295], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 960, "seek": 393426, "start": 3953.0600000000004, "end": 3954.46, "text": " But now we're not going to do counts.", "tokens": [51305, 583, 586, 321, 434, 406, 516, 281, 360, 14893, 13, 51375], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 961, "seek": 393426, "start": 3954.6600000000003, "end": 3956.0600000000004, "text": " We're just creating a training set.", "tokens": [51385, 492, 434, 445, 4084, 257, 3097, 992, 13, 51455], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 962, "seek": 393426, "start": 3956.26, "end": 3959.86, "text": " Now this training set will be made up of two lists.", "tokens": [51465, 823, 341, 3097, 992, 486, 312, 1027, 493, 295, 732, 14511, 13, 51645], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 963, "seek": 393426, "start": 3960.0600000000004, "end": 3963.86, "text": " We have the...", "tokens": [51655, 492, 362, 264, 485, 51845], "temperature": 0.0, "avg_logprob": -0.18420043358435997, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.001983230235055089}, {"id": 964, "seek": 396426, "start": 3964.26, "end": 3969.0600000000004, "text": " inputs and the targets, the labels.", "tokens": [50365, 15743, 293, 264, 12911, 11, 264, 16949, 13, 50605], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 965, "seek": 396426, "start": 3969.26, "end": 3971.0600000000004, "text": " And these bigrams will denote x, y.", "tokens": [50615, 400, 613, 955, 2356, 82, 486, 45708, 2031, 11, 288, 13, 50705], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 966, "seek": 396426, "start": 3971.26, "end": 3973.0600000000004, "text": " Those are the characters, right?", "tokens": [50715, 3950, 366, 264, 4342, 11, 558, 30, 50805], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 967, "seek": 396426, "start": 3973.26, "end": 3977.0600000000004, "text": " And so we're given the first character of the bigram and then we're trying to predict the next one.", "tokens": [50815, 400, 370, 321, 434, 2212, 264, 700, 2517, 295, 264, 955, 2356, 293, 550, 321, 434, 1382, 281, 6069, 264, 958, 472, 13, 51005], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 968, "seek": 396426, "start": 3977.26, "end": 3979.0600000000004, "text": " Both of these are going to be integers.", "tokens": [51015, 6767, 295, 613, 366, 516, 281, 312, 41674, 13, 51105], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 969, "seek": 396426, "start": 3979.26, "end": 3984.0600000000004, "text": " So here we'll take xs.append is just x1.", "tokens": [51115, 407, 510, 321, 603, 747, 2031, 82, 13, 1746, 521, 307, 445, 2031, 16, 13, 51355], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 970, "seek": 396426, "start": 3984.26, "end": 3987.0600000000004, "text": " ys.append is x2.", "tokens": [51365, 288, 82, 13, 1746, 521, 307, 2031, 17, 13, 51505], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 971, "seek": 396426, "start": 3987.26, "end": 3991.0600000000004, "text": " And then here we actually don't want lists of integers.", "tokens": [51515, 400, 550, 510, 321, 767, 500, 380, 528, 14511, 295, 41674, 13, 51705], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 972, "seek": 396426, "start": 3991.26, "end": 3994.0600000000004, "text": " We will create tensors out of these.", "tokens": [51715, 492, 486, 1884, 10688, 830, 484, 295, 613, 13, 51855], "temperature": 0.0, "avg_logprob": -0.1479319275402632, "compression_ratio": 1.70995670995671, "no_speech_prob": 0.0004737090494018048}, {"id": 973, "seek": 399426, "start": 3994.26, "end": 3997.0600000000004, "text": " xs is torch.tensor of xs.", "tokens": [50365, 2031, 82, 307, 27822, 13, 83, 23153, 295, 2031, 82, 13, 50505], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 974, "seek": 399426, "start": 3997.26, "end": 4001.0600000000004, "text": " And ys is torch.tensor of ys.", "tokens": [50515, 400, 288, 82, 307, 27822, 13, 83, 23153, 295, 288, 82, 13, 50705], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 975, "seek": 399426, "start": 4001.26, "end": 4007.0600000000004, "text": " And then we don't actually want to take all the words just yet because I want everything to be manageable.", "tokens": [50715, 400, 550, 321, 500, 380, 767, 528, 281, 747, 439, 264, 2283, 445, 1939, 570, 286, 528, 1203, 281, 312, 38798, 13, 51005], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 976, "seek": 399426, "start": 4007.26, "end": 4011.0600000000004, "text": " So let's just do the first word, which is Emma.", "tokens": [51015, 407, 718, 311, 445, 360, 264, 700, 1349, 11, 597, 307, 17124, 13, 51205], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 977, "seek": 399426, "start": 4011.26, "end": 4015.0600000000004, "text": " And then it's clear what these xs and ys would be.", "tokens": [51215, 400, 550, 309, 311, 1850, 437, 613, 2031, 82, 293, 288, 82, 576, 312, 13, 51405], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 978, "seek": 399426, "start": 4015.26, "end": 4021.0600000000004, "text": " Here let me print character1, character2, just so you see what's going on here.", "tokens": [51415, 1692, 718, 385, 4482, 2517, 16, 11, 2517, 17, 11, 445, 370, 291, 536, 437, 311, 516, 322, 510, 13, 51705], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 979, "seek": 399426, "start": 4021.26, "end": 4024.0600000000004, "text": " So the bigrams of these characters is...", "tokens": [51715, 407, 264, 955, 2356, 82, 295, 613, 4342, 307, 485, 51855], "temperature": 0.0, "avg_logprob": -0.11902069641371905, "compression_ratio": 1.6608695652173913, "no_speech_prob": 0.0001383373892167583}, {"id": 980, "seek": 402426, "start": 4024.26, "end": 4034.0600000000004, "text": " So this single word, as I mentioned, has one, two, three, four, five examples for our neural network.", "tokens": [50365, 407, 341, 2167, 1349, 11, 382, 286, 2835, 11, 575, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 5110, 337, 527, 18161, 3209, 13, 50855], "temperature": 0.0, "avg_logprob": -0.13224110704787234, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.001336373738013208}, {"id": 981, "seek": 402426, "start": 4034.26, "end": 4037.0600000000004, "text": " There are five separate examples in Emma.", "tokens": [50865, 821, 366, 1732, 4994, 5110, 294, 17124, 13, 51005], "temperature": 0.0, "avg_logprob": -0.13224110704787234, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.001336373738013208}, {"id": 982, "seek": 402426, "start": 4037.26, "end": 4039.0600000000004, "text": " And those examples I'll summarize here.", "tokens": [51015, 400, 729, 5110, 286, 603, 20858, 510, 13, 51105], "temperature": 0.0, "avg_logprob": -0.13224110704787234, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.001336373738013208}, {"id": 983, "seek": 402426, "start": 4039.26, "end": 4047.0600000000004, "text": " When the input to the neural network is integer 0, the desired label is integer 5, which corresponds to e.", "tokens": [51115, 1133, 264, 4846, 281, 264, 18161, 3209, 307, 24922, 1958, 11, 264, 14721, 7645, 307, 24922, 1025, 11, 597, 23249, 281, 308, 13, 51505], "temperature": 0.0, "avg_logprob": -0.13224110704787234, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.001336373738013208}, {"id": 984, "seek": 402426, "start": 4047.26, "end": 4052.0600000000004, "text": " When the input to the neural network is 5, we want its weights to be arranged,", "tokens": [51515, 1133, 264, 4846, 281, 264, 18161, 3209, 307, 1025, 11, 321, 528, 1080, 17443, 281, 312, 18721, 11, 51755], "temperature": 0.0, "avg_logprob": -0.13224110704787234, "compression_ratio": 1.7740384615384615, "no_speech_prob": 0.001336373738013208}, {"id": 985, "seek": 405206, "start": 4052.06, "end": 4054.86, "text": " so that 13 gets a very high probability.", "tokens": [50365, 370, 300, 3705, 2170, 257, 588, 1090, 8482, 13, 50505], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 986, "seek": 405206, "start": 4055.06, "end": 4058.86, "text": " When 13 is put in, we want 13 to have a high probability.", "tokens": [50515, 1133, 3705, 307, 829, 294, 11, 321, 528, 3705, 281, 362, 257, 1090, 8482, 13, 50705], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 987, "seek": 405206, "start": 4059.06, "end": 4062.86, "text": " When 13 is put in, we also want 1 to have a high probability.", "tokens": [50715, 1133, 3705, 307, 829, 294, 11, 321, 611, 528, 502, 281, 362, 257, 1090, 8482, 13, 50905], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 988, "seek": 405206, "start": 4063.06, "end": 4066.86, "text": " When 1 is input, we want 0 to have a very high probability.", "tokens": [50915, 1133, 502, 307, 4846, 11, 321, 528, 1958, 281, 362, 257, 588, 1090, 8482, 13, 51105], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 989, "seek": 405206, "start": 4067.06, "end": 4072.86, "text": " So there are five separate input examples to a neural net in this dataset.", "tokens": [51115, 407, 456, 366, 1732, 4994, 4846, 5110, 281, 257, 18161, 2533, 294, 341, 28872, 13, 51405], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 990, "seek": 405206, "start": 4075.06, "end": 4080.86, "text": " I wanted to add a tangent of a note of caution to be careful with a lot of the APIs of some of these frameworks.", "tokens": [51515, 286, 1415, 281, 909, 257, 27747, 295, 257, 3637, 295, 23585, 281, 312, 5026, 365, 257, 688, 295, 264, 21445, 295, 512, 295, 613, 29834, 13, 51805], "temperature": 0.0, "avg_logprob": -0.04632377191023393, "compression_ratio": 1.9521531100478469, "no_speech_prob": 0.00022723131405655295}, {"id": 991, "seek": 408086, "start": 4080.86, "end": 4087.6600000000003, "text": " You saw me silently use torch.tensor with a lowercase t, and the output looked right.", "tokens": [50365, 509, 1866, 385, 40087, 764, 27822, 13, 83, 23153, 365, 257, 3126, 9765, 256, 11, 293, 264, 5598, 2956, 558, 13, 50705], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 992, "seek": 408086, "start": 4087.86, "end": 4091.6600000000003, "text": " But you should be aware that there's actually two ways of constructing a tensor.", "tokens": [50715, 583, 291, 820, 312, 3650, 300, 456, 311, 767, 732, 2098, 295, 39969, 257, 40863, 13, 50905], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 993, "seek": 408086, "start": 4091.86, "end": 4096.66, "text": " There's a torch.lowercase tensor, and there's also a torch.capitalTensor class,", "tokens": [50915, 821, 311, 257, 27822, 13, 34598, 9765, 40863, 11, 293, 456, 311, 611, 257, 27822, 13, 9485, 1686, 51, 23153, 1508, 11, 51155], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 994, "seek": 408086, "start": 4096.860000000001, "end": 4099.66, "text": " which you can also construct, so you can actually call both.", "tokens": [51165, 597, 291, 393, 611, 7690, 11, 370, 291, 393, 767, 818, 1293, 13, 51305], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 995, "seek": 408086, "start": 4099.860000000001, "end": 4104.66, "text": " You can also do torch.capitalTensor, and you get an x as in y as well.", "tokens": [51315, 509, 393, 611, 360, 27822, 13, 9485, 1686, 51, 23153, 11, 293, 291, 483, 364, 2031, 382, 294, 288, 382, 731, 13, 51555], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 996, "seek": 408086, "start": 4104.860000000001, "end": 4107.66, "text": " So that's not confusing at all.", "tokens": [51565, 407, 300, 311, 406, 13181, 412, 439, 13, 51705], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 997, "seek": 408086, "start": 4107.860000000001, "end": 4110.66, "text": " There are threads on what is the difference between these two.", "tokens": [51715, 821, 366, 19314, 322, 437, 307, 264, 2649, 1296, 613, 732, 13, 51855], "temperature": 0.0, "avg_logprob": -0.10264421803082606, "compression_ratio": 1.8549019607843138, "no_speech_prob": 0.00254267081618309}, {"id": 998, "seek": 411086, "start": 4110.86, "end": 4115.66, "text": " And unfortunately, the docs are just not clear on the difference.", "tokens": [50365, 400, 7015, 11, 264, 45623, 366, 445, 406, 1850, 322, 264, 2649, 13, 50605], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 999, "seek": 411086, "start": 4115.86, "end": 4118.66, "text": " And when you look at the docs of lowercase tensor,", "tokens": [50615, 400, 562, 291, 574, 412, 264, 45623, 295, 3126, 9765, 40863, 11, 50755], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1000, "seek": 411086, "start": 4118.86, "end": 4122.66, "text": " constructs tensor with no autograd history by copying data.", "tokens": [50765, 7690, 82, 40863, 365, 572, 1476, 664, 6206, 2503, 538, 27976, 1412, 13, 50955], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1001, "seek": 411086, "start": 4122.86, "end": 4125.66, "text": " It's just like, it doesn't make sense.", "tokens": [50965, 467, 311, 445, 411, 11, 309, 1177, 380, 652, 2020, 13, 51105], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1002, "seek": 411086, "start": 4125.86, "end": 4130.66, "text": " So the actual difference, as far as I can tell, is explained eventually in this random thread that you can Google.", "tokens": [51115, 407, 264, 3539, 2649, 11, 382, 1400, 382, 286, 393, 980, 11, 307, 8825, 4728, 294, 341, 4974, 7207, 300, 291, 393, 3329, 13, 51355], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1003, "seek": 411086, "start": 4130.86, "end": 4135.66, "text": " And really it comes down to, I believe, that...", "tokens": [51365, 400, 534, 309, 1487, 760, 281, 11, 286, 1697, 11, 300, 485, 51605], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1004, "seek": 411086, "start": 4135.86, "end": 4137.66, "text": " Where is this?", "tokens": [51615, 2305, 307, 341, 30, 51705], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1005, "seek": 411086, "start": 4137.86, "end": 4140.66, "text": " Torch.tensor infers the D type, the data type,", "tokens": [51715, 7160, 339, 13, 83, 23153, 1536, 433, 264, 413, 2010, 11, 264, 1412, 2010, 11, 51855], "temperature": 0.0, "avg_logprob": -0.15636937480327512, "compression_ratio": 1.6, "no_speech_prob": 0.0008927693124860525}, {"id": 1006, "seek": 414086, "start": 4140.86, "end": 4143.66, "text": " automatically, while torch.tensor just returns a float tensor.", "tokens": [50365, 6772, 11, 1339, 27822, 13, 83, 23153, 445, 11247, 257, 15706, 40863, 13, 50505], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1007, "seek": 414086, "start": 4143.86, "end": 4146.66, "text": " I would recommend to stick to torch.lowercase tensor.", "tokens": [50515, 286, 576, 2748, 281, 2897, 281, 27822, 13, 34598, 9765, 40863, 13, 50655], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1008, "seek": 414086, "start": 4146.86, "end": 4152.66, "text": " So indeed, we see that when I construct this with a capital T,", "tokens": [50665, 407, 6451, 11, 321, 536, 300, 562, 286, 7690, 341, 365, 257, 4238, 314, 11, 50955], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1009, "seek": 414086, "start": 4152.86, "end": 4156.66, "text": " the data type here of x is float32.", "tokens": [50965, 264, 1412, 2010, 510, 295, 2031, 307, 15706, 11440, 13, 51155], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1010, "seek": 414086, "start": 4156.86, "end": 4159.66, "text": " But torch.lowercase tensor,", "tokens": [51165, 583, 27822, 13, 34598, 9765, 40863, 11, 51305], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1011, "seek": 414086, "start": 4159.86, "end": 4165.66, "text": " you see how it's now x.dtype is now integer.", "tokens": [51315, 291, 536, 577, 309, 311, 586, 2031, 13, 67, 20467, 307, 586, 24922, 13, 51605], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1012, "seek": 414086, "start": 4165.86, "end": 4170.66, "text": " So it's advised that you use lowercase t", "tokens": [51615, 407, 309, 311, 26269, 300, 291, 764, 3126, 9765, 256, 51855], "temperature": 0.0, "avg_logprob": -0.14397098620732626, "compression_ratio": 1.63681592039801, "no_speech_prob": 0.00015603906649630517}, {"id": 1013, "seek": 417086, "start": 4170.86, "end": 4173.66, "text": " and you can read more about it if you like in some of these threads.", "tokens": [50365, 293, 291, 393, 1401, 544, 466, 309, 498, 291, 411, 294, 512, 295, 613, 19314, 13, 50505], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1014, "seek": 417086, "start": 4173.86, "end": 4177.66, "text": " But basically, I'm pointing out some of these things", "tokens": [50515, 583, 1936, 11, 286, 478, 12166, 484, 512, 295, 613, 721, 50705], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1015, "seek": 417086, "start": 4177.86, "end": 4182.66, "text": " because I want to caution you and I want you to get used to reading a lot of documentation", "tokens": [50715, 570, 286, 528, 281, 23585, 291, 293, 286, 528, 291, 281, 483, 1143, 281, 3760, 257, 688, 295, 14333, 50955], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1016, "seek": 417086, "start": 4182.86, "end": 4186.66, "text": " and reading through a lot of Q&As and threads like this.", "tokens": [50965, 293, 3760, 807, 257, 688, 295, 1249, 5, 10884, 293, 19314, 411, 341, 13, 51155], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1017, "seek": 417086, "start": 4186.86, "end": 4190.66, "text": " And some of this stuff is unfortunately not easy and not very well documented", "tokens": [51165, 400, 512, 295, 341, 1507, 307, 7015, 406, 1858, 293, 406, 588, 731, 23007, 51355], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1018, "seek": 417086, "start": 4190.86, "end": 4192.66, "text": " and you have to be careful out there.", "tokens": [51365, 293, 291, 362, 281, 312, 5026, 484, 456, 13, 51455], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1019, "seek": 417086, "start": 4192.86, "end": 4196.66, "text": " What we want here is integers because that's what makes sense.", "tokens": [51465, 708, 321, 528, 510, 307, 41674, 570, 300, 311, 437, 1669, 2020, 13, 51655], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1020, "seek": 417086, "start": 4196.86, "end": 4200.66, "text": " And so lowercase tensor is what we are using.", "tokens": [51665, 400, 370, 3126, 9765, 40863, 307, 437, 321, 366, 1228, 13, 51855], "temperature": 0.0, "avg_logprob": -0.08414683803435295, "compression_ratio": 1.802919708029197, "no_speech_prob": 0.0003446572518441826}, {"id": 1021, "seek": 420086, "start": 4200.86, "end": 4205.66, "text": " OK, now we want to think through how we're going to feed in these examples into a neural network.", "tokens": [50365, 2264, 11, 586, 321, 528, 281, 519, 807, 577, 321, 434, 516, 281, 3154, 294, 613, 5110, 666, 257, 18161, 3209, 13, 50605], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1022, "seek": 420086, "start": 4205.86, "end": 4209.66, "text": " Now, it's not quite as straightforward as plugging it in", "tokens": [50615, 823, 11, 309, 311, 406, 1596, 382, 15325, 382, 42975, 309, 294, 50805], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1023, "seek": 420086, "start": 4209.86, "end": 4211.66, "text": " because these examples right now are integers.", "tokens": [50815, 570, 613, 5110, 558, 586, 366, 41674, 13, 50905], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1024, "seek": 420086, "start": 4211.86, "end": 4214.66, "text": " So there's like a 0, 5 or 13.", "tokens": [50915, 407, 456, 311, 411, 257, 1958, 11, 1025, 420, 3705, 13, 51055], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1025, "seek": 420086, "start": 4214.86, "end": 4216.66, "text": " It gives us the index of the character.", "tokens": [51065, 467, 2709, 505, 264, 8186, 295, 264, 2517, 13, 51155], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1026, "seek": 420086, "start": 4216.86, "end": 4219.66, "text": " And you can't just plug an integer index into a neural net.", "tokens": [51165, 400, 291, 393, 380, 445, 5452, 364, 24922, 8186, 666, 257, 18161, 2533, 13, 51305], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1027, "seek": 420086, "start": 4219.86, "end": 4223.66, "text": " These neural nets are sort of made up of these neurons", "tokens": [51315, 1981, 18161, 36170, 366, 1333, 295, 1027, 493, 295, 613, 22027, 51505], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1028, "seek": 420086, "start": 4223.86, "end": 4226.66, "text": " and these neurons have weights.", "tokens": [51515, 293, 613, 22027, 362, 17443, 13, 51655], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1029, "seek": 420086, "start": 4226.86, "end": 4230.66, "text": " And as you saw in microGRAD, these weights act multiplicatively on the inputs.", "tokens": [51665, 400, 382, 291, 1866, 294, 4532, 38, 3750, 35, 11, 613, 17443, 605, 17596, 19020, 322, 264, 15743, 13, 51855], "temperature": 0.0, "avg_logprob": -0.09548574549551228, "compression_ratio": 1.7137931034482758, "no_speech_prob": 0.00037946959491819143}, {"id": 1030, "seek": 423086, "start": 4230.86, "end": 4233.66, "text": " WX plus B, there's 10 Hs and so on.", "tokens": [50365, 343, 55, 1804, 363, 11, 456, 311, 1266, 389, 82, 293, 370, 322, 13, 50505], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1031, "seek": 423086, "start": 4233.86, "end": 4237.66, "text": " And so it doesn't really make sense to make an input neuron take on integer values", "tokens": [50515, 400, 370, 309, 1177, 380, 534, 652, 2020, 281, 652, 364, 4846, 34090, 747, 322, 24922, 4190, 50705], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1032, "seek": 423086, "start": 4237.86, "end": 4241.66, "text": " that you feed in and then multiply on with weights.", "tokens": [50715, 300, 291, 3154, 294, 293, 550, 12972, 322, 365, 17443, 13, 50905], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1033, "seek": 423086, "start": 4241.86, "end": 4246.66, "text": " So instead, a common way of encoding integers is what's called one-hot encoding.", "tokens": [50915, 407, 2602, 11, 257, 2689, 636, 295, 43430, 41674, 307, 437, 311, 1219, 472, 12, 12194, 43430, 13, 51155], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1034, "seek": 423086, "start": 4246.86, "end": 4250.66, "text": " In one-hot encoding, we take an integer like 13", "tokens": [51165, 682, 472, 12, 12194, 43430, 11, 321, 747, 364, 24922, 411, 3705, 51355], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1035, "seek": 423086, "start": 4250.86, "end": 4255.66, "text": " and we create a vector that is all zeros except for the 13th dimension,", "tokens": [51365, 293, 321, 1884, 257, 8062, 300, 307, 439, 35193, 3993, 337, 264, 3705, 392, 10139, 11, 51605], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1036, "seek": 423086, "start": 4255.86, "end": 4257.66, "text": " which we turn to a 1.", "tokens": [51615, 597, 321, 1261, 281, 257, 502, 13, 51705], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1037, "seek": 423086, "start": 4257.86, "end": 4260.66, "text": " And then that vector can feed into a neural net.", "tokens": [51715, 400, 550, 300, 8062, 393, 3154, 666, 257, 18161, 2533, 13, 51855], "temperature": 0.0, "avg_logprob": -0.10979527574244553, "compression_ratio": 1.6870229007633588, "no_speech_prob": 0.00012459527351893485}, {"id": 1038, "seek": 426086, "start": 4260.86, "end": 4267.66, "text": " Now, conveniently, PyTorch actually has something called the one-hot function", "tokens": [50365, 823, 11, 44375, 11, 9953, 51, 284, 339, 767, 575, 746, 1219, 264, 472, 12, 12194, 2445, 50705], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1039, "seek": 426086, "start": 4267.86, "end": 4269.66, "text": " inside torch and then functional.", "tokens": [50715, 1854, 27822, 293, 550, 11745, 13, 50805], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1040, "seek": 426086, "start": 4269.86, "end": 4273.66, "text": " It takes a tensor made up of integers.", "tokens": [50815, 467, 2516, 257, 40863, 1027, 493, 295, 41674, 13, 51005], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1041, "seek": 426086, "start": 4273.86, "end": 4277.66, "text": " Long is an integer.", "tokens": [51015, 8282, 307, 364, 24922, 13, 51205], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1042, "seek": 426086, "start": 4277.86, "end": 4281.66, "text": " And it also takes a number of classes,", "tokens": [51215, 400, 309, 611, 2516, 257, 1230, 295, 5359, 11, 51405], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1043, "seek": 426086, "start": 4281.86, "end": 4286.66, "text": " which is how large you want your tensor, your vector to be.", "tokens": [51415, 597, 307, 577, 2416, 291, 528, 428, 40863, 11, 428, 8062, 281, 312, 13, 51655], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1044, "seek": 426086, "start": 4286.86, "end": 4290.66, "text": " So here, let's import torch.nn.func.", "tokens": [51665, 407, 510, 11, 718, 311, 974, 27822, 13, 26384, 13, 15930, 66, 13, 51855], "temperature": 0.0, "avg_logprob": -0.1862136017192494, "compression_ratio": 1.5148514851485149, "no_speech_prob": 0.00011084900324931368}, {"id": 1045, "seek": 429086, "start": 4290.86, "end": 4293.66, "text": " This is a common way of importing it.", "tokens": [50365, 639, 307, 257, 2689, 636, 295, 43866, 309, 13, 50505], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1046, "seek": 429086, "start": 4293.86, "end": 4296.66, "text": " And then let's do f.one-hot.", "tokens": [50515, 400, 550, 718, 311, 360, 283, 13, 546, 12, 12194, 13, 50655], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1047, "seek": 429086, "start": 4296.86, "end": 4299.66, "text": " And we feed in the integers that we want to encode.", "tokens": [50665, 400, 321, 3154, 294, 264, 41674, 300, 321, 528, 281, 2058, 1429, 13, 50805], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1048, "seek": 429086, "start": 4299.86, "end": 4303.66, "text": " So we can actually feed in the entire array of Xs.", "tokens": [50815, 407, 321, 393, 767, 3154, 294, 264, 2302, 10225, 295, 1783, 82, 13, 51005], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1049, "seek": 429086, "start": 4303.86, "end": 4307.66, "text": " And we can tell it that numclasses is 27.", "tokens": [51015, 400, 321, 393, 980, 309, 300, 1031, 11665, 279, 307, 7634, 13, 51205], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1050, "seek": 429086, "start": 4307.86, "end": 4309.66, "text": " So it doesn't have to try to guess it.", "tokens": [51215, 407, 309, 1177, 380, 362, 281, 853, 281, 2041, 309, 13, 51305], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1051, "seek": 429086, "start": 4309.86, "end": 4313.66, "text": " It may have guessed that it's only 13 and would give us an incorrect result.", "tokens": [51315, 467, 815, 362, 21852, 300, 309, 311, 787, 3705, 293, 576, 976, 505, 364, 18424, 1874, 13, 51505], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1052, "seek": 429086, "start": 4313.86, "end": 4315.66, "text": " So this is the one-hot.", "tokens": [51515, 407, 341, 307, 264, 472, 12, 12194, 13, 51605], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1053, "seek": 429086, "start": 4315.86, "end": 4319.66, "text": " Let's call this xinc for xencoded.", "tokens": [51615, 961, 311, 818, 341, 2031, 4647, 337, 2031, 22660, 12340, 13, 51805], "temperature": 0.0, "avg_logprob": -0.1025039226778092, "compression_ratio": 1.6495726495726495, "no_speech_prob": 0.00012062361929565668}, {"id": 1054, "seek": 432086, "start": 4320.86, "end": 4325.66, "text": " And then we see that xencoded.shape is 5 by 27.", "tokens": [50365, 400, 550, 321, 536, 300, 2031, 22660, 12340, 13, 82, 42406, 307, 1025, 538, 7634, 13, 50605], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1055, "seek": 432086, "start": 4325.86, "end": 4331.66, "text": " And we can also visualize it, plt.imshow of xinc,", "tokens": [50615, 400, 321, 393, 611, 23273, 309, 11, 499, 83, 13, 332, 34436, 295, 2031, 4647, 11, 50905], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1056, "seek": 432086, "start": 4331.86, "end": 4334.66, "text": " to make it a little bit more clear because this is a little messy.", "tokens": [50915, 281, 652, 309, 257, 707, 857, 544, 1850, 570, 341, 307, 257, 707, 16191, 13, 51055], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1057, "seek": 432086, "start": 4334.86, "end": 4339.66, "text": " So we see that we've encoded all the five examples into vectors.", "tokens": [51065, 407, 321, 536, 300, 321, 600, 2058, 12340, 439, 264, 1732, 5110, 666, 18875, 13, 51305], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1058, "seek": 432086, "start": 4339.86, "end": 4342.66, "text": " We have five examples, so we have five rows,", "tokens": [51315, 492, 362, 1732, 5110, 11, 370, 321, 362, 1732, 13241, 11, 51455], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1059, "seek": 432086, "start": 4342.86, "end": 4345.66, "text": " and each row here is now an example into a neural net.", "tokens": [51465, 293, 1184, 5386, 510, 307, 586, 364, 1365, 666, 257, 18161, 2533, 13, 51605], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1060, "seek": 432086, "start": 4345.86, "end": 4349.66, "text": " And we see that the appropriate bit is turned on as a one,", "tokens": [51615, 400, 321, 536, 300, 264, 6854, 857, 307, 3574, 322, 382, 257, 472, 11, 51805], "temperature": 0.0, "avg_logprob": -0.1078569642428694, "compression_ratio": 1.6724137931034482, "no_speech_prob": 0.00029709868249483407}, {"id": 1061, "seek": 434966, "start": 4349.66, "end": 4351.46, "text": " and everything else is zero.", "tokens": [50365, 293, 1203, 1646, 307, 4018, 13, 50455], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1062, "seek": 434966, "start": 4351.66, "end": 4356.46, "text": " So here, for example, the zeroth bit is turned on.", "tokens": [50465, 407, 510, 11, 337, 1365, 11, 264, 44746, 900, 857, 307, 3574, 322, 13, 50705], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1063, "seek": 434966, "start": 4356.66, "end": 4358.46, "text": " The fifth bit is turned on.", "tokens": [50715, 440, 9266, 857, 307, 3574, 322, 13, 50805], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1064, "seek": 434966, "start": 4358.66, "end": 4361.46, "text": " Thirteenth bits are turned on for both of these examples.", "tokens": [50815, 334, 347, 46897, 9239, 366, 3574, 322, 337, 1293, 295, 613, 5110, 13, 50955], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1065, "seek": 434966, "start": 4361.66, "end": 4364.46, "text": " And then the first bit here is turned on.", "tokens": [50965, 400, 550, 264, 700, 857, 510, 307, 3574, 322, 13, 51105], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1066, "seek": 434966, "start": 4364.66, "end": 4369.46, "text": " So that's how we can encode integers into vectors.", "tokens": [51115, 407, 300, 311, 577, 321, 393, 2058, 1429, 41674, 666, 18875, 13, 51355], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1067, "seek": 434966, "start": 4369.66, "end": 4372.46, "text": " And then these vectors can feed into neural nets.", "tokens": [51365, 400, 550, 613, 18875, 393, 3154, 666, 18161, 36170, 13, 51505], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1068, "seek": 434966, "start": 4372.66, "end": 4375.46, "text": " One more issue to be careful with here, by the way, is", "tokens": [51515, 1485, 544, 2734, 281, 312, 5026, 365, 510, 11, 538, 264, 636, 11, 307, 51655], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1069, "seek": 434966, "start": 4375.66, "end": 4377.46, "text": " let's look at the data type of xincoding.", "tokens": [51665, 718, 311, 574, 412, 264, 1412, 2010, 295, 2031, 4647, 8616, 13, 51755], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1070, "seek": 434966, "start": 4377.66, "end": 4379.46, "text": " We always want to be careful with data types.", "tokens": [51765, 492, 1009, 528, 281, 312, 5026, 365, 1412, 3467, 13, 51855], "temperature": 0.0, "avg_logprob": -0.08793657743013822, "compression_ratio": 1.8559670781893005, "no_speech_prob": 0.00016736875113565475}, {"id": 1071, "seek": 437946, "start": 4379.46, "end": 4382.26, "text": " What would you expect xincoding's data type to be?", "tokens": [50365, 708, 576, 291, 2066, 2031, 4647, 8616, 311, 1412, 2010, 281, 312, 30, 50505], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1072, "seek": 437946, "start": 4382.46, "end": 4384.26, "text": " When we're plugging numbers into neural nets,", "tokens": [50515, 1133, 321, 434, 42975, 3547, 666, 18161, 36170, 11, 50605], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1073, "seek": 437946, "start": 4384.46, "end": 4386.26, "text": " we don't want them to be integers.", "tokens": [50615, 321, 500, 380, 528, 552, 281, 312, 41674, 13, 50705], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1074, "seek": 437946, "start": 4386.46, "end": 4390.26, "text": " We want them to be floating-point numbers that can take on various values.", "tokens": [50715, 492, 528, 552, 281, 312, 12607, 12, 6053, 3547, 300, 393, 747, 322, 3683, 4190, 13, 50905], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1075, "seek": 437946, "start": 4390.46, "end": 4393.26, "text": " But the dtype here is actually a 64-bit integer.", "tokens": [50915, 583, 264, 274, 20467, 510, 307, 767, 257, 12145, 12, 5260, 24922, 13, 51055], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1076, "seek": 437946, "start": 4393.46, "end": 4395.26, "text": " And the reason for that, I suspect,", "tokens": [51065, 400, 264, 1778, 337, 300, 11, 286, 9091, 11, 51155], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1077, "seek": 437946, "start": 4395.46, "end": 4399.26, "text": " is that one hot received a 64-bit integer here,", "tokens": [51165, 307, 300, 472, 2368, 4613, 257, 12145, 12, 5260, 24922, 510, 11, 51355], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1078, "seek": 437946, "start": 4399.46, "end": 4401.26, "text": " and it returned the same data type.", "tokens": [51365, 293, 309, 8752, 264, 912, 1412, 2010, 13, 51455], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1079, "seek": 437946, "start": 4401.46, "end": 4403.26, "text": " And when you look at the signature of one hot,", "tokens": [51465, 400, 562, 291, 574, 412, 264, 13397, 295, 472, 2368, 11, 51555], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1080, "seek": 437946, "start": 4403.46, "end": 4406.26, "text": " it doesn't even take a dtype, a desired data type,", "tokens": [51565, 309, 1177, 380, 754, 747, 257, 274, 20467, 11, 257, 14721, 1412, 2010, 11, 51705], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1081, "seek": 437946, "start": 4406.46, "end": 4408.26, "text": " of the output tensor.", "tokens": [51715, 295, 264, 5598, 40863, 13, 51805], "temperature": 0.0, "avg_logprob": -0.07525184604671452, "compression_ratio": 1.7741935483870968, "no_speech_prob": 8.815772889647633e-05}, {"id": 1082, "seek": 440826, "start": 4408.26, "end": 4411.06, "text": " And so we can't, in a lot of functions in Torch,", "tokens": [50365, 400, 370, 321, 393, 380, 11, 294, 257, 688, 295, 6828, 294, 7160, 339, 11, 50505], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1083, "seek": 440826, "start": 4411.26, "end": 4414.06, "text": " we'd be able to do something like dtype equals torch.float32,", "tokens": [50515, 321, 1116, 312, 1075, 281, 360, 746, 411, 274, 20467, 6915, 27822, 13, 43645, 267, 11440, 11, 50655], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1084, "seek": 440826, "start": 4414.26, "end": 4418.06, "text": " which is what we want, but one hot does not support that.", "tokens": [50665, 597, 307, 437, 321, 528, 11, 457, 472, 2368, 775, 406, 1406, 300, 13, 50855], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1085, "seek": 440826, "start": 4418.26, "end": 4423.06, "text": " So instead, we're going to want to cast this to float like this.", "tokens": [50865, 407, 2602, 11, 321, 434, 516, 281, 528, 281, 4193, 341, 281, 15706, 411, 341, 13, 51105], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1086, "seek": 440826, "start": 4423.26, "end": 4426.06, "text": " So that these, everything is the same,", "tokens": [51115, 407, 300, 613, 11, 1203, 307, 264, 912, 11, 51255], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1087, "seek": 440826, "start": 4426.26, "end": 4428.06, "text": " everything looks the same,", "tokens": [51265, 1203, 1542, 264, 912, 11, 51355], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1088, "seek": 440826, "start": 4428.26, "end": 4430.06, "text": " but the dtype is float32.", "tokens": [51365, 457, 264, 274, 20467, 307, 15706, 11440, 13, 51455], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1089, "seek": 440826, "start": 4430.26, "end": 4433.06, "text": " And floats can feed into neural nets.", "tokens": [51465, 400, 37878, 393, 3154, 666, 18161, 36170, 13, 51605], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1090, "seek": 440826, "start": 4433.26, "end": 4436.06, "text": " So now let's construct our first neuron.", "tokens": [51615, 407, 586, 718, 311, 7690, 527, 700, 34090, 13, 51755], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1091, "seek": 440826, "start": 4436.26, "end": 4438.06, "text": " This neuron will look at", "tokens": [51765, 639, 34090, 486, 574, 412, 51855], "temperature": 0.0, "avg_logprob": -0.09511193633079529, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.00020452232274692506}, {"id": 1092, "seek": 443806, "start": 4438.06, "end": 4439.860000000001, "text": " these input vectors.", "tokens": [50365, 613, 4846, 18875, 13, 50455], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1093, "seek": 443806, "start": 4440.06, "end": 4441.860000000001, "text": " And as you remember from micrograd,", "tokens": [50465, 400, 382, 291, 1604, 490, 4532, 7165, 11, 50555], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1094, "seek": 443806, "start": 4442.06, "end": 4443.860000000001, "text": " these neurons basically perform a very simple function,", "tokens": [50565, 613, 22027, 1936, 2042, 257, 588, 2199, 2445, 11, 50655], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1095, "seek": 443806, "start": 4444.06, "end": 4445.860000000001, "text": " wx plus b,", "tokens": [50665, 261, 87, 1804, 272, 11, 50755], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1096, "seek": 443806, "start": 4446.06, "end": 4448.860000000001, "text": " where wx is a dot product, right?", "tokens": [50765, 689, 261, 87, 307, 257, 5893, 1674, 11, 558, 30, 50905], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1097, "seek": 443806, "start": 4449.06, "end": 4451.860000000001, "text": " So we can achieve the same thing here.", "tokens": [50915, 407, 321, 393, 4584, 264, 912, 551, 510, 13, 51055], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1098, "seek": 443806, "start": 4452.06, "end": 4454.860000000001, "text": " Let's first define the weights of this neuron, basically.", "tokens": [51065, 961, 311, 700, 6964, 264, 17443, 295, 341, 34090, 11, 1936, 13, 51205], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1099, "seek": 443806, "start": 4455.06, "end": 4457.860000000001, "text": " What are the initial weights at initialization for this neuron?", "tokens": [51215, 708, 366, 264, 5883, 17443, 412, 5883, 2144, 337, 341, 34090, 30, 51355], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1100, "seek": 443806, "start": 4458.06, "end": 4460.860000000001, "text": " Let's initialize them with torch.random.", "tokens": [51365, 961, 311, 5883, 1125, 552, 365, 27822, 13, 3699, 298, 13, 51505], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1101, "seek": 443806, "start": 4461.06, "end": 4466.860000000001, "text": " torch.random fills a tensor with random numbers", "tokens": [51515, 27822, 13, 3699, 298, 22498, 257, 40863, 365, 4974, 3547, 51805], "temperature": 0.0, "avg_logprob": -0.10373347997665405, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.00025092370924539864}, {"id": 1102, "seek": 446686, "start": 4466.86, "end": 4468.66, "text": " drawn from a normal distribution.", "tokens": [50365, 10117, 490, 257, 2710, 7316, 13, 50455], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1103, "seek": 446686, "start": 4468.86, "end": 4473.66, "text": " And a normal distribution has a probability density function like this.", "tokens": [50465, 400, 257, 2710, 7316, 575, 257, 8482, 10305, 2445, 411, 341, 13, 50705], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1104, "seek": 446686, "start": 4473.86, "end": 4476.66, "text": " And so most of the numbers drawn from this distribution", "tokens": [50715, 400, 370, 881, 295, 264, 3547, 10117, 490, 341, 7316, 50855], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1105, "seek": 446686, "start": 4476.86, "end": 4478.66, "text": " will be around zero,", "tokens": [50865, 486, 312, 926, 4018, 11, 50955], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1106, "seek": 446686, "start": 4478.86, "end": 4481.66, "text": " but some of them will be as high as almost three and so on.", "tokens": [50965, 457, 512, 295, 552, 486, 312, 382, 1090, 382, 1920, 1045, 293, 370, 322, 13, 51105], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1107, "seek": 446686, "start": 4481.86, "end": 4485.66, "text": " And very few numbers will be above three in magnitude.", "tokens": [51115, 400, 588, 1326, 3547, 486, 312, 3673, 1045, 294, 15668, 13, 51305], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1108, "seek": 446686, "start": 4485.86, "end": 4489.66, "text": " So we need to take a size as an input here.", "tokens": [51315, 407, 321, 643, 281, 747, 257, 2744, 382, 364, 4846, 510, 13, 51505], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1109, "seek": 446686, "start": 4489.86, "end": 4493.66, "text": " And I'm going to use size to be 27 by one.", "tokens": [51515, 400, 286, 478, 516, 281, 764, 2744, 281, 312, 7634, 538, 472, 13, 51705], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1110, "seek": 446686, "start": 4493.86, "end": 4496.66, "text": " So 27 by one", "tokens": [51715, 407, 7634, 538, 472, 51855], "temperature": 0.0, "avg_logprob": -0.09014673586244937, "compression_ratio": 1.8045454545454545, "no_speech_prob": 6.321759428828955e-05}, {"id": 1111, "seek": 449666, "start": 4496.66, "end": 4498.46, "text": " and then let's visualize w.", "tokens": [50365, 293, 550, 718, 311, 23273, 261, 13, 50455], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1112, "seek": 449666, "start": 4498.66, "end": 4502.46, "text": " So w is a column vector of 27 numbers.", "tokens": [50465, 407, 261, 307, 257, 7738, 8062, 295, 7634, 3547, 13, 50655], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1113, "seek": 449666, "start": 4502.66, "end": 4508.46, "text": " And these weights are then multiplied by the inputs.", "tokens": [50665, 400, 613, 17443, 366, 550, 17207, 538, 264, 15743, 13, 50955], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1114, "seek": 449666, "start": 4508.66, "end": 4510.46, "text": " So now to perform this multiplication,", "tokens": [50965, 407, 586, 281, 2042, 341, 27290, 11, 51055], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1115, "seek": 449666, "start": 4510.66, "end": 4514.46, "text": " we can take x encoding and we can multiply it with w.", "tokens": [51065, 321, 393, 747, 2031, 43430, 293, 321, 393, 12972, 309, 365, 261, 13, 51255], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1116, "seek": 449666, "start": 4514.66, "end": 4519.46, "text": " This is a matrix multiplication operator in PyTorch.", "tokens": [51265, 639, 307, 257, 8141, 27290, 12973, 294, 9953, 51, 284, 339, 13, 51505], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1117, "seek": 449666, "start": 4519.66, "end": 4523.46, "text": " And the output of this operation is five by one.", "tokens": [51515, 400, 264, 5598, 295, 341, 6916, 307, 1732, 538, 472, 13, 51705], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1118, "seek": 449666, "start": 4523.66, "end": 4525.46, "text": " The reason it's five by one is the following.", "tokens": [51715, 440, 1778, 309, 311, 1732, 538, 472, 307, 264, 3480, 13, 51805], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1119, "seek": 449666, "start": 4525.66, "end": 4526.46, "text": " We took x encoding", "tokens": [51815, 492, 1890, 2031, 43430, 51855], "temperature": 0.0, "avg_logprob": -0.10006290215712327, "compression_ratio": 1.669603524229075, "no_speech_prob": 9.823518485063687e-05}, {"id": 1120, "seek": 452666, "start": 4526.66, "end": 4528.46, "text": " which is five by 27", "tokens": [50365, 597, 307, 1732, 538, 7634, 50455], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1121, "seek": 452666, "start": 4528.66, "end": 4532.46, "text": " and we multiplied it by 27 by one.", "tokens": [50465, 293, 321, 17207, 309, 538, 7634, 538, 472, 13, 50655], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1122, "seek": 452666, "start": 4532.66, "end": 4535.46, "text": " And in matrix multiplication,", "tokens": [50665, 400, 294, 8141, 27290, 11, 50805], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1123, "seek": 452666, "start": 4535.66, "end": 4539.46, "text": " you see that the output will become five by one", "tokens": [50815, 291, 536, 300, 264, 5598, 486, 1813, 1732, 538, 472, 51005], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1124, "seek": 452666, "start": 4539.66, "end": 4543.46, "text": " because these 27 will multiply and add.", "tokens": [51015, 570, 613, 7634, 486, 12972, 293, 909, 13, 51205], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1125, "seek": 452666, "start": 4543.66, "end": 4546.46, "text": " So basically what we're seeing here", "tokens": [51215, 407, 1936, 437, 321, 434, 2577, 510, 51355], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1126, "seek": 452666, "start": 4546.66, "end": 4548.46, "text": " out of this operation", "tokens": [51365, 484, 295, 341, 6916, 51455], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1127, "seek": 452666, "start": 4548.66, "end": 4553.46, "text": " is we are seeing the five activations", "tokens": [51465, 307, 321, 366, 2577, 264, 1732, 2430, 763, 51705], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1128, "seek": 452666, "start": 4553.66, "end": 4555.46, "text": " of this neuron", "tokens": [51715, 295, 341, 34090, 51805], "temperature": 0.0, "avg_logprob": -0.08057772358761559, "compression_ratio": 1.6171428571428572, "no_speech_prob": 0.00013490673154592514}, {"id": 1129, "seek": 455546, "start": 4555.46, "end": 4557.26, "text": " on these five inputs.", "tokens": [50365, 322, 613, 1732, 15743, 13, 50455], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1130, "seek": 455546, "start": 4557.46, "end": 4560.26, "text": " And we've evaluated all of them in parallel.", "tokens": [50465, 400, 321, 600, 25509, 439, 295, 552, 294, 8952, 13, 50605], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1131, "seek": 455546, "start": 4560.46, "end": 4563.26, "text": " We didn't feed in just a single input to the single neuron.", "tokens": [50615, 492, 994, 380, 3154, 294, 445, 257, 2167, 4846, 281, 264, 2167, 34090, 13, 50755], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1132, "seek": 455546, "start": 4563.46, "end": 4567.26, "text": " We fed in simultaneously all the five inputs into the same neuron.", "tokens": [50765, 492, 4636, 294, 16561, 439, 264, 1732, 15743, 666, 264, 912, 34090, 13, 50955], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1133, "seek": 455546, "start": 4567.46, "end": 4569.26, "text": " And in parallel,", "tokens": [50965, 400, 294, 8952, 11, 51055], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1134, "seek": 455546, "start": 4569.46, "end": 4572.26, "text": " PyTorch has evaluated the wx plus b.", "tokens": [51065, 9953, 51, 284, 339, 575, 25509, 264, 261, 87, 1804, 272, 13, 51205], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1135, "seek": 455546, "start": 4572.46, "end": 4574.26, "text": " But here is just wx.", "tokens": [51215, 583, 510, 307, 445, 261, 87, 13, 51305], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1136, "seek": 455546, "start": 4574.46, "end": 4575.26, "text": " There's no bias.", "tokens": [51315, 821, 311, 572, 12577, 13, 51355], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1137, "seek": 455546, "start": 4575.46, "end": 4580.26, "text": " It has value w times x for all of them independently.", "tokens": [51365, 467, 575, 2158, 261, 1413, 2031, 337, 439, 295, 552, 21761, 13, 51605], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1138, "seek": 455546, "start": 4580.46, "end": 4582.26, "text": " Now instead of a single neuron though,", "tokens": [51615, 823, 2602, 295, 257, 2167, 34090, 1673, 11, 51705], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1139, "seek": 455546, "start": 4582.46, "end": 4584.26, "text": " I would like to have 27 neurons.", "tokens": [51715, 286, 576, 411, 281, 362, 7634, 22027, 13, 51805], "temperature": 0.0, "avg_logprob": -0.12672899590163936, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.001961861038580537}, {"id": 1140, "seek": 458426, "start": 4584.26, "end": 4587.06, "text": " And I'll show you in a second why I want 27 neurons.", "tokens": [50365, 400, 286, 603, 855, 291, 294, 257, 1150, 983, 286, 528, 7634, 22027, 13, 50505], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1141, "seek": 458426, "start": 4587.26, "end": 4589.06, "text": " So instead of having just a one here,", "tokens": [50515, 407, 2602, 295, 1419, 445, 257, 472, 510, 11, 50605], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1142, "seek": 458426, "start": 4589.26, "end": 4592.06, "text": " which is indicating this presence of one single neuron,", "tokens": [50615, 597, 307, 25604, 341, 6814, 295, 472, 2167, 34090, 11, 50755], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1143, "seek": 458426, "start": 4592.26, "end": 4594.06, "text": " we can use 27.", "tokens": [50765, 321, 393, 764, 7634, 13, 50855], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1144, "seek": 458426, "start": 4594.26, "end": 4597.06, "text": " And then when w is 27 by 27,", "tokens": [50865, 400, 550, 562, 261, 307, 7634, 538, 7634, 11, 51005], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1145, "seek": 458426, "start": 4597.26, "end": 4603.06, "text": " this will in parallel evaluate all the 27 neurons", "tokens": [51015, 341, 486, 294, 8952, 13059, 439, 264, 7634, 22027, 51305], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1146, "seek": 458426, "start": 4603.26, "end": 4605.06, "text": " on all the five inputs,", "tokens": [51315, 322, 439, 264, 1732, 15743, 11, 51405], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1147, "seek": 458426, "start": 4605.26, "end": 4609.06, "text": " giving us a much bigger result.", "tokens": [51415, 2902, 505, 257, 709, 3801, 1874, 13, 51605], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1148, "seek": 458426, "start": 4609.26, "end": 4613.06, "text": " So now what we've done is five by 27 multiplied 27 by 27.", "tokens": [51615, 407, 586, 437, 321, 600, 1096, 307, 1732, 538, 7634, 17207, 7634, 538, 7634, 13, 51805], "temperature": 0.0, "avg_logprob": -0.11865285726693961, "compression_ratio": 1.5803571428571428, "no_speech_prob": 0.00011830258881673217}, {"id": 1149, "seek": 461306, "start": 4613.06, "end": 4616.860000000001, "text": " And the output of this is now five by 27.", "tokens": [50365, 400, 264, 5598, 295, 341, 307, 586, 1732, 538, 7634, 13, 50555], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1150, "seek": 461306, "start": 4617.06, "end": 4622.860000000001, "text": " So we can see that the shape of this is five by 27.", "tokens": [50565, 407, 321, 393, 536, 300, 264, 3909, 295, 341, 307, 1732, 538, 7634, 13, 50855], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1151, "seek": 461306, "start": 4623.06, "end": 4626.860000000001, "text": " So what is every element here telling us, right?", "tokens": [50865, 407, 437, 307, 633, 4478, 510, 3585, 505, 11, 558, 30, 51055], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1152, "seek": 461306, "start": 4627.06, "end": 4631.860000000001, "text": " It's telling us for every one of 27 neurons that we created,", "tokens": [51065, 467, 311, 3585, 505, 337, 633, 472, 295, 7634, 22027, 300, 321, 2942, 11, 51305], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1153, "seek": 461306, "start": 4632.06, "end": 4638.860000000001, "text": " what is the firing rate of those neurons on every one of those five examples?", "tokens": [51315, 437, 307, 264, 16045, 3314, 295, 729, 22027, 322, 633, 472, 295, 729, 1732, 5110, 30, 51655], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1154, "seek": 461306, "start": 4639.06, "end": 4641.860000000001, "text": " So the element, for example,", "tokens": [51665, 407, 264, 4478, 11, 337, 1365, 11, 51805], "temperature": 0.0, "avg_logprob": -0.10731512924720502, "compression_ratio": 1.7816091954022988, "no_speech_prob": 0.0005315924645401537}, {"id": 1155, "seek": 464186, "start": 4641.86, "end": 4644.66, "text": " three comma 13,", "tokens": [50365, 1045, 22117, 3705, 11, 50505], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1156, "seek": 464186, "start": 4644.86, "end": 4648.66, "text": " is giving us the firing rate of the 13th neuron", "tokens": [50515, 307, 2902, 505, 264, 16045, 3314, 295, 264, 3705, 392, 34090, 50705], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1157, "seek": 464186, "start": 4648.86, "end": 4651.66, "text": " looking at the third input.", "tokens": [50715, 1237, 412, 264, 2636, 4846, 13, 50855], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1158, "seek": 464186, "start": 4651.86, "end": 4655.66, "text": " And the way this was achieved is by a dot product", "tokens": [50865, 400, 264, 636, 341, 390, 11042, 307, 538, 257, 5893, 1674, 51055], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1159, "seek": 464186, "start": 4655.86, "end": 4660.66, "text": " between the third input and the 13th column", "tokens": [51065, 1296, 264, 2636, 4846, 293, 264, 3705, 392, 7738, 51305], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1160, "seek": 464186, "start": 4660.86, "end": 4664.66, "text": " of this w matrix here.", "tokens": [51315, 295, 341, 261, 8141, 510, 13, 51505], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1161, "seek": 464186, "start": 4664.86, "end": 4667.66, "text": " So using matrix multiplication,", "tokens": [51515, 407, 1228, 8141, 27290, 11, 51655], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1162, "seek": 464186, "start": 4667.86, "end": 4671.66, "text": " we can very efficiently evaluate the dot product", "tokens": [51665, 321, 393, 588, 19621, 13059, 264, 5893, 1674, 51855], "temperature": 0.0, "avg_logprob": -0.12284195728791066, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.00033610942773520947}, {"id": 1163, "seek": 467166, "start": 4671.66, "end": 4674.46, "text": " between lots of input examples in a batch", "tokens": [50365, 1296, 3195, 295, 4846, 5110, 294, 257, 15245, 50505], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1164, "seek": 467166, "start": 4674.66, "end": 4678.46, "text": " and lots of neurons where all of those neurons have weights", "tokens": [50515, 293, 3195, 295, 22027, 689, 439, 295, 729, 22027, 362, 17443, 50705], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1165, "seek": 467166, "start": 4678.66, "end": 4680.46, "text": " in the columns of those w's.", "tokens": [50715, 294, 264, 13766, 295, 729, 261, 311, 13, 50805], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1166, "seek": 467166, "start": 4680.66, "end": 4682.46, "text": " And in matrix multiplication,", "tokens": [50815, 400, 294, 8141, 27290, 11, 50905], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1167, "seek": 467166, "start": 4682.66, "end": 4685.46, "text": " we're just doing those dot products in parallel.", "tokens": [50915, 321, 434, 445, 884, 729, 5893, 3383, 294, 8952, 13, 51055], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1168, "seek": 467166, "start": 4685.66, "end": 4687.46, "text": " Just to show you that this is the case,", "tokens": [51065, 1449, 281, 855, 291, 300, 341, 307, 264, 1389, 11, 51155], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1169, "seek": 467166, "start": 4687.66, "end": 4691.46, "text": " we can take xank and we can take the third row.", "tokens": [51165, 321, 393, 747, 2031, 657, 293, 321, 393, 747, 264, 2636, 5386, 13, 51355], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1170, "seek": 467166, "start": 4691.66, "end": 4696.46, "text": " And we can take the w and take its 13th column.", "tokens": [51365, 400, 321, 393, 747, 264, 261, 293, 747, 1080, 3705, 392, 7738, 13, 51605], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1171, "seek": 467166, "start": 4696.66, "end": 4701.46, "text": " And then we can do xank at three", "tokens": [51615, 400, 550, 321, 393, 360, 2031, 657, 412, 1045, 51855], "temperature": 0.0, "avg_logprob": -0.11221893778387106, "compression_ratio": 1.75, "no_speech_prob": 0.00048758048797026277}, {"id": 1172, "seek": 470166, "start": 4701.66, "end": 4706.46, "text": " element-wise multiply with w at 13", "tokens": [50365, 4478, 12, 3711, 12972, 365, 261, 412, 3705, 50605], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1173, "seek": 470166, "start": 4706.66, "end": 4707.46, "text": " and sum that up.", "tokens": [50615, 293, 2408, 300, 493, 13, 50655], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1174, "seek": 470166, "start": 4707.66, "end": 4709.46, "text": " That's wx plus b.", "tokens": [50665, 663, 311, 261, 87, 1804, 272, 13, 50755], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1175, "seek": 470166, "start": 4709.66, "end": 4712.46, "text": " Well, there's no plus b, it's just wx dot product.", "tokens": [50765, 1042, 11, 456, 311, 572, 1804, 272, 11, 309, 311, 445, 261, 87, 5893, 1674, 13, 50905], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1176, "seek": 470166, "start": 4712.66, "end": 4714.46, "text": " And that's this number.", "tokens": [50915, 400, 300, 311, 341, 1230, 13, 51005], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1177, "seek": 470166, "start": 4714.66, "end": 4717.46, "text": " So you see that this is just being done efficiently", "tokens": [51015, 407, 291, 536, 300, 341, 307, 445, 885, 1096, 19621, 51155], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1178, "seek": 470166, "start": 4717.66, "end": 4720.46, "text": " by the matrix multiplication operation", "tokens": [51165, 538, 264, 8141, 27290, 6916, 51305], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1179, "seek": 470166, "start": 4720.66, "end": 4722.46, "text": " for all the input examples", "tokens": [51315, 337, 439, 264, 4846, 5110, 51405], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1180, "seek": 470166, "start": 4722.66, "end": 4725.46, "text": " and for all the output neurons of this first layer.", "tokens": [51415, 293, 337, 439, 264, 5598, 22027, 295, 341, 700, 4583, 13, 51555], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1181, "seek": 470166, "start": 4725.66, "end": 4728.46, "text": " Okay, so we fed our 27 dimensional inputs", "tokens": [51565, 1033, 11, 370, 321, 4636, 527, 7634, 18795, 15743, 51705], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1182, "seek": 470166, "start": 4728.66, "end": 4730.46, "text": " into a first layer of a neural net", "tokens": [51715, 666, 257, 700, 4583, 295, 257, 18161, 2533, 51805], "temperature": 0.0, "avg_logprob": -0.13369768544247276, "compression_ratio": 1.6291666666666667, "no_speech_prob": 0.0005018730298615992}, {"id": 1183, "seek": 473046, "start": 4730.46, "end": 4732.26, "text": " that has 27 neurons, right?", "tokens": [50365, 300, 575, 7634, 22027, 11, 558, 30, 50455], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1184, "seek": 473046, "start": 4732.46, "end": 4736.26, "text": " So we have 27 inputs and now we have 27 neurons.", "tokens": [50465, 407, 321, 362, 7634, 15743, 293, 586, 321, 362, 7634, 22027, 13, 50655], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1185, "seek": 473046, "start": 4736.46, "end": 4739.26, "text": " These neurons perform w times x.", "tokens": [50665, 1981, 22027, 2042, 261, 1413, 2031, 13, 50805], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1186, "seek": 473046, "start": 4739.46, "end": 4740.26, "text": " They don't have a bias", "tokens": [50815, 814, 500, 380, 362, 257, 12577, 50855], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1187, "seek": 473046, "start": 4740.46, "end": 4742.26, "text": " and they don't have a nonlinearity like tanh.", "tokens": [50865, 293, 436, 500, 380, 362, 257, 2107, 1889, 17409, 411, 7603, 71, 13, 50955], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1188, "seek": 473046, "start": 4742.46, "end": 4745.26, "text": " We're going to leave them to be a linear layer.", "tokens": [50965, 492, 434, 516, 281, 1856, 552, 281, 312, 257, 8213, 4583, 13, 51105], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1189, "seek": 473046, "start": 4745.46, "end": 4747.26, "text": " In addition to that,", "tokens": [51115, 682, 4500, 281, 300, 11, 51205], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1190, "seek": 473046, "start": 4747.46, "end": 4749.26, "text": " we're not going to have any other layers.", "tokens": [51215, 321, 434, 406, 516, 281, 362, 604, 661, 7914, 13, 51305], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1191, "seek": 473046, "start": 4749.46, "end": 4750.26, "text": " This is going to be it.", "tokens": [51315, 639, 307, 516, 281, 312, 309, 13, 51355], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1192, "seek": 473046, "start": 4750.46, "end": 4752.26, "text": " It's just going to be the dumbest, smallest,", "tokens": [51365, 467, 311, 445, 516, 281, 312, 264, 10316, 377, 11, 16998, 11, 51455], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1193, "seek": 473046, "start": 4752.46, "end": 4753.26, "text": " simplest neural net,", "tokens": [51465, 22811, 18161, 2533, 11, 51505], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1194, "seek": 473046, "start": 4753.46, "end": 4755.26, "text": " which is just a single linear layer.", "tokens": [51515, 597, 307, 445, 257, 2167, 8213, 4583, 13, 51605], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1195, "seek": 473046, "start": 4755.46, "end": 4757.26, "text": " And now I'd like to explain", "tokens": [51615, 400, 586, 286, 1116, 411, 281, 2903, 51705], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1196, "seek": 473046, "start": 4757.46, "end": 4760.26, "text": " what I want those 27 outputs to be.", "tokens": [51715, 437, 286, 528, 729, 7634, 23930, 281, 312, 13, 51855], "temperature": 0.0, "avg_logprob": -0.071025597082602, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.0004212788480799645}, {"id": 1197, "seek": 476046, "start": 4760.46, "end": 4762.26, "text": " Intuitively, what we're trying to produce here", "tokens": [50365, 5681, 1983, 3413, 11, 437, 321, 434, 1382, 281, 5258, 510, 50455], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1198, "seek": 476046, "start": 4762.46, "end": 4764.26, "text": " for every single input example", "tokens": [50465, 337, 633, 2167, 4846, 1365, 50555], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1199, "seek": 476046, "start": 4764.46, "end": 4765.26, "text": " is we're trying to produce", "tokens": [50565, 307, 321, 434, 1382, 281, 5258, 50605], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1200, "seek": 476046, "start": 4765.46, "end": 4767.26, "text": " some kind of a probability distribution", "tokens": [50615, 512, 733, 295, 257, 8482, 7316, 50705], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1201, "seek": 476046, "start": 4767.46, "end": 4769.26, "text": " for the next character in a sequence.", "tokens": [50715, 337, 264, 958, 2517, 294, 257, 8310, 13, 50805], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1202, "seek": 476046, "start": 4769.46, "end": 4771.26, "text": " And there's 27 of them.", "tokens": [50815, 400, 456, 311, 7634, 295, 552, 13, 50905], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1203, "seek": 476046, "start": 4771.46, "end": 4773.26, "text": " But we have to come up with precise semantics", "tokens": [50915, 583, 321, 362, 281, 808, 493, 365, 13600, 4361, 45298, 51005], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1204, "seek": 476046, "start": 4773.46, "end": 4775.26, "text": " for exactly how we're going to interpret", "tokens": [51015, 337, 2293, 577, 321, 434, 516, 281, 7302, 51105], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1205, "seek": 476046, "start": 4775.46, "end": 4779.26, "text": " these 27 numbers that these neurons take on.", "tokens": [51115, 613, 7634, 3547, 300, 613, 22027, 747, 322, 13, 51305], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1206, "seek": 476046, "start": 4779.46, "end": 4781.26, "text": " Now intuitively, you see here", "tokens": [51315, 823, 46506, 11, 291, 536, 510, 51405], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1207, "seek": 476046, "start": 4781.46, "end": 4783.26, "text": " that these numbers are negative", "tokens": [51415, 300, 613, 3547, 366, 3671, 51505], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1208, "seek": 476046, "start": 4783.46, "end": 4785.26, "text": " and some of them are positive, etc.", "tokens": [51515, 293, 512, 295, 552, 366, 3353, 11, 5183, 13, 51605], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1209, "seek": 476046, "start": 4785.46, "end": 4787.26, "text": " And that's because these are coming out", "tokens": [51615, 400, 300, 311, 570, 613, 366, 1348, 484, 51705], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1210, "seek": 476046, "start": 4787.46, "end": 4788.26, "text": " of the neural net layer", "tokens": [51715, 295, 264, 18161, 2533, 4583, 51755], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1211, "seek": 476046, "start": 4788.46, "end": 4790.26, "text": " initialized with these", "tokens": [51765, 5883, 1602, 365, 613, 51855], "temperature": 0.0, "avg_logprob": -0.0857825555663178, "compression_ratio": 1.8159722222222223, "no_speech_prob": 0.00016707427857909352}, {"id": 1212, "seek": 479046, "start": 4790.46, "end": 4793.26, "text": " normal distribution parameters.", "tokens": [50365, 2710, 7316, 9834, 13, 50505], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1213, "seek": 479046, "start": 4793.46, "end": 4795.26, "text": " But what we want is", "tokens": [50515, 583, 437, 321, 528, 307, 50605], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1214, "seek": 479046, "start": 4795.46, "end": 4797.26, "text": " we want something like we had here.", "tokens": [50615, 321, 528, 746, 411, 321, 632, 510, 13, 50705], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1215, "seek": 479046, "start": 4797.46, "end": 4800.26, "text": " Like each row here told us the counts", "tokens": [50715, 1743, 1184, 5386, 510, 1907, 505, 264, 14893, 50855], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1216, "seek": 479046, "start": 4800.46, "end": 4802.26, "text": " and then we normalize the counts", "tokens": [50865, 293, 550, 321, 2710, 1125, 264, 14893, 50955], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1217, "seek": 479046, "start": 4802.46, "end": 4803.26, "text": " to get probabilities.", "tokens": [50965, 281, 483, 33783, 13, 51005], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1218, "seek": 479046, "start": 4803.46, "end": 4805.26, "text": " And we want something similar", "tokens": [51015, 400, 321, 528, 746, 2531, 51105], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1219, "seek": 479046, "start": 4805.46, "end": 4806.26, "text": " to come out of the neural net.", "tokens": [51115, 281, 808, 484, 295, 264, 18161, 2533, 13, 51155], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1220, "seek": 479046, "start": 4806.46, "end": 4808.26, "text": " But what we just have right now", "tokens": [51165, 583, 437, 321, 445, 362, 558, 586, 51255], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1221, "seek": 479046, "start": 4808.46, "end": 4810.26, "text": " is just some negative and positive numbers.", "tokens": [51265, 307, 445, 512, 3671, 293, 3353, 3547, 13, 51355], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1222, "seek": 479046, "start": 4810.46, "end": 4812.26, "text": " Now we want those numbers", "tokens": [51365, 823, 321, 528, 729, 3547, 51455], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1223, "seek": 479046, "start": 4812.46, "end": 4814.26, "text": " to somehow represent the probabilities", "tokens": [51465, 281, 6063, 2906, 264, 33783, 51555], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1224, "seek": 479046, "start": 4814.46, "end": 4815.26, "text": " for the next character.", "tokens": [51565, 337, 264, 958, 2517, 13, 51605], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1225, "seek": 479046, "start": 4815.46, "end": 4817.26, "text": " But you see that probabilities,", "tokens": [51615, 583, 291, 536, 300, 33783, 11, 51705], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1226, "seek": 479046, "start": 4817.46, "end": 4819.26, "text": " they have a special structure.", "tokens": [51715, 436, 362, 257, 2121, 3877, 13, 51805], "temperature": 0.0, "avg_logprob": -0.09939859746917476, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00018309190636500716}, {"id": 1227, "seek": 481926, "start": 4819.26, "end": 4821.06, "text": " They're positive numbers", "tokens": [50365, 814, 434, 3353, 3547, 50455], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1228, "seek": 481926, "start": 4821.26, "end": 4822.06, "text": " and they sum to one.", "tokens": [50465, 293, 436, 2408, 281, 472, 13, 50505], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1229, "seek": 481926, "start": 4822.26, "end": 4824.06, "text": " And so that doesn't just come out", "tokens": [50515, 400, 370, 300, 1177, 380, 445, 808, 484, 50605], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1230, "seek": 481926, "start": 4824.26, "end": 4825.06, "text": " of a neural net.", "tokens": [50615, 295, 257, 18161, 2533, 13, 50655], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1231, "seek": 481926, "start": 4825.26, "end": 4827.06, "text": " And then they can't be counts", "tokens": [50665, 400, 550, 436, 393, 380, 312, 14893, 50755], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1232, "seek": 481926, "start": 4827.26, "end": 4830.06, "text": " because these counts are positive", "tokens": [50765, 570, 613, 14893, 366, 3353, 50905], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1233, "seek": 481926, "start": 4830.26, "end": 4832.06, "text": " and counts are integers.", "tokens": [50915, 293, 14893, 366, 41674, 13, 51005], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1234, "seek": 481926, "start": 4832.26, "end": 4834.06, "text": " So counts are also not really a good thing", "tokens": [51015, 407, 14893, 366, 611, 406, 534, 257, 665, 551, 51105], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1235, "seek": 481926, "start": 4834.26, "end": 4836.06, "text": " to output from a neural net.", "tokens": [51115, 281, 5598, 490, 257, 18161, 2533, 13, 51205], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1236, "seek": 481926, "start": 4836.26, "end": 4838.06, "text": " So instead, what the neural net", "tokens": [51215, 407, 2602, 11, 437, 264, 18161, 2533, 51305], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1237, "seek": 481926, "start": 4838.26, "end": 4839.06, "text": " is going to output", "tokens": [51315, 307, 516, 281, 5598, 51355], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1238, "seek": 481926, "start": 4839.26, "end": 4841.06, "text": " and how we are going to interpret", "tokens": [51365, 293, 577, 321, 366, 516, 281, 7302, 51455], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1239, "seek": 481926, "start": 4841.26, "end": 4843.06, "text": " the 27 numbers", "tokens": [51465, 264, 7634, 3547, 51555], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1240, "seek": 481926, "start": 4843.26, "end": 4845.06, "text": " is that these 27 numbers", "tokens": [51565, 307, 300, 613, 7634, 3547, 51655], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1241, "seek": 481926, "start": 4845.26, "end": 4848.06, "text": " are giving us log counts, basically.", "tokens": [51665, 366, 2902, 505, 3565, 14893, 11, 1936, 13, 51805], "temperature": 0.0, "avg_logprob": -0.1093246585032979, "compression_ratio": 1.8959276018099547, "no_speech_prob": 0.0006600870401598513}, {"id": 1242, "seek": 484806, "start": 4848.06, "end": 4852.860000000001, "text": " So instead of giving us counts directly,", "tokens": [50365, 407, 2602, 295, 2902, 505, 14893, 3838, 11, 50605], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1243, "seek": 484806, "start": 4853.06, "end": 4853.860000000001, "text": " like in this table,", "tokens": [50615, 411, 294, 341, 3199, 11, 50655], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1244, "seek": 484806, "start": 4854.06, "end": 4855.860000000001, "text": " they're giving us log counts.", "tokens": [50665, 436, 434, 2902, 505, 3565, 14893, 13, 50755], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1245, "seek": 484806, "start": 4856.06, "end": 4857.06, "text": " And to get the counts,", "tokens": [50765, 400, 281, 483, 264, 14893, 11, 50815], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1246, "seek": 484806, "start": 4857.26, "end": 4858.860000000001, "text": " we're going to take the log counts", "tokens": [50825, 321, 434, 516, 281, 747, 264, 3565, 14893, 50905], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1247, "seek": 484806, "start": 4859.06, "end": 4860.860000000001, "text": " and we're going to exponentiate them.", "tokens": [50915, 293, 321, 434, 516, 281, 37871, 13024, 552, 13, 51005], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1248, "seek": 484806, "start": 4861.06, "end": 4865.860000000001, "text": " Now, exponentiation takes the following form.", "tokens": [51015, 823, 11, 37871, 6642, 2516, 264, 3480, 1254, 13, 51255], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1249, "seek": 484806, "start": 4866.06, "end": 4869.860000000001, "text": " It takes numbers that are negative", "tokens": [51265, 467, 2516, 3547, 300, 366, 3671, 51455], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1250, "seek": 484806, "start": 4870.06, "end": 4870.860000000001, "text": " or they are positive.", "tokens": [51465, 420, 436, 366, 3353, 13, 51505], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1251, "seek": 484806, "start": 4871.06, "end": 4872.860000000001, "text": " It takes the entire real line.", "tokens": [51515, 467, 2516, 264, 2302, 957, 1622, 13, 51605], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1252, "seek": 484806, "start": 4873.06, "end": 4874.860000000001, "text": " And then if you plug in negative numbers,", "tokens": [51615, 400, 550, 498, 291, 5452, 294, 3671, 3547, 11, 51705], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1253, "seek": 484806, "start": 4875.06, "end": 4876.860000000001, "text": " you're going to get e to the x,", "tokens": [51715, 291, 434, 516, 281, 483, 308, 281, 264, 2031, 11, 51805], "temperature": 0.0, "avg_logprob": -0.08585089807925017, "compression_ratio": 1.8584905660377358, "no_speech_prob": 0.00016173157200682908}, {"id": 1254, "seek": 487686, "start": 4876.86, "end": 4879.66, "text": " which is always below one.", "tokens": [50365, 597, 307, 1009, 2507, 472, 13, 50505], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1255, "seek": 487686, "start": 4879.86, "end": 4882.66, "text": " So you're getting numbers lower than one.", "tokens": [50515, 407, 291, 434, 1242, 3547, 3126, 813, 472, 13, 50655], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1256, "seek": 487686, "start": 4882.86, "end": 4885.66, "text": " And if you plug in numbers greater than zero,", "tokens": [50665, 400, 498, 291, 5452, 294, 3547, 5044, 813, 4018, 11, 50805], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1257, "seek": 487686, "start": 4885.86, "end": 4887.66, "text": " you're getting numbers greater than one", "tokens": [50815, 291, 434, 1242, 3547, 5044, 813, 472, 50905], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1258, "seek": 487686, "start": 4887.86, "end": 4890.66, "text": " all the way growing to the infinity.", "tokens": [50915, 439, 264, 636, 4194, 281, 264, 13202, 13, 51055], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1259, "seek": 487686, "start": 4890.86, "end": 4892.66, "text": " And this here grows to zero.", "tokens": [51065, 400, 341, 510, 13156, 281, 4018, 13, 51155], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1260, "seek": 487686, "start": 4892.86, "end": 4894.66, "text": " So basically, we're going to", "tokens": [51165, 407, 1936, 11, 321, 434, 516, 281, 51255], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1261, "seek": 487686, "start": 4894.86, "end": 4899.66, "text": " take these numbers here", "tokens": [51265, 747, 613, 3547, 510, 51505], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1262, "seek": 487686, "start": 4899.86, "end": 4903.66, "text": " and instead of them being positive", "tokens": [51515, 293, 2602, 295, 552, 885, 3353, 51705], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1263, "seek": 487686, "start": 4903.86, "end": 4905.66, "text": " and negative in all their place,", "tokens": [51715, 293, 3671, 294, 439, 641, 1081, 11, 51805], "temperature": 0.0, "avg_logprob": -0.1056201893796203, "compression_ratio": 1.8042328042328042, "no_speech_prob": 0.00011377347254892811}, {"id": 1264, "seek": 490566, "start": 4905.66, "end": 4908.46, "text": " we're going to interpret them as log counts.", "tokens": [50365, 321, 434, 516, 281, 7302, 552, 382, 3565, 14893, 13, 50505], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1265, "seek": 490566, "start": 4908.66, "end": 4910.46, "text": " And then we're going to element-wise", "tokens": [50515, 400, 550, 321, 434, 516, 281, 4478, 12, 3711, 50605], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1266, "seek": 490566, "start": 4910.66, "end": 4912.46, "text": " exponentiate these numbers.", "tokens": [50615, 37871, 13024, 613, 3547, 13, 50705], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1267, "seek": 490566, "start": 4912.66, "end": 4915.46, "text": " Exponentiating them now gives us something like this.", "tokens": [50715, 21391, 266, 23012, 990, 552, 586, 2709, 505, 746, 411, 341, 13, 50855], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1268, "seek": 490566, "start": 4915.66, "end": 4917.46, "text": " And you see that these numbers now,", "tokens": [50865, 400, 291, 536, 300, 613, 3547, 586, 11, 50955], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1269, "seek": 490566, "start": 4917.66, "end": 4919.46, "text": " because they went through an exponent,", "tokens": [50965, 570, 436, 1437, 807, 364, 37871, 11, 51055], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1270, "seek": 490566, "start": 4919.66, "end": 4922.46, "text": " all the negative numbers turned into numbers below one,", "tokens": [51065, 439, 264, 3671, 3547, 3574, 666, 3547, 2507, 472, 11, 51205], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1271, "seek": 490566, "start": 4922.66, "end": 4924.46, "text": " like 0.338.", "tokens": [51215, 411, 1958, 13, 10191, 23, 13, 51305], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1272, "seek": 490566, "start": 4924.66, "end": 4926.46, "text": " And all the positive numbers, originally,", "tokens": [51315, 400, 439, 264, 3353, 3547, 11, 7993, 11, 51405], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1273, "seek": 490566, "start": 4926.66, "end": 4928.46, "text": " turned into even more positive numbers,", "tokens": [51415, 3574, 666, 754, 544, 3353, 3547, 11, 51505], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1274, "seek": 490566, "start": 4928.66, "end": 4930.46, "text": " sort of greater than one.", "tokens": [51515, 1333, 295, 5044, 813, 472, 13, 51605], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1275, "seek": 490566, "start": 4930.66, "end": 4932.46, "text": " So like, for example,", "tokens": [51615, 407, 411, 11, 337, 1365, 11, 51705], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1276, "seek": 490566, "start": 4932.66, "end": 4934.46, "text": " seven", "tokens": [51715, 3407, 51805], "temperature": 0.0, "avg_logprob": -0.10911615108086811, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.00023636921832803637}, {"id": 1277, "seek": 493446, "start": 4934.46, "end": 4938.26, "text": " is some positive number over here", "tokens": [50365, 307, 512, 3353, 1230, 670, 510, 50555], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1278, "seek": 493446, "start": 4938.46, "end": 4940.26, "text": " that is greater than zero.", "tokens": [50565, 300, 307, 5044, 813, 4018, 13, 50655], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1279, "seek": 493446, "start": 4940.46, "end": 4944.26, "text": " But exponentiated outputs here", "tokens": [50665, 583, 12680, 23012, 770, 23930, 510, 50855], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1280, "seek": 493446, "start": 4944.46, "end": 4947.26, "text": " basically give us something that we can use and interpret", "tokens": [50865, 1936, 976, 505, 746, 300, 321, 393, 764, 293, 7302, 51005], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1281, "seek": 493446, "start": 4947.46, "end": 4950.26, "text": " as the equivalent of counts originally.", "tokens": [51015, 382, 264, 10344, 295, 14893, 7993, 13, 51155], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1282, "seek": 493446, "start": 4950.46, "end": 4952.26, "text": " So you see these counts here?", "tokens": [51165, 407, 291, 536, 613, 14893, 510, 30, 51255], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1283, "seek": 493446, "start": 4952.46, "end": 4955.26, "text": " 1, 12, 7, 51, 1, etc.", "tokens": [51265, 502, 11, 2272, 11, 1614, 11, 18485, 11, 502, 11, 5183, 13, 51405], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1284, "seek": 493446, "start": 4955.46, "end": 4959.26, "text": " The neural net is kind of now predicting", "tokens": [51415, 440, 18161, 2533, 307, 733, 295, 586, 32884, 51605], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1285, "seek": 493446, "start": 4959.46, "end": 4961.26, "text": " counts.", "tokens": [51615, 14893, 13, 51705], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1286, "seek": 493446, "start": 4961.46, "end": 4964.26, "text": " And these counts are positive numbers.", "tokens": [51715, 400, 613, 14893, 366, 3353, 3547, 13, 51855], "temperature": 0.0, "avg_logprob": -0.11180211150127908, "compression_ratio": 1.5817307692307692, "no_speech_prob": 3.423161615501158e-05}, {"id": 1287, "seek": 496446, "start": 4964.46, "end": 4967.26, "text": " They're probably below zero, so that makes sense.", "tokens": [50365, 814, 434, 1391, 2507, 4018, 11, 370, 300, 1669, 2020, 13, 50505], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1288, "seek": 496446, "start": 4967.46, "end": 4970.26, "text": " And they can now take on various values", "tokens": [50515, 400, 436, 393, 586, 747, 322, 3683, 4190, 50655], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1289, "seek": 496446, "start": 4970.46, "end": 4974.26, "text": " depending on the settings of W.", "tokens": [50665, 5413, 322, 264, 6257, 295, 343, 13, 50855], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1290, "seek": 496446, "start": 4974.46, "end": 4976.26, "text": " So let me break this down.", "tokens": [50865, 407, 718, 385, 1821, 341, 760, 13, 50955], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1291, "seek": 496446, "start": 4976.46, "end": 4981.26, "text": " We're going to interpret these to be the log counts.", "tokens": [50965, 492, 434, 516, 281, 7302, 613, 281, 312, 264, 3565, 14893, 13, 51205], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1292, "seek": 496446, "start": 4981.46, "end": 4983.26, "text": " In other words for this, that is often used,", "tokens": [51215, 682, 661, 2283, 337, 341, 11, 300, 307, 2049, 1143, 11, 51305], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1293, "seek": 496446, "start": 4983.46, "end": 4985.26, "text": " is so-called logits.", "tokens": [51315, 307, 370, 12, 11880, 3565, 1208, 13, 51405], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1294, "seek": 496446, "start": 4985.46, "end": 4988.26, "text": " These are logits, log counts.", "tokens": [51415, 1981, 366, 3565, 1208, 11, 3565, 14893, 13, 51555], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1295, "seek": 496446, "start": 4988.46, "end": 4991.26, "text": " And these will be sort of the counts.", "tokens": [51565, 400, 613, 486, 312, 1333, 295, 264, 14893, 13, 51705], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1296, "seek": 496446, "start": 4991.46, "end": 4993.26, "text": " Logits exponentiated.", "tokens": [51715, 10824, 1208, 12680, 23012, 770, 13, 51805], "temperature": 0.0, "avg_logprob": -0.147394268601029, "compression_ratio": 1.59375, "no_speech_prob": 0.00012835621600970626}, {"id": 1297, "seek": 499326, "start": 4993.26, "end": 4996.06, "text": " And this is equivalent to the n matrix,", "tokens": [50365, 400, 341, 307, 10344, 281, 264, 297, 8141, 11, 50505], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1298, "seek": 499326, "start": 4996.26, "end": 5000.06, "text": " sort of the n array that we used previously.", "tokens": [50515, 1333, 295, 264, 297, 10225, 300, 321, 1143, 8046, 13, 50705], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1299, "seek": 499326, "start": 5000.26, "end": 5002.06, "text": " Remember this was the n?", "tokens": [50715, 5459, 341, 390, 264, 297, 30, 50805], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1300, "seek": 499326, "start": 5002.26, "end": 5004.06, "text": " This is the array of counts.", "tokens": [50815, 639, 307, 264, 10225, 295, 14893, 13, 50905], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1301, "seek": 499326, "start": 5004.26, "end": 5012.06, "text": " And each row here are the counts for the next character, sort of.", "tokens": [50915, 400, 1184, 5386, 510, 366, 264, 14893, 337, 264, 958, 2517, 11, 1333, 295, 13, 51305], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1302, "seek": 499326, "start": 5012.26, "end": 5014.06, "text": " So those are the counts.", "tokens": [51315, 407, 729, 366, 264, 14893, 13, 51405], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1303, "seek": 499326, "start": 5014.26, "end": 5019.06, "text": " And now the probabilities are just the counts normalized.", "tokens": [51415, 400, 586, 264, 33783, 366, 445, 264, 14893, 48704, 13, 51655], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1304, "seek": 499326, "start": 5019.26, "end": 5023.06, "text": " And so I'm not going to find the same,", "tokens": [51665, 400, 370, 286, 478, 406, 516, 281, 915, 264, 912, 11, 51855], "temperature": 0.0, "avg_logprob": -0.13160085678100586, "compression_ratio": 1.6381909547738693, "no_speech_prob": 0.00030897423857823014}, {"id": 1305, "seek": 502306, "start": 5023.06, "end": 5025.860000000001, "text": " but basically I'm not going to scroll all over the place.", "tokens": [50365, 457, 1936, 286, 478, 406, 516, 281, 11369, 439, 670, 264, 1081, 13, 50505], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1306, "seek": 502306, "start": 5026.06, "end": 5027.860000000001, "text": " We've already done this.", "tokens": [50515, 492, 600, 1217, 1096, 341, 13, 50605], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1307, "seek": 502306, "start": 5028.06, "end": 5031.860000000001, "text": " We want to counts.sum along the first dimension.", "tokens": [50615, 492, 528, 281, 14893, 13, 82, 449, 2051, 264, 700, 10139, 13, 50805], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1308, "seek": 502306, "start": 5032.06, "end": 5034.860000000001, "text": " And we want to keep dims as true.", "tokens": [50815, 400, 321, 528, 281, 1066, 5013, 82, 382, 2074, 13, 50955], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1309, "seek": 502306, "start": 5035.06, "end": 5036.860000000001, "text": " We've went over this.", "tokens": [50965, 492, 600, 1437, 670, 341, 13, 51055], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1310, "seek": 502306, "start": 5037.06, "end": 5039.860000000001, "text": " And this is how we normalize the rows of our counts matrix", "tokens": [51065, 400, 341, 307, 577, 321, 2710, 1125, 264, 13241, 295, 527, 14893, 8141, 51205], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1311, "seek": 502306, "start": 5040.06, "end": 5042.860000000001, "text": " to get our probabilities.", "tokens": [51215, 281, 483, 527, 33783, 13, 51355], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1312, "seek": 502306, "start": 5043.06, "end": 5044.860000000001, "text": " Props.", "tokens": [51365, 21944, 82, 13, 51455], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1313, "seek": 502306, "start": 5045.06, "end": 5047.860000000001, "text": " So now these are the probabilities.", "tokens": [51465, 407, 586, 613, 366, 264, 33783, 13, 51605], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1314, "seek": 502306, "start": 5048.06, "end": 5050.860000000001, "text": " And these are the counts that we have currently.", "tokens": [51615, 400, 613, 366, 264, 14893, 300, 321, 362, 4362, 13, 51755], "temperature": 0.0, "avg_logprob": -0.12938060938754928, "compression_ratio": 1.6697247706422018, "no_speech_prob": 0.00011965938028879464}, {"id": 1315, "seek": 505086, "start": 5050.86, "end": 5053.66, "text": " And now when I show the probabilities,", "tokens": [50365, 400, 586, 562, 286, 855, 264, 33783, 11, 50505], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1316, "seek": 505086, "start": 5053.86, "end": 5058.66, "text": " you see that every row here, of course,", "tokens": [50515, 291, 536, 300, 633, 5386, 510, 11, 295, 1164, 11, 50755], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1317, "seek": 505086, "start": 5058.86, "end": 5062.66, "text": " will sum to one because they're normalized.", "tokens": [50765, 486, 2408, 281, 472, 570, 436, 434, 48704, 13, 50955], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1318, "seek": 505086, "start": 5062.86, "end": 5066.66, "text": " And the shape of this is 5 by 27.", "tokens": [50965, 400, 264, 3909, 295, 341, 307, 1025, 538, 7634, 13, 51155], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1319, "seek": 505086, "start": 5066.86, "end": 5069.66, "text": " And so really what we've achieved is", "tokens": [51165, 400, 370, 534, 437, 321, 600, 11042, 307, 51305], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1320, "seek": 505086, "start": 5069.86, "end": 5071.66, "text": " for every one of our five examples,", "tokens": [51315, 337, 633, 472, 295, 527, 1732, 5110, 11, 51405], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1321, "seek": 505086, "start": 5071.86, "end": 5074.66, "text": " we now have a row that came out of a neural net.", "tokens": [51415, 321, 586, 362, 257, 5386, 300, 1361, 484, 295, 257, 18161, 2533, 13, 51555], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1322, "seek": 505086, "start": 5074.86, "end": 5077.66, "text": " And because of the transformations here,", "tokens": [51565, 400, 570, 295, 264, 34852, 510, 11, 51705], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1323, "seek": 505086, "start": 5077.86, "end": 5080.66, "text": " we made sure that this output of this neural net now", "tokens": [51715, 321, 1027, 988, 300, 341, 5598, 295, 341, 18161, 2533, 586, 51855], "temperature": 0.0, "avg_logprob": -0.076537535740779, "compression_ratio": 1.631578947368421, "no_speech_prob": 7.257894321810454e-05}, {"id": 1324, "seek": 508066, "start": 5080.66, "end": 5082.46, "text": " can be interpreted to be probabilities", "tokens": [50365, 393, 312, 26749, 281, 312, 33783, 50455], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1325, "seek": 508066, "start": 5082.66, "end": 5085.46, "text": " or we can interpret to be probabilities.", "tokens": [50465, 420, 321, 393, 7302, 281, 312, 33783, 13, 50605], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1326, "seek": 508066, "start": 5085.66, "end": 5088.46, "text": " So our WX here gave us logits.", "tokens": [50615, 407, 527, 343, 55, 510, 2729, 505, 3565, 1208, 13, 50755], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1327, "seek": 508066, "start": 5088.66, "end": 5091.46, "text": " And then we interpret those to be log counts.", "tokens": [50765, 400, 550, 321, 7302, 729, 281, 312, 3565, 14893, 13, 50905], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1328, "seek": 508066, "start": 5091.66, "end": 5094.46, "text": " We exponentiate to get something that looks like counts.", "tokens": [50915, 492, 37871, 13024, 281, 483, 746, 300, 1542, 411, 14893, 13, 51055], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1329, "seek": 508066, "start": 5094.66, "end": 5096.46, "text": " And then we normalize those counts", "tokens": [51065, 400, 550, 321, 2710, 1125, 729, 14893, 51155], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1330, "seek": 508066, "start": 5096.66, "end": 5098.46, "text": " to get a probability distribution.", "tokens": [51165, 281, 483, 257, 8482, 7316, 13, 51255], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1331, "seek": 508066, "start": 5098.66, "end": 5100.46, "text": " And all of these are differentiable operations.", "tokens": [51265, 400, 439, 295, 613, 366, 819, 9364, 7705, 13, 51355], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1332, "seek": 508066, "start": 5100.66, "end": 5103.46, "text": " So what we've done now is we are taking inputs.", "tokens": [51365, 407, 437, 321, 600, 1096, 586, 307, 321, 366, 1940, 15743, 13, 51505], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1333, "seek": 508066, "start": 5103.66, "end": 5105.46, "text": " We have differentiable operations", "tokens": [51515, 492, 362, 819, 9364, 7705, 51605], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1334, "seek": 508066, "start": 5105.66, "end": 5107.46, "text": " that we can back propagate through.", "tokens": [51615, 300, 321, 393, 646, 48256, 807, 13, 51705], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1335, "seek": 508066, "start": 5107.66, "end": 5109.46, "text": " And we're getting out probability distributions.", "tokens": [51715, 400, 321, 434, 1242, 484, 8482, 37870, 13, 51805], "temperature": 0.0, "avg_logprob": -0.10518416595458985, "compression_ratio": 2.016194331983806, "no_speech_prob": 0.00023216647969093174}, {"id": 1336, "seek": 510946, "start": 5109.46, "end": 5114.26, "text": " So for example, for the zeroth example that fed in,", "tokens": [50365, 407, 337, 1365, 11, 337, 264, 44746, 900, 1365, 300, 4636, 294, 11, 50605], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1337, "seek": 510946, "start": 5114.46, "end": 5118.26, "text": " which was the zeroth example here,", "tokens": [50615, 597, 390, 264, 44746, 900, 1365, 510, 11, 50805], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1338, "seek": 510946, "start": 5118.46, "end": 5120.26, "text": " was a one-hot vector of zero.", "tokens": [50815, 390, 257, 472, 12, 12194, 8062, 295, 4018, 13, 50905], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1339, "seek": 510946, "start": 5120.46, "end": 5127.26, "text": " And it basically corresponded to feeding in this example here.", "tokens": [50915, 400, 309, 1936, 6805, 292, 281, 12919, 294, 341, 1365, 510, 13, 51255], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1340, "seek": 510946, "start": 5127.46, "end": 5130.26, "text": " So we're feeding in a dot into a neural net.", "tokens": [51265, 407, 321, 434, 12919, 294, 257, 5893, 666, 257, 18161, 2533, 13, 51405], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1341, "seek": 510946, "start": 5130.46, "end": 5132.26, "text": " And the way we fed the dot into a neural net", "tokens": [51415, 400, 264, 636, 321, 4636, 264, 5893, 666, 257, 18161, 2533, 51505], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1342, "seek": 510946, "start": 5132.46, "end": 5134.26, "text": " is that we first got its index.", "tokens": [51515, 307, 300, 321, 700, 658, 1080, 8186, 13, 51605], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1343, "seek": 510946, "start": 5134.46, "end": 5136.26, "text": " Then we one-hot encoded it.", "tokens": [51615, 1396, 321, 472, 12, 12194, 2058, 12340, 309, 13, 51705], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1344, "seek": 510946, "start": 5136.46, "end": 5138.26, "text": " Then it went into the neural net.", "tokens": [51715, 1396, 309, 1437, 666, 264, 18161, 2533, 13, 51805], "temperature": 0.0, "avg_logprob": -0.09241316535256126, "compression_ratio": 1.8520408163265305, "no_speech_prob": 0.00020706778741441667}, {"id": 1345, "seek": 513826, "start": 5138.26, "end": 5143.06, "text": " And out came this distribution of probabilities.", "tokens": [50365, 400, 484, 1361, 341, 7316, 295, 33783, 13, 50605], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1346, "seek": 513826, "start": 5143.26, "end": 5147.06, "text": " And its shape is 27.", "tokens": [50615, 400, 1080, 3909, 307, 7634, 13, 50805], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1347, "seek": 513826, "start": 5147.26, "end": 5149.06, "text": " There's 27 numbers.", "tokens": [50815, 821, 311, 7634, 3547, 13, 50905], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1348, "seek": 513826, "start": 5149.26, "end": 5152.06, "text": " And we're going to interpret this as the neural net's assignment", "tokens": [50915, 400, 321, 434, 516, 281, 7302, 341, 382, 264, 18161, 2533, 311, 15187, 51055], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1349, "seek": 513826, "start": 5152.26, "end": 5156.06, "text": " for how likely every one of these characters,", "tokens": [51065, 337, 577, 3700, 633, 472, 295, 613, 4342, 11, 51255], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1350, "seek": 513826, "start": 5156.26, "end": 5159.06, "text": " the 27 characters, are to come next.", "tokens": [51265, 264, 7634, 4342, 11, 366, 281, 808, 958, 13, 51405], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1351, "seek": 513826, "start": 5159.26, "end": 5162.06, "text": " And as we tune the weights W,", "tokens": [51415, 400, 382, 321, 10864, 264, 17443, 343, 11, 51555], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1352, "seek": 513826, "start": 5162.26, "end": 5165.06, "text": " we're going to be, of course, getting different probabilities out", "tokens": [51565, 321, 434, 516, 281, 312, 11, 295, 1164, 11, 1242, 819, 33783, 484, 51705], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1353, "seek": 513826, "start": 5165.26, "end": 5167.06, "text": " for any character that you input.", "tokens": [51715, 337, 604, 2517, 300, 291, 4846, 13, 51805], "temperature": 0.0, "avg_logprob": -0.07119327661942462, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00010646732698660344}, {"id": 1354, "seek": 516706, "start": 5167.06, "end": 5168.860000000001, "text": " And so now the question is just,", "tokens": [50365, 400, 370, 586, 264, 1168, 307, 445, 11, 50455], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1355, "seek": 516706, "start": 5169.06, "end": 5170.860000000001, "text": " can we optimize and find a good W", "tokens": [50465, 393, 321, 19719, 293, 915, 257, 665, 343, 50555], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1356, "seek": 516706, "start": 5171.06, "end": 5173.860000000001, "text": " such that the probabilities coming out are pretty good?", "tokens": [50565, 1270, 300, 264, 33783, 1348, 484, 366, 1238, 665, 30, 50705], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1357, "seek": 516706, "start": 5174.06, "end": 5176.860000000001, "text": " And the way we measure pretty good is by the loss function.", "tokens": [50715, 400, 264, 636, 321, 3481, 1238, 665, 307, 538, 264, 4470, 2445, 13, 50855], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1358, "seek": 516706, "start": 5177.06, "end": 5178.860000000001, "text": " Okay, so I organized everything into a single summary", "tokens": [50865, 1033, 11, 370, 286, 9983, 1203, 666, 257, 2167, 12691, 50955], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1359, "seek": 516706, "start": 5179.06, "end": 5180.860000000001, "text": " so that hopefully it's a bit more clear.", "tokens": [50965, 370, 300, 4696, 309, 311, 257, 857, 544, 1850, 13, 51055], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1360, "seek": 516706, "start": 5181.06, "end": 5181.860000000001, "text": " So it starts here.", "tokens": [51065, 407, 309, 3719, 510, 13, 51105], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1361, "seek": 516706, "start": 5182.06, "end": 5183.860000000001, "text": " We have an input data set.", "tokens": [51115, 492, 362, 364, 4846, 1412, 992, 13, 51205], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1362, "seek": 516706, "start": 5184.06, "end": 5185.860000000001, "text": " We have some inputs to the neural net.", "tokens": [51215, 492, 362, 512, 15743, 281, 264, 18161, 2533, 13, 51305], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1363, "seek": 516706, "start": 5186.06, "end": 5189.860000000001, "text": " And we have some labels for the correct next character in a sequence.", "tokens": [51315, 400, 321, 362, 512, 16949, 337, 264, 3006, 958, 2517, 294, 257, 8310, 13, 51505], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1364, "seek": 516706, "start": 5190.06, "end": 5191.860000000001, "text": " And these are integers.", "tokens": [51515, 400, 613, 366, 41674, 13, 51605], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1365, "seek": 516706, "start": 5192.06, "end": 5194.860000000001, "text": " Here I'm using torch generators now", "tokens": [51615, 1692, 286, 478, 1228, 27822, 38662, 586, 51755], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1366, "seek": 516706, "start": 5195.06, "end": 5196.860000000001, "text": " so that you see the same numbers", "tokens": [51765, 370, 300, 291, 536, 264, 912, 3547, 51855], "temperature": 0.0, "avg_logprob": -0.09736597197396414, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.00011155237734783441}, {"id": 1367, "seek": 519706, "start": 5197.06, "end": 5197.860000000001, "text": " that I see.", "tokens": [50365, 300, 286, 536, 13, 50405], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1368, "seek": 519706, "start": 5198.06, "end": 5201.860000000001, "text": " And I'm generating 27 neurons' weights.", "tokens": [50415, 400, 286, 478, 17746, 7634, 22027, 6, 17443, 13, 50605], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1369, "seek": 519706, "start": 5202.06, "end": 5207.860000000001, "text": " And each neuron here receives 27 inputs.", "tokens": [50615, 400, 1184, 34090, 510, 20717, 7634, 15743, 13, 50905], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1370, "seek": 519706, "start": 5208.06, "end": 5210.860000000001, "text": " Then here we're going to plug in all the input examples,", "tokens": [50915, 1396, 510, 321, 434, 516, 281, 5452, 294, 439, 264, 4846, 5110, 11, 51055], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1371, "seek": 519706, "start": 5211.06, "end": 5212.860000000001, "text": " x's, into a neural net.", "tokens": [51065, 2031, 311, 11, 666, 257, 18161, 2533, 13, 51155], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1372, "seek": 519706, "start": 5213.06, "end": 5214.860000000001, "text": " So here, this is a forward pass.", "tokens": [51165, 407, 510, 11, 341, 307, 257, 2128, 1320, 13, 51255], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1373, "seek": 519706, "start": 5215.06, "end": 5217.860000000001, "text": " First, we have to encode all of the inputs", "tokens": [51265, 2386, 11, 321, 362, 281, 2058, 1429, 439, 295, 264, 15743, 51405], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1374, "seek": 519706, "start": 5218.06, "end": 5219.860000000001, "text": " into one-hot representations.", "tokens": [51415, 666, 472, 12, 12194, 33358, 13, 51505], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1375, "seek": 519706, "start": 5220.06, "end": 5221.860000000001, "text": " So we have 27 classes.", "tokens": [51515, 407, 321, 362, 7634, 5359, 13, 51605], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1376, "seek": 519706, "start": 5222.06, "end": 5223.860000000001, "text": " We pass in these integers.", "tokens": [51615, 492, 1320, 294, 613, 41674, 13, 51705], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1377, "seek": 519706, "start": 5224.06, "end": 5226.860000000001, "text": " And xinc becomes an array", "tokens": [51715, 400, 2031, 4647, 3643, 364, 10225, 51855], "temperature": 0.0, "avg_logprob": -0.13736332884622277, "compression_ratio": 1.5707964601769913, "no_speech_prob": 8.582876762375236e-05}, {"id": 1378, "seek": 522706, "start": 5227.06, "end": 5228.860000000001, "text": " that is 5 by 27.", "tokens": [50365, 300, 307, 1025, 538, 7634, 13, 50455], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1379, "seek": 522706, "start": 5229.06, "end": 5231.860000000001, "text": " Zeros except for a few ones.", "tokens": [50465, 1176, 16771, 3993, 337, 257, 1326, 2306, 13, 50605], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1380, "seek": 522706, "start": 5232.06, "end": 5234.860000000001, "text": " We then multiply this in the first layer of a neural net", "tokens": [50615, 492, 550, 12972, 341, 294, 264, 700, 4583, 295, 257, 18161, 2533, 50755], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1381, "seek": 522706, "start": 5235.06, "end": 5236.860000000001, "text": " to get logits.", "tokens": [50765, 281, 483, 3565, 1208, 13, 50855], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1382, "seek": 522706, "start": 5237.06, "end": 5239.860000000001, "text": " Exponentiate the logits to get fake counts, sort of.", "tokens": [50865, 21391, 266, 23012, 473, 264, 3565, 1208, 281, 483, 7592, 14893, 11, 1333, 295, 13, 51005], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1383, "seek": 522706, "start": 5240.06, "end": 5243.860000000001, "text": " And normalize these counts to get probabilities.", "tokens": [51015, 400, 2710, 1125, 613, 14893, 281, 483, 33783, 13, 51205], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1384, "seek": 522706, "start": 5244.06, "end": 5246.860000000001, "text": " So these last two lines, by the way, here", "tokens": [51215, 407, 613, 1036, 732, 3876, 11, 538, 264, 636, 11, 510, 51355], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1385, "seek": 522706, "start": 5247.06, "end": 5249.860000000001, "text": " are called the softmax,", "tokens": [51365, 366, 1219, 264, 2787, 41167, 11, 51505], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1386, "seek": 522706, "start": 5250.06, "end": 5251.860000000001, "text": " which I pulled up here.", "tokens": [51515, 597, 286, 7373, 493, 510, 13, 51605], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1387, "seek": 522706, "start": 5252.06, "end": 5255.860000000001, "text": " Softmax is a very often used layer in a neural net", "tokens": [51615, 16985, 41167, 307, 257, 588, 2049, 1143, 4583, 294, 257, 18161, 2533, 51805], "temperature": 0.0, "avg_logprob": -0.11003851039069039, "compression_ratio": 1.5789473684210527, "no_speech_prob": 9.190255514113232e-05}, {"id": 1388, "seek": 525586, "start": 5255.86, "end": 5258.66, "text": " that takes these z's, which are logits,", "tokens": [50365, 300, 2516, 613, 710, 311, 11, 597, 366, 3565, 1208, 11, 50505], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1389, "seek": 525586, "start": 5258.86, "end": 5260.66, "text": " exponentiates them,", "tokens": [50515, 12680, 23012, 1024, 552, 11, 50605], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1390, "seek": 525586, "start": 5260.86, "end": 5262.66, "text": " and divides and normalizes.", "tokens": [50615, 293, 41347, 293, 2710, 5660, 13, 50705], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1391, "seek": 525586, "start": 5262.86, "end": 5265.66, "text": " It's a way of taking outputs of a neural net layer.", "tokens": [50715, 467, 311, 257, 636, 295, 1940, 23930, 295, 257, 18161, 2533, 4583, 13, 50855], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1392, "seek": 525586, "start": 5265.86, "end": 5268.66, "text": " And these outputs can be positive or negative.", "tokens": [50865, 400, 613, 23930, 393, 312, 3353, 420, 3671, 13, 51005], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1393, "seek": 525586, "start": 5268.86, "end": 5271.66, "text": " And it outputs probability distributions.", "tokens": [51015, 400, 309, 23930, 8482, 37870, 13, 51155], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1394, "seek": 525586, "start": 5271.86, "end": 5274.66, "text": " It outputs something that is always", "tokens": [51165, 467, 23930, 746, 300, 307, 1009, 51305], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1395, "seek": 525586, "start": 5274.86, "end": 5276.66, "text": " sums to one and are positive numbers,", "tokens": [51315, 34499, 281, 472, 293, 366, 3353, 3547, 11, 51405], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1396, "seek": 525586, "start": 5276.86, "end": 5278.66, "text": " just like probabilities.", "tokens": [51415, 445, 411, 33783, 13, 51505], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1397, "seek": 525586, "start": 5278.86, "end": 5280.66, "text": " So it's kind of like a normalization function", "tokens": [51515, 407, 309, 311, 733, 295, 411, 257, 2710, 2144, 2445, 51605], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1398, "seek": 525586, "start": 5280.86, "end": 5282.66, "text": " if you want to think of it that way.", "tokens": [51615, 498, 291, 528, 281, 519, 295, 309, 300, 636, 13, 51705], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1399, "seek": 525586, "start": 5282.86, "end": 5284.66, "text": " And you can put it on top of any other linear layer", "tokens": [51715, 400, 291, 393, 829, 309, 322, 1192, 295, 604, 661, 8213, 4583, 51805], "temperature": 0.0, "avg_logprob": -0.10144391135563927, "compression_ratio": 1.7633587786259541, "no_speech_prob": 0.0001832807611208409}, {"id": 1400, "seek": 528466, "start": 5284.66, "end": 5285.46, "text": " inside a neural net.", "tokens": [50365, 1854, 257, 18161, 2533, 13, 50405], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1401, "seek": 528466, "start": 5285.66, "end": 5288.46, "text": " And it basically makes a neural net output probabilities", "tokens": [50415, 400, 309, 1936, 1669, 257, 18161, 2533, 5598, 33783, 50555], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1402, "seek": 528466, "start": 5288.66, "end": 5290.46, "text": " that's very often used.", "tokens": [50565, 300, 311, 588, 2049, 1143, 13, 50655], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1403, "seek": 528466, "start": 5290.66, "end": 5293.46, "text": " And we used it as well here.", "tokens": [50665, 400, 321, 1143, 309, 382, 731, 510, 13, 50805], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1404, "seek": 528466, "start": 5293.66, "end": 5294.46, "text": " So this is the forward pass,", "tokens": [50815, 407, 341, 307, 264, 2128, 1320, 11, 50855], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1405, "seek": 528466, "start": 5294.66, "end": 5297.46, "text": " and that's how we made a neural net output probability.", "tokens": [50865, 293, 300, 311, 577, 321, 1027, 257, 18161, 2533, 5598, 8482, 13, 51005], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1406, "seek": 528466, "start": 5297.66, "end": 5302.46, "text": " Now, you'll notice that", "tokens": [51015, 823, 11, 291, 603, 3449, 300, 51255], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1407, "seek": 528466, "start": 5302.66, "end": 5305.46, "text": " all of these, this entire forward pass", "tokens": [51265, 439, 295, 613, 11, 341, 2302, 2128, 1320, 51405], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1408, "seek": 528466, "start": 5305.66, "end": 5307.46, "text": " is made up of differentiable layers.", "tokens": [51415, 307, 1027, 493, 295, 819, 9364, 7914, 13, 51505], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1409, "seek": 528466, "start": 5307.66, "end": 5310.46, "text": " Everything here we can backpropagate through.", "tokens": [51515, 5471, 510, 321, 393, 646, 79, 1513, 559, 473, 807, 13, 51655], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1410, "seek": 528466, "start": 5310.66, "end": 5313.46, "text": " And we saw some of the backpropagation in micrograd.", "tokens": [51665, 400, 321, 1866, 512, 295, 264, 646, 79, 1513, 559, 399, 294, 4532, 7165, 13, 51805], "temperature": 0.0, "avg_logprob": -0.12049461012127019, "compression_ratio": 1.7692307692307692, "no_speech_prob": 7.922662916826084e-05}, {"id": 1411, "seek": 531346, "start": 5313.46, "end": 5316.26, "text": " This is just multiplication and addition.", "tokens": [50365, 639, 307, 445, 27290, 293, 4500, 13, 50505], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1412, "seek": 531346, "start": 5316.46, "end": 5318.26, "text": " All that's happening here is just multiply and add.", "tokens": [50515, 1057, 300, 311, 2737, 510, 307, 445, 12972, 293, 909, 13, 50605], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1413, "seek": 531346, "start": 5318.46, "end": 5320.26, "text": " And we know how to backpropagate through them.", "tokens": [50615, 400, 321, 458, 577, 281, 646, 79, 1513, 559, 473, 807, 552, 13, 50705], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1414, "seek": 531346, "start": 5320.46, "end": 5323.26, "text": " Exponentiation, we know how to backpropagate through.", "tokens": [50715, 21391, 30365, 6642, 11, 321, 458, 577, 281, 646, 79, 1513, 559, 473, 807, 13, 50855], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1415, "seek": 531346, "start": 5323.46, "end": 5326.26, "text": " And then here, we are summing.", "tokens": [50865, 400, 550, 510, 11, 321, 366, 2408, 2810, 13, 51005], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1416, "seek": 531346, "start": 5326.46, "end": 5329.26, "text": " And sum is easily backpropagatable as well.", "tokens": [51015, 400, 2408, 307, 3612, 646, 79, 1513, 559, 31415, 382, 731, 13, 51155], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1417, "seek": 531346, "start": 5329.46, "end": 5331.26, "text": " And division as well.", "tokens": [51165, 400, 10044, 382, 731, 13, 51255], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1418, "seek": 531346, "start": 5331.46, "end": 5334.26, "text": " So everything here is a differentiable operation.", "tokens": [51265, 407, 1203, 510, 307, 257, 819, 9364, 6916, 13, 51405], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1419, "seek": 531346, "start": 5334.46, "end": 5337.26, "text": " And we can backpropagate through.", "tokens": [51415, 400, 321, 393, 646, 79, 1513, 559, 473, 807, 13, 51555], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1420, "seek": 531346, "start": 5337.46, "end": 5339.26, "text": " Now, we achieve these probabilities,", "tokens": [51565, 823, 11, 321, 4584, 613, 33783, 11, 51655], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1421, "seek": 531346, "start": 5339.46, "end": 5341.26, "text": " which are 5 by 27.", "tokens": [51665, 597, 366, 1025, 538, 7634, 13, 51755], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1422, "seek": 531346, "start": 5341.46, "end": 5343.26, "text": " For every single example,", "tokens": [51765, 1171, 633, 2167, 1365, 11, 51855], "temperature": 0.0, "avg_logprob": -0.09912119971381293, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.00010517293412704021}, {"id": 1423, "seek": 534326, "start": 5343.26, "end": 5346.06, "text": " we have a vector of probabilities that sum to 1.", "tokens": [50365, 321, 362, 257, 8062, 295, 33783, 300, 2408, 281, 502, 13, 50505], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1424, "seek": 534326, "start": 5346.26, "end": 5348.06, "text": " And then here, I wrote a bunch of stuff", "tokens": [50515, 400, 550, 510, 11, 286, 4114, 257, 3840, 295, 1507, 50605], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1425, "seek": 534326, "start": 5348.26, "end": 5351.06, "text": " to sort of like break down the examples.", "tokens": [50615, 281, 1333, 295, 411, 1821, 760, 264, 5110, 13, 50755], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1426, "seek": 534326, "start": 5351.26, "end": 5356.06, "text": " So we have 5 examples making up Emma, right?", "tokens": [50765, 407, 321, 362, 1025, 5110, 1455, 493, 17124, 11, 558, 30, 51005], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1427, "seek": 534326, "start": 5356.26, "end": 5360.06, "text": " And there are 5 bigrams inside Emma.", "tokens": [51015, 400, 456, 366, 1025, 955, 2356, 82, 1854, 17124, 13, 51205], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1428, "seek": 534326, "start": 5360.26, "end": 5363.06, "text": " So bigram example 1", "tokens": [51215, 407, 955, 2356, 1365, 502, 51355], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1429, "seek": 534326, "start": 5363.26, "end": 5366.06, "text": " is that E is the beginning character", "tokens": [51365, 307, 300, 462, 307, 264, 2863, 2517, 51505], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1430, "seek": 534326, "start": 5366.26, "end": 5368.06, "text": " right after dot.", "tokens": [51515, 558, 934, 5893, 13, 51605], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1431, "seek": 534326, "start": 5368.26, "end": 5371.06, "text": " And the indexes for these are 0 and 5.", "tokens": [51615, 400, 264, 8186, 279, 337, 613, 366, 1958, 293, 1025, 13, 51755], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1432, "seek": 534326, "start": 5371.26, "end": 5373.06, "text": " So then we feed in a 0", "tokens": [51765, 407, 550, 321, 3154, 294, 257, 1958, 51855], "temperature": 0.0, "avg_logprob": -0.09733245957572505, "compression_ratio": 1.613953488372093, "no_speech_prob": 9.823459549807012e-05}, {"id": 1433, "seek": 537326, "start": 5373.26, "end": 5376.06, "text": " that's the input to the neural net.", "tokens": [50365, 300, 311, 264, 4846, 281, 264, 18161, 2533, 13, 50505], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1434, "seek": 537326, "start": 5376.26, "end": 5378.06, "text": " We get probabilities from the neural net", "tokens": [50515, 492, 483, 33783, 490, 264, 18161, 2533, 50605], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1435, "seek": 537326, "start": 5378.26, "end": 5381.06, "text": " that are 27 numbers.", "tokens": [50615, 300, 366, 7634, 3547, 13, 50755], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1436, "seek": 537326, "start": 5381.26, "end": 5383.06, "text": " And then the label is 5", "tokens": [50765, 400, 550, 264, 7645, 307, 1025, 50855], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1437, "seek": 537326, "start": 5383.26, "end": 5386.06, "text": " because E actually comes after dot.", "tokens": [50865, 570, 462, 767, 1487, 934, 5893, 13, 51005], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1438, "seek": 537326, "start": 5386.26, "end": 5388.06, "text": " So that's the label.", "tokens": [51015, 407, 300, 311, 264, 7645, 13, 51105], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1439, "seek": 537326, "start": 5388.26, "end": 5391.06, "text": " And then we use this label 5", "tokens": [51115, 400, 550, 321, 764, 341, 7645, 1025, 51255], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1440, "seek": 537326, "start": 5391.26, "end": 5394.06, "text": " to index into the probability distribution here.", "tokens": [51265, 281, 8186, 666, 264, 8482, 7316, 510, 13, 51405], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1441, "seek": 537326, "start": 5394.26, "end": 5397.06, "text": " So this index 5 here", "tokens": [51415, 407, 341, 8186, 1025, 510, 51555], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1442, "seek": 537326, "start": 5397.26, "end": 5400.06, "text": " is 0, 1, 2, 3, 4, 5.", "tokens": [51565, 307, 1958, 11, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 13, 51705], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1443, "seek": 537326, "start": 5400.26, "end": 5402.06, "text": " It's this number here,", "tokens": [51715, 467, 311, 341, 1230, 510, 11, 51805], "temperature": 0.0, "avg_logprob": -0.09686693173010373, "compression_ratio": 1.6294416243654823, "no_speech_prob": 0.0003980916226282716}, {"id": 1444, "seek": 540206, "start": 5402.06, "end": 5403.860000000001, "text": " and this number here.", "tokens": [50365, 293, 341, 1230, 510, 13, 50455], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1445, "seek": 540206, "start": 5404.06, "end": 5405.860000000001, "text": " So that's basically the probability", "tokens": [50465, 407, 300, 311, 1936, 264, 8482, 50555], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1446, "seek": 540206, "start": 5406.06, "end": 5406.860000000001, "text": " assigned by the neural net", "tokens": [50565, 13279, 538, 264, 18161, 2533, 50605], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1447, "seek": 540206, "start": 5407.06, "end": 5408.860000000001, "text": " to the actual correct character.", "tokens": [50615, 281, 264, 3539, 3006, 2517, 13, 50705], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1448, "seek": 540206, "start": 5409.06, "end": 5410.860000000001, "text": " You see that the network currently thinks", "tokens": [50715, 509, 536, 300, 264, 3209, 4362, 7309, 50805], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1449, "seek": 540206, "start": 5411.06, "end": 5411.860000000001, "text": " that this next character,", "tokens": [50815, 300, 341, 958, 2517, 11, 50855], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1450, "seek": 540206, "start": 5412.06, "end": 5413.860000000001, "text": " that E following dot,", "tokens": [50865, 300, 462, 3480, 5893, 11, 50955], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1451, "seek": 540206, "start": 5414.06, "end": 5415.860000000001, "text": " is only 1% likely,", "tokens": [50965, 307, 787, 502, 4, 3700, 11, 51055], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1452, "seek": 540206, "start": 5416.06, "end": 5417.860000000001, "text": " which is of course not very good, right?", "tokens": [51065, 597, 307, 295, 1164, 406, 588, 665, 11, 558, 30, 51155], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1453, "seek": 540206, "start": 5418.06, "end": 5419.860000000001, "text": " Because this actually is a training example,", "tokens": [51165, 1436, 341, 767, 307, 257, 3097, 1365, 11, 51255], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1454, "seek": 540206, "start": 5420.06, "end": 5421.860000000001, "text": " and the network thinks that this is currently", "tokens": [51265, 293, 264, 3209, 7309, 300, 341, 307, 4362, 51355], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1455, "seek": 540206, "start": 5422.06, "end": 5422.860000000001, "text": " very, very unlikely.", "tokens": [51365, 588, 11, 588, 17518, 13, 51405], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1456, "seek": 540206, "start": 5423.06, "end": 5424.860000000001, "text": " But that's just because we didn't get very lucky", "tokens": [51415, 583, 300, 311, 445, 570, 321, 994, 380, 483, 588, 6356, 51505], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1457, "seek": 540206, "start": 5425.06, "end": 5426.860000000001, "text": " in generating a good setting of W.", "tokens": [51515, 294, 17746, 257, 665, 3287, 295, 343, 13, 51605], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1458, "seek": 540206, "start": 5427.06, "end": 5429.860000000001, "text": " So right now this network thinks this is unlikely,", "tokens": [51615, 407, 558, 586, 341, 3209, 7309, 341, 307, 17518, 11, 51755], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1459, "seek": 540206, "start": 5430.06, "end": 5431.860000000001, "text": " and 0.01 is not a good outcome.", "tokens": [51765, 293, 1958, 13, 10607, 307, 406, 257, 665, 9700, 13, 51855], "temperature": 0.0, "avg_logprob": -0.14554074003889755, "compression_ratio": 1.82, "no_speech_prob": 0.00013619819947052747}, {"id": 1460, "seek": 543206, "start": 5432.06, "end": 5433.860000000001, "text": " So the log likelihood then", "tokens": [50365, 407, 264, 3565, 22119, 550, 50455], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1461, "seek": 543206, "start": 5434.06, "end": 5435.860000000001, "text": " is very negative.", "tokens": [50465, 307, 588, 3671, 13, 50555], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1462, "seek": 543206, "start": 5436.06, "end": 5438.860000000001, "text": " And the negative log likelihood is very positive.", "tokens": [50565, 400, 264, 3671, 3565, 22119, 307, 588, 3353, 13, 50705], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1463, "seek": 543206, "start": 5439.06, "end": 5442.860000000001, "text": " And so 4 is a very high negative log likelihood,", "tokens": [50715, 400, 370, 1017, 307, 257, 588, 1090, 3671, 3565, 22119, 11, 50905], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1464, "seek": 543206, "start": 5443.06, "end": 5444.860000000001, "text": " and that means we're going to have a high loss.", "tokens": [50915, 293, 300, 1355, 321, 434, 516, 281, 362, 257, 1090, 4470, 13, 51005], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1465, "seek": 543206, "start": 5445.06, "end": 5446.860000000001, "text": " Because what is the loss?", "tokens": [51015, 1436, 437, 307, 264, 4470, 30, 51105], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1466, "seek": 543206, "start": 5447.06, "end": 5449.860000000001, "text": " The loss is just the average negative log likelihood.", "tokens": [51115, 440, 4470, 307, 445, 264, 4274, 3671, 3565, 22119, 13, 51255], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1467, "seek": 543206, "start": 5451.06, "end": 5453.860000000001, "text": " So the second character is E .", "tokens": [51315, 407, 264, 1150, 2517, 307, 462, 2411, 51455], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1468, "seek": 543206, "start": 5454.06, "end": 5455.860000000001, "text": " And you see here that also the network thought", "tokens": [51465, 400, 291, 536, 510, 300, 611, 264, 3209, 1194, 51555], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1469, "seek": 543206, "start": 5456.06, "end": 5458.860000000001, "text": " that M following E is very unlikely, 1%.", "tokens": [51565, 300, 376, 3480, 462, 307, 588, 17518, 11, 502, 6856, 51705], "temperature": 0.0, "avg_logprob": -0.12248323531377883, "compression_ratio": 1.875, "no_speech_prob": 3.559802280506119e-05}, {"id": 1470, "seek": 545886, "start": 5458.86, "end": 5463.66, "text": " For M following M, it thought it was 2%.", "tokens": [50365, 1171, 376, 3480, 376, 11, 309, 1194, 309, 390, 568, 6856, 50605], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1471, "seek": 545886, "start": 5463.86, "end": 5465.66, "text": " And for A following M,", "tokens": [50615, 400, 337, 316, 3480, 376, 11, 50705], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1472, "seek": 545886, "start": 5465.86, "end": 5467.66, "text": " it actually thought it was 7% likely.", "tokens": [50715, 309, 767, 1194, 309, 390, 1614, 4, 3700, 13, 50805], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1473, "seek": 545886, "start": 5467.86, "end": 5469.66, "text": " So just by chance,", "tokens": [50815, 407, 445, 538, 2931, 11, 50905], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1474, "seek": 545886, "start": 5469.86, "end": 5471.66, "text": " this one actually has a pretty good probability,", "tokens": [50915, 341, 472, 767, 575, 257, 1238, 665, 8482, 11, 51005], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1475, "seek": 545886, "start": 5471.86, "end": 5474.66, "text": " and therefore a pretty low negative log likelihood.", "tokens": [51015, 293, 4412, 257, 1238, 2295, 3671, 3565, 22119, 13, 51155], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1476, "seek": 545886, "start": 5474.86, "end": 5477.66, "text": " And finally here, it thought this was 1% likely.", "tokens": [51165, 400, 2721, 510, 11, 309, 1194, 341, 390, 502, 4, 3700, 13, 51305], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1477, "seek": 545886, "start": 5477.86, "end": 5480.66, "text": " So overall, our average negative log likelihood,", "tokens": [51315, 407, 4787, 11, 527, 4274, 3671, 3565, 22119, 11, 51455], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1478, "seek": 545886, "start": 5480.86, "end": 5481.66, "text": " which is the loss,", "tokens": [51465, 597, 307, 264, 4470, 11, 51505], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1479, "seek": 545886, "start": 5481.86, "end": 5484.66, "text": " the total loss that summarizes basically", "tokens": [51515, 264, 3217, 4470, 300, 14611, 5660, 1936, 51655], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1480, "seek": 545886, "start": 5484.86, "end": 5486.66, "text": " how well this network currently works,", "tokens": [51665, 577, 731, 341, 3209, 4362, 1985, 11, 51755], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1481, "seek": 545886, "start": 5486.86, "end": 5488.66, "text": " at least on this one word,", "tokens": [51765, 412, 1935, 322, 341, 472, 1349, 11, 51855], "temperature": 0.0, "avg_logprob": -0.0874790948284559, "compression_ratio": 1.8388429752066116, "no_speech_prob": 0.00016745469474699348}, {"id": 1482, "seek": 548886, "start": 5488.86, "end": 5490.66, "text": " not on the full data set, just the one word,", "tokens": [50365, 406, 322, 264, 1577, 1412, 992, 11, 445, 264, 472, 1349, 11, 50455], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1483, "seek": 548886, "start": 5490.86, "end": 5491.66, "text": " is 3.76,", "tokens": [50465, 307, 805, 13, 25026, 11, 50505], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1484, "seek": 548886, "start": 5491.86, "end": 5493.66, "text": " which is actually a fairly high loss.", "tokens": [50515, 597, 307, 767, 257, 6457, 1090, 4470, 13, 50605], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1485, "seek": 548886, "start": 5493.86, "end": 5496.66, "text": " This is not a very good setting of Ws.", "tokens": [50615, 639, 307, 406, 257, 588, 665, 3287, 295, 343, 82, 13, 50755], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1486, "seek": 548886, "start": 5496.86, "end": 5498.66, "text": " Now here's what we can do.", "tokens": [50765, 823, 510, 311, 437, 321, 393, 360, 13, 50855], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1487, "seek": 548886, "start": 5498.86, "end": 5500.66, "text": " We're currently getting 3.76.", "tokens": [50865, 492, 434, 4362, 1242, 805, 13, 25026, 13, 50955], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1488, "seek": 548886, "start": 5500.86, "end": 5503.66, "text": " We can actually come here and we can change our W.", "tokens": [50965, 492, 393, 767, 808, 510, 293, 321, 393, 1319, 527, 343, 13, 51105], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1489, "seek": 548886, "start": 5503.86, "end": 5505.66, "text": " We can resample it.", "tokens": [51115, 492, 393, 725, 335, 781, 309, 13, 51205], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1490, "seek": 548886, "start": 5505.86, "end": 5508.66, "text": " So let me just add one to have a different seed.", "tokens": [51215, 407, 718, 385, 445, 909, 472, 281, 362, 257, 819, 8871, 13, 51355], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1491, "seek": 548886, "start": 5508.86, "end": 5510.66, "text": " And then we get a different W.", "tokens": [51365, 400, 550, 321, 483, 257, 819, 343, 13, 51455], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1492, "seek": 548886, "start": 5510.86, "end": 5512.66, "text": " And then we can rerun this.", "tokens": [51465, 400, 550, 321, 393, 43819, 409, 341, 13, 51555], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1493, "seek": 548886, "start": 5512.86, "end": 5514.66, "text": " And with this different seed,", "tokens": [51565, 400, 365, 341, 819, 8871, 11, 51655], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1494, "seek": 548886, "start": 5514.86, "end": 5516.66, "text": " with this different setting of Ws,", "tokens": [51665, 365, 341, 819, 3287, 295, 343, 82, 11, 51755], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1495, "seek": 548886, "start": 5516.86, "end": 5518.66, "text": " we now get 3.37.", "tokens": [51765, 321, 586, 483, 805, 13, 12851, 13, 51855], "temperature": 0.0, "avg_logprob": -0.09540294160778891, "compression_ratio": 1.792, "no_speech_prob": 7.95067026047036e-05}, {"id": 1496, "seek": 551886, "start": 5518.86, "end": 5520.66, "text": " So this is a much better W, right?", "tokens": [50365, 407, 341, 307, 257, 709, 1101, 343, 11, 558, 30, 50455], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1497, "seek": 551886, "start": 5520.86, "end": 5522.66, "text": " And it's better because the probabilities", "tokens": [50465, 400, 309, 311, 1101, 570, 264, 33783, 50555], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1498, "seek": 551886, "start": 5522.86, "end": 5525.66, "text": " just happen to come out higher", "tokens": [50565, 445, 1051, 281, 808, 484, 2946, 50705], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1499, "seek": 551886, "start": 5525.86, "end": 5528.66, "text": " for the characters that actually are next.", "tokens": [50715, 337, 264, 4342, 300, 767, 366, 958, 13, 50855], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1500, "seek": 551886, "start": 5528.86, "end": 5531.66, "text": " And so you can imagine actually just resampling this.", "tokens": [50865, 400, 370, 291, 393, 3811, 767, 445, 725, 335, 11970, 341, 13, 51005], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1501, "seek": 551886, "start": 5531.86, "end": 5534.66, "text": " We can try 2.", "tokens": [51015, 492, 393, 853, 568, 13, 51155], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1502, "seek": 551886, "start": 5534.86, "end": 5536.66, "text": " Okay, this was not very good.", "tokens": [51165, 1033, 11, 341, 390, 406, 588, 665, 13, 51255], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1503, "seek": 551886, "start": 5536.86, "end": 5538.66, "text": " Let's try one more.", "tokens": [51265, 961, 311, 853, 472, 544, 13, 51355], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1504, "seek": 551886, "start": 5538.86, "end": 5540.66, "text": " We can try 3.", "tokens": [51365, 492, 393, 853, 805, 13, 51455], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1505, "seek": 551886, "start": 5540.86, "end": 5542.66, "text": " Okay, this was a terrible setting", "tokens": [51465, 1033, 11, 341, 390, 257, 6237, 3287, 51555], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1506, "seek": 551886, "start": 5542.86, "end": 5544.66, "text": " because we have a very high loss.", "tokens": [51565, 570, 321, 362, 257, 588, 1090, 4470, 13, 51655], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1507, "seek": 551886, "start": 5544.86, "end": 5547.66, "text": " So anyway, I'm going to erase this.", "tokens": [51665, 407, 4033, 11, 286, 478, 516, 281, 23525, 341, 13, 51805], "temperature": 0.0, "avg_logprob": -0.10594100626105936, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.0004235038359183818}, {"id": 1508, "seek": 554886, "start": 5548.86, "end": 5550.66, "text": " What I'm doing here,", "tokens": [50365, 708, 286, 478, 884, 510, 11, 50455], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1509, "seek": 554886, "start": 5550.86, "end": 5552.66, "text": " which is just guess and check", "tokens": [50465, 597, 307, 445, 2041, 293, 1520, 50555], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1510, "seek": 554886, "start": 5552.86, "end": 5554.66, "text": " of randomly assigning parameters", "tokens": [50565, 295, 16979, 49602, 9834, 50655], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1511, "seek": 554886, "start": 5554.86, "end": 5556.66, "text": " and seeing if the network is good,", "tokens": [50665, 293, 2577, 498, 264, 3209, 307, 665, 11, 50755], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1512, "seek": 554886, "start": 5556.86, "end": 5558.66, "text": " that is amateur hour.", "tokens": [50765, 300, 307, 29339, 1773, 13, 50855], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1513, "seek": 554886, "start": 5558.86, "end": 5560.66, "text": " That's not how you optimize in neural net.", "tokens": [50865, 663, 311, 406, 577, 291, 19719, 294, 18161, 2533, 13, 50955], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1514, "seek": 554886, "start": 5560.86, "end": 5562.66, "text": " The way you optimize in neural net", "tokens": [50965, 440, 636, 291, 19719, 294, 18161, 2533, 51055], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1515, "seek": 554886, "start": 5562.86, "end": 5564.66, "text": " is you start with some random guess", "tokens": [51065, 307, 291, 722, 365, 512, 4974, 2041, 51155], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1516, "seek": 554886, "start": 5564.86, "end": 5566.66, "text": " and we're going to commit to this one,", "tokens": [51165, 293, 321, 434, 516, 281, 5599, 281, 341, 472, 11, 51255], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1517, "seek": 554886, "start": 5566.86, "end": 5568.66, "text": " even though it's not very good.", "tokens": [51265, 754, 1673, 309, 311, 406, 588, 665, 13, 51355], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1518, "seek": 554886, "start": 5568.86, "end": 5570.66, "text": " But now the big deal is we have a loss function.", "tokens": [51365, 583, 586, 264, 955, 2028, 307, 321, 362, 257, 4470, 2445, 13, 51455], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1519, "seek": 554886, "start": 5570.86, "end": 5573.66, "text": " So this loss is made up only of differentiable operations.", "tokens": [51465, 407, 341, 4470, 307, 1027, 493, 787, 295, 819, 9364, 7705, 13, 51605], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1520, "seek": 554886, "start": 5573.86, "end": 5576.66, "text": " And we can minimize the loss by tuning Ws", "tokens": [51615, 400, 321, 393, 17522, 264, 4470, 538, 15164, 343, 82, 51755], "temperature": 0.0, "avg_logprob": -0.10221180879980102, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.000383136939490214}, {"id": 1521, "seek": 557666, "start": 5576.66, "end": 5580.46, "text": " by computing the gradients of the loss", "tokens": [50365, 538, 15866, 264, 2771, 2448, 295, 264, 4470, 50555], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1522, "seek": 557666, "start": 5580.66, "end": 5583.46, "text": " with respect to these W matrices.", "tokens": [50565, 365, 3104, 281, 613, 343, 32284, 13, 50705], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1523, "seek": 557666, "start": 5583.66, "end": 5586.46, "text": " And so then we can tune W to minimize the loss", "tokens": [50715, 400, 370, 550, 321, 393, 10864, 343, 281, 17522, 264, 4470, 50855], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1524, "seek": 557666, "start": 5586.66, "end": 5588.46, "text": " and find a good setting of W", "tokens": [50865, 293, 915, 257, 665, 3287, 295, 343, 50955], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1525, "seek": 557666, "start": 5588.66, "end": 5590.46, "text": " using gradient based optimization.", "tokens": [50965, 1228, 16235, 2361, 19618, 13, 51055], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1526, "seek": 557666, "start": 5590.66, "end": 5592.46, "text": " So let's see how that will work.", "tokens": [51065, 407, 718, 311, 536, 577, 300, 486, 589, 13, 51155], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1527, "seek": 557666, "start": 5592.66, "end": 5594.46, "text": " Now things are actually going to look", "tokens": [51165, 823, 721, 366, 767, 516, 281, 574, 51255], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1528, "seek": 557666, "start": 5594.66, "end": 5596.46, "text": " almost identical to what we had with micrograd.", "tokens": [51265, 1920, 14800, 281, 437, 321, 632, 365, 4532, 7165, 13, 51355], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1529, "seek": 557666, "start": 5596.66, "end": 5600.46, "text": " So here I pulled up the lecture from micrograd,", "tokens": [51365, 407, 510, 286, 7373, 493, 264, 7991, 490, 4532, 7165, 11, 51555], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1530, "seek": 557666, "start": 5600.66, "end": 5602.46, "text": " the notebook that's from this repository.", "tokens": [51565, 264, 21060, 300, 311, 490, 341, 25841, 13, 51655], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1531, "seek": 557666, "start": 5602.66, "end": 5604.46, "text": " And when I scroll all the way to the end", "tokens": [51665, 400, 562, 286, 11369, 439, 264, 636, 281, 264, 917, 51755], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1532, "seek": 557666, "start": 5604.66, "end": 5606.46, "text": " where we left off with micrograd,", "tokens": [51765, 689, 321, 1411, 766, 365, 4532, 7165, 11, 51855], "temperature": 0.0, "avg_logprob": -0.0869210836455578, "compression_ratio": 1.7296296296296296, "no_speech_prob": 0.0002143573365174234}, {"id": 1533, "seek": 560646, "start": 5606.46, "end": 5608.26, "text": " we had something very, very similar.", "tokens": [50365, 321, 632, 746, 588, 11, 588, 2531, 13, 50455], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1534, "seek": 560646, "start": 5608.46, "end": 5610.26, "text": " We had a number of input examples.", "tokens": [50465, 492, 632, 257, 1230, 295, 4846, 5110, 13, 50555], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1535, "seek": 560646, "start": 5610.46, "end": 5613.26, "text": " In this case, we had four input examples inside Xs.", "tokens": [50565, 682, 341, 1389, 11, 321, 632, 1451, 4846, 5110, 1854, 1783, 82, 13, 50705], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1536, "seek": 560646, "start": 5613.46, "end": 5617.26, "text": " And we had their targets, desired targets.", "tokens": [50715, 400, 321, 632, 641, 12911, 11, 14721, 12911, 13, 50905], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1537, "seek": 560646, "start": 5617.46, "end": 5619.26, "text": " Just like here, we have our Xs now,", "tokens": [50915, 1449, 411, 510, 11, 321, 362, 527, 1783, 82, 586, 11, 51005], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1538, "seek": 560646, "start": 5619.46, "end": 5620.26, "text": " but we have five of them.", "tokens": [51015, 457, 321, 362, 1732, 295, 552, 13, 51055], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1539, "seek": 560646, "start": 5620.46, "end": 5623.26, "text": " And they're now integers instead of vectors.", "tokens": [51065, 400, 436, 434, 586, 41674, 2602, 295, 18875, 13, 51205], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1540, "seek": 560646, "start": 5623.46, "end": 5626.26, "text": " But we're going to convert our integers to vectors,", "tokens": [51215, 583, 321, 434, 516, 281, 7620, 527, 41674, 281, 18875, 11, 51355], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1541, "seek": 560646, "start": 5626.46, "end": 5629.26, "text": " except our vectors will be 27 large", "tokens": [51365, 3993, 527, 18875, 486, 312, 7634, 2416, 51505], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1542, "seek": 560646, "start": 5629.46, "end": 5631.26, "text": " instead of three large.", "tokens": [51515, 2602, 295, 1045, 2416, 13, 51605], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1543, "seek": 560646, "start": 5631.46, "end": 5634.26, "text": " And then here what we did is first we did a forward pass", "tokens": [51615, 400, 550, 510, 437, 321, 630, 307, 700, 321, 630, 257, 2128, 1320, 51755], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1544, "seek": 560646, "start": 5634.46, "end": 5636.26, "text": " where we ran a neural net", "tokens": [51765, 689, 321, 5872, 257, 18161, 2533, 51855], "temperature": 0.0, "avg_logprob": -0.1000495709870991, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.0005098239053040743}, {"id": 1545, "seek": 563626, "start": 5636.26, "end": 5640.06, "text": " from all of the inputs to get predictions.", "tokens": [50365, 490, 439, 295, 264, 15743, 281, 483, 21264, 13, 50555], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1546, "seek": 563626, "start": 5640.26, "end": 5642.06, "text": " Our neural net at the time, this NFX,", "tokens": [50565, 2621, 18161, 2533, 412, 264, 565, 11, 341, 13576, 55, 11, 50655], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1547, "seek": 563626, "start": 5642.26, "end": 5645.06, "text": " was a multi-layer perceptron.", "tokens": [50665, 390, 257, 4825, 12, 8376, 260, 43276, 2044, 13, 50805], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1548, "seek": 563626, "start": 5645.26, "end": 5647.06, "text": " Our neural net is going to look different", "tokens": [50815, 2621, 18161, 2533, 307, 516, 281, 574, 819, 50905], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1549, "seek": 563626, "start": 5647.26, "end": 5650.06, "text": " because our neural net is just a single layer,", "tokens": [50915, 570, 527, 18161, 2533, 307, 445, 257, 2167, 4583, 11, 51055], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1550, "seek": 563626, "start": 5650.26, "end": 5653.06, "text": " single linear layer followed by a softmax.", "tokens": [51065, 2167, 8213, 4583, 6263, 538, 257, 2787, 41167, 13, 51205], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1551, "seek": 563626, "start": 5653.26, "end": 5655.06, "text": " So that's our neural net.", "tokens": [51215, 407, 300, 311, 527, 18161, 2533, 13, 51305], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1552, "seek": 563626, "start": 5655.26, "end": 5658.06, "text": " And the loss here was the mean squared error.", "tokens": [51315, 400, 264, 4470, 510, 390, 264, 914, 8889, 6713, 13, 51455], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1553, "seek": 563626, "start": 5658.26, "end": 5660.06, "text": " So we simply subtracted the prediction", "tokens": [51465, 407, 321, 2935, 16390, 292, 264, 17630, 51555], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1554, "seek": 563626, "start": 5660.26, "end": 5662.06, "text": " from the ground truth and squared it", "tokens": [51565, 490, 264, 2727, 3494, 293, 8889, 309, 51655], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1555, "seek": 563626, "start": 5662.26, "end": 5663.06, "text": " and summed it all up.", "tokens": [51665, 293, 2408, 1912, 309, 439, 493, 13, 51705], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1556, "seek": 563626, "start": 5663.26, "end": 5664.06, "text": " And that was the loss.", "tokens": [51715, 400, 300, 390, 264, 4470, 13, 51755], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1557, "seek": 563626, "start": 5664.26, "end": 5666.06, "text": " And loss was the single number", "tokens": [51765, 400, 4470, 390, 264, 2167, 1230, 51855], "temperature": 0.0, "avg_logprob": -0.08434978883657883, "compression_ratio": 1.8274509803921568, "no_speech_prob": 0.00016782921738922596}, {"id": 1558, "seek": 566606, "start": 5666.06, "end": 5668.860000000001, "text": " that summarized the quality of the neural net.", "tokens": [50365, 300, 14611, 1602, 264, 3125, 295, 264, 18161, 2533, 13, 50505], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1559, "seek": 566606, "start": 5669.06, "end": 5671.860000000001, "text": " And when loss is low, like almost zero,", "tokens": [50515, 400, 562, 4470, 307, 2295, 11, 411, 1920, 4018, 11, 50655], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1560, "seek": 566606, "start": 5672.06, "end": 5675.860000000001, "text": " that means the neural net is predicting correctly.", "tokens": [50665, 300, 1355, 264, 18161, 2533, 307, 32884, 8944, 13, 50855], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1561, "seek": 566606, "start": 5676.06, "end": 5677.860000000001, "text": " So we had a single number", "tokens": [50865, 407, 321, 632, 257, 2167, 1230, 50955], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1562, "seek": 566606, "start": 5678.06, "end": 5681.860000000001, "text": " that summarized the performance of the neural net.", "tokens": [50965, 300, 14611, 1602, 264, 3389, 295, 264, 18161, 2533, 13, 51155], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1563, "seek": 566606, "start": 5682.06, "end": 5683.860000000001, "text": " And everything here was differentiable", "tokens": [51165, 400, 1203, 510, 390, 819, 9364, 51255], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1564, "seek": 566606, "start": 5684.06, "end": 5686.860000000001, "text": " and was stored in a massive compute graph.", "tokens": [51265, 293, 390, 12187, 294, 257, 5994, 14722, 4295, 13, 51405], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1565, "seek": 566606, "start": 5687.06, "end": 5689.860000000001, "text": " And then we iterated over all the parameters.", "tokens": [51415, 400, 550, 321, 17138, 770, 670, 439, 264, 9834, 13, 51555], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1566, "seek": 566606, "start": 5690.06, "end": 5691.860000000001, "text": " We made sure that the gradients are set to zero.", "tokens": [51565, 492, 1027, 988, 300, 264, 2771, 2448, 366, 992, 281, 4018, 13, 51655], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1567, "seek": 566606, "start": 5692.06, "end": 5693.860000000001, "text": " And we called loss.backward.", "tokens": [51665, 400, 321, 1219, 4470, 13, 3207, 1007, 13, 51755], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1568, "seek": 566606, "start": 5694.06, "end": 5695.860000000001, "text": " And loss.backward", "tokens": [51765, 400, 4470, 13, 3207, 1007, 51855], "temperature": 0.0, "avg_logprob": -0.07583828132693507, "compression_ratio": 1.7661290322580645, "no_speech_prob": 0.00013650278560817242}, {"id": 1569, "seek": 569586, "start": 5695.86, "end": 5697.66, "text": " and we iterated backpropagation", "tokens": [50365, 293, 321, 17138, 770, 646, 79, 1513, 559, 399, 50455], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1570, "seek": 569586, "start": 5697.86, "end": 5699.66, "text": " at the final output node of loss.", "tokens": [50465, 412, 264, 2572, 5598, 9984, 295, 4470, 13, 50555], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1571, "seek": 569586, "start": 5699.86, "end": 5701.66, "text": " So remember these expressions?", "tokens": [50565, 407, 1604, 613, 15277, 30, 50655], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1572, "seek": 569586, "start": 5701.86, "end": 5703.66, "text": " We had loss all the way at the end.", "tokens": [50665, 492, 632, 4470, 439, 264, 636, 412, 264, 917, 13, 50755], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1573, "seek": 569586, "start": 5703.86, "end": 5706.66, "text": " We start backpropagation and we went all the way back.", "tokens": [50765, 492, 722, 646, 79, 1513, 559, 399, 293, 321, 1437, 439, 264, 636, 646, 13, 50905], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1574, "seek": 569586, "start": 5706.86, "end": 5708.66, "text": " And we made sure that we populated", "tokens": [50915, 400, 321, 1027, 988, 300, 321, 32998, 51005], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1575, "seek": 569586, "start": 5708.86, "end": 5710.66, "text": " all the parameters .grad.", "tokens": [51015, 439, 264, 9834, 2411, 7165, 13, 51105], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1576, "seek": 569586, "start": 5710.86, "end": 5712.66, "text": " So .grad started at zero,", "tokens": [51115, 407, 2411, 7165, 1409, 412, 4018, 11, 51205], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1577, "seek": 569586, "start": 5712.86, "end": 5714.66, "text": " but backpropagation filled it in.", "tokens": [51215, 457, 646, 79, 1513, 559, 399, 6412, 309, 294, 13, 51305], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1578, "seek": 569586, "start": 5714.86, "end": 5715.66, "text": " And then in the update,", "tokens": [51315, 400, 550, 294, 264, 5623, 11, 51355], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1579, "seek": 569586, "start": 5715.86, "end": 5717.66, "text": " we iterated over all the parameters", "tokens": [51365, 321, 17138, 770, 670, 439, 264, 9834, 51455], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1580, "seek": 569586, "start": 5717.86, "end": 5719.66, "text": " and we simply did a parameter update", "tokens": [51465, 293, 321, 2935, 630, 257, 13075, 5623, 51555], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1581, "seek": 569586, "start": 5719.86, "end": 5723.66, "text": " where every single element of our parameters", "tokens": [51565, 689, 633, 2167, 4478, 295, 527, 9834, 51755], "temperature": 0.0, "avg_logprob": -0.11064156618985263, "compression_ratio": 1.9313304721030042, "no_speech_prob": 0.0008782480726949871}, {"id": 1582, "seek": 572366, "start": 5723.66, "end": 5727.46, "text": " was notched in the opposite direction of the gradient.", "tokens": [50365, 390, 406, 19318, 294, 264, 6182, 3513, 295, 264, 16235, 13, 50555], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1583, "seek": 572366, "start": 5727.66, "end": 5731.66, "text": " And so we're going to do the exact same thing here.", "tokens": [50565, 400, 370, 321, 434, 516, 281, 360, 264, 1900, 912, 551, 510, 13, 50765], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1584, "seek": 572366, "start": 5731.86, "end": 5738.46, "text": " So I'm going to pull this up on the side here", "tokens": [50775, 407, 286, 478, 516, 281, 2235, 341, 493, 322, 264, 1252, 510, 51105], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1585, "seek": 572366, "start": 5738.66, "end": 5739.86, "text": " so that we have it available.", "tokens": [51115, 370, 300, 321, 362, 309, 2435, 13, 51175], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1586, "seek": 572366, "start": 5740.0599999999995, "end": 5742.0599999999995, "text": " And we're actually going to do the exact same thing.", "tokens": [51185, 400, 321, 434, 767, 516, 281, 360, 264, 1900, 912, 551, 13, 51285], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1587, "seek": 572366, "start": 5742.26, "end": 5744.0599999999995, "text": " So this was the forward pass.", "tokens": [51295, 407, 341, 390, 264, 2128, 1320, 13, 51385], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1588, "seek": 572366, "start": 5744.26, "end": 5746.86, "text": " So we did this.", "tokens": [51395, 407, 321, 630, 341, 13, 51525], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1589, "seek": 572366, "start": 5747.0599999999995, "end": 5748.86, "text": " And props is our YPred.", "tokens": [51535, 400, 26173, 307, 527, 398, 47, 986, 13, 51625], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1590, "seek": 572366, "start": 5749.0599999999995, "end": 5750.46, "text": " So now we have to evaluate the loss,", "tokens": [51635, 407, 586, 321, 362, 281, 13059, 264, 4470, 11, 51705], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1591, "seek": 572366, "start": 5750.66, "end": 5752.46, "text": " but we're not using the mean squared error.", "tokens": [51715, 457, 321, 434, 406, 1228, 264, 914, 8889, 6713, 13, 51805], "temperature": 0.0, "avg_logprob": -0.1194193774256213, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.00013710191706195474}, {"id": 1592, "seek": 575246, "start": 5752.46, "end": 5754.06, "text": " We're using the negative log likelihood", "tokens": [50365, 492, 434, 1228, 264, 3671, 3565, 22119, 50445], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1593, "seek": 575246, "start": 5754.26, "end": 5755.46, "text": " because we are doing classification.", "tokens": [50455, 570, 321, 366, 884, 21538, 13, 50515], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1594, "seek": 575246, "start": 5755.66, "end": 5758.86, "text": " We're not doing regression as it's called.", "tokens": [50525, 492, 434, 406, 884, 24590, 382, 309, 311, 1219, 13, 50685], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1595, "seek": 575246, "start": 5759.06, "end": 5762.26, "text": " So here we want to calculate loss.", "tokens": [50695, 407, 510, 321, 528, 281, 8873, 4470, 13, 50855], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1596, "seek": 575246, "start": 5762.46, "end": 5764.46, "text": " Now, the way we calculate it is just", "tokens": [50865, 823, 11, 264, 636, 321, 8873, 309, 307, 445, 50965], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1597, "seek": 575246, "start": 5764.66, "end": 5767.06, "text": " this average negative log likelihood.", "tokens": [50975, 341, 4274, 3671, 3565, 22119, 13, 51095], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1598, "seek": 575246, "start": 5767.26, "end": 5770.58, "text": " Now, this props here", "tokens": [51105, 823, 11, 341, 26173, 510, 51271], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1599, "seek": 575246, "start": 5770.78, "end": 5773.14, "text": " has a shape of five by twenty seven.", "tokens": [51281, 575, 257, 3909, 295, 1732, 538, 7699, 3407, 13, 51399], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1600, "seek": 575246, "start": 5773.34, "end": 5774.86, "text": " And so to get all that,", "tokens": [51409, 400, 370, 281, 483, 439, 300, 11, 51485], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1601, "seek": 575246, "start": 5775.06, "end": 5777.54, "text": " we basically want to pluck out the probabilities", "tokens": [51495, 321, 1936, 528, 281, 41514, 484, 264, 33783, 51619], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1602, "seek": 575246, "start": 5777.74, "end": 5779.94, "text": " at the correct indices here.", "tokens": [51629, 412, 264, 3006, 43840, 510, 13, 51739], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1603, "seek": 575246, "start": 5780.14, "end": 5782.26, "text": " So in particular, because the labels are", "tokens": [51749, 407, 294, 1729, 11, 570, 264, 16949, 366, 51855], "temperature": 0.0, "avg_logprob": -0.11834814673975895, "compression_ratio": 1.7269076305220883, "no_speech_prob": 7.749560609227046e-05}, {"id": 1604, "seek": 578246, "start": 5782.46, "end": 5786.34, "text": " stored here in the array wise, basically what we're after is for the first", "tokens": [50365, 12187, 510, 294, 264, 10225, 10829, 11, 1936, 437, 321, 434, 934, 307, 337, 264, 700, 50559], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1605, "seek": 578246, "start": 5786.54, "end": 5790.82, "text": " example, we're looking at probability of five right at index five.", "tokens": [50569, 1365, 11, 321, 434, 1237, 412, 8482, 295, 1732, 558, 412, 8186, 1732, 13, 50783], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1606, "seek": 578246, "start": 5791.02, "end": 5796.1, "text": " For the second example, at the second row or row index one,", "tokens": [50793, 1171, 264, 1150, 1365, 11, 412, 264, 1150, 5386, 420, 5386, 8186, 472, 11, 51047], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1607, "seek": 578246, "start": 5796.3, "end": 5800.14, "text": " we are interested in the probability assigned to index 13.", "tokens": [51057, 321, 366, 3102, 294, 264, 8482, 13279, 281, 8186, 3705, 13, 51249], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1608, "seek": 578246, "start": 5800.34, "end": 5803.3, "text": " At the second example, we also have 13.", "tokens": [51259, 1711, 264, 1150, 1365, 11, 321, 611, 362, 3705, 13, 51407], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1609, "seek": 578246, "start": 5803.5, "end": 5807.26, "text": " At the third row, we want one.", "tokens": [51417, 1711, 264, 2636, 5386, 11, 321, 528, 472, 13, 51605], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1610, "seek": 578246, "start": 5807.46, "end": 5811.14, "text": " And at the last row, which is four, we want zero.", "tokens": [51615, 400, 412, 264, 1036, 5386, 11, 597, 307, 1451, 11, 321, 528, 4018, 13, 51799], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1611, "seek": 578246, "start": 5811.34, "end": 5812.46, "text": " So these are the probabilities.", "tokens": [51809, 407, 613, 366, 264, 33783, 13, 51865], "temperature": 0.0, "avg_logprob": -0.17469868359265026, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00030398950912058353}, {"id": 1612, "seek": 581246, "start": 5812.66, "end": 5813.94, "text": " We're interested in.", "tokens": [50375, 492, 434, 3102, 294, 13, 50439], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1613, "seek": 581246, "start": 5814.14, "end": 5818.58, "text": " And you can see that they're not amazing as we saw above.", "tokens": [50449, 400, 291, 393, 536, 300, 436, 434, 406, 2243, 382, 321, 1866, 3673, 13, 50671], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1614, "seek": 581246, "start": 5818.78, "end": 5820.1, "text": " So these are the probabilities we want,", "tokens": [50681, 407, 613, 366, 264, 33783, 321, 528, 11, 50747], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1615, "seek": 581246, "start": 5820.3, "end": 5824.38, "text": " but we want like a more efficient way to access these probabilities,", "tokens": [50757, 457, 321, 528, 411, 257, 544, 7148, 636, 281, 2105, 613, 33783, 11, 50961], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1616, "seek": 581246, "start": 5824.58, "end": 5826.94, "text": " not just listing them out in a tuple like this.", "tokens": [50971, 406, 445, 22161, 552, 484, 294, 257, 2604, 781, 411, 341, 13, 51089], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1617, "seek": 581246, "start": 5827.14, "end": 5829.18, "text": " So it turns out that the way to do this in PyTorch,", "tokens": [51099, 407, 309, 4523, 484, 300, 264, 636, 281, 360, 341, 294, 9953, 51, 284, 339, 11, 51201], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1618, "seek": 581246, "start": 5829.38, "end": 5835.14, "text": " one of the ways, at least, is we can basically pass in all of these", "tokens": [51211, 472, 295, 264, 2098, 11, 412, 1935, 11, 307, 321, 393, 1936, 1320, 294, 439, 295, 613, 51499], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1619, "seek": 581246, "start": 5836.82, "end": 5839.58, "text": " sorry about that, all of these", "tokens": [51583, 2597, 466, 300, 11, 439, 295, 613, 51721], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1620, "seek": 581246, "start": 5839.78, "end": 5842.14, "text": " integers in the vectors.", "tokens": [51731, 41674, 294, 264, 18875, 13, 51849], "temperature": 0.0, "avg_logprob": -0.1873403582079657, "compression_ratio": 1.7564102564102564, "no_speech_prob": 0.0008496001246385276}, {"id": 1621, "seek": 584246, "start": 5842.66, "end": 5847.02, "text": " So these ones, you see how they're just zero, one, two, three, four.", "tokens": [50375, 407, 613, 2306, 11, 291, 536, 577, 436, 434, 445, 4018, 11, 472, 11, 732, 11, 1045, 11, 1451, 13, 50593], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1622, "seek": 584246, "start": 5847.22, "end": 5852.74, "text": " We can actually create that using MP, not MP, sorry, torch.arrange of five.", "tokens": [50603, 492, 393, 767, 1884, 300, 1228, 14146, 11, 406, 14146, 11, 2597, 11, 27822, 13, 2284, 933, 295, 1732, 13, 50879], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1623, "seek": 584246, "start": 5852.94, "end": 5854.3, "text": " Zero, one, two, three, four.", "tokens": [50889, 17182, 11, 472, 11, 732, 11, 1045, 11, 1451, 13, 50957], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1624, "seek": 584246, "start": 5854.5, "end": 5858.18, "text": " So we can index here with torch.arrange of five.", "tokens": [50967, 407, 321, 393, 8186, 510, 365, 27822, 13, 2284, 933, 295, 1732, 13, 51151], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1625, "seek": 584246, "start": 5858.38, "end": 5861.06, "text": " And here we index with wise.", "tokens": [51161, 400, 510, 321, 8186, 365, 10829, 13, 51295], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1626, "seek": 584246, "start": 5861.26, "end": 5865.54, "text": " And you see that that gives us exactly these numbers.", "tokens": [51305, 400, 291, 536, 300, 300, 2709, 505, 2293, 613, 3547, 13, 51519], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1627, "seek": 584246, "start": 5869.1, "end": 5871.78, "text": " So that plucks up the probabilities of that.", "tokens": [51697, 407, 300, 499, 15493, 493, 264, 33783, 295, 300, 13, 51831], "temperature": 0.0, "avg_logprob": -0.21501241666134271, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.0010757920099422336}, {"id": 1628, "seek": 587178, "start": 5871.78, "end": 5876.139999999999, "text": " That the neural network assigns to the correct next character.", "tokens": [50365, 663, 264, 18161, 3209, 6269, 82, 281, 264, 3006, 958, 2517, 13, 50583], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1629, "seek": 587178, "start": 5876.34, "end": 5879.7, "text": " Now we take those probabilities and we don't we actually look at the log", "tokens": [50593, 823, 321, 747, 729, 33783, 293, 321, 500, 380, 321, 767, 574, 412, 264, 3565, 50761], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1630, "seek": 587178, "start": 5879.9, "end": 5883.34, "text": " probability, so we want to dot log", "tokens": [50771, 8482, 11, 370, 321, 528, 281, 5893, 3565, 50943], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1631, "seek": 587178, "start": 5883.54, "end": 5886.62, "text": " and then we want to just average that up.", "tokens": [50953, 293, 550, 321, 528, 281, 445, 4274, 300, 493, 13, 51107], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1632, "seek": 587178, "start": 5886.82, "end": 5889.099999999999, "text": " So take the mean of all of that and then", "tokens": [51117, 407, 747, 264, 914, 295, 439, 295, 300, 293, 550, 51231], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1633, "seek": 587178, "start": 5889.3, "end": 5894.099999999999, "text": " it's the negative average log likelihood that is the loss.", "tokens": [51241, 309, 311, 264, 3671, 4274, 3565, 22119, 300, 307, 264, 4470, 13, 51481], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1634, "seek": 587178, "start": 5894.3, "end": 5897.86, "text": " So the loss here is three point seven something.", "tokens": [51491, 407, 264, 4470, 510, 307, 1045, 935, 3407, 746, 13, 51669], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1635, "seek": 587178, "start": 5898.0599999999995, "end": 5901.78, "text": " And you see that this loss, three point seven six, three point seven six is", "tokens": [51679, 400, 291, 536, 300, 341, 4470, 11, 1045, 935, 3407, 2309, 11, 1045, 935, 3407, 2309, 307, 51865], "temperature": 0.0, "avg_logprob": -0.15564851503114444, "compression_ratio": 1.8755364806866952, "no_speech_prob": 0.000238132182857953}, {"id": 1636, "seek": 590178, "start": 5901.98, "end": 5906.3, "text": " exactly as we've obtained before, but this is a vectorized form of that expression.", "tokens": [50375, 2293, 382, 321, 600, 14879, 949, 11, 457, 341, 307, 257, 8062, 1602, 1254, 295, 300, 6114, 13, 50591], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1637, "seek": 590178, "start": 5906.5, "end": 5912.9, "text": " So we get the same loss and the same loss we can consider sort of as part of this", "tokens": [50601, 407, 321, 483, 264, 912, 4470, 293, 264, 912, 4470, 321, 393, 1949, 1333, 295, 382, 644, 295, 341, 50921], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1638, "seek": 590178, "start": 5913.099999999999, "end": 5916.179999999999, "text": " forward pass and we've achieved here now loss.", "tokens": [50931, 2128, 1320, 293, 321, 600, 11042, 510, 586, 4470, 13, 51085], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1639, "seek": 590178, "start": 5916.38, "end": 5918.38, "text": " OK, so we made our way all the way to loss.", "tokens": [51095, 2264, 11, 370, 321, 1027, 527, 636, 439, 264, 636, 281, 4470, 13, 51195], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1640, "seek": 590178, "start": 5918.58, "end": 5919.9, "text": " We've defined the forward pass.", "tokens": [51205, 492, 600, 7642, 264, 2128, 1320, 13, 51271], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1641, "seek": 590178, "start": 5920.099999999999, "end": 5922.099999999999, "text": " We forwarded the network and the loss.", "tokens": [51281, 492, 2128, 292, 264, 3209, 293, 264, 4470, 13, 51381], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1642, "seek": 590178, "start": 5922.3, "end": 5924.179999999999, "text": " Now we're ready to do the backward pass.", "tokens": [51391, 823, 321, 434, 1919, 281, 360, 264, 23897, 1320, 13, 51485], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1643, "seek": 590178, "start": 5924.38, "end": 5926.42, "text": " So backward pass.", "tokens": [51495, 407, 23897, 1320, 13, 51597], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1644, "seek": 590178, "start": 5928.099999999999, "end": 5930.78, "text": " We want to first make sure that all the gradients are reset.", "tokens": [51681, 492, 528, 281, 700, 652, 988, 300, 439, 264, 2771, 2448, 366, 14322, 13, 51815], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1645, "seek": 590178, "start": 5930.98, "end": 5931.58, "text": " So they're at zero.", "tokens": [51825, 407, 436, 434, 412, 4018, 13, 51855], "temperature": 0.0, "avg_logprob": -0.13256685970393756, "compression_ratio": 1.8313725490196078, "no_speech_prob": 0.0012994299177080393}, {"id": 1646, "seek": 593178, "start": 5931.98, "end": 5935.98, "text": " Now, in PyTorch, you can set the gradients to be zero,", "tokens": [50375, 823, 11, 294, 9953, 51, 284, 339, 11, 291, 393, 992, 264, 2771, 2448, 281, 312, 4018, 11, 50575], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1647, "seek": 593178, "start": 5936.179999999999, "end": 5939.94, "text": " but you can also just set it to none and setting it to none is more efficient.", "tokens": [50585, 457, 291, 393, 611, 445, 992, 309, 281, 6022, 293, 3287, 309, 281, 6022, 307, 544, 7148, 13, 50773], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1648, "seek": 593178, "start": 5940.139999999999, "end": 5945.3, "text": " And PyTorch will interpret none as like a lack of a gradient and is the same as zeros.", "tokens": [50783, 400, 9953, 51, 284, 339, 486, 7302, 6022, 382, 411, 257, 5011, 295, 257, 16235, 293, 307, 264, 912, 382, 35193, 13, 51041], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1649, "seek": 593178, "start": 5945.5, "end": 5949.5, "text": " So this is a way to set to zero the gradient.", "tokens": [51051, 407, 341, 307, 257, 636, 281, 992, 281, 4018, 264, 16235, 13, 51251], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1650, "seek": 593178, "start": 5949.7, "end": 5953.7, "text": " And now we do loss.backward.", "tokens": [51261, 400, 586, 321, 360, 4470, 13, 3207, 1007, 13, 51461], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1651, "seek": 593178, "start": 5953.9, "end": 5956.9, "text": " Before we do loss.backward, we need one more thing.", "tokens": [51471, 4546, 321, 360, 4470, 13, 3207, 1007, 11, 321, 643, 472, 544, 551, 13, 51621], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1652, "seek": 593178, "start": 5957.099999999999, "end": 5960.78, "text": " If you remember from micrograd, PyTorch actually requires", "tokens": [51631, 759, 291, 1604, 490, 4532, 7165, 11, 9953, 51, 284, 339, 767, 7029, 51815], "temperature": 0.0, "avg_logprob": -0.20391795674308402, "compression_ratio": 1.7234042553191489, "no_speech_prob": 8.797096234047785e-05}, {"id": 1653, "seek": 596078, "start": 5960.78, "end": 5965.0199999999995, "text": " that we pass in requires grad is true", "tokens": [50365, 300, 321, 1320, 294, 7029, 2771, 307, 2074, 50577], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1654, "seek": 596078, "start": 5965.219999999999, "end": 5969.74, "text": " so that we tell PyTorch that we are interested in calculating gradients", "tokens": [50587, 370, 300, 321, 980, 9953, 51, 284, 339, 300, 321, 366, 3102, 294, 28258, 2771, 2448, 50813], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1655, "seek": 596078, "start": 5969.94, "end": 5973.34, "text": " for this leaf tensor by default, this is false.", "tokens": [50823, 337, 341, 10871, 40863, 538, 7576, 11, 341, 307, 7908, 13, 50993], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1656, "seek": 596078, "start": 5973.54, "end": 5980.34, "text": " So let me recalculate with that and then set to none and loss.backward.", "tokens": [51003, 407, 718, 385, 850, 304, 2444, 473, 365, 300, 293, 550, 992, 281, 6022, 293, 4470, 13, 3207, 1007, 13, 51343], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1657, "seek": 596078, "start": 5980.74, "end": 5984.259999999999, "text": " Now, something magical happened when loss.backward was run", "tokens": [51363, 823, 11, 746, 12066, 2011, 562, 4470, 13, 3207, 1007, 390, 1190, 51539], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1658, "seek": 596078, "start": 5984.46, "end": 5989.9, "text": " because PyTorch, just like micrograd, when we did the forward pass here, it keeps", "tokens": [51549, 570, 9953, 51, 284, 339, 11, 445, 411, 4532, 7165, 11, 562, 321, 630, 264, 2128, 1320, 510, 11, 309, 5965, 51821], "temperature": 0.0, "avg_logprob": -0.17712177949793198, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0003335679939482361}, {"id": 1659, "seek": 598990, "start": 5989.9, "end": 5992.139999999999, "text": " track of all the operations under the hood.", "tokens": [50365, 2837, 295, 439, 264, 7705, 833, 264, 13376, 13, 50477], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1660, "seek": 598990, "start": 5992.339999999999, "end": 5994.62, "text": " It builds a full computational graph,", "tokens": [50487, 467, 15182, 257, 1577, 28270, 4295, 11, 50601], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1661, "seek": 598990, "start": 5994.82, "end": 5997.66, "text": " just like the graphs we produced in micrograd.", "tokens": [50611, 445, 411, 264, 24877, 321, 7126, 294, 4532, 7165, 13, 50753], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1662, "seek": 598990, "start": 5997.86, "end": 6000.58, "text": " Those graphs exist inside PyTorch.", "tokens": [50763, 3950, 24877, 2514, 1854, 9953, 51, 284, 339, 13, 50899], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1663, "seek": 598990, "start": 6000.78, "end": 6002.74, "text": " And so it knows all the dependencies", "tokens": [50909, 400, 370, 309, 3255, 439, 264, 36606, 51007], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1664, "seek": 598990, "start": 6002.74, "end": 6004.86, "text": " and all the mathematical operations of everything.", "tokens": [51007, 293, 439, 264, 18894, 7705, 295, 1203, 13, 51113], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1665, "seek": 598990, "start": 6005.0599999999995, "end": 6009.379999999999, "text": " And when you then calculate the loss, we can call a dot.backward on it.", "tokens": [51123, 400, 562, 291, 550, 8873, 264, 4470, 11, 321, 393, 818, 257, 5893, 13, 3207, 1007, 322, 309, 13, 51339], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1666, "seek": 598990, "start": 6009.58, "end": 6015.46, "text": " And dot.backward then fills in the gradients of all the intermediates all", "tokens": [51349, 400, 5893, 13, 3207, 1007, 550, 22498, 294, 264, 2771, 2448, 295, 439, 264, 15184, 1024, 439, 51643], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1667, "seek": 598990, "start": 6015.66, "end": 6019.74, "text": " the way back to w's, which are the parameters of our neural net.", "tokens": [51653, 264, 636, 646, 281, 261, 311, 11, 597, 366, 264, 9834, 295, 527, 18161, 2533, 13, 51857], "temperature": 0.0, "avg_logprob": -0.1311983392258321, "compression_ratio": 1.7433962264150944, "no_speech_prob": 0.0003402802685741335}, {"id": 1668, "seek": 601990, "start": 6020.0199999999995, "end": 6023.78, "text": " So now we can do w.grad and we see that it has structure.", "tokens": [50371, 407, 586, 321, 393, 360, 261, 13, 7165, 293, 321, 536, 300, 309, 575, 3877, 13, 50559], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1669, "seek": 601990, "start": 6023.98, "end": 6025.98, "text": " There's stuff inside it.", "tokens": [50569, 821, 311, 1507, 1854, 309, 13, 50669], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1670, "seek": 601990, "start": 6029.099999999999, "end": 6033.259999999999, "text": " And these gradients, every single element here,", "tokens": [50825, 400, 613, 2771, 2448, 11, 633, 2167, 4478, 510, 11, 51033], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1671, "seek": 601990, "start": 6033.46, "end": 6040.46, "text": " so w.shape is 27 by 27, w.grad's shape is the same, 27 by 27.", "tokens": [51043, 370, 261, 13, 82, 42406, 307, 7634, 538, 7634, 11, 261, 13, 7165, 311, 3909, 307, 264, 912, 11, 7634, 538, 7634, 13, 51393], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1672, "seek": 601990, "start": 6040.66, "end": 6048.54, "text": " And every element of w.grad is telling us the influence of that weight on the loss function.", "tokens": [51403, 400, 633, 4478, 295, 261, 13, 7165, 307, 3585, 505, 264, 6503, 295, 300, 3364, 322, 264, 4470, 2445, 13, 51797], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1673, "seek": 601990, "start": 6048.74, "end": 6049.54, "text": " So, for example,", "tokens": [51807, 407, 11, 337, 1365, 11, 51847], "temperature": 0.0, "avg_logprob": -0.17214840016466507, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.00010352479148423299}, {"id": 1674, "seek": 604954, "start": 6049.54, "end": 6055.38, "text": " this number all the way here, if this element, the 00 element of w,", "tokens": [50365, 341, 1230, 439, 264, 636, 510, 11, 498, 341, 4478, 11, 264, 7143, 4478, 295, 261, 11, 50657], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1675, "seek": 604954, "start": 6055.58, "end": 6060.1, "text": " because the gradient is positive, it's telling us that this has a positive", "tokens": [50667, 570, 264, 16235, 307, 3353, 11, 309, 311, 3585, 505, 300, 341, 575, 257, 3353, 50893], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1676, "seek": 604954, "start": 6060.3, "end": 6066.78, "text": " influence on the loss, slightly nudging w, slightly taking w00", "tokens": [50903, 6503, 322, 264, 4470, 11, 4748, 40045, 3249, 261, 11, 4748, 1940, 261, 628, 51227], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1677, "seek": 604954, "start": 6066.98, "end": 6072.3, "text": " and adding a small h to it would increase the loss", "tokens": [51237, 293, 5127, 257, 1359, 276, 281, 309, 576, 3488, 264, 4470, 51503], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1678, "seek": 604954, "start": 6072.5, "end": 6075.58, "text": " mildly because this gradient is positive.", "tokens": [51513, 15154, 356, 570, 341, 16235, 307, 3353, 13, 51667], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1679, "seek": 604954, "start": 6075.78, "end": 6078.46, "text": " Some of these gradients are also negative.", "tokens": [51677, 2188, 295, 613, 2771, 2448, 366, 611, 3671, 13, 51811], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1680, "seek": 604954, "start": 6078.66, "end": 6079.5, "text": " So that's telling us", "tokens": [51821, 407, 300, 311, 3585, 505, 51863], "temperature": 0.0, "avg_logprob": -0.1261474223847085, "compression_ratio": 1.800995024875622, "no_speech_prob": 0.00022493967844638973}, {"id": 1681, "seek": 607954, "start": 6079.7, "end": 6081.14, "text": " about the gradient information.", "tokens": [50373, 466, 264, 16235, 1589, 13, 50445], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1682, "seek": 607954, "start": 6081.34, "end": 6083.22, "text": " And we can use this gradient information", "tokens": [50455, 400, 321, 393, 764, 341, 16235, 1589, 50549], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1683, "seek": 607954, "start": 6083.42, "end": 6086.58, "text": " to update the weights of this neural network.", "tokens": [50559, 281, 5623, 264, 17443, 295, 341, 18161, 3209, 13, 50717], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1684, "seek": 607954, "start": 6086.78, "end": 6088.14, "text": " So let's now do the update.", "tokens": [50727, 407, 718, 311, 586, 360, 264, 5623, 13, 50795], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1685, "seek": 607954, "start": 6088.34, "end": 6090.66, "text": " It's going to be very similar to what we had in micrograd.", "tokens": [50805, 467, 311, 516, 281, 312, 588, 2531, 281, 437, 321, 632, 294, 4532, 7165, 13, 50921], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1686, "seek": 607954, "start": 6090.86, "end": 6093.42, "text": " We need no loop over all the parameters", "tokens": [50931, 492, 643, 572, 6367, 670, 439, 264, 9834, 51059], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1687, "seek": 607954, "start": 6093.62, "end": 6097.0199999999995, "text": " because we only have one parameter tensor and that is w.", "tokens": [51069, 570, 321, 787, 362, 472, 13075, 40863, 293, 300, 307, 261, 13, 51239], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1688, "seek": 607954, "start": 6097.22, "end": 6102.06, "text": " So we simply do w.data plus equals.", "tokens": [51249, 407, 321, 2935, 360, 261, 13, 67, 3274, 1804, 6915, 13, 51491], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1689, "seek": 607954, "start": 6102.26, "end": 6108.3, "text": " We can actually copy this almost exactly negative 0.1 times w.grad.", "tokens": [51501, 492, 393, 767, 5055, 341, 1920, 2293, 3671, 1958, 13, 16, 1413, 261, 13, 7165, 13, 51803], "temperature": 0.0, "avg_logprob": -0.16068696108731356, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0011257730657234788}, {"id": 1690, "seek": 610954, "start": 6109.7, "end": 6114.42, "text": " And that would be the update to the tensor.", "tokens": [50373, 400, 300, 576, 312, 264, 5623, 281, 264, 40863, 13, 50609], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1691, "seek": 610954, "start": 6114.62, "end": 6118.5, "text": " So that updates the tensor.", "tokens": [50619, 407, 300, 9205, 264, 40863, 13, 50813], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1692, "seek": 610954, "start": 6118.7, "end": 6120.98, "text": " And because the tensor is updated,", "tokens": [50823, 400, 570, 264, 40863, 307, 10588, 11, 50937], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1693, "seek": 610954, "start": 6121.18, "end": 6124.14, "text": " we would expect that now the loss should decrease.", "tokens": [50947, 321, 576, 2066, 300, 586, 264, 4470, 820, 11514, 13, 51095], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1694, "seek": 610954, "start": 6124.34, "end": 6129.38, "text": " So here, if I print loss,", "tokens": [51105, 407, 510, 11, 498, 286, 4482, 4470, 11, 51357], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1695, "seek": 610954, "start": 6129.58, "end": 6131.1, "text": " that item,", "tokens": [51367, 300, 3174, 11, 51443], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1696, "seek": 610954, "start": 6131.3, "end": 6132.98, "text": " it was 3.76, right?", "tokens": [51453, 309, 390, 805, 13, 25026, 11, 558, 30, 51537], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1697, "seek": 610954, "start": 6133.18, "end": 6135.82, "text": " So we've updated the w here.", "tokens": [51547, 407, 321, 600, 10588, 264, 261, 510, 13, 51679], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1698, "seek": 610954, "start": 6136.0199999999995, "end": 6138.9, "text": " So if I recalculate forward pass,", "tokens": [51689, 407, 498, 286, 850, 304, 2444, 473, 2128, 1320, 11, 51833], "temperature": 0.0, "avg_logprob": -0.2117097642686632, "compression_ratio": 1.6390532544378698, "no_speech_prob": 0.00028949472471140325}, {"id": 1699, "seek": 613890, "start": 6138.9, "end": 6141.259999999999, "text": " the loss now should be slightly lower.", "tokens": [50365, 264, 4470, 586, 820, 312, 4748, 3126, 13, 50483], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1700, "seek": 613890, "start": 6141.46, "end": 6145.54, "text": " So 3.76 goes to 3.74.", "tokens": [50493, 407, 805, 13, 25026, 1709, 281, 805, 13, 34026, 13, 50697], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1701, "seek": 613890, "start": 6145.74, "end": 6152.379999999999, "text": " And then we can again set grad to none and backward, update.", "tokens": [50707, 400, 550, 321, 393, 797, 992, 2771, 281, 6022, 293, 23897, 11, 5623, 13, 51039], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1702, "seek": 613890, "start": 6152.58, "end": 6154.74, "text": " And now the parameters changed again.", "tokens": [51049, 400, 586, 264, 9834, 3105, 797, 13, 51157], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1703, "seek": 613890, "start": 6154.94, "end": 6161.9, "text": " So if we recalculate the forward pass, we expect a lower loss again, 3.72.", "tokens": [51167, 407, 498, 321, 850, 304, 2444, 473, 264, 2128, 1320, 11, 321, 2066, 257, 3126, 4470, 797, 11, 805, 13, 28890, 13, 51515], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1704, "seek": 613890, "start": 6162.259999999999, "end": 6167.66, "text": " OK, and this is again doing the, we're now doing gradient descent.", "tokens": [51533, 2264, 11, 293, 341, 307, 797, 884, 264, 11, 321, 434, 586, 884, 16235, 23475, 13, 51803], "temperature": 0.0, "avg_logprob": -0.22480983524532108, "compression_ratio": 1.5279187817258884, "no_speech_prob": 0.00018137568258680403}, {"id": 1705, "seek": 616766, "start": 6167.66, "end": 6170.22, "text": " And when we achieve a low loss,", "tokens": [50365, 400, 562, 321, 4584, 257, 2295, 4470, 11, 50493], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1706, "seek": 616766, "start": 6170.42, "end": 6175.139999999999, "text": " that will mean that the network is assigning high probabilities to the correct next characters.", "tokens": [50503, 300, 486, 914, 300, 264, 3209, 307, 49602, 1090, 33783, 281, 264, 3006, 958, 4342, 13, 50739], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1707, "seek": 616766, "start": 6175.34, "end": 6179.34, "text": " OK, so I rearranged everything and I put it all together from scratch.", "tokens": [50749, 2264, 11, 370, 286, 29875, 10296, 1203, 293, 286, 829, 309, 439, 1214, 490, 8459, 13, 50949], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1708, "seek": 616766, "start": 6179.54, "end": 6183.22, "text": " So here is where we construct our data set of bigrams.", "tokens": [50959, 407, 510, 307, 689, 321, 7690, 527, 1412, 992, 295, 955, 2356, 82, 13, 51143], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1709, "seek": 616766, "start": 6183.42, "end": 6186.86, "text": " You see that we are still iterating only over the first word, Emma.", "tokens": [51153, 509, 536, 300, 321, 366, 920, 17138, 990, 787, 670, 264, 700, 1349, 11, 17124, 13, 51325], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1710, "seek": 616766, "start": 6187.0599999999995, "end": 6188.98, "text": " I'm going to change that in a second.", "tokens": [51335, 286, 478, 516, 281, 1319, 300, 294, 257, 1150, 13, 51431], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1711, "seek": 616766, "start": 6189.18, "end": 6193.38, "text": " I added a number that counts the number of elements in Xs", "tokens": [51441, 286, 3869, 257, 1230, 300, 14893, 264, 1230, 295, 4959, 294, 1783, 82, 51651], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1712, "seek": 616766, "start": 6193.58, "end": 6196.82, "text": " so that we explicitly see that number of examples is five,", "tokens": [51661, 370, 300, 321, 20803, 536, 300, 1230, 295, 5110, 307, 1732, 11, 51823], "temperature": 0.0, "avg_logprob": -0.1446660979976499, "compression_ratio": 1.619047619047619, "no_speech_prob": 7.93573199189268e-05}, {"id": 1713, "seek": 619682, "start": 6196.82, "end": 6200.42, "text": " because currently we're just working with Emma and there's five bigrams there.", "tokens": [50365, 570, 4362, 321, 434, 445, 1364, 365, 17124, 293, 456, 311, 1732, 955, 2356, 82, 456, 13, 50545], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1714, "seek": 619682, "start": 6200.62, "end": 6203.5, "text": " And here I added a loop of exactly what we had before.", "tokens": [50555, 400, 510, 286, 3869, 257, 6367, 295, 2293, 437, 321, 632, 949, 13, 50699], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1715, "seek": 619682, "start": 6203.7, "end": 6208.78, "text": " So we had ten iterations of gradient descent of forward pass, backward pass and update.", "tokens": [50709, 407, 321, 632, 2064, 36540, 295, 16235, 23475, 295, 2128, 1320, 11, 23897, 1320, 293, 5623, 13, 50963], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1716, "seek": 619682, "start": 6208.98, "end": 6212.62, "text": " And so running these two cells, initialization and gradient descent", "tokens": [50973, 400, 370, 2614, 613, 732, 5438, 11, 5883, 2144, 293, 16235, 23475, 51155], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1717, "seek": 619682, "start": 6212.82, "end": 6217.98, "text": " gives us some improvement on the loss function.", "tokens": [51165, 2709, 505, 512, 10444, 322, 264, 4470, 2445, 13, 51423], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1718, "seek": 619682, "start": 6218.179999999999, "end": 6221.46, "text": " But now I want to use all the words", "tokens": [51433, 583, 586, 286, 528, 281, 764, 439, 264, 2283, 51597], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1719, "seek": 619682, "start": 6221.66, "end": 6226.38, "text": " and there's not five, but 228,000 bigrams now.", "tokens": [51607, 293, 456, 311, 406, 1732, 11, 457, 5853, 23, 11, 1360, 955, 2356, 82, 586, 13, 51843], "temperature": 0.0, "avg_logprob": -0.14333343505859375, "compression_ratio": 1.6535433070866141, "no_speech_prob": 7.12054388714023e-05}, {"id": 1720, "seek": 622682, "start": 6226.82, "end": 6229.46, "text": " However, this should require no modification whatsoever.", "tokens": [50365, 2908, 11, 341, 820, 3651, 572, 26747, 17076, 13, 50497], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1721, "seek": 622682, "start": 6229.66, "end": 6232.9, "text": " Everything should just run because all the code we wrote doesn't care if there's", "tokens": [50507, 5471, 820, 445, 1190, 570, 439, 264, 3089, 321, 4114, 1177, 380, 1127, 498, 456, 311, 50669], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1722, "seek": 622682, "start": 6233.099999999999, "end": 6237.259999999999, "text": " five bigrams or 228,000 bigrams and with everything, we should just work.", "tokens": [50679, 1732, 955, 2356, 82, 420, 5853, 23, 11, 1360, 955, 2356, 82, 293, 365, 1203, 11, 321, 820, 445, 589, 13, 50887], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1723, "seek": 622682, "start": 6237.46, "end": 6240.259999999999, "text": " So you see that this will just run.", "tokens": [50897, 407, 291, 536, 300, 341, 486, 445, 1190, 13, 51037], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1724, "seek": 622682, "start": 6240.46, "end": 6244.5, "text": " But now we are optimizing over the entire training set of all the bigrams.", "tokens": [51047, 583, 586, 321, 366, 40425, 670, 264, 2302, 3097, 992, 295, 439, 264, 955, 2356, 82, 13, 51249], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1725, "seek": 622682, "start": 6244.7, "end": 6247.38, "text": " And you see now that we are decreasing very slightly.", "tokens": [51259, 400, 291, 536, 586, 300, 321, 366, 23223, 588, 4748, 13, 51393], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1726, "seek": 622682, "start": 6247.58, "end": 6251.58, "text": " So actually, we can probably afford a larger learning rate.", "tokens": [51403, 407, 767, 11, 321, 393, 1391, 6157, 257, 4833, 2539, 3314, 13, 51603], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1727, "seek": 622682, "start": 6252.46, "end": 6256.259999999999, "text": " And probably afford even larger learning rate.", "tokens": [51647, 400, 1391, 6157, 754, 4833, 2539, 3314, 13, 51837], "temperature": 0.0, "avg_logprob": -0.18500603040059407, "compression_ratio": 1.7692307692307692, "no_speech_prob": 8.356086618732661e-05}, {"id": 1728, "seek": 625682, "start": 6256.82, "end": 6263.7, "text": " Even 50 seems to work on this very, very simple example, right?", "tokens": [50365, 2754, 2625, 2544, 281, 589, 322, 341, 588, 11, 588, 2199, 1365, 11, 558, 30, 50709], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1729, "seek": 625682, "start": 6263.9, "end": 6267.66, "text": " So let me re-initialize and let's run 100 iterations.", "tokens": [50719, 407, 718, 385, 319, 12, 259, 270, 831, 1125, 293, 718, 311, 1190, 2319, 36540, 13, 50907], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1730, "seek": 625682, "start": 6267.86, "end": 6270.0599999999995, "text": " See what happens.", "tokens": [50917, 3008, 437, 2314, 13, 51027], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1731, "seek": 625682, "start": 6270.259999999999, "end": 6273.259999999999, "text": " Okay.", "tokens": [51037, 1033, 13, 51187], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1732, "seek": 625682, "start": 6273.46, "end": 6280.78, "text": " We seem to be coming up to some pretty good losses here.", "tokens": [51197, 492, 1643, 281, 312, 1348, 493, 281, 512, 1238, 665, 15352, 510, 13, 51563], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1733, "seek": 625682, "start": 6280.98, "end": 6282.099999999999, "text": " 2.47.", "tokens": [51573, 568, 13, 14060, 13, 51629], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1734, "seek": 625682, "start": 6282.299999999999, "end": 6283.94, "text": " Let me run 100 more.", "tokens": [51639, 961, 385, 1190, 2319, 544, 13, 51721], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1735, "seek": 625682, "start": 6284.139999999999, "end": 6286.66, "text": " What is the number that we expect, by the way, in the loss?", "tokens": [51731, 708, 307, 264, 1230, 300, 321, 2066, 11, 538, 264, 636, 11, 294, 264, 4470, 30, 51857], "temperature": 0.0, "avg_logprob": -0.31023802808535994, "compression_ratio": 1.4321608040201006, "no_speech_prob": 0.0011318601900711656}, {"id": 1736, "seek": 628682, "start": 6286.86, "end": 6290.7, "text": " We expect to get something around what we had originally, actually.", "tokens": [50367, 492, 2066, 281, 483, 746, 926, 437, 321, 632, 7993, 11, 767, 13, 50559], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1737, "seek": 628682, "start": 6290.9, "end": 6294.5, "text": " So all the way back, if you remember in the beginning of this video,", "tokens": [50569, 407, 439, 264, 636, 646, 11, 498, 291, 1604, 294, 264, 2863, 295, 341, 960, 11, 50749], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1738, "seek": 628682, "start": 6294.7, "end": 6302.7, "text": " when we optimized just by counting, our loss was roughly 2.47 after we added smoothing.", "tokens": [50759, 562, 321, 26941, 445, 538, 13251, 11, 527, 4470, 390, 9810, 568, 13, 14060, 934, 321, 3869, 899, 6259, 571, 13, 51159], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1739, "seek": 628682, "start": 6302.9, "end": 6309.0199999999995, "text": " But before smoothing, we had roughly 2.45 loss.", "tokens": [51169, 583, 949, 899, 6259, 571, 11, 321, 632, 9810, 568, 13, 8465, 4470, 13, 51475], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1740, "seek": 628682, "start": 6309.219999999999, "end": 6313.42, "text": " And so that's actually roughly the vicinity of what we expect to achieve.", "tokens": [51485, 400, 370, 300, 311, 767, 9810, 264, 42387, 295, 437, 321, 2066, 281, 4584, 13, 51695], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1741, "seek": 628682, "start": 6313.62, "end": 6315.7, "text": " But before we achieved it by counting.", "tokens": [51705, 583, 949, 321, 11042, 309, 538, 13251, 13, 51809], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1742, "seek": 628682, "start": 6315.9, "end": 6316.7, "text": " And here we are.", "tokens": [51819, 400, 510, 321, 366, 13, 51859], "temperature": 0.0, "avg_logprob": -0.20296308927446882, "compression_ratio": 1.7033898305084745, "no_speech_prob": 0.0003684527182485908}, {"id": 1743, "seek": 631682, "start": 6316.86, "end": 6320.82, "text": " We're achieving roughly the same result, but with gradient based optimization.", "tokens": [50367, 492, 434, 19626, 9810, 264, 912, 1874, 11, 457, 365, 16235, 2361, 19618, 13, 50565], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1744, "seek": 631682, "start": 6321.0199999999995, "end": 6326.139999999999, "text": " So we come to about 2.46, 2.45, etc.", "tokens": [50575, 407, 321, 808, 281, 466, 568, 13, 16169, 11, 568, 13, 8465, 11, 5183, 13, 50831], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1745, "seek": 631682, "start": 6326.34, "end": 6327.86, "text": " And that makes sense because fundamentally,", "tokens": [50841, 400, 300, 1669, 2020, 570, 17879, 11, 50917], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1746, "seek": 631682, "start": 6327.86, "end": 6329.78, "text": " we're not taking in any additional information.", "tokens": [50917, 321, 434, 406, 1940, 294, 604, 4497, 1589, 13, 51013], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1747, "seek": 631682, "start": 6329.98, "end": 6331.46, "text": " We're still just taking in the previous", "tokens": [51023, 492, 434, 920, 445, 1940, 294, 264, 3894, 51097], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1748, "seek": 631682, "start": 6331.46, "end": 6333.46, "text": " character and trying to predict the next one.", "tokens": [51097, 2517, 293, 1382, 281, 6069, 264, 958, 472, 13, 51197], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1749, "seek": 631682, "start": 6333.66, "end": 6338.0599999999995, "text": " But instead of doing it explicitly by counting and normalizing,", "tokens": [51207, 583, 2602, 295, 884, 309, 20803, 538, 13251, 293, 2710, 3319, 11, 51427], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1750, "seek": 631682, "start": 6338.259999999999, "end": 6339.94, "text": " we are doing it with gradient based learning.", "tokens": [51437, 321, 366, 884, 309, 365, 16235, 2361, 2539, 13, 51521], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1751, "seek": 631682, "start": 6340.139999999999, "end": 6342.0599999999995, "text": " And it just so happens that the explicit", "tokens": [51531, 400, 309, 445, 370, 2314, 300, 264, 13691, 51627], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1752, "seek": 631682, "start": 6342.259999999999, "end": 6346.66, "text": " approach happens to very well optimize the loss function without any need", "tokens": [51637, 3109, 2314, 281, 588, 731, 19719, 264, 4470, 2445, 1553, 604, 643, 51857], "temperature": 0.0, "avg_logprob": -0.12444733035179877, "compression_ratio": 1.7095709570957096, "no_speech_prob": 0.00038114574272185564}, {"id": 1753, "seek": 634682, "start": 6346.86, "end": 6350.179999999999, "text": " for gradient based optimization, because the setup for bigram language", "tokens": [50367, 337, 16235, 2361, 19618, 11, 570, 264, 8657, 337, 955, 2356, 2856, 50533], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1754, "seek": 634682, "start": 6350.38, "end": 6354.5, "text": " models is so straightforward and so simple, we can just afford to estimate", "tokens": [50543, 5245, 307, 370, 15325, 293, 370, 2199, 11, 321, 393, 445, 6157, 281, 12539, 50749], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1755, "seek": 634682, "start": 6354.7, "end": 6358.74, "text": " those probabilities directly and maintain them in a table.", "tokens": [50759, 729, 33783, 3838, 293, 6909, 552, 294, 257, 3199, 13, 50961], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1756, "seek": 634682, "start": 6358.94, "end": 6362.82, "text": " But the gradient based approach is significantly more flexible.", "tokens": [50971, 583, 264, 16235, 2361, 3109, 307, 10591, 544, 11358, 13, 51165], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1757, "seek": 634682, "start": 6363.0199999999995, "end": 6366.54, "text": " So we've actually gained a lot because", "tokens": [51175, 407, 321, 600, 767, 12634, 257, 688, 570, 51351], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1758, "seek": 634682, "start": 6366.74, "end": 6369.0199999999995, "text": " what we can do now is", "tokens": [51361, 437, 321, 393, 360, 586, 307, 51475], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1759, "seek": 634682, "start": 6369.219999999999, "end": 6372.74, "text": " we can expand this approach and complexify the neural net.", "tokens": [51485, 321, 393, 5268, 341, 3109, 293, 3997, 2505, 264, 18161, 2533, 13, 51661], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1760, "seek": 634682, "start": 6372.94, "end": 6375.94, "text": " So currently we're just taking a single character and feeding into a neural net.", "tokens": [51671, 407, 4362, 321, 434, 445, 1940, 257, 2167, 2517, 293, 12919, 666, 257, 18161, 2533, 13, 51821], "temperature": 0.0, "avg_logprob": -0.12981150285252985, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00014105789887253195}, {"id": 1761, "seek": 637594, "start": 6375.94, "end": 6377.66, "text": " And the neural net is extremely simple,", "tokens": [50365, 400, 264, 18161, 2533, 307, 4664, 2199, 11, 50451], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1762, "seek": 637594, "start": 6377.86, "end": 6380.299999999999, "text": " but we're about to iterate on this substantially.", "tokens": [50461, 457, 321, 434, 466, 281, 44497, 322, 341, 30797, 13, 50583], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1763, "seek": 637594, "start": 6380.5, "end": 6383.82, "text": " We're going to be taking multiple previous characters and we're going", "tokens": [50593, 492, 434, 516, 281, 312, 1940, 3866, 3894, 4342, 293, 321, 434, 516, 50759], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1764, "seek": 637594, "start": 6384.0199999999995, "end": 6387.339999999999, "text": " to be feeding them into increasingly more complex neural nets.", "tokens": [50769, 281, 312, 12919, 552, 666, 12980, 544, 3997, 18161, 36170, 13, 50935], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1765, "seek": 637594, "start": 6387.54, "end": 6392.46, "text": " But fundamentally, the output of the neural net will always just be logits.", "tokens": [50945, 583, 17879, 11, 264, 5598, 295, 264, 18161, 2533, 486, 1009, 445, 312, 3565, 1208, 13, 51191], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1766, "seek": 637594, "start": 6392.66, "end": 6395.339999999999, "text": " And those logits will go through the exact same transformation.", "tokens": [51201, 400, 729, 3565, 1208, 486, 352, 807, 264, 1900, 912, 9887, 13, 51335], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1767, "seek": 637594, "start": 6395.54, "end": 6397.78, "text": " We are going to take them through a softmax,", "tokens": [51345, 492, 366, 516, 281, 747, 552, 807, 257, 2787, 41167, 11, 51457], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1768, "seek": 637594, "start": 6397.98, "end": 6400.9, "text": " calculate the loss function and the negative log likelihood,", "tokens": [51467, 8873, 264, 4470, 2445, 293, 264, 3671, 3565, 22119, 11, 51613], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1769, "seek": 637594, "start": 6401.099999999999, "end": 6405.86, "text": " and do gradient based optimization. And so actually, as we complexify,", "tokens": [51623, 293, 360, 16235, 2361, 19618, 13, 400, 370, 767, 11, 382, 321, 3997, 2505, 11, 51861], "temperature": 0.0, "avg_logprob": -0.12946586608886718, "compression_ratio": 1.7966666666666666, "no_speech_prob": 0.00017745743389241397}, {"id": 1770, "seek": 640594, "start": 6406.0599999999995, "end": 6409.58, "text": " the neural nets and work all the way up to transformers,", "tokens": [50371, 264, 18161, 36170, 293, 589, 439, 264, 636, 493, 281, 4088, 433, 11, 50547], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1771, "seek": 640594, "start": 6409.78, "end": 6411.9, "text": " none of this will really fundamentally change.", "tokens": [50557, 6022, 295, 341, 486, 534, 17879, 1319, 13, 50663], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1772, "seek": 640594, "start": 6411.98, "end": 6413.5, "text": " None of this will fundamentally change.", "tokens": [50667, 14492, 295, 341, 486, 17879, 1319, 13, 50743], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1773, "seek": 640594, "start": 6413.7, "end": 6417.299999999999, "text": " The only thing that will change is the way we do the forward pass,", "tokens": [50753, 440, 787, 551, 300, 486, 1319, 307, 264, 636, 321, 360, 264, 2128, 1320, 11, 50933], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1774, "seek": 640594, "start": 6417.5, "end": 6421.179999999999, "text": " where we take in some previous characters and calculate logits for the next", "tokens": [50943, 689, 321, 747, 294, 512, 3894, 4342, 293, 8873, 3565, 1208, 337, 264, 958, 51127], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1775, "seek": 640594, "start": 6421.379999999999, "end": 6424.9, "text": " character in a sequence that will become more complex.", "tokens": [51137, 2517, 294, 257, 8310, 300, 486, 1813, 544, 3997, 13, 51313], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1776, "seek": 640594, "start": 6425.099999999999, "end": 6428.62, "text": " And we'll use the same machinery to optimize it.", "tokens": [51323, 400, 321, 603, 764, 264, 912, 27302, 281, 19719, 309, 13, 51499], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1777, "seek": 640594, "start": 6428.82, "end": 6430.299999999999, "text": " And", "tokens": [51509, 400, 51583], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1778, "seek": 640594, "start": 6430.7, "end": 6435.58, "text": " it's not obvious how we would have extended this bigram approach into", "tokens": [51603, 309, 311, 406, 6322, 577, 321, 576, 362, 10913, 341, 955, 2356, 3109, 666, 51847], "temperature": 0.0, "avg_logprob": -0.16460536207471574, "compression_ratio": 1.7509433962264151, "no_speech_prob": 0.00023319672618526965}, {"id": 1779, "seek": 643594, "start": 6436.0599999999995, "end": 6439.099999999999, "text": " a space where there are many more characters at the input,", "tokens": [50371, 257, 1901, 689, 456, 366, 867, 544, 4342, 412, 264, 4846, 11, 50523], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1780, "seek": 643594, "start": 6439.299999999999, "end": 6443.0599999999995, "text": " because eventually these tables would get way too large because there's way too", "tokens": [50533, 570, 4728, 613, 8020, 576, 483, 636, 886, 2416, 570, 456, 311, 636, 886, 50721], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1781, "seek": 643594, "start": 6443.259999999999, "end": 6447.74, "text": " many combinations of what previous characters could be.", "tokens": [50731, 867, 21267, 295, 437, 3894, 4342, 727, 312, 13, 50955], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1782, "seek": 643594, "start": 6447.94, "end": 6449.54, "text": " If you only have one previous character,", "tokens": [50965, 759, 291, 787, 362, 472, 3894, 2517, 11, 51045], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1783, "seek": 643594, "start": 6449.74, "end": 6451.98, "text": " we can just keep everything in a table that counts.", "tokens": [51055, 321, 393, 445, 1066, 1203, 294, 257, 3199, 300, 14893, 13, 51167], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1784, "seek": 643594, "start": 6452.179999999999, "end": 6454.219999999999, "text": " But if you have the last 10 characters", "tokens": [51177, 583, 498, 291, 362, 264, 1036, 1266, 4342, 51279], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1785, "seek": 643594, "start": 6454.219999999999, "end": 6457.299999999999, "text": " that are input, we can't actually keep everything in the table anymore.", "tokens": [51279, 300, 366, 4846, 11, 321, 393, 380, 767, 1066, 1203, 294, 264, 3199, 3602, 13, 51433], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1786, "seek": 643594, "start": 6457.5, "end": 6459.7, "text": " So this is fundamentally an unscalable approach.", "tokens": [51443, 407, 341, 307, 17879, 364, 2693, 9895, 712, 3109, 13, 51553], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1787, "seek": 643594, "start": 6459.9, "end": 6462.9, "text": " And the neural network approach is significantly more scalable.", "tokens": [51563, 400, 264, 18161, 3209, 3109, 307, 10591, 544, 38481, 13, 51713], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1788, "seek": 643594, "start": 6463.099999999999, "end": 6465.82, "text": " And it's something that actually we can improve on", "tokens": [51723, 400, 309, 311, 746, 300, 767, 321, 393, 3470, 322, 51859], "temperature": 0.0, "avg_logprob": -0.11587513983249664, "compression_ratio": 1.918088737201365, "no_speech_prob": 0.0005770595744252205}, {"id": 1789, "seek": 646594, "start": 6466.0599999999995, "end": 6468.379999999999, "text": " over time. So that's where we will be digging next.", "tokens": [50371, 670, 565, 13, 407, 300, 311, 689, 321, 486, 312, 17343, 958, 13, 50487], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1790, "seek": 646594, "start": 6468.58, "end": 6470.98, "text": " I wanted to point out two more things.", "tokens": [50497, 286, 1415, 281, 935, 484, 732, 544, 721, 13, 50617], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1791, "seek": 646594, "start": 6471.179999999999, "end": 6476.62, "text": " Number one, I want you to notice that this X-ENG here,", "tokens": [50627, 5118, 472, 11, 286, 528, 291, 281, 3449, 300, 341, 1783, 12, 2195, 38, 510, 11, 50899], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1792, "seek": 646594, "start": 6476.82, "end": 6478.78, "text": " this is made up of one-hot vectors.", "tokens": [50909, 341, 307, 1027, 493, 295, 472, 12, 12194, 18875, 13, 51007], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1793, "seek": 646594, "start": 6478.98, "end": 6483.0199999999995, "text": " And then those one-hot vectors are multiplied by this W matrix.", "tokens": [51017, 400, 550, 729, 472, 12, 12194, 18875, 366, 17207, 538, 341, 343, 8141, 13, 51219], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1794, "seek": 646594, "start": 6483.219999999999, "end": 6485.86, "text": " And we think of this as multiple neurons", "tokens": [51229, 400, 321, 519, 295, 341, 382, 3866, 22027, 51361], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1795, "seek": 646594, "start": 6486.0599999999995, "end": 6488.58, "text": " being forwarded in a fully connected manner.", "tokens": [51371, 885, 2128, 292, 294, 257, 4498, 4582, 9060, 13, 51497], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1796, "seek": 646594, "start": 6488.78, "end": 6491.82, "text": " But actually what's happening here is that, for example,", "tokens": [51507, 583, 767, 437, 311, 2737, 510, 307, 300, 11, 337, 1365, 11, 51659], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1797, "seek": 646594, "start": 6492.0199999999995, "end": 6495.7, "text": " if you have a one-hot vector here that has a one", "tokens": [51669, 498, 291, 362, 257, 472, 12, 12194, 8062, 510, 300, 575, 257, 472, 51853], "temperature": 0.0, "avg_logprob": -0.15303190292850619, "compression_ratio": 1.6553030303030303, "no_speech_prob": 0.0004311497323215008}, {"id": 1798, "seek": 649570, "start": 6495.7, "end": 6499.3, "text": " at, say, the fifth dimension, then because of the way the matrix", "tokens": [50365, 412, 11, 584, 11, 264, 9266, 10139, 11, 550, 570, 295, 264, 636, 264, 8141, 50545], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1799, "seek": 649570, "start": 6499.5, "end": 6503.3, "text": " multiplication works, multiplying that one-hot vector with W", "tokens": [50555, 27290, 1985, 11, 30955, 300, 472, 12, 12194, 8062, 365, 343, 50745], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1800, "seek": 649570, "start": 6503.5, "end": 6507.42, "text": " actually ends up plucking out the fifth row of W.", "tokens": [50755, 767, 5314, 493, 499, 33260, 484, 264, 9266, 5386, 295, 343, 13, 50951], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1801, "seek": 649570, "start": 6507.62, "end": 6511.179999999999, "text": " Logits would become just the fifth row of W.", "tokens": [50961, 10824, 1208, 576, 1813, 445, 264, 9266, 5386, 295, 343, 13, 51139], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1802, "seek": 649570, "start": 6511.38, "end": 6515.58, "text": " And that's because of the way the matrix multiplication works.", "tokens": [51149, 400, 300, 311, 570, 295, 264, 636, 264, 8141, 27290, 1985, 13, 51359], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1803, "seek": 649570, "start": 6516.94, "end": 6519.86, "text": " So that's actually what ends up happening.", "tokens": [51427, 407, 300, 311, 767, 437, 5314, 493, 2737, 13, 51573], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1804, "seek": 649570, "start": 6520.0599999999995, "end": 6525.66, "text": " So but that's actually exactly what happened before, because remember all the way up here,", "tokens": [51583, 407, 457, 300, 311, 767, 2293, 437, 2011, 949, 11, 570, 1604, 439, 264, 636, 493, 510, 11, 51863], "temperature": 0.0, "avg_logprob": -0.17834283773181508, "compression_ratio": 1.9952153110047848, "no_speech_prob": 0.0003147095558233559}, {"id": 1805, "seek": 652570, "start": 6525.86, "end": 6530.38, "text": " we have a bigram, we took the first character and then that first character", "tokens": [50373, 321, 362, 257, 955, 2356, 11, 321, 1890, 264, 700, 2517, 293, 550, 300, 700, 2517, 50599], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1806, "seek": 652570, "start": 6530.58, "end": 6536.62, "text": " indexed into a row of this array here, and that row gave us the probability", "tokens": [50609, 8186, 292, 666, 257, 5386, 295, 341, 10225, 510, 11, 293, 300, 5386, 2729, 505, 264, 8482, 50911], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1807, "seek": 652570, "start": 6536.82, "end": 6541.139999999999, "text": " distribution for the next character. So the first character was used as a lookup", "tokens": [50921, 7316, 337, 264, 958, 2517, 13, 407, 264, 700, 2517, 390, 1143, 382, 257, 574, 1010, 51137], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1808, "seek": 652570, "start": 6541.34, "end": 6546.22, "text": " into a matrix here to get the probability distribution.", "tokens": [51147, 666, 257, 8141, 510, 281, 483, 264, 8482, 7316, 13, 51391], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1809, "seek": 652570, "start": 6546.42, "end": 6549.3, "text": " Well, that's actually exactly what's happening here, because we're taking", "tokens": [51401, 1042, 11, 300, 311, 767, 2293, 437, 311, 2737, 510, 11, 570, 321, 434, 1940, 51545], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1810, "seek": 652570, "start": 6549.5, "end": 6553.38, "text": " the index, we're encoding it as one-hot and multiplying it by W.", "tokens": [51555, 264, 8186, 11, 321, 434, 43430, 309, 382, 472, 12, 12194, 293, 30955, 309, 538, 343, 13, 51749], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1811, "seek": 652570, "start": 6553.58, "end": 6555.3, "text": " So logits literally becomes", "tokens": [51759, 407, 3565, 1208, 3736, 3643, 51845], "temperature": 0.0, "avg_logprob": -0.1426731315818993, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.0019081636564806104}, {"id": 1812, "seek": 655570, "start": 6555.86, "end": 6560.66, "text": " the appropriate row of W.", "tokens": [50373, 264, 6854, 5386, 295, 343, 13, 50613], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1813, "seek": 655570, "start": 6560.86, "end": 6562.66, "text": " And that gets just as before,", "tokens": [50623, 400, 300, 2170, 445, 382, 949, 11, 50713], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1814, "seek": 655570, "start": 6562.86, "end": 6567.34, "text": " exponentiated to create the counts and then normalized and becomes probability.", "tokens": [50723, 12680, 23012, 770, 281, 1884, 264, 14893, 293, 550, 48704, 293, 3643, 8482, 13, 50947], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1815, "seek": 655570, "start": 6567.54, "end": 6574.9, "text": " So this W here is literally the same as this array here.", "tokens": [50957, 407, 341, 343, 510, 307, 3736, 264, 912, 382, 341, 10225, 510, 13, 51325], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1816, "seek": 655570, "start": 6575.099999999999, "end": 6578.82, "text": " But W, remember, is the log counts, not the counts.", "tokens": [51335, 583, 343, 11, 1604, 11, 307, 264, 3565, 14893, 11, 406, 264, 14893, 13, 51521], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1817, "seek": 655570, "start": 6579.0199999999995, "end": 6585.66, "text": " So it's more precise to say that W exponentiated, W dot exp, is this array.", "tokens": [51531, 407, 309, 311, 544, 13600, 281, 584, 300, 343, 12680, 23012, 770, 11, 343, 5893, 1278, 11, 307, 341, 10225, 13, 51863], "temperature": 0.0, "avg_logprob": -0.15579129349101672, "compression_ratio": 1.6161616161616161, "no_speech_prob": 0.00026260517188347876}, {"id": 1818, "seek": 658570, "start": 6585.86, "end": 6591.86, "text": " But this array was filled in by counting and by basically", "tokens": [50373, 583, 341, 10225, 390, 6412, 294, 538, 13251, 293, 538, 1936, 50673], "temperature": 0.0, "avg_logprob": -0.13962133195665147, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.001478145131841302}, {"id": 1819, "seek": 658570, "start": 6592.0599999999995, "end": 6595.74, "text": " populating the counts of bigrams, whereas in the gradient-based framework,", "tokens": [50683, 1665, 12162, 264, 14893, 295, 955, 2356, 82, 11, 9735, 294, 264, 16235, 12, 6032, 8388, 11, 50867], "temperature": 0.0, "avg_logprob": -0.13962133195665147, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.001478145131841302}, {"id": 1820, "seek": 658570, "start": 6595.94, "end": 6603.0599999999995, "text": " we initialize it randomly and then we let the loss guide us to arrive at the exact same array.", "tokens": [50877, 321, 5883, 1125, 309, 16979, 293, 550, 321, 718, 264, 4470, 5934, 505, 281, 8881, 412, 264, 1900, 912, 10225, 13, 51233], "temperature": 0.0, "avg_logprob": -0.13962133195665147, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.001478145131841302}, {"id": 1821, "seek": 658570, "start": 6603.26, "end": 6609.98, "text": " So this array exactly here is basically the array W at the end of optimization,", "tokens": [51243, 407, 341, 10225, 2293, 510, 307, 1936, 264, 10225, 343, 412, 264, 917, 295, 19618, 11, 51579], "temperature": 0.0, "avg_logprob": -0.13962133195665147, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.001478145131841302}, {"id": 1822, "seek": 658570, "start": 6610.179999999999, "end": 6614.86, "text": " except we arrived at it piece by piece by following the loss.", "tokens": [51589, 3993, 321, 6678, 412, 309, 2522, 538, 2522, 538, 3480, 264, 4470, 13, 51823], "temperature": 0.0, "avg_logprob": -0.13962133195665147, "compression_ratio": 1.6926605504587156, "no_speech_prob": 0.001478145131841302}, {"id": 1823, "seek": 661486, "start": 6615.0199999999995, "end": 6617.74, "text": " And that's why we also obtain the same loss function at the end.", "tokens": [50373, 400, 300, 311, 983, 321, 611, 12701, 264, 912, 4470, 2445, 412, 264, 917, 13, 50509], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1824, "seek": 661486, "start": 6617.94, "end": 6620.339999999999, "text": " And the second note is if I come here,", "tokens": [50519, 400, 264, 1150, 3637, 307, 498, 286, 808, 510, 11, 50639], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1825, "seek": 661486, "start": 6620.54, "end": 6625.78, "text": " remember the smoothing where we added fake counts to our counts in order to", "tokens": [50649, 1604, 264, 899, 6259, 571, 689, 321, 3869, 7592, 14893, 281, 527, 14893, 294, 1668, 281, 50911], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1826, "seek": 661486, "start": 6625.98, "end": 6630.86, "text": " smooth out and make more uniform the distributions of these probabilities.", "tokens": [50921, 5508, 484, 293, 652, 544, 9452, 264, 37870, 295, 613, 33783, 13, 51165], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1827, "seek": 661486, "start": 6631.0599999999995, "end": 6634.82, "text": " And that prevented us from assigning zero probability to", "tokens": [51175, 400, 300, 27314, 505, 490, 49602, 4018, 8482, 281, 51363], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1828, "seek": 661486, "start": 6635.0199999999995, "end": 6636.98, "text": " to any one bigram.", "tokens": [51373, 281, 604, 472, 955, 2356, 13, 51471], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1829, "seek": 661486, "start": 6637.179999999999, "end": 6642.82, "text": " Now, if I increase the count here, what's happening to the probability?", "tokens": [51481, 823, 11, 498, 286, 3488, 264, 1207, 510, 11, 437, 311, 2737, 281, 264, 8482, 30, 51763], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1830, "seek": 661486, "start": 6643.0199999999995, "end": 6644.82, "text": " As I increase the count,", "tokens": [51773, 1018, 286, 3488, 264, 1207, 11, 51863], "temperature": 0.0, "avg_logprob": -0.09930660568665121, "compression_ratio": 1.728744939271255, "no_speech_prob": 0.00040705708670429885}, {"id": 1831, "seek": 664486, "start": 6645.0199999999995, "end": 6648.179999999999, "text": " probability becomes more and more uniform, right?", "tokens": [50373, 8482, 3643, 544, 293, 544, 9452, 11, 558, 30, 50531], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1832, "seek": 664486, "start": 6648.38, "end": 6651.54, "text": " Because these counts go only up to like 900 or whatever.", "tokens": [50541, 1436, 613, 14893, 352, 787, 493, 281, 411, 22016, 420, 2035, 13, 50699], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1833, "seek": 664486, "start": 6651.74, "end": 6654.94, "text": " So if I'm adding plus a million to every single number here,", "tokens": [50709, 407, 498, 286, 478, 5127, 1804, 257, 2459, 281, 633, 2167, 1230, 510, 11, 50869], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1834, "seek": 664486, "start": 6655.139999999999, "end": 6659.7, "text": " you can see how the row and its probability then when you divide is just going to", "tokens": [50879, 291, 393, 536, 577, 264, 5386, 293, 1080, 8482, 550, 562, 291, 9845, 307, 445, 516, 281, 51107], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1835, "seek": 664486, "start": 6659.9, "end": 6665.0599999999995, "text": " become more and more close to exactly even probability, uniform distribution.", "tokens": [51117, 1813, 544, 293, 544, 1998, 281, 2293, 754, 8482, 11, 9452, 7316, 13, 51375], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1836, "seek": 664486, "start": 6665.259999999999, "end": 6670.58, "text": " It turns out that the gradient-based framework has an equivalent to smoothing.", "tokens": [51385, 467, 4523, 484, 300, 264, 16235, 12, 6032, 8388, 575, 364, 10344, 281, 899, 6259, 571, 13, 51651], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1837, "seek": 664486, "start": 6670.78, "end": 6672.58, "text": " In particular,", "tokens": [51661, 682, 1729, 11, 51751], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1838, "seek": 664486, "start": 6673.179999999999, "end": 6674.82, "text": " think through these W's here.", "tokens": [51781, 519, 807, 613, 343, 311, 510, 13, 51863], "temperature": 0.0, "avg_logprob": -0.14249289801361364, "compression_ratio": 1.6107142857142858, "no_speech_prob": 0.00013169336307328194}, {"id": 1839, "seek": 667486, "start": 6675.0199999999995, "end": 6677.38, "text": " Which we initialize randomly.", "tokens": [50373, 3013, 321, 5883, 1125, 16979, 13, 50491], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1840, "seek": 667486, "start": 6677.58, "end": 6681.259999999999, "text": " We could also think about initializing W's to be zero.", "tokens": [50501, 492, 727, 611, 519, 466, 5883, 3319, 343, 311, 281, 312, 4018, 13, 50685], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1841, "seek": 667486, "start": 6681.46, "end": 6683.98, "text": " If all the entries of W are zero,", "tokens": [50695, 759, 439, 264, 23041, 295, 343, 366, 4018, 11, 50821], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1842, "seek": 667486, "start": 6684.179999999999, "end": 6688.0599999999995, "text": " then you'll see that logits will become all zero.", "tokens": [50831, 550, 291, 603, 536, 300, 3565, 1208, 486, 1813, 439, 4018, 13, 51025], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1843, "seek": 667486, "start": 6688.259999999999, "end": 6691.099999999999, "text": " And then exponentiating those logits becomes all one.", "tokens": [51035, 400, 550, 12680, 23012, 990, 729, 3565, 1208, 3643, 439, 472, 13, 51177], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1844, "seek": 667486, "start": 6691.299999999999, "end": 6694.86, "text": " And then the probabilities turn out to be exactly uniform.", "tokens": [51187, 400, 550, 264, 33783, 1261, 484, 281, 312, 2293, 9452, 13, 51365], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1845, "seek": 667486, "start": 6695.0599999999995, "end": 6699.139999999999, "text": " So basically, when W's are all equal to each other or say,", "tokens": [51375, 407, 1936, 11, 562, 343, 311, 366, 439, 2681, 281, 1184, 661, 420, 584, 11, 51579], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1846, "seek": 667486, "start": 6699.339999999999, "end": 6703.38, "text": " especially zero, then the probabilities come out completely uniform.", "tokens": [51589, 2318, 4018, 11, 550, 264, 33783, 808, 484, 2584, 9452, 13, 51791], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1847, "seek": 667486, "start": 6703.58, "end": 6704.78, "text": " So", "tokens": [51801, 407, 51861], "temperature": 0.0, "avg_logprob": -0.2263610734852082, "compression_ratio": 1.7606837606837606, "no_speech_prob": 0.00042433911585249007}, {"id": 1848, "seek": 670486, "start": 6704.98, "end": 6712.5, "text": " trying to incentivize W to be near zero is basically equivalent to label smoothing.", "tokens": [50371, 1382, 281, 35328, 1125, 343, 281, 312, 2651, 4018, 307, 1936, 10344, 281, 7645, 899, 6259, 571, 13, 50747], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1849, "seek": 670486, "start": 6712.7, "end": 6715.179999999999, "text": " And the more you incentivize that in a loss function,", "tokens": [50757, 400, 264, 544, 291, 35328, 1125, 300, 294, 257, 4470, 2445, 11, 50881], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1850, "seek": 670486, "start": 6715.38, "end": 6718.099999999999, "text": " the more smooth distribution you're going to achieve.", "tokens": [50891, 264, 544, 5508, 7316, 291, 434, 516, 281, 4584, 13, 51027], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1851, "seek": 670486, "start": 6718.299999999999, "end": 6721.259999999999, "text": " So this brings us to something that's called regularization,", "tokens": [51037, 407, 341, 5607, 505, 281, 746, 300, 311, 1219, 3890, 2144, 11, 51185], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1852, "seek": 670486, "start": 6721.46, "end": 6723.86, "text": " where we can actually augment the loss", "tokens": [51195, 689, 321, 393, 767, 29919, 264, 4470, 51315], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1853, "seek": 670486, "start": 6724.0599999999995, "end": 6727.78, "text": " function to have a small component that we call a regularization loss.", "tokens": [51325, 2445, 281, 362, 257, 1359, 6542, 300, 321, 818, 257, 3890, 2144, 4470, 13, 51511], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1854, "seek": 670486, "start": 6727.98, "end": 6730.98, "text": " In particular, what we're going to do is we can take W", "tokens": [51521, 682, 1729, 11, 437, 321, 434, 516, 281, 360, 307, 321, 393, 747, 343, 51671], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1855, "seek": 670486, "start": 6731.179999999999, "end": 6733.78, "text": " and we can, for example, square all of its entries.", "tokens": [51681, 293, 321, 393, 11, 337, 1365, 11, 3732, 439, 295, 1080, 23041, 13, 51811], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1856, "seek": 670486, "start": 6733.98, "end": 6734.78, "text": " And then,", "tokens": [51821, 400, 550, 11, 51861], "temperature": 0.0, "avg_logprob": -0.19656284519883452, "compression_ratio": 1.8075471698113208, "no_speech_prob": 0.00167334103025496}, {"id": 1857, "seek": 673486, "start": 6735.0599999999995, "end": 6738.86, "text": " we can, whoops, sorry about that.", "tokens": [50375, 321, 393, 11, 567, 3370, 11, 2597, 466, 300, 13, 50565], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1858, "seek": 673486, "start": 6739.0599999999995, "end": 6742.38, "text": " We can take all the entries of W and we can sum them.", "tokens": [50575, 492, 393, 747, 439, 264, 23041, 295, 343, 293, 321, 393, 2408, 552, 13, 50741], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1859, "seek": 673486, "start": 6743.58, "end": 6748.099999999999, "text": " And because we're squaring, there will be no signs anymore.", "tokens": [50801, 400, 570, 321, 434, 2339, 1921, 11, 456, 486, 312, 572, 7880, 3602, 13, 51027], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1860, "seek": 673486, "start": 6748.299999999999, "end": 6751.299999999999, "text": " Negatives and positives all get squashed to be positive numbers.", "tokens": [51037, 19103, 4884, 293, 35127, 439, 483, 2339, 12219, 281, 312, 3353, 3547, 13, 51187], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1861, "seek": 673486, "start": 6751.5, "end": 6757.0199999999995, "text": " And then the way this works is you achieve zero loss if W is exactly or zero.", "tokens": [51197, 400, 550, 264, 636, 341, 1985, 307, 291, 4584, 4018, 4470, 498, 343, 307, 2293, 420, 4018, 13, 51473], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1862, "seek": 673486, "start": 6757.219999999999, "end": 6760.98, "text": " But if W has non-zero numbers, you accumulate loss.", "tokens": [51483, 583, 498, 343, 575, 2107, 12, 32226, 3547, 11, 291, 33384, 4470, 13, 51671], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1863, "seek": 673486, "start": 6761.179999999999, "end": 6764.78, "text": " And so we can actually take this and we can add it on here.", "tokens": [51681, 400, 370, 321, 393, 767, 747, 341, 293, 321, 393, 909, 309, 322, 510, 13, 51861], "temperature": 0.0, "avg_logprob": -0.1301361322402954, "compression_ratio": 1.6820083682008369, "no_speech_prob": 0.00030006063752807677}, {"id": 1864, "seek": 676486, "start": 6764.98, "end": 6771.9, "text": " So we can do something like loss plus W square dot sum.", "tokens": [50371, 407, 321, 393, 360, 746, 411, 4470, 1804, 343, 3732, 5893, 2408, 13, 50717], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1865, "seek": 676486, "start": 6772.099999999999, "end": 6773.5, "text": " Or let's actually instead of sum,", "tokens": [50727, 1610, 718, 311, 767, 2602, 295, 2408, 11, 50797], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1866, "seek": 676486, "start": 6773.7, "end": 6777.42, "text": " let's take a mean because otherwise the sum gets too large.", "tokens": [50807, 718, 311, 747, 257, 914, 570, 5911, 264, 2408, 2170, 886, 2416, 13, 50993], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1867, "seek": 676486, "start": 6777.62, "end": 6781.219999999999, "text": " So mean is like a little bit more manageable.", "tokens": [51003, 407, 914, 307, 411, 257, 707, 857, 544, 38798, 13, 51183], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1868, "seek": 676486, "start": 6781.42, "end": 6783.46, "text": " And then we have a regularization loss here.", "tokens": [51193, 400, 550, 321, 362, 257, 3890, 2144, 4470, 510, 13, 51295], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1869, "seek": 676486, "start": 6783.66, "end": 6786.42, "text": " Let's say 0.01 times or something like that.", "tokens": [51305, 961, 311, 584, 1958, 13, 10607, 1413, 420, 746, 411, 300, 13, 51443], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1870, "seek": 676486, "start": 6786.62, "end": 6789.219999999999, "text": " You can choose the regularization strength", "tokens": [51453, 509, 393, 2826, 264, 3890, 2144, 3800, 51583], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1871, "seek": 676486, "start": 6789.42, "end": 6791.98, "text": " and then we can just optimize this.", "tokens": [51593, 293, 550, 321, 393, 445, 19719, 341, 13, 51721], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1872, "seek": 676486, "start": 6792.179999999999, "end": 6794.86, "text": " And now this optimization actually has two components.", "tokens": [51731, 400, 586, 341, 19618, 767, 575, 732, 6677, 13, 51865], "temperature": 0.0, "avg_logprob": -0.14960670471191406, "compression_ratio": 1.6963562753036436, "no_speech_prob": 0.00014611658116336912}, {"id": 1873, "seek": 679486, "start": 6795.0599999999995, "end": 6797.86, "text": " Not only is it trying to make all the probabilities work out,", "tokens": [50375, 1726, 787, 307, 309, 1382, 281, 652, 439, 264, 33783, 589, 484, 11, 50515], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1874, "seek": 679486, "start": 6798.0599999999995, "end": 6800.38, "text": " but in addition to that, there's an additional component", "tokens": [50525, 457, 294, 4500, 281, 300, 11, 456, 311, 364, 4497, 6542, 50641], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1875, "seek": 679486, "start": 6800.58, "end": 6803.42, "text": " that simultaneously tries to make all Ws be zero.", "tokens": [50651, 300, 16561, 9898, 281, 652, 439, 343, 82, 312, 4018, 13, 50793], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1876, "seek": 679486, "start": 6803.62, "end": 6806.0199999999995, "text": " Because if Ws are non-zero, you feel a loss.", "tokens": [50803, 1436, 498, 343, 82, 366, 2107, 12, 32226, 11, 291, 841, 257, 4470, 13, 50923], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1877, "seek": 679486, "start": 6806.219999999999, "end": 6809.98, "text": " And so minimizing this, the only way to achieve that is for W to be zero.", "tokens": [50933, 400, 370, 46608, 341, 11, 264, 787, 636, 281, 4584, 300, 307, 337, 343, 281, 312, 4018, 13, 51121], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1878, "seek": 679486, "start": 6810.179999999999, "end": 6814.74, "text": " And so you can think of this as adding like a spring force or like a gravity", "tokens": [51131, 400, 370, 291, 393, 519, 295, 341, 382, 5127, 411, 257, 5587, 3464, 420, 411, 257, 12110, 51359], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1879, "seek": 679486, "start": 6814.94, "end": 6817.259999999999, "text": " force that pushes W to be zero.", "tokens": [51369, 3464, 300, 21020, 343, 281, 312, 4018, 13, 51485], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1880, "seek": 679486, "start": 6817.46, "end": 6820.94, "text": " So W wants to be zero and the probabilities want to be uniform,", "tokens": [51495, 407, 343, 2738, 281, 312, 4018, 293, 264, 33783, 528, 281, 312, 9452, 11, 51669], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1881, "seek": 679486, "start": 6821.139999999999, "end": 6824.62, "text": " but they also simultaneously want to match up your", "tokens": [51679, 457, 436, 611, 16561, 528, 281, 2995, 493, 428, 51853], "temperature": 0.0, "avg_logprob": -0.17819362216525608, "compression_ratio": 1.8581818181818182, "no_speech_prob": 0.0012704732362180948}, {"id": 1882, "seek": 682462, "start": 6824.82, "end": 6827.22, "text": " probabilities as indicated by the data.", "tokens": [50375, 33783, 382, 16176, 538, 264, 1412, 13, 50495], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1883, "seek": 682462, "start": 6827.42, "end": 6830.46, "text": " And so the strength of this regularization", "tokens": [50505, 400, 370, 264, 3800, 295, 341, 3890, 2144, 50657], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1884, "seek": 682462, "start": 6830.66, "end": 6837.0199999999995, "text": " is exactly controlling the amount of counts that you add here.", "tokens": [50667, 307, 2293, 14905, 264, 2372, 295, 14893, 300, 291, 909, 510, 13, 50985], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1885, "seek": 682462, "start": 6837.22, "end": 6842.58, "text": " Adding a lot more counts here corresponds to", "tokens": [50995, 31204, 257, 688, 544, 14893, 510, 23249, 281, 51263], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1886, "seek": 682462, "start": 6842.78, "end": 6846.18, "text": " increasing this number, because the more you increase it,", "tokens": [51273, 5662, 341, 1230, 11, 570, 264, 544, 291, 3488, 309, 11, 51443], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1887, "seek": 682462, "start": 6846.38, "end": 6849.34, "text": " the more this part of the loss function dominates this part.", "tokens": [51453, 264, 544, 341, 644, 295, 264, 4470, 2445, 8859, 1024, 341, 644, 13, 51601], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1888, "seek": 682462, "start": 6849.54, "end": 6854.34, "text": " And the more these weights will be unable to grow, because as they", "tokens": [51611, 400, 264, 544, 613, 17443, 486, 312, 11299, 281, 1852, 11, 570, 382, 436, 51851], "temperature": 0.0, "avg_logprob": -0.1303854747252031, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00043831588118337095}, {"id": 1889, "seek": 685462, "start": 6854.62, "end": 6858.14, "text": " grow, they accumulate way too much loss.", "tokens": [50365, 1852, 11, 436, 33384, 636, 886, 709, 4470, 13, 50541], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1890, "seek": 685462, "start": 6858.34, "end": 6861.0599999999995, "text": " And so if this is strong enough,", "tokens": [50551, 400, 370, 498, 341, 307, 2068, 1547, 11, 50687], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1891, "seek": 685462, "start": 6861.26, "end": 6866.62, "text": " then we are not able to overcome the force of this loss and we will never", "tokens": [50697, 550, 321, 366, 406, 1075, 281, 10473, 264, 3464, 295, 341, 4470, 293, 321, 486, 1128, 50965], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1892, "seek": 685462, "start": 6866.82, "end": 6869.26, "text": " and basically everything will be uniform predictions.", "tokens": [50975, 293, 1936, 1203, 486, 312, 9452, 21264, 13, 51097], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1893, "seek": 685462, "start": 6869.46, "end": 6870.54, "text": " So I thought that's kind of cool.", "tokens": [51107, 407, 286, 1194, 300, 311, 733, 295, 1627, 13, 51161], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1894, "seek": 685462, "start": 6870.74, "end": 6872.98, "text": " OK, and lastly, before we wrap up,", "tokens": [51171, 2264, 11, 293, 16386, 11, 949, 321, 7019, 493, 11, 51283], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1895, "seek": 685462, "start": 6873.18, "end": 6876.58, "text": " I wanted to show you how you would sample from this neural net model.", "tokens": [51293, 286, 1415, 281, 855, 291, 577, 291, 576, 6889, 490, 341, 18161, 2533, 2316, 13, 51463], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1896, "seek": 685462, "start": 6876.78, "end": 6883.34, "text": " And I copy pasted the sampling code from before, where remember that we sampled five", "tokens": [51473, 400, 286, 5055, 1791, 292, 264, 21179, 3089, 490, 949, 11, 689, 1604, 300, 321, 3247, 15551, 1732, 51801], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1897, "seek": 685462, "start": 6883.54, "end": 6884.62, "text": " times.", "tokens": [51811, 1413, 13, 51865], "temperature": 0.0, "avg_logprob": -0.1083748131467585, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.00021050154464319348}, {"id": 1898, "seek": 688462, "start": 6884.82, "end": 6886.099999999999, "text": " And all we did is we start at zero.", "tokens": [50375, 400, 439, 321, 630, 307, 321, 722, 412, 4018, 13, 50439], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1899, "seek": 688462, "start": 6886.3, "end": 6892.22, "text": " We grabbed the current ix row of p and that was our probability row", "tokens": [50449, 492, 18607, 264, 2190, 741, 87, 5386, 295, 280, 293, 300, 390, 527, 8482, 5386, 50745], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1900, "seek": 688462, "start": 6892.42, "end": 6898.7, "text": " from which we sampled the next index and just accumulated that and break when zero.", "tokens": [50755, 490, 597, 321, 3247, 15551, 264, 958, 8186, 293, 445, 31346, 300, 293, 1821, 562, 4018, 13, 51069], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1901, "seek": 688462, "start": 6898.9, "end": 6903.7, "text": " And running this gave us these results.", "tokens": [51079, 400, 2614, 341, 2729, 505, 613, 3542, 13, 51319], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1902, "seek": 688462, "start": 6903.9, "end": 6907.38, "text": " I still have the p in memory, so this is fine.", "tokens": [51329, 286, 920, 362, 264, 280, 294, 4675, 11, 370, 341, 307, 2489, 13, 51503], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1903, "seek": 688462, "start": 6907.58, "end": 6911.78, "text": " Now, this p doesn't come from the row of p.", "tokens": [51513, 823, 11, 341, 280, 1177, 380, 808, 490, 264, 5386, 295, 280, 13, 51723], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1904, "seek": 688462, "start": 6911.98, "end": 6914.54, "text": " Instead, it comes from this neural net.", "tokens": [51733, 7156, 11, 309, 1487, 490, 341, 18161, 2533, 13, 51861], "temperature": 0.0, "avg_logprob": -0.18172874450683593, "compression_ratio": 1.5911111111111111, "no_speech_prob": 0.0009540053433738649}, {"id": 1905, "seek": 691462, "start": 6914.82, "end": 6922.3, "text": " First, we take ix and we encode it into a one hot row of xank.", "tokens": [50375, 2386, 11, 321, 747, 741, 87, 293, 321, 2058, 1429, 309, 666, 257, 472, 2368, 5386, 295, 2031, 657, 13, 50749], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1906, "seek": 691462, "start": 6922.5, "end": 6925.0199999999995, "text": " This xank multiplies our w,", "tokens": [50759, 639, 2031, 657, 12788, 530, 527, 261, 11, 50885], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1907, "seek": 691462, "start": 6925.22, "end": 6928.98, "text": " which really just plucks out the row of w corresponding to ix.", "tokens": [50895, 597, 534, 445, 499, 15493, 484, 264, 5386, 295, 261, 11760, 281, 741, 87, 13, 51083], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1908, "seek": 691462, "start": 6929.18, "end": 6930.26, "text": " Really, that's what's happening.", "tokens": [51093, 4083, 11, 300, 311, 437, 311, 2737, 13, 51147], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1909, "seek": 691462, "start": 6930.46, "end": 6932.099999999999, "text": " And that gets our logits.", "tokens": [51157, 400, 300, 2170, 527, 3565, 1208, 13, 51239], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1910, "seek": 691462, "start": 6932.3, "end": 6934.62, "text": " And then we normalize those logits,", "tokens": [51249, 400, 550, 321, 2710, 1125, 729, 3565, 1208, 11, 51365], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1911, "seek": 691462, "start": 6934.82, "end": 6938.82, "text": " exponentiate to get counts and then normalize to get the distribution.", "tokens": [51375, 37871, 13024, 281, 483, 14893, 293, 550, 2710, 1125, 281, 483, 264, 7316, 13, 51575], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1912, "seek": 691462, "start": 6939.0199999999995, "end": 6941.18, "text": " And then we can sample from the distribution.", "tokens": [51585, 400, 550, 321, 393, 6889, 490, 264, 7316, 13, 51693], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1913, "seek": 691462, "start": 6941.38, "end": 6943.099999999999, "text": " So if I run this,", "tokens": [51703, 407, 498, 286, 1190, 341, 11, 51789], "temperature": 0.0, "avg_logprob": -0.15726965199346127, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0003899050934705883}, {"id": 1914, "seek": 694462, "start": 6944.74, "end": 6948.42, "text": " it's kind of anticlimactic or climatic, depending how you look at it.", "tokens": [50371, 309, 311, 733, 295, 49172, 4197, 19892, 420, 5644, 2399, 11, 5413, 577, 291, 574, 412, 309, 13, 50555], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1915, "seek": 694462, "start": 6948.62, "end": 6951.5, "text": " But we get the exact same result.", "tokens": [50565, 583, 321, 483, 264, 1900, 912, 1874, 13, 50709], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1916, "seek": 694462, "start": 6951.7, "end": 6954.46, "text": " And that's because this is the identical model.", "tokens": [50719, 400, 300, 311, 570, 341, 307, 264, 14800, 2316, 13, 50857], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1917, "seek": 694462, "start": 6954.66, "end": 6959.3, "text": " Not only does it achieve the same loss, but as I mentioned, these are identical", "tokens": [50867, 1726, 787, 775, 309, 4584, 264, 912, 4470, 11, 457, 382, 286, 2835, 11, 613, 366, 14800, 51099], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1918, "seek": 694462, "start": 6959.5, "end": 6963.82, "text": " models and this w is the log counts of what we've estimated before.", "tokens": [51109, 5245, 293, 341, 261, 307, 264, 3565, 14893, 295, 437, 321, 600, 14109, 949, 13, 51325], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1919, "seek": 694462, "start": 6964.0199999999995, "end": 6966.46, "text": " But we came to this answer in a very", "tokens": [51335, 583, 321, 1361, 281, 341, 1867, 294, 257, 588, 51457], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1920, "seek": 694462, "start": 6966.46, "end": 6969.0599999999995, "text": " different way and it's got a very different interpretation.", "tokens": [51457, 819, 636, 293, 309, 311, 658, 257, 588, 819, 14174, 13, 51587], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1921, "seek": 694462, "start": 6969.26, "end": 6972.62, "text": " But fundamentally, this is basically the same model and gives the same samples here.", "tokens": [51597, 583, 17879, 11, 341, 307, 1936, 264, 912, 2316, 293, 2709, 264, 912, 10938, 510, 13, 51765], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1922, "seek": 694462, "start": 6972.82, "end": 6974.54, "text": " And so", "tokens": [51775, 400, 370, 51861], "temperature": 0.0, "avg_logprob": -0.213775634765625, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.001799204503186047}, {"id": 1923, "seek": 697462, "start": 6974.74, "end": 6975.5, "text": " that's kind of cool.", "tokens": [50371, 300, 311, 733, 295, 1627, 13, 50409], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1924, "seek": 697462, "start": 6975.7, "end": 6977.82, "text": " OK, so we've actually covered a lot of ground.", "tokens": [50419, 2264, 11, 370, 321, 600, 767, 5343, 257, 688, 295, 2727, 13, 50525], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1925, "seek": 697462, "start": 6978.0199999999995, "end": 6981.78, "text": " We introduced the bigram character level language model.", "tokens": [50535, 492, 7268, 264, 955, 2356, 2517, 1496, 2856, 2316, 13, 50723], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1926, "seek": 697462, "start": 6981.98, "end": 6986.0199999999995, "text": " We saw how we can train the model, how we can sample from the model and how we can", "tokens": [50733, 492, 1866, 577, 321, 393, 3847, 264, 2316, 11, 577, 321, 393, 6889, 490, 264, 2316, 293, 577, 321, 393, 50935], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1927, "seek": 697462, "start": 6986.22, "end": 6990.0199999999995, "text": " evaluate the quality of the model using the negative log likelihood loss.", "tokens": [50945, 13059, 264, 3125, 295, 264, 2316, 1228, 264, 3671, 3565, 22119, 4470, 13, 51135], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1928, "seek": 697462, "start": 6990.22, "end": 6991.62, "text": " And then we actually trained the model", "tokens": [51145, 400, 550, 321, 767, 8895, 264, 2316, 51215], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1929, "seek": 697462, "start": 6991.82, "end": 6995.26, "text": " in two completely different ways that actually get the same result and the same", "tokens": [51225, 294, 732, 2584, 819, 2098, 300, 767, 483, 264, 912, 1874, 293, 264, 912, 51397], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1930, "seek": 697462, "start": 6995.46, "end": 7000.3, "text": " model. In the first way, we just counted up the frequency of all the bigrams and", "tokens": [51407, 2316, 13, 682, 264, 700, 636, 11, 321, 445, 20150, 493, 264, 7893, 295, 439, 264, 955, 2356, 82, 293, 51649], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1931, "seek": 697462, "start": 7000.5, "end": 7004.54, "text": " normalized. In the second way, we used the", "tokens": [51659, 48704, 13, 682, 264, 1150, 636, 11, 321, 1143, 264, 51861], "temperature": 0.0, "avg_logprob": -0.11775859803643846, "compression_ratio": 1.8515901060070672, "no_speech_prob": 0.0008238832233473659}, {"id": 1932, "seek": 700462, "start": 7004.74, "end": 7010.7, "text": " negative log likelihood loss as a guide to optimizing the counts matrix", "tokens": [50371, 3671, 3565, 22119, 4470, 382, 257, 5934, 281, 40425, 264, 14893, 8141, 50669], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1933, "seek": 700462, "start": 7010.9, "end": 7015.66, "text": " or the counts array so that the loss is minimized in a gradient based framework.", "tokens": [50679, 420, 264, 14893, 10225, 370, 300, 264, 4470, 307, 4464, 1602, 294, 257, 16235, 2361, 8388, 13, 50917], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1934, "seek": 700462, "start": 7015.86, "end": 7018.22, "text": " And we saw that both of them give the same result.", "tokens": [50927, 400, 321, 1866, 300, 1293, 295, 552, 976, 264, 912, 1874, 13, 51045], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1935, "seek": 700462, "start": 7018.42, "end": 7020.0599999999995, "text": " And", "tokens": [51055, 400, 51137], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1936, "seek": 700462, "start": 7020.46, "end": 7021.3, "text": " that's it.", "tokens": [51157, 300, 311, 309, 13, 51199], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1937, "seek": 700462, "start": 7021.5, "end": 7024.74, "text": " Now, the second one of these, the gradient based framework is much more flexible.", "tokens": [51209, 823, 11, 264, 1150, 472, 295, 613, 11, 264, 16235, 2361, 8388, 307, 709, 544, 11358, 13, 51371], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1938, "seek": 700462, "start": 7024.94, "end": 7027.58, "text": " And right now, our neural network is super simple.", "tokens": [51381, 400, 558, 586, 11, 527, 18161, 3209, 307, 1687, 2199, 13, 51513], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1939, "seek": 700462, "start": 7027.78, "end": 7029.98, "text": " We're taking a single previous character", "tokens": [51523, 492, 434, 1940, 257, 2167, 3894, 2517, 51633], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1940, "seek": 700462, "start": 7030.18, "end": 7033.74, "text": " and we're taking it through a single linear layer to calculate the logits.", "tokens": [51643, 293, 321, 434, 1940, 309, 807, 257, 2167, 8213, 4583, 281, 8873, 264, 3565, 1208, 13, 51821], "temperature": 0.0, "avg_logprob": -0.11891184912787543, "compression_ratio": 1.768939393939394, "no_speech_prob": 0.0001339416776318103}, {"id": 1941, "seek": 703374, "start": 7033.86, "end": 7035.66, "text": " This is about to complexify.", "tokens": [50371, 639, 307, 466, 281, 3997, 2505, 13, 50461], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1942, "seek": 703374, "start": 7035.86, "end": 7039.26, "text": " So in the follow up videos, we're going to be taking more and more of these", "tokens": [50471, 407, 294, 264, 1524, 493, 2145, 11, 321, 434, 516, 281, 312, 1940, 544, 293, 544, 295, 613, 50641], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1943, "seek": 703374, "start": 7039.46, "end": 7042.78, "text": " characters and we're going to be feeding them into a neural net.", "tokens": [50651, 4342, 293, 321, 434, 516, 281, 312, 12919, 552, 666, 257, 18161, 2533, 13, 50817], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1944, "seek": 703374, "start": 7042.98, "end": 7045.219999999999, "text": " But this neural net will still output the exact same thing.", "tokens": [50827, 583, 341, 18161, 2533, 486, 920, 5598, 264, 1900, 912, 551, 13, 50939], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1945, "seek": 703374, "start": 7045.42, "end": 7047.74, "text": " The neural net will output logits.", "tokens": [50949, 440, 18161, 2533, 486, 5598, 3565, 1208, 13, 51065], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1946, "seek": 703374, "start": 7047.94, "end": 7050.62, "text": " And these logits will still be normalized in the exact same way.", "tokens": [51075, 400, 613, 3565, 1208, 486, 920, 312, 48704, 294, 264, 1900, 912, 636, 13, 51209], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1947, "seek": 703374, "start": 7050.62, "end": 7052.179999999999, "text": " And all the loss and everything else", "tokens": [51209, 400, 439, 264, 4470, 293, 1203, 1646, 51287], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1948, "seek": 703374, "start": 7052.179999999999, "end": 7055.219999999999, "text": " in the gradient based framework, everything stays identical.", "tokens": [51287, 294, 264, 16235, 2361, 8388, 11, 1203, 10834, 14800, 13, 51439], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1949, "seek": 703374, "start": 7055.42, "end": 7060.26, "text": " It's just that this neural net will now complexify all the way to transformers.", "tokens": [51449, 467, 311, 445, 300, 341, 18161, 2533, 486, 586, 3997, 2505, 439, 264, 636, 281, 4088, 433, 13, 51691], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1950, "seek": 703374, "start": 7060.46, "end": 7063.26, "text": " So that's going to be pretty awesome and I'm looking forward to it.", "tokens": [51701, 407, 300, 311, 516, 281, 312, 1238, 3476, 293, 286, 478, 1237, 2128, 281, 309, 13, 51841], "temperature": 0.0, "avg_logprob": -0.12495439346522501, "compression_ratio": 1.9425675675675675, "no_speech_prob": 0.0002563995076343417}, {"id": 1951, "seek": 706326, "start": 7063.26, "end": 7064.3, "text": " So for now, bye.", "tokens": [50365, 407, 337, 586, 11, 6543, 13, 50417], "temperature": 0.0, "avg_logprob": -0.516496499379476, "compression_ratio": 0.6666666666666666, "no_speech_prob": 0.003409399650990963}], "language": "en"}